WEBVTT
Kind: captions
Language: en

00:00:00.160 --> 00:00:02.070 align:start position:0%
 
all<00:00:00.399><c> right</c><00:00:00.640><c> what's</c><00:00:00.880><c> going</c><00:00:01.040><c> on</c><00:00:01.280><c> everybody</c><00:00:01.839><c> it's</c>

00:00:02.070 --> 00:00:02.080 align:start position:0%
all right what's going on everybody it's
 

00:00:02.080 --> 00:00:03.669 align:start position:0%
all right what's going on everybody it's
you<00:00:02.159><c> bro</c><00:00:02.399><c> hope</c><00:00:02.639><c> you're</c><00:00:02.720><c> doing</c><00:00:03.040><c> well</c><00:00:03.360><c> and</c><00:00:03.600><c> in</c>

00:00:03.669 --> 00:00:03.679 align:start position:0%
you bro hope you're doing well and in
 

00:00:03.679 --> 00:00:05.349 align:start position:0%
you bro hope you're doing well and in
this<00:00:03.840><c> video</c><00:00:04.160><c> i'm</c><00:00:04.319><c> going</c><00:00:04.480><c> to</c><00:00:04.640><c> explain</c><00:00:05.040><c> how</c><00:00:05.200><c> we</c>

00:00:05.349 --> 00:00:05.359 align:start position:0%
this video i'm going to explain how we
 

00:00:05.359 --> 00:00:08.629 align:start position:0%
this video i'm going to explain how we
can<00:00:05.440><c> get</c><00:00:05.680><c> started</c><00:00:06.160><c> writing</c><00:00:06.480><c> code</c><00:00:06.879><c> in</c><00:00:07.359><c> c</c><00:00:07.839><c> so</c><00:00:08.400><c> sit</c>

00:00:08.629 --> 00:00:08.639 align:start position:0%
can get started writing code in c so sit
 

00:00:08.639 --> 00:00:12.789 align:start position:0%
can get started writing code in c so sit
back<00:00:09.040><c> relax</c><00:00:09.679><c> and</c><00:00:09.920><c> enjoy</c><00:00:10.160><c> the</c><00:00:10.320><c> show</c>

00:00:12.789 --> 00:00:12.799 align:start position:0%
 
 

00:00:12.799 --> 00:00:15.350 align:start position:0%
 
if<00:00:13.040><c> you</c><00:00:13.120><c> wouldn't</c><00:00:13.440><c> mind</c><00:00:13.840><c> please</c><00:00:14.320><c> like</c><00:00:14.799><c> comment</c>

00:00:15.350 --> 00:00:15.360 align:start position:0%
if you wouldn't mind please like comment
 

00:00:15.360 --> 00:00:18.070 align:start position:0%
if you wouldn't mind please like comment
and<00:00:15.519><c> subscribe</c><00:00:16.320><c> one</c><00:00:16.560><c> like</c><00:00:16.960><c> equals</c><00:00:17.440><c> one</c><00:00:17.680><c> prayer</c>

00:00:18.070 --> 00:00:18.080 align:start position:0%
and subscribe one like equals one prayer
 

00:00:18.080 --> 00:00:20.310 align:start position:0%
and subscribe one like equals one prayer
for<00:00:18.240><c> the</c><00:00:18.320><c> youtube</c><00:00:18.720><c> algorithm</c>

00:00:20.310 --> 00:00:20.320 align:start position:0%
for the youtube algorithm
 

00:00:20.320 --> 00:00:22.310 align:start position:0%
for the youtube algorithm
i'm<00:00:20.560><c> going</c><00:00:20.720><c> to</c><00:00:20.800><c> tell</c><00:00:20.960><c> you</c><00:00:21.199><c> why</c><00:00:21.680><c> you</c><00:00:21.920><c> need</c><00:00:22.160><c> to</c>

00:00:22.310 --> 00:00:22.320 align:start position:0%
i'm going to tell you why you need to
 

00:00:22.320 --> 00:00:25.509 align:start position:0%
i'm going to tell you why you need to
learn<00:00:22.640><c> c</c><00:00:23.199><c> c</c><00:00:23.600><c> is</c><00:00:23.840><c> a</c><00:00:24.240><c> middle</c><00:00:24.640><c> level</c><00:00:24.960><c> language</c>

00:00:25.509 --> 00:00:25.519 align:start position:0%
learn c c is a middle level language
 

00:00:25.519 --> 00:00:28.470 align:start position:0%
learn c c is a middle level language
that<00:00:25.760><c> originated</c><00:00:26.560><c> in</c><00:00:26.640><c> the</c><00:00:26.800><c> 1970s</c><00:00:28.000><c> and</c><00:00:28.160><c> it</c><00:00:28.320><c> is</c>

00:00:28.470 --> 00:00:28.480 align:start position:0%
that originated in the 1970s and it is
 

00:00:28.480 --> 00:00:30.870 align:start position:0%
that originated in the 1970s and it is
one<00:00:28.640><c> of</c><00:00:28.720><c> the</c><00:00:28.880><c> most</c><00:00:29.359><c> widely</c><00:00:29.840><c> used</c><00:00:30.240><c> programming</c>

00:00:30.870 --> 00:00:30.880 align:start position:0%
one of the most widely used programming
 

00:00:30.880 --> 00:00:33.670 align:start position:0%
one of the most widely used programming
languages<00:00:31.599><c> to</c><00:00:31.920><c> date</c><00:00:32.320><c> on</c><00:00:32.480><c> a</c><00:00:32.640><c> spectrum</c><00:00:33.280><c> of</c>

00:00:33.670 --> 00:00:33.680 align:start position:0%
languages to date on a spectrum of
 

00:00:33.680 --> 00:00:35.750 align:start position:0%
languages to date on a spectrum of
high-level<00:00:34.239><c> languages</c><00:00:34.960><c> to</c><00:00:35.280><c> low-level</c>

00:00:35.750 --> 00:00:35.760 align:start position:0%
high-level languages to low-level
 

00:00:35.760 --> 00:00:39.270 align:start position:0%
high-level languages to low-level
languages<00:00:36.640><c> c</c><00:00:37.040><c> is</c><00:00:37.280><c> a</c><00:00:37.680><c> middle</c><00:00:38.160><c> level</c><00:00:38.559><c> language</c>

00:00:39.270 --> 00:00:39.280 align:start position:0%
languages c is a middle level language
 

00:00:39.280 --> 00:00:41.590 align:start position:0%
languages c is a middle level language
low-level<00:00:39.840><c> languages</c><00:00:40.559><c> are</c><00:00:40.719><c> efficient</c><00:00:41.440><c> they</c>

00:00:41.590 --> 00:00:41.600 align:start position:0%
low-level languages are efficient they
 

00:00:41.600 --> 00:00:44.150 align:start position:0%
low-level languages are efficient they
work<00:00:41.840><c> closely</c><00:00:42.320><c> with</c><00:00:42.559><c> machine</c><00:00:43.040><c> architecture</c>

00:00:44.150 --> 00:00:44.160 align:start position:0%
work closely with machine architecture
 

00:00:44.160 --> 00:00:46.150 align:start position:0%
work closely with machine architecture
they<00:00:44.320><c> consume</c><00:00:44.719><c> less</c><00:00:45.039><c> memory</c><00:00:45.680><c> and</c><00:00:45.840><c> they're</c>

00:00:46.150 --> 00:00:46.160 align:start position:0%
they consume less memory and they're
 

00:00:46.160 --> 00:00:48.790 align:start position:0%
they consume less memory and they're
fast<00:00:46.559><c> as</c><00:00:47.360><c> however</c><00:00:48.000><c> they're</c><00:00:48.320><c> difficult</c>

00:00:48.790 --> 00:00:48.800 align:start position:0%
fast as however they're difficult
 

00:00:48.800 --> 00:00:51.029 align:start position:0%
fast as however they're difficult
to<00:00:48.960><c> understand</c><00:00:49.760><c> and</c><00:00:49.920><c> it</c><00:00:50.000><c> takes</c><00:00:50.320><c> more</c><00:00:50.640><c> time</c><00:00:50.879><c> to</c>

00:00:51.029 --> 00:00:51.039 align:start position:0%
to understand and it takes more time to
 

00:00:51.039 --> 00:00:53.750 align:start position:0%
to understand and it takes more time to
write<00:00:51.280><c> code</c><00:00:51.760><c> that's</c><00:00:52.079><c> in</c><00:00:52.239><c> a</c><00:00:52.480><c> low</c><00:00:52.719><c> level</c><00:00:53.120><c> format</c>

00:00:53.750 --> 00:00:53.760 align:start position:0%
write code that's in a low level format
 

00:00:53.760 --> 00:00:56.069 align:start position:0%
write code that's in a low level format
high-level<00:00:54.239><c> languages</c><00:00:54.960><c> are</c><00:00:55.280><c> easier</c><00:00:55.600><c> to</c><00:00:55.760><c> work</c>

00:00:56.069 --> 00:00:56.079 align:start position:0%
high-level languages are easier to work
 

00:00:56.079 --> 00:00:58.310 align:start position:0%
high-level languages are easier to work
with<00:00:56.480><c> easier</c><00:00:56.879><c> to</c><00:00:57.039><c> understand</c><00:00:57.760><c> they</c><00:00:57.920><c> allow</c><00:00:58.160><c> for</c>

00:00:58.310 --> 00:00:58.320 align:start position:0%
with easier to understand they allow for
 

00:00:58.320 --> 00:01:00.950 align:start position:0%
with easier to understand they allow for
more<00:00:58.559><c> abstraction</c><00:00:59.520><c> but</c><00:00:59.840><c> they're</c><00:01:00.079><c> slower</c><00:01:00.800><c> they</c>

00:01:00.950 --> 00:01:00.960 align:start position:0%
more abstraction but they're slower they
 

00:01:00.960 --> 00:01:03.189 align:start position:0%
more abstraction but they're slower they
use<00:01:01.199><c> more</c><00:01:01.359><c> memory</c><00:01:01.920><c> and</c><00:01:02.239><c> they're</c><00:01:02.399><c> abstract</c><00:01:02.960><c> so</c>

00:01:03.189 --> 00:01:03.199 align:start position:0%
use more memory and they're abstract so
 

00:01:03.199 --> 00:01:05.429 align:start position:0%
use more memory and they're abstract so
it's<00:01:03.359><c> difficult</c><00:01:03.840><c> to</c><00:01:04.000><c> work</c><00:01:04.400><c> with</c><00:01:04.799><c> low</c><00:01:05.119><c> level</c>

00:01:05.429 --> 00:01:05.439 align:start position:0%
it's difficult to work with low level
 

00:01:05.439 --> 00:01:08.469 align:start position:0%
it's difficult to work with low level
hardware<00:01:06.080><c> and</c><00:01:06.240><c> systems</c><00:01:07.040><c> a</c><00:01:07.360><c> major</c><00:01:07.760><c> advantage</c>

00:01:08.469 --> 00:01:08.479 align:start position:0%
hardware and systems a major advantage
 

00:01:08.479 --> 00:01:10.630 align:start position:0%
hardware and systems a major advantage
of<00:01:08.720><c> middle</c><00:01:09.040><c> level</c><00:01:09.360><c> languages</c><00:01:10.159><c> is</c><00:01:10.320><c> that</c><00:01:10.479><c> they</c>

00:01:10.630 --> 00:01:10.640 align:start position:0%
of middle level languages is that they
 

00:01:10.640 --> 00:01:13.270 align:start position:0%
of middle level languages is that they
can<00:01:10.880><c> act</c><00:01:11.119><c> as</c><00:01:11.439><c> a</c><00:01:11.600><c> bridge</c><00:01:12.080><c> between</c><00:01:12.720><c> high-level</c>

00:01:13.270 --> 00:01:13.280 align:start position:0%
can act as a bridge between high-level
 

00:01:13.280 --> 00:01:16.390 align:start position:0%
can act as a bridge between high-level
software<00:01:13.760><c> and</c><00:01:13.920><c> applications</c><00:01:15.040><c> as</c><00:01:15.360><c> well</c><00:01:15.920><c> as</c>

00:01:16.390 --> 00:01:16.400 align:start position:0%
software and applications as well as
 

00:01:16.400 --> 00:01:18.950 align:start position:0%
software and applications as well as
low-level<00:01:16.960><c> hardware</c><00:01:17.600><c> and</c><00:01:17.680><c> embedded</c><00:01:18.159><c> systems</c>

00:01:18.950 --> 00:01:18.960 align:start position:0%
low-level hardware and embedded systems
 

00:01:18.960 --> 00:01:21.670 align:start position:0%
low-level hardware and embedded systems
most<00:01:19.280><c> compilers</c><00:01:20.240><c> kernels</c><00:01:20.880><c> and</c><00:01:21.200><c> operating</c>

00:01:21.670 --> 00:01:21.680 align:start position:0%
most compilers kernels and operating
 

00:01:21.680 --> 00:01:23.990 align:start position:0%
most compilers kernels and operating
systems<00:01:22.320><c> are</c><00:01:22.560><c> written</c><00:01:23.040><c> in</c><00:01:23.280><c> c</c>

00:01:23.990 --> 00:01:24.000 align:start position:0%
systems are written in c
 

00:01:24.000 --> 00:01:26.630 align:start position:0%
systems are written in c
nearly<00:01:24.640><c> all</c><00:01:25.040><c> programming</c><00:01:25.680><c> languages</c><00:01:26.320><c> are</c>

00:01:26.630 --> 00:01:26.640 align:start position:0%
nearly all programming languages are
 

00:01:26.640 --> 00:01:29.910 align:start position:0%
nearly all programming languages are
influenced<00:01:27.280><c> by</c><00:01:27.680><c> c</c><00:01:28.000><c> in</c><00:01:28.240><c> some</c><00:01:28.560><c> way</c><00:01:29.280><c> c</c><00:01:29.600><c> is</c><00:01:29.680><c> what</c>

00:01:29.910 --> 00:01:29.920 align:start position:0%
influenced by c in some way c is what
 

00:01:29.920 --> 00:01:31.749 align:start position:0%
influenced by c in some way c is what
provided<00:01:30.560><c> many</c><00:01:30.799><c> of</c><00:01:30.960><c> the</c><00:01:31.119><c> original</c>

00:01:31.749 --> 00:01:31.759 align:start position:0%
provided many of the original
 

00:01:31.759 --> 00:01:34.950 align:start position:0%
provided many of the original
programming<00:01:32.400><c> concepts</c><00:01:33.119><c> such</c><00:01:33.439><c> as</c><00:01:34.159><c> variables</c>

00:01:34.950 --> 00:01:34.960 align:start position:0%
programming concepts such as variables
 

00:01:34.960 --> 00:01:38.789 align:start position:0%
programming concepts such as variables
data<00:01:35.360><c> types</c><00:01:36.000><c> loops</c><00:01:36.479><c> arrays</c><00:01:37.040><c> functions</c><00:01:37.759><c> etc</c><00:01:38.640><c> in</c>

00:01:38.789 --> 00:01:38.799 align:start position:0%
data types loops arrays functions etc in
 

00:01:38.799 --> 00:01:41.590 align:start position:0%
data types loops arrays functions etc in
fact<00:01:39.200><c> the</c><00:01:39.439><c> python</c><00:01:40.000><c> language</c><00:01:40.640><c> is</c><00:01:40.960><c> written</c><00:01:41.360><c> with</c>

00:01:41.590 --> 00:01:41.600 align:start position:0%
fact the python language is written with
 

00:01:41.600 --> 00:01:44.630 align:start position:0%
fact the python language is written with
c<00:01:42.079><c> the</c><00:01:42.159><c> default</c><00:01:42.720><c> implementation</c><00:01:43.680><c> is</c><00:01:43.840><c> known</c><00:01:44.159><c> as</c>

00:01:44.630 --> 00:01:44.640 align:start position:0%
c the default implementation is known as
 

00:01:44.640 --> 00:01:47.109 align:start position:0%
c the default implementation is known as
c<00:01:45.040><c> python</c><00:01:45.840><c> if</c><00:01:46.000><c> you're</c><00:01:46.240><c> already</c><00:01:46.479><c> familiar</c><00:01:46.960><c> with</c>

00:01:47.109 --> 00:01:47.119 align:start position:0%
c python if you're already familiar with
 

00:01:47.119 --> 00:01:49.350 align:start position:0%
c python if you're already familiar with
the<00:01:47.280><c> programming</c><00:01:47.840><c> language</c><00:01:48.479><c> learning</c><00:01:48.960><c> c</c><00:01:49.200><c> will</c>

00:01:49.350 --> 00:01:49.360 align:start position:0%
the programming language learning c will
 

00:01:49.360 --> 00:01:51.429 align:start position:0%
the programming language learning c will
give<00:01:49.520><c> you</c><00:01:49.680><c> an</c><00:01:49.840><c> even</c><00:01:50.159><c> deeper</c><00:01:50.560><c> understanding</c><00:01:51.360><c> of</c>

00:01:51.429 --> 00:01:51.439 align:start position:0%
give you an even deeper understanding of
 

00:01:51.439 --> 00:01:54.550 align:start position:0%
give you an even deeper understanding of
how<00:01:51.680><c> those</c><00:01:51.920><c> operate</c><00:01:52.720><c> c</c><00:01:53.200><c> is</c><00:01:53.759><c> literally</c>

00:01:54.550 --> 00:01:54.560 align:start position:0%
how those operate c is literally
 

00:01:54.560 --> 00:01:57.030 align:start position:0%
how those operate c is literally
everywhere<00:01:55.360><c> from</c><00:01:55.680><c> databases</c><00:01:56.719><c> to</c>

00:01:57.030 --> 00:01:57.040 align:start position:0%
everywhere from databases to
 

00:01:57.040 --> 00:01:59.670 align:start position:0%
everywhere from databases to
self-driving<00:01:57.759><c> cars</c><00:01:58.399><c> operating</c><00:01:58.960><c> systems</c><00:01:59.439><c> to</c>

00:01:59.670 --> 00:01:59.680 align:start position:0%
self-driving cars operating systems to
 

00:01:59.680 --> 00:02:01.990 align:start position:0%
self-driving cars operating systems to
embedded<00:02:00.079><c> systems</c><00:02:00.799><c> it's</c><00:02:00.960><c> been</c><00:02:01.200><c> around</c><00:02:01.520><c> for</c><00:02:01.759><c> so</c>

00:02:01.990 --> 00:02:02.000 align:start position:0%
embedded systems it's been around for so
 

00:02:02.000 --> 00:02:04.709 align:start position:0%
embedded systems it's been around for so
long<00:02:02.399><c> and</c><00:02:02.560><c> used</c><00:02:02.960><c> for</c><00:02:03.280><c> so</c><00:02:03.520><c> many</c><00:02:03.759><c> purposes</c><00:02:04.560><c> here</c>

00:02:04.709 --> 00:02:04.719 align:start position:0%
long and used for so many purposes here
 

00:02:04.719 --> 00:02:06.310 align:start position:0%
long and used for so many purposes here
are<00:02:04.799><c> some</c><00:02:05.040><c> important</c><00:02:05.360><c> notes</c><00:02:05.680><c> before</c><00:02:06.000><c> we</c><00:02:06.079><c> get</c>

00:02:06.310 --> 00:02:06.320 align:start position:0%
are some important notes before we get
 

00:02:06.320 --> 00:02:09.109 align:start position:0%
are some important notes before we get
started<00:02:07.040><c> c</c><00:02:07.439><c> is</c><00:02:07.600><c> not</c><00:02:07.840><c> an</c><00:02:08.119><c> object-oriented</c>

00:02:09.109 --> 00:02:09.119 align:start position:0%
started c is not an object-oriented
 

00:02:09.119 --> 00:02:12.470 align:start position:0%
started c is not an object-oriented
language<00:02:09.759><c> it's</c><00:02:10.000><c> procedural</c><00:02:10.959><c> not</c><00:02:11.200><c> abstract</c><00:02:12.160><c> c</c>

00:02:12.470 --> 00:02:12.480 align:start position:0%
language it's procedural not abstract c
 

00:02:12.480 --> 00:02:14.869 align:start position:0%
language it's procedural not abstract c
plus<00:02:12.800><c> plus</c><00:02:13.280><c> is</c><00:02:13.520><c> an</c><00:02:13.800><c> object-oriented</c>

00:02:14.869 --> 00:02:14.879 align:start position:0%
plus plus is an object-oriented
 

00:02:14.879 --> 00:02:18.150 align:start position:0%
plus plus is an object-oriented
extension<00:02:15.680><c> of</c><00:02:15.840><c> c</c><00:02:16.560><c> if</c><00:02:16.720><c> you</c><00:02:16.879><c> know</c><00:02:17.200><c> c</c><00:02:17.680><c> you</c><00:02:17.920><c> already</c>

00:02:18.150 --> 00:02:18.160 align:start position:0%
extension of c if you know c you already
 

00:02:18.160 --> 00:02:21.270 align:start position:0%
extension of c if you know c you already
know<00:02:18.400><c> some</c><00:02:18.640><c> c</c><00:02:18.959><c> plus</c><00:02:19.200><c> plus</c><00:02:19.760><c> however</c><00:02:20.319><c> c</c><00:02:20.800><c> is</c><00:02:21.040><c> a</c>

00:02:21.270 --> 00:02:21.280 align:start position:0%
know some c plus plus however c is a
 

00:02:21.280 --> 00:02:23.670 align:start position:0%
know some c plus plus however c is a
difficult<00:02:21.840><c> language</c><00:02:22.319><c> for</c><00:02:22.560><c> beginners</c><00:02:23.440><c> don't</c>

00:02:23.670 --> 00:02:23.680 align:start position:0%
difficult language for beginners don't
 

00:02:23.680 --> 00:02:25.430 align:start position:0%
difficult language for beginners don't
get<00:02:23.840><c> discouraged</c><00:02:24.480><c> you</c><00:02:24.640><c> can</c><00:02:24.800><c> do</c><00:02:24.959><c> it</c><00:02:25.120><c> so</c><00:02:25.280><c> what</c>

00:02:25.430 --> 00:02:25.440 align:start position:0%
get discouraged you can do it so what
 

00:02:25.440 --> 00:02:28.070 align:start position:0%
get discouraged you can do it so what
you'll<00:02:25.680><c> need</c><00:02:26.080><c> you'll</c><00:02:26.319><c> need</c><00:02:26.640><c> an</c><00:02:26.800><c> ide</c><00:02:27.760><c> an</c>

00:02:28.070 --> 00:02:28.080 align:start position:0%
you'll need you'll need an ide an
 

00:02:28.080 --> 00:02:30.710 align:start position:0%
you'll need you'll need an ide an
integrated<00:02:28.959><c> development</c><00:02:29.680><c> environment</c><00:02:30.480><c> which</c>

00:02:30.710 --> 00:02:30.720 align:start position:0%
integrated development environment which
 

00:02:30.720 --> 00:02:33.670 align:start position:0%
integrated development environment which
is<00:02:30.879><c> basically</c><00:02:31.519><c> a</c><00:02:31.840><c> fancy</c><00:02:32.480><c> text</c><00:02:32.800><c> editor</c><00:02:33.280><c> to</c><00:02:33.440><c> help</c>

00:02:33.670 --> 00:02:33.680 align:start position:0%
is basically a fancy text editor to help
 

00:02:33.680 --> 00:02:37.350 align:start position:0%
is basically a fancy text editor to help
us<00:02:33.920><c> write</c><00:02:34.160><c> c</c><00:02:34.560><c> code</c><00:02:35.040><c> as</c><00:02:35.280><c> well</c><00:02:35.599><c> as</c><00:02:35.920><c> a</c><00:02:36.400><c> gnu</c>

00:02:37.350 --> 00:02:37.360 align:start position:0%
us write c code as well as a gnu
 

00:02:37.360 --> 00:02:39.910 align:start position:0%
us write c code as well as a gnu
compiler<00:02:38.000><c> collection</c><00:02:38.800><c> which</c><00:02:39.040><c> we</c><00:02:39.280><c> abbreviate</c>

00:02:39.910 --> 00:02:39.920 align:start position:0%
compiler collection which we abbreviate
 

00:02:39.920 --> 00:02:44.150 align:start position:0%
compiler collection which we abbreviate
to<00:02:40.319><c> simply</c><00:02:41.040><c> gcc</c><00:02:42.000><c> this</c><00:02:42.239><c> compiles</c><00:02:43.120><c> or</c><00:02:43.360><c> otherwise</c>

00:02:44.150 --> 00:02:44.160 align:start position:0%
to simply gcc this compiles or otherwise
 

00:02:44.160 --> 00:02:47.030 align:start position:0%
to simply gcc this compiles or otherwise
converts<00:02:44.800><c> c</c><00:02:45.120><c> code</c><00:02:45.519><c> to</c><00:02:45.760><c> machine</c><00:02:46.160><c> code</c><00:02:46.560><c> you</c><00:02:46.800><c> know</c>

00:02:47.030 --> 00:02:47.040 align:start position:0%
converts c code to machine code you know
 

00:02:47.040 --> 00:02:49.030 align:start position:0%
converts c code to machine code you know
all<00:02:47.200><c> those</c><00:02:47.519><c> ones</c><00:02:47.760><c> and</c><00:02:47.920><c> zeros</c><00:02:48.400><c> that</c><00:02:48.560><c> a</c><00:02:48.640><c> machine</c>

00:02:49.030 --> 00:02:49.040 align:start position:0%
all those ones and zeros that a machine
 

00:02:49.040 --> 00:02:51.430 align:start position:0%
all those ones and zeros that a machine
can<00:02:49.200><c> read</c><00:02:49.599><c> let's</c><00:02:49.920><c> begin</c><00:02:50.239><c> by</c><00:02:50.480><c> downloading</c><00:02:51.200><c> an</c>

00:02:51.430 --> 00:02:51.440 align:start position:0%
can read let's begin by downloading an
 

00:02:51.440 --> 00:02:54.949 align:start position:0%
can read let's begin by downloading an
ide<00:02:52.319><c> i</c><00:02:52.400><c> recommend</c><00:02:53.120><c> vs</c><00:02:53.599><c> code</c><00:02:54.000><c> it's</c><00:02:54.319><c> flexible</c>

00:02:54.949 --> 00:02:54.959 align:start position:0%
ide i recommend vs code it's flexible
 

00:02:54.959 --> 00:02:56.869 align:start position:0%
ide i recommend vs code it's flexible
and<00:02:55.040><c> you</c><00:02:55.200><c> can</c><00:02:55.360><c> use</c><00:02:55.599><c> vs</c><00:02:56.000><c> code</c><00:02:56.239><c> for</c><00:02:56.400><c> more</c><00:02:56.640><c> than</c>

00:02:56.869 --> 00:02:56.879 align:start position:0%
and you can use vs code for more than
 

00:02:56.879 --> 00:02:57.830 align:start position:0%
and you can use vs code for more than
just<00:02:57.120><c> c</c>

00:02:57.830 --> 00:02:57.840 align:start position:0%
just c
 

00:02:57.840 --> 00:02:59.750 align:start position:0%
just c
all<00:02:58.080><c> right</c><00:02:58.400><c> what</c><00:02:58.560><c> you're</c><00:02:58.720><c> gonna</c><00:02:58.959><c> do</c><00:02:59.280><c> is</c><00:02:59.440><c> head</c>

00:02:59.750 --> 00:02:59.760 align:start position:0%
all right what you're gonna do is head
 

00:02:59.760 --> 00:03:02.790 align:start position:0%
all right what you're gonna do is head
to<00:03:00.080><c> code.visualstudio.com</c>

00:03:02.790 --> 00:03:02.800 align:start position:0%
to code.visualstudio.com
 

00:03:02.800 --> 00:03:04.710 align:start position:0%
to code.visualstudio.com
and<00:03:02.879><c> then</c><00:03:03.120><c> look</c><00:03:03.280><c> for</c><00:03:03.440><c> this</c><00:03:03.599><c> drop</c><00:03:03.840><c> down</c><00:03:04.080><c> menu</c><00:03:04.480><c> to</c>

00:03:04.710 --> 00:03:04.720 align:start position:0%
and then look for this drop down menu to
 

00:03:04.720 --> 00:03:06.630 align:start position:0%
and then look for this drop down menu to
install<00:03:05.200><c> for</c><00:03:05.360><c> your</c><00:03:05.599><c> operating</c><00:03:06.000><c> system</c><00:03:06.480><c> i'm</c>

00:03:06.630 --> 00:03:06.640 align:start position:0%
install for your operating system i'm
 

00:03:06.640 --> 00:03:08.390 align:start position:0%
install for your operating system i'm
running<00:03:06.959><c> windows</c><00:03:07.360><c> i'm</c><00:03:07.519><c> going</c><00:03:07.760><c> to</c><00:03:07.840><c> install</c><00:03:08.239><c> for</c>

00:03:08.390 --> 00:03:08.400 align:start position:0%
running windows i'm going to install for
 

00:03:08.400 --> 00:03:11.509 align:start position:0%
running windows i'm going to install for
windows<00:03:09.120><c> and</c><00:03:09.280><c> then</c><00:03:09.599><c> i</c><00:03:09.840><c> will</c><00:03:10.080><c> simply</c><00:03:10.640><c> just</c><00:03:11.120><c> open</c>

00:03:11.509 --> 00:03:11.519 align:start position:0%
windows and then i will simply just open
 

00:03:11.519 --> 00:03:12.710 align:start position:0%
windows and then i will simply just open
when<00:03:11.840><c> done</c>

00:03:12.710 --> 00:03:12.720 align:start position:0%
when done
 

00:03:12.720 --> 00:03:16.309 align:start position:0%
when done
okay<00:03:13.200><c> accept</c><00:03:13.599><c> the</c><00:03:13.840><c> license</c><00:03:14.239><c> agreement</c><00:03:15.200><c> next</c>

00:03:16.309 --> 00:03:16.319 align:start position:0%
okay accept the license agreement next
 

00:03:16.319 --> 00:03:18.710 align:start position:0%
okay accept the license agreement next
you<00:03:16.480><c> can</c><00:03:16.640><c> create</c><00:03:16.800><c> a</c><00:03:16.959><c> desktop</c><00:03:17.440><c> icon</c><00:03:17.920><c> and</c><00:03:18.159><c> add</c><00:03:18.400><c> to</c>

00:03:18.710 --> 00:03:18.720 align:start position:0%
you can create a desktop icon and add to
 

00:03:18.720 --> 00:03:20.790 align:start position:0%
you can create a desktop icon and add to
path<00:03:19.519><c> next</c>

00:03:20.790 --> 00:03:20.800 align:start position:0%
path next
 

00:03:20.800 --> 00:03:22.710 align:start position:0%
path next
then<00:03:21.120><c> install</c>

00:03:22.710 --> 00:03:22.720 align:start position:0%
then install
 

00:03:22.720 --> 00:03:24.309 align:start position:0%
then install
and<00:03:22.800><c> then</c><00:03:22.959><c> give</c><00:03:23.120><c> it</c><00:03:23.200><c> a</c><00:03:23.280><c> second</c>

00:03:24.309 --> 00:03:24.319 align:start position:0%
and then give it a second
 

00:03:24.319 --> 00:03:26.630 align:start position:0%
and then give it a second
or<00:03:24.480><c> a</c><00:03:24.560><c> couple</c><00:03:24.879><c> minutes</c>

00:03:26.630 --> 00:03:26.640 align:start position:0%
or a couple minutes
 

00:03:26.640 --> 00:03:28.390 align:start position:0%
or a couple minutes
then<00:03:26.879><c> you</c><00:03:26.959><c> can</c><00:03:27.120><c> launch</c><00:03:27.360><c> this</c><00:03:27.519><c> if</c><00:03:27.680><c> you</c><00:03:27.760><c> prefer</c><00:03:28.319><c> i</c>

00:03:28.390 --> 00:03:28.400 align:start position:0%
then you can launch this if you prefer i
 

00:03:28.400 --> 00:03:30.309 align:start position:0%
then you can launch this if you prefer i
think<00:03:28.640><c> i</c><00:03:28.720><c> will</c><00:03:29.280><c> okay</c><00:03:29.599><c> we</c><00:03:29.760><c> are</c><00:03:29.840><c> now</c><00:03:30.000><c> within</c>

00:03:30.309 --> 00:03:30.319 align:start position:0%
think i will okay we are now within
 

00:03:30.319 --> 00:03:32.470 align:start position:0%
think i will okay we are now within
visual<00:03:30.640><c> studio</c><00:03:31.040><c> head</c><00:03:31.200><c> to</c><00:03:31.360><c> the</c><00:03:31.440><c> left</c><00:03:31.680><c> hand</c><00:03:31.920><c> menu</c>

00:03:32.470 --> 00:03:32.480 align:start position:0%
visual studio head to the left hand menu
 

00:03:32.480 --> 00:03:34.630 align:start position:0%
visual studio head to the left hand menu
for<00:03:32.799><c> extensions</c><00:03:33.680><c> we're</c><00:03:33.920><c> going</c><00:03:34.080><c> to</c><00:03:34.239><c> install</c>

00:03:34.630 --> 00:03:34.640 align:start position:0%
for extensions we're going to install
 

00:03:34.640 --> 00:03:36.869 align:start position:0%
for extensions we're going to install
two<00:03:34.879><c> extensions</c><00:03:35.920><c> c</c>

00:03:36.869 --> 00:03:36.879 align:start position:0%
two extensions c
 

00:03:36.879 --> 00:03:39.589 align:start position:0%
two extensions c
c<00:03:37.200><c> plus</c><00:03:37.519><c> plus</c><00:03:38.319><c> that</c><00:03:38.480><c> contains</c><00:03:38.879><c> intellisense</c>

00:03:39.589 --> 00:03:39.599 align:start position:0%
c plus plus that contains intellisense
 

00:03:39.599 --> 00:03:41.270 align:start position:0%
c plus plus that contains intellisense
and<00:03:39.680><c> a</c><00:03:39.760><c> couple</c><00:03:40.000><c> other</c><00:03:40.159><c> useful</c><00:03:40.560><c> things</c><00:03:41.040><c> so</c>

00:03:41.270 --> 00:03:41.280 align:start position:0%
and a couple other useful things so
 

00:03:41.280 --> 00:03:42.869 align:start position:0%
and a couple other useful things so
install<00:03:41.760><c> that</c>

00:03:42.869 --> 00:03:42.879 align:start position:0%
install that
 

00:03:42.879 --> 00:03:45.190 align:start position:0%
install that
and<00:03:43.040><c> then</c><00:03:43.280><c> next</c><00:03:43.599><c> we</c><00:03:43.840><c> will</c><00:03:44.239><c> install</c><00:03:44.959><c> code</c>

00:03:45.190 --> 00:03:45.200 align:start position:0%
and then next we will install code
 

00:03:45.200 --> 00:03:47.910 align:start position:0%
and then next we will install code
runner<00:03:46.159><c> code</c><00:03:46.720><c> runner</c>

00:03:47.910 --> 00:03:47.920 align:start position:0%
runner code runner
 

00:03:47.920 --> 00:03:49.830 align:start position:0%
runner code runner
install<00:03:48.799><c> after</c><00:03:49.200><c> installing</c><00:03:49.599><c> these</c>

00:03:49.830 --> 00:03:49.840 align:start position:0%
install after installing these
 

00:03:49.840 --> 00:03:51.910 align:start position:0%
install after installing these
extensions<00:03:50.400><c> you</c><00:03:50.560><c> may</c><00:03:50.720><c> need</c><00:03:50.879><c> to</c><00:03:51.040><c> restart</c><00:03:51.519><c> vs</c>

00:03:51.910 --> 00:03:51.920 align:start position:0%
extensions you may need to restart vs
 

00:03:51.920 --> 00:03:54.949 align:start position:0%
extensions you may need to restart vs
code

00:03:54.949 --> 00:03:54.959 align:start position:0%
 
 

00:03:54.959 --> 00:03:56.630 align:start position:0%
 
okay<00:03:55.280><c> then</c><00:03:55.439><c> we</c><00:03:55.599><c> are</c><00:03:55.680><c> going</c><00:03:55.840><c> to</c><00:03:56.000><c> add</c><00:03:56.239><c> a</c><00:03:56.400><c> new</c>

00:03:56.630 --> 00:03:56.640 align:start position:0%
okay then we are going to add a new
 

00:03:56.640 --> 00:03:58.710 align:start position:0%
okay then we are going to add a new
folder<00:03:57.120><c> go</c><00:03:57.280><c> to</c><00:03:57.360><c> the</c><00:03:57.439><c> left-hand</c><00:03:57.840><c> menu</c><00:03:58.400><c> add</c>

00:03:58.710 --> 00:03:58.720 align:start position:0%
folder go to the left-hand menu add
 

00:03:58.720 --> 00:04:00.550 align:start position:0%
folder go to the left-hand menu add
folder<00:03:59.439><c> i'll</c><00:03:59.599><c> create</c><00:03:59.760><c> a</c><00:03:59.840><c> new</c><00:04:00.000><c> folder</c><00:04:00.319><c> on</c><00:04:00.400><c> my</c>

00:04:00.550 --> 00:04:00.560 align:start position:0%
folder i'll create a new folder on my
 

00:04:00.560 --> 00:04:04.630 align:start position:0%
folder i'll create a new folder on my
desktop<00:04:01.360><c> so</c><00:04:01.599><c> i'll</c><00:04:01.760><c> right</c><00:04:02.000><c> click</c><00:04:02.400><c> go</c><00:04:02.720><c> to</c><00:04:03.120><c> new</c>

00:04:04.630 --> 00:04:04.640 align:start position:0%
desktop so i'll right click go to new
 

00:04:04.640 --> 00:04:06.070 align:start position:0%
desktop so i'll right click go to new
folder

00:04:06.070 --> 00:04:06.080 align:start position:0%
folder
 

00:04:06.080 --> 00:04:09.589 align:start position:0%
folder
i'll<00:04:06.319><c> name</c><00:04:06.560><c> this</c><00:04:07.040><c> c</c><00:04:07.760><c> files</c>

00:04:09.589 --> 00:04:09.599 align:start position:0%
i'll name this c files
 

00:04:09.599 --> 00:04:11.509 align:start position:0%
i'll name this c files
then<00:04:09.840><c> add</c>

00:04:11.509 --> 00:04:11.519 align:start position:0%
then add
 

00:04:11.519 --> 00:04:12.789 align:start position:0%
then add
i<00:04:11.599><c> think</c><00:04:11.840><c> you</c><00:04:11.920><c> might</c><00:04:12.080><c> have</c><00:04:12.239><c> to</c><00:04:12.319><c> click</c><00:04:12.560><c> within</c>

00:04:12.789 --> 00:04:12.799 align:start position:0%
i think you might have to click within
 

00:04:12.799 --> 00:04:14.710 align:start position:0%
i think you might have to click within
the<00:04:12.959><c> folder</c>

00:04:14.710 --> 00:04:14.720 align:start position:0%
the folder
 

00:04:14.720 --> 00:04:17.909 align:start position:0%
the folder
okay<00:04:14.959><c> we</c><00:04:15.120><c> now</c><00:04:15.439><c> have</c><00:04:15.840><c> a</c><00:04:16.160><c> folder</c><00:04:16.639><c> named</c><00:04:17.040><c> c</c><00:04:17.280><c> files</c>

00:04:17.909 --> 00:04:17.919 align:start position:0%
okay we now have a folder named c files
 

00:04:17.919 --> 00:04:20.069 align:start position:0%
okay we now have a folder named c files
then<00:04:18.079><c> to</c><00:04:18.239><c> create</c><00:04:18.479><c> a</c><00:04:18.560><c> new</c><00:04:18.799><c> c</c><00:04:19.040><c> file</c><00:04:19.440><c> go</c><00:04:19.600><c> to</c><00:04:19.840><c> new</c>

00:04:20.069 --> 00:04:20.079 align:start position:0%
then to create a new c file go to new
 

00:04:20.079 --> 00:04:22.069 align:start position:0%
then to create a new c file go to new
file<00:04:20.400><c> after</c><00:04:20.639><c> clicking</c><00:04:20.959><c> this</c><00:04:21.120><c> folder</c>

00:04:22.069 --> 00:04:22.079 align:start position:0%
file after clicking this folder
 

00:04:22.079 --> 00:04:24.790 align:start position:0%
file after clicking this folder
i'll<00:04:22.320><c> name</c><00:04:22.560><c> this</c><00:04:23.120><c> hello</c><00:04:23.759><c> world</c><00:04:24.320><c> and</c><00:04:24.479><c> make</c><00:04:24.639><c> sure</c>

00:04:24.790 --> 00:04:24.800 align:start position:0%
i'll name this hello world and make sure
 

00:04:24.800 --> 00:04:27.110 align:start position:0%
i'll name this hello world and make sure
that<00:04:25.040><c> it</c><00:04:25.199><c> ends</c><00:04:25.520><c> with</c><00:04:25.919><c> the</c><00:04:26.240><c> c</c><00:04:26.560><c> extension</c>

00:04:27.110 --> 00:04:27.120 align:start position:0%
that it ends with the c extension
 

00:04:27.120 --> 00:04:28.950 align:start position:0%
that it ends with the c extension
helloworld.c

00:04:28.950 --> 00:04:28.960 align:start position:0%
helloworld.c
 

00:04:28.960 --> 00:04:30.950 align:start position:0%
helloworld.c
and<00:04:29.120><c> we</c><00:04:29.280><c> now</c><00:04:29.520><c> have</c><00:04:29.840><c> a</c><00:04:30.000><c> c</c><00:04:30.240><c> file</c><00:04:30.560><c> that</c><00:04:30.720><c> we</c><00:04:30.800><c> can</c>

00:04:30.950 --> 00:04:30.960 align:start position:0%
and we now have a c file that we can
 

00:04:30.960 --> 00:04:33.430 align:start position:0%
and we now have a c file that we can
work<00:04:31.199><c> with</c><00:04:31.919><c> and</c><00:04:32.160><c> on</c><00:04:32.320><c> this</c><00:04:32.560><c> tab</c><00:04:32.800><c> at</c><00:04:32.880><c> the</c><00:04:33.040><c> top</c>

00:04:33.430 --> 00:04:33.440 align:start position:0%
work with and on this tab at the top
 

00:04:33.440 --> 00:04:36.469 align:start position:0%
work with and on this tab at the top
this<00:04:33.680><c> says</c><00:04:34.160><c> hello</c><00:04:34.479><c> world</c><00:04:35.040><c> dot</c><00:04:35.280><c> c</c><00:04:35.840><c> now</c><00:04:36.080><c> the</c><00:04:36.240><c> next</c>

00:04:36.469 --> 00:04:36.479 align:start position:0%
this says hello world dot c now the next
 

00:04:36.479 --> 00:04:38.629 align:start position:0%
this says hello world dot c now the next
thing<00:04:36.639><c> that</c><00:04:36.800><c> we'll</c><00:04:36.960><c> need</c><00:04:37.280><c> is</c><00:04:37.600><c> that</c><00:04:37.919><c> gcc</c>

00:04:38.629 --> 00:04:38.639 align:start position:0%
thing that we'll need is that gcc
 

00:04:38.639 --> 00:04:41.350 align:start position:0%
thing that we'll need is that gcc
compiler<00:04:39.360><c> to</c><00:04:39.520><c> convert</c><00:04:40.080><c> c</c><00:04:40.320><c> code</c><00:04:40.720><c> to</c><00:04:40.960><c> machine</c>

00:04:41.350 --> 00:04:41.360 align:start position:0%
compiler to convert c code to machine
 

00:04:41.360 --> 00:04:43.350 align:start position:0%
compiler to convert c code to machine
code<00:04:41.840><c> now</c><00:04:42.000><c> if</c><00:04:42.160><c> you're</c><00:04:42.240><c> running</c><00:04:42.560><c> windows</c><00:04:43.199><c> this</c>

00:04:43.350 --> 00:04:43.360 align:start position:0%
code now if you're running windows this
 

00:04:43.360 --> 00:04:45.510 align:start position:0%
code now if you're running windows this
is<00:04:43.520><c> how</c><00:04:43.680><c> to</c><00:04:43.840><c> check</c><00:04:44.080><c> to</c><00:04:44.240><c> see</c><00:04:44.400><c> if</c><00:04:44.560><c> you</c><00:04:44.639><c> have</c><00:04:44.800><c> a</c><00:04:44.960><c> gcc</c>

00:04:45.510 --> 00:04:45.520 align:start position:0%
is how to check to see if you have a gcc
 

00:04:45.520 --> 00:04:47.670 align:start position:0%
is how to check to see if you have a gcc
compiler<00:04:46.240><c> already</c><00:04:46.560><c> installed</c>

00:04:47.670 --> 00:04:47.680 align:start position:0%
compiler already installed
 

00:04:47.680 --> 00:04:51.110 align:start position:0%
compiler already installed
so<00:04:47.919><c> you're</c><00:04:48.080><c> going</c><00:04:48.320><c> to</c><00:04:48.639><c> open</c><00:04:48.960><c> command</c><00:04:49.360><c> prompt</c>

00:04:51.110 --> 00:04:51.120 align:start position:0%
so you're going to open command prompt
 

00:04:51.120 --> 00:04:54.550 align:start position:0%
so you're going to open command prompt
and<00:04:51.440><c> enter</c><00:04:52.000><c> this</c><00:04:52.240><c> command</c><00:04:53.120><c> g</c><00:04:53.360><c> plus</c><00:04:53.680><c> plus</c>

00:04:54.550 --> 00:04:54.560 align:start position:0%
and enter this command g plus plus
 

00:04:54.560 --> 00:04:57.590 align:start position:0%
and enter this command g plus plus
dash<00:04:54.880><c> dash</c><00:04:55.360><c> version</c><00:04:56.000><c> i</c><00:04:56.160><c> already</c><00:04:56.400><c> have</c><00:04:56.639><c> a</c><00:04:56.960><c> gcc</c>

00:04:57.590 --> 00:04:57.600 align:start position:0%
dash dash version i already have a gcc
 

00:04:57.600 --> 00:04:59.430 align:start position:0%
dash dash version i already have a gcc
compiler<00:04:58.160><c> already</c><00:04:58.479><c> installed</c><00:04:59.199><c> if</c><00:04:59.280><c> you're</c>

00:04:59.430 --> 00:04:59.440 align:start position:0%
compiler already installed if you're
 

00:04:59.440 --> 00:05:00.790 align:start position:0%
compiler already installed if you're
getting<00:04:59.680><c> an</c><00:04:59.919><c> error</c><00:05:00.080><c> then</c><00:05:00.240><c> you'll</c><00:05:00.479><c> probably</c>

00:05:00.790 --> 00:05:00.800 align:start position:0%
getting an error then you'll probably
 

00:05:00.800 --> 00:05:02.469 align:start position:0%
getting an error then you'll probably
have<00:05:00.880><c> to</c><00:05:01.039><c> download</c><00:05:01.440><c> one</c><00:05:02.000><c> here's</c><00:05:02.320><c> an</c>

00:05:02.469 --> 00:05:02.479 align:start position:0%
have to download one here's an
 

00:05:02.479 --> 00:05:04.950 align:start position:0%
have to download one here's an
interruption<00:05:03.120><c> from</c><00:05:03.440><c> future</c><00:05:03.840><c> bro</c><00:05:04.320><c> i</c><00:05:04.560><c> traveled</c>

00:05:04.950 --> 00:05:04.960 align:start position:0%
interruption from future bro i traveled
 

00:05:04.960 --> 00:05:06.870 align:start position:0%
interruption from future bro i traveled
from<00:05:05.120><c> the</c><00:05:05.280><c> future</c><00:05:05.759><c> to</c><00:05:05.919><c> the</c><00:05:06.080><c> past</c><00:05:06.400><c> to</c><00:05:06.560><c> deliver</c>

00:05:06.870 --> 00:05:06.880 align:start position:0%
from the future to the past to deliver
 

00:05:06.880 --> 00:05:09.029 align:start position:0%
from the future to the past to deliver
you<00:05:07.039><c> this</c><00:05:07.199><c> message</c><00:05:08.080><c> so</c><00:05:08.400><c> if</c><00:05:08.560><c> you</c><00:05:08.720><c> need</c><00:05:08.880><c> to</c>

00:05:09.029 --> 00:05:09.039 align:start position:0%
you this message so if you need to
 

00:05:09.039 --> 00:05:12.629 align:start position:0%
you this message so if you need to
install<00:05:09.680><c> gcc</c><00:05:10.639><c> on</c><00:05:10.960><c> a</c><00:05:11.120><c> mac</c><00:05:11.440><c> operating</c><00:05:12.000><c> system</c>

00:05:12.629 --> 00:05:12.639 align:start position:0%
install gcc on a mac operating system
 

00:05:12.639 --> 00:05:14.230 align:start position:0%
install gcc on a mac operating system
what<00:05:12.800><c> you're</c><00:05:12.960><c> going</c><00:05:13.120><c> to</c><00:05:13.280><c> do</c><00:05:13.600><c> within</c><00:05:14.000><c> a</c>

00:05:14.230 --> 00:05:14.240 align:start position:0%
what you're going to do within a
 

00:05:14.240 --> 00:05:16.150 align:start position:0%
what you're going to do within a
terminal<00:05:14.639><c> window</c><00:05:15.199><c> is</c><00:05:15.360><c> enter</c><00:05:15.680><c> the</c><00:05:15.759><c> following</c>

00:05:16.150 --> 00:05:16.160 align:start position:0%
terminal window is enter the following
 

00:05:16.160 --> 00:05:20.070 align:start position:0%
terminal window is enter the following
command<00:05:17.039><c> c</c><00:05:17.360><c> lang</c><00:05:17.919><c> dash</c><00:05:18.240><c> dash</c><00:05:18.720><c> version</c><00:05:19.520><c> if</c><00:05:19.759><c> c</c>

00:05:20.070 --> 00:05:20.080 align:start position:0%
command c lang dash dash version if c
 

00:05:20.080 --> 00:05:22.390 align:start position:0%
command c lang dash dash version if c
lang<00:05:20.479><c> isn't</c><00:05:20.800><c> installed</c><00:05:21.520><c> enter</c><00:05:21.840><c> the</c><00:05:22.000><c> following</c>

00:05:22.390 --> 00:05:22.400 align:start position:0%
lang isn't installed enter the following
 

00:05:22.400 --> 00:05:26.150 align:start position:0%
lang isn't installed enter the following
command<00:05:23.280><c> xcode</c><00:05:24.160><c> dash</c><00:05:24.560><c> select</c><00:05:25.360><c> dash</c><00:05:25.680><c> dash</c>

00:05:26.150 --> 00:05:26.160 align:start position:0%
command xcode dash select dash dash
 

00:05:26.160 --> 00:05:28.390 align:start position:0%
command xcode dash select dash dash
install<00:05:26.880><c> and</c><00:05:26.960><c> that's</c><00:05:27.199><c> all</c><00:05:27.360><c> there</c><00:05:27.520><c> is</c><00:05:27.680><c> to</c><00:05:27.919><c> it</c><00:05:28.240><c> if</c>

00:05:28.390 --> 00:05:28.400 align:start position:0%
install and that's all there is to it if
 

00:05:28.400 --> 00:05:29.909 align:start position:0%
install and that's all there is to it if
you<00:05:28.479><c> need</c><00:05:28.639><c> additional</c><00:05:29.120><c> assistance</c><00:05:29.680><c> you</c><00:05:29.759><c> can</c>

00:05:29.909 --> 00:05:29.919 align:start position:0%
you need additional assistance you can
 

00:05:29.919 --> 00:05:32.350 align:start position:0%
you need additional assistance you can
always<00:05:30.080><c> visit</c><00:05:30.400><c> this</c><00:05:30.560><c> webpage</c>

00:05:32.350 --> 00:05:32.360 align:start position:0%
always visit this webpage
 

00:05:32.360 --> 00:05:34.150 align:start position:0%
always visit this webpage
code.visualstudio.com

00:05:34.150 --> 00:05:34.160 align:start position:0%
code.visualstudio.com
 

00:05:34.160 --> 00:05:37.270 align:start position:0%
code.visualstudio.com
docs<00:05:34.800><c> slash</c><00:05:35.280><c> cpp</c><00:05:36.400><c> and</c><00:05:36.560><c> if</c><00:05:36.720><c> you're</c><00:05:36.800><c> running</c><00:05:37.120><c> on</c>

00:05:37.270 --> 00:05:37.280 align:start position:0%
docs slash cpp and if you're running on
 

00:05:37.280 --> 00:05:39.990 align:start position:0%
docs slash cpp and if you're running on
linux<00:05:38.160><c> within</c><00:05:38.720><c> a</c><00:05:38.880><c> terminal</c><00:05:39.280><c> window</c><00:05:39.759><c> you'll</c>

00:05:39.990 --> 00:05:40.000 align:start position:0%
linux within a terminal window you'll
 

00:05:40.000 --> 00:05:43.110 align:start position:0%
linux within a terminal window you'll
enter<00:05:40.400><c> this</c><00:05:40.639><c> command</c><00:05:41.039><c> instead</c><00:05:41.919><c> gcc</c>

00:05:43.110 --> 00:05:43.120 align:start position:0%
enter this command instead gcc
 

00:05:43.120 --> 00:05:46.469 align:start position:0%
enter this command instead gcc
dash<00:05:43.520><c> v</c><00:05:44.160><c> if</c><00:05:44.400><c> gcc</c><00:05:45.120><c> isn't</c><00:05:45.360><c> installed</c><00:05:45.919><c> run</c><00:05:46.320><c> this</c>

00:05:46.469 --> 00:05:46.479 align:start position:0%
dash v if gcc isn't installed run this
 

00:05:46.479 --> 00:05:47.430 align:start position:0%
dash v if gcc isn't installed run this
command

00:05:47.430 --> 00:05:47.440 align:start position:0%
command
 

00:05:47.440 --> 00:05:51.590 align:start position:0%
command
sudo<00:05:48.360><c> apt-get</c><00:05:49.759><c> update</c><00:05:50.560><c> and</c><00:05:50.880><c> then</c><00:05:51.039><c> next</c><00:05:51.360><c> type</c>

00:05:51.590 --> 00:05:51.600 align:start position:0%
sudo apt-get update and then next type
 

00:05:51.600 --> 00:05:53.670 align:start position:0%
sudo apt-get update and then next type
in<00:05:51.680><c> this</c><00:05:52.000><c> long</c><00:05:52.240><c> command</c><00:05:52.880><c> and</c><00:05:53.039><c> if</c><00:05:53.199><c> you</c><00:05:53.280><c> need</c><00:05:53.440><c> any</c>

00:05:53.670 --> 00:05:53.680 align:start position:0%
in this long command and if you need any
 

00:05:53.680 --> 00:05:55.590 align:start position:0%
in this long command and if you need any
additional<00:05:54.080><c> assistance</c><00:05:54.639><c> or</c><00:05:54.800><c> documentation</c>

00:05:55.590 --> 00:05:55.600 align:start position:0%
additional assistance or documentation
 

00:05:55.600 --> 00:05:57.670 align:start position:0%
additional assistance or documentation
you<00:05:55.680><c> can</c><00:05:55.759><c> always</c><00:05:56.000><c> visit</c><00:05:56.319><c> this</c><00:05:56.479><c> webpage</c><00:05:57.440><c> so</c>

00:05:57.670 --> 00:05:57.680 align:start position:0%
you can always visit this webpage so
 

00:05:57.680 --> 00:06:01.870 align:start position:0%
you can always visit this webpage so
google<00:05:58.000><c> this</c><00:05:58.560><c> min</c><00:05:58.960><c> gw</c><00:06:00.000><c> dash</c><00:06:00.479><c> w64</c>

00:06:01.870 --> 00:06:01.880 align:start position:0%
google this min gw dash w64
 

00:06:01.880 --> 00:06:04.710 align:start position:0%
google this min gw dash w64
install.exe<00:06:03.360><c> and</c><00:06:03.600><c> the</c><00:06:03.680><c> first</c><00:06:04.080><c> link</c><00:06:04.319><c> is</c><00:06:04.479><c> for</c>

00:06:04.710 --> 00:06:04.720 align:start position:0%
install.exe and the first link is for
 

00:06:04.720 --> 00:06:07.029 align:start position:0%
install.exe and the first link is for
sourceforge<00:06:05.440><c> so</c><00:06:05.680><c> click</c><00:06:06.000><c> on</c><00:06:06.160><c> that</c>

00:06:07.029 --> 00:06:07.039 align:start position:0%
sourceforge so click on that
 

00:06:07.039 --> 00:06:09.270 align:start position:0%
sourceforge so click on that
then<00:06:07.280><c> you</c><00:06:07.360><c> can</c><00:06:07.520><c> find</c><00:06:07.840><c> this</c><00:06:08.000><c> underneath</c><00:06:08.720><c> home</c>

00:06:09.270 --> 00:06:09.280 align:start position:0%
then you can find this underneath home
 

00:06:09.280 --> 00:06:12.670 align:start position:0%
then you can find this underneath home
browse<00:06:09.919><c> development</c><00:06:10.800><c> compilers</c>

00:06:12.670 --> 00:06:12.680 align:start position:0%
browse development compilers
 

00:06:12.680 --> 00:06:16.309 align:start position:0%
browse development compilers
mingw64<00:06:13.759><c> for</c><00:06:14.000><c> 32</c><00:06:14.560><c> and</c><00:06:14.639><c> 64-bit</c><00:06:15.440><c> windows</c><00:06:16.160><c> and</c>

00:06:16.309 --> 00:06:16.319 align:start position:0%
mingw64 for 32 and 64-bit windows and
 

00:06:16.319 --> 00:06:18.550 align:start position:0%
mingw64 for 32 and 64-bit windows and
the<00:06:16.400><c> download</c><00:06:16.800><c> should</c><00:06:17.039><c> start</c><00:06:17.280><c> automatically</c>

00:06:18.550 --> 00:06:18.560 align:start position:0%
the download should start automatically
 

00:06:18.560 --> 00:06:21.830 align:start position:0%
the download should start automatically
so<00:06:18.800><c> click</c><00:06:19.280><c> next</c>

00:06:21.830 --> 00:06:21.840 align:start position:0%
so click next
 

00:06:21.840 --> 00:06:24.629 align:start position:0%
so click next
change<00:06:22.319><c> the</c><00:06:22.560><c> architecture</c><00:06:23.600><c> to</c>

00:06:24.629 --> 00:06:24.639 align:start position:0%
change the architecture to
 

00:06:24.639 --> 00:06:26.629 align:start position:0%
change the architecture to
x8664

00:06:26.629 --> 00:06:26.639 align:start position:0%
x8664
 

00:06:26.639 --> 00:06:28.870 align:start position:0%
x8664
next<00:06:27.440><c> and</c><00:06:27.520><c> then</c><00:06:27.759><c> copy</c><00:06:28.080><c> this</c><00:06:28.319><c> path</c><00:06:28.639><c> for</c><00:06:28.800><c> the</c>

00:06:28.870 --> 00:06:28.880 align:start position:0%
next and then copy this path for the
 

00:06:28.880 --> 00:06:30.469 align:start position:0%
next and then copy this path for the
destination<00:06:29.520><c> folder</c><00:06:29.919><c> it's</c><00:06:30.080><c> going</c><00:06:30.240><c> to</c><00:06:30.319><c> be</c>

00:06:30.469 --> 00:06:30.479 align:start position:0%
destination folder it's going to be
 

00:06:30.479 --> 00:06:32.070 align:start position:0%
destination folder it's going to be
relevant<00:06:30.880><c> later</c>

00:06:32.070 --> 00:06:32.080 align:start position:0%
relevant later
 

00:06:32.080 --> 00:06:34.870 align:start position:0%
relevant later
then<00:06:32.319><c> next</c><00:06:32.880><c> next</c><00:06:33.360><c> and</c><00:06:33.600><c> finish</c>

00:06:34.870 --> 00:06:34.880 align:start position:0%
then next next and finish
 

00:06:34.880 --> 00:06:37.029 align:start position:0%
then next next and finish
now<00:06:35.120><c> what</c><00:06:35.280><c> we're</c><00:06:35.440><c> going</c><00:06:35.600><c> to</c><00:06:35.680><c> do</c><00:06:36.080><c> is</c><00:06:36.479><c> add</c><00:06:36.800><c> our</c>

00:06:37.029 --> 00:06:37.039 align:start position:0%
now what we're going to do is add our
 

00:06:37.039 --> 00:06:39.830 align:start position:0%
now what we're going to do is add our
path<00:06:37.440><c> to</c><00:06:37.600><c> our</c><00:06:37.840><c> gcc</c><00:06:38.639><c> underneath</c><00:06:39.199><c> environment</c>

00:06:39.830 --> 00:06:39.840 align:start position:0%
path to our gcc underneath environment
 

00:06:39.840 --> 00:06:45.749 align:start position:0%
path to our gcc underneath environment
variables<00:06:40.880><c> so</c><00:06:41.199><c> open</c><00:06:41.520><c> up</c><00:06:41.840><c> control</c><00:06:42.319><c> panel</c>

00:06:45.749 --> 00:06:45.759 align:start position:0%
 
 

00:06:45.759 --> 00:06:48.469 align:start position:0%
 
then<00:06:46.000><c> go</c><00:06:46.240><c> to</c><00:06:46.479><c> system</c><00:06:46.800><c> and</c><00:06:46.880><c> security</c>

00:06:48.469 --> 00:06:48.479 align:start position:0%
then go to system and security
 

00:06:48.479 --> 00:06:50.950 align:start position:0%
then go to system and security
then<00:06:48.800><c> system</c>

00:06:50.950 --> 00:06:50.960 align:start position:0%
then system
 

00:06:50.960 --> 00:06:54.230 align:start position:0%
then system
scroll<00:06:51.440><c> down</c><00:06:51.759><c> to</c><00:06:52.080><c> advanced</c><00:06:52.479><c> system</c><00:06:52.880><c> settings</c>

00:06:54.230 --> 00:06:54.240 align:start position:0%
scroll down to advanced system settings
 

00:06:54.240 --> 00:06:56.230 align:start position:0%
scroll down to advanced system settings
underneath<00:06:54.720><c> the</c><00:06:54.880><c> advanced</c><00:06:55.360><c> tab</c>

00:06:56.230 --> 00:06:56.240 align:start position:0%
underneath the advanced tab
 

00:06:56.240 --> 00:06:58.790 align:start position:0%
underneath the advanced tab
go<00:06:56.560><c> to</c><00:06:56.960><c> environment</c><00:06:57.520><c> variables</c>

00:06:58.790 --> 00:06:58.800 align:start position:0%
go to environment variables
 

00:06:58.800 --> 00:07:01.909 align:start position:0%
go to environment variables
underneath<00:06:59.280><c> path</c><00:07:00.080><c> we</c><00:07:00.400><c> are</c><00:07:00.639><c> going</c><00:07:00.880><c> to</c><00:07:01.199><c> edit</c><00:07:01.840><c> i</c>

00:07:01.909 --> 00:07:01.919 align:start position:0%
underneath path we are going to edit i
 

00:07:01.919 --> 00:07:03.589 align:start position:0%
underneath path we are going to edit i
already<00:07:02.160><c> have</c><00:07:02.319><c> this</c><00:07:02.479><c> path</c><00:07:02.720><c> configured</c><00:07:03.360><c> so</c><00:07:03.520><c> i'm</c>

00:07:03.589 --> 00:07:03.599 align:start position:0%
already have this path configured so i'm
 

00:07:03.599 --> 00:07:05.589 align:start position:0%
already have this path configured so i'm
going<00:07:03.840><c> to</c><00:07:04.080><c> delete</c><00:07:04.400><c> this</c><00:07:04.880><c> you</c><00:07:05.120><c> probably</c><00:07:05.360><c> won't</c>

00:07:05.589 --> 00:07:05.599 align:start position:0%
going to delete this you probably won't
 

00:07:05.599 --> 00:07:08.309 align:start position:0%
going to delete this you probably won't
have<00:07:05.840><c> this</c><00:07:06.000><c> setup</c><00:07:06.639><c> and</c><00:07:07.039><c> then</c><00:07:07.360><c> new</c>

00:07:08.309 --> 00:07:08.319 align:start position:0%
have this setup and then new
 

00:07:08.319 --> 00:07:12.469 align:start position:0%
have this setup and then new
paste<00:07:08.720><c> that</c><00:07:08.960><c> file</c><00:07:09.360><c> path</c><00:07:09.919><c> to</c><00:07:10.319><c> the</c><00:07:10.720><c> gcc</c><00:07:11.360><c> compiler</c>

00:07:12.469 --> 00:07:12.479 align:start position:0%
paste that file path to the gcc compiler
 

00:07:12.479 --> 00:07:16.790 align:start position:0%
paste that file path to the gcc compiler
then<00:07:12.800><c> add</c><00:07:13.280><c> slash</c><00:07:14.080><c> min</c><00:07:14.479><c> 64</c><00:07:15.280><c> slash</c><00:07:15.759><c> bin</c><00:07:16.479><c> then</c>

00:07:16.790 --> 00:07:16.800 align:start position:0%
then add slash min 64 slash bin then
 

00:07:16.800 --> 00:07:18.230 align:start position:0%
then add slash min 64 slash bin then
okay

00:07:18.230 --> 00:07:18.240 align:start position:0%
okay
 

00:07:18.240 --> 00:07:19.350 align:start position:0%
okay
okay

00:07:19.350 --> 00:07:19.360 align:start position:0%
okay
 

00:07:19.360 --> 00:07:23.430 align:start position:0%
okay
and<00:07:19.520><c> then</c><00:07:19.680><c> you</c><00:07:19.840><c> can</c><00:07:19.919><c> close</c><00:07:20.240><c> out</c><00:07:20.319><c> of</c><00:07:20.479><c> everything</c>

00:07:23.430 --> 00:07:23.440 align:start position:0%
 
 

00:07:23.440 --> 00:07:25.589 align:start position:0%
 
and<00:07:23.599><c> now</c><00:07:23.840><c> we</c><00:07:24.000><c> need</c><00:07:24.240><c> to</c><00:07:24.479><c> configure</c><00:07:25.120><c> our</c><00:07:25.280><c> build</c>

00:07:25.589 --> 00:07:25.599 align:start position:0%
and now we need to configure our build
 

00:07:25.599 --> 00:07:29.270 align:start position:0%
and now we need to configure our build
task<00:07:26.080><c> so</c><00:07:26.479><c> go</c><00:07:26.800><c> to</c><00:07:27.120><c> a</c><00:07:27.360><c> terminal</c>

00:07:29.270 --> 00:07:29.280 align:start position:0%
task so go to a terminal
 

00:07:29.280 --> 00:07:31.270 align:start position:0%
task so go to a terminal
your<00:07:29.360><c> default</c><00:07:29.840><c> build</c><00:07:30.080><c> task</c><00:07:30.880><c> if</c><00:07:31.039><c> nothing</c>

00:07:31.270 --> 00:07:31.280 align:start position:0%
your default build task if nothing
 

00:07:31.280 --> 00:07:32.950 align:start position:0%
your default build task if nothing
appears<00:07:31.680><c> within</c><00:07:31.919><c> the</c><00:07:32.080><c> search</c><00:07:32.319><c> box</c><00:07:32.639><c> you</c><00:07:32.800><c> may</c>

00:07:32.950 --> 00:07:32.960 align:start position:0%
appears within the search box you may
 

00:07:32.960 --> 00:07:35.909 align:start position:0%
appears within the search box you may
need<00:07:33.120><c> to</c><00:07:33.280><c> restart</c><00:07:33.680><c> vs</c><00:07:34.000><c> code</c><00:07:34.400><c> i</c><00:07:34.479><c> think</c><00:07:34.720><c> i</c><00:07:34.880><c> do</c>

00:07:35.909 --> 00:07:35.919 align:start position:0%
need to restart vs code i think i do
 

00:07:35.919 --> 00:07:38.710 align:start position:0%
need to restart vs code i think i do
so<00:07:36.080><c> i'm</c><00:07:36.240><c> going</c><00:07:36.479><c> to</c><00:07:36.720><c> restart</c><00:07:37.199><c> it</c>

00:07:38.710 --> 00:07:38.720 align:start position:0%
so i'm going to restart it
 

00:07:38.720 --> 00:07:40.550 align:start position:0%
so i'm going to restart it
and<00:07:38.880><c> then</c><00:07:39.039><c> let's</c><00:07:39.280><c> try</c><00:07:39.440><c> that</c><00:07:39.599><c> again</c><00:07:40.000><c> terminal</c>

00:07:40.550 --> 00:07:40.560 align:start position:0%
and then let's try that again terminal
 

00:07:40.560 --> 00:07:42.629 align:start position:0%
and then let's try that again terminal
configure<00:07:41.039><c> default</c><00:07:41.440><c> build</c><00:07:41.680><c> task</c><00:07:42.160><c> and</c><00:07:42.400><c> there</c>

00:07:42.629 --> 00:07:42.639 align:start position:0%
configure default build task and there
 

00:07:42.639 --> 00:07:45.270 align:start position:0%
configure default build task and there
it<00:07:42.800><c> is</c><00:07:43.039><c> i</c><00:07:43.199><c> will</c><00:07:43.360><c> select</c><00:07:43.840><c> that</c>

00:07:45.270 --> 00:07:45.280 align:start position:0%
it is i will select that
 

00:07:45.280 --> 00:07:47.749 align:start position:0%
it is i will select that
this<00:07:45.520><c> creates</c><00:07:45.919><c> a</c><00:07:46.160><c> json</c><00:07:46.639><c> file</c><00:07:47.039><c> that</c><00:07:47.199><c> tells</c><00:07:47.440><c> vs</c>

00:07:47.749 --> 00:07:47.759 align:start position:0%
this creates a json file that tells vs
 

00:07:47.759 --> 00:07:50.230 align:start position:0%
this creates a json file that tells vs
code<00:07:48.000><c> how</c><00:07:48.240><c> to</c><00:07:48.319><c> compile</c><00:07:48.720><c> the</c><00:07:48.879><c> program</c><00:07:49.759><c> and</c><00:07:50.000><c> with</c>

00:07:50.230 --> 00:07:50.240 align:start position:0%
code how to compile the program and with
 

00:07:50.240 --> 00:07:52.629 align:start position:0%
code how to compile the program and with
that<00:07:50.479><c> out</c><00:07:50.560><c> of</c><00:07:50.639><c> the</c><00:07:50.800><c> way</c><00:07:51.039><c> we</c><00:07:51.199><c> can</c><00:07:51.360><c> begin</c><00:07:51.759><c> coding</c>

00:07:52.629 --> 00:07:52.639 align:start position:0%
that out of the way we can begin coding
 

00:07:52.639 --> 00:07:54.790 align:start position:0%
that out of the way we can begin coding
now<00:07:52.879><c> before</c><00:07:53.199><c> we</c><00:07:53.360><c> do</c><00:07:53.520><c> start</c><00:07:53.840><c> coding</c><00:07:54.240><c> anything</c>

00:07:54.790 --> 00:07:54.800 align:start position:0%
now before we do start coding anything
 

00:07:54.800 --> 00:07:56.629 align:start position:0%
now before we do start coding anything
i'm<00:07:55.039><c> going</c><00:07:55.280><c> to</c><00:07:55.440><c> increase</c><00:07:55.759><c> the</c><00:07:55.919><c> font</c><00:07:56.240><c> size</c>

00:07:56.629 --> 00:07:56.639 align:start position:0%
i'm going to increase the font size
 

00:07:56.639 --> 00:07:58.790 align:start position:0%
i'm going to increase the font size
because<00:07:57.120><c> as</c><00:07:57.280><c> you</c><00:07:57.360><c> can</c><00:07:57.520><c> see</c><00:07:57.759><c> this</c><00:07:58.000><c> font</c><00:07:58.319><c> size</c><00:07:58.720><c> is</c>

00:07:58.790 --> 00:07:58.800 align:start position:0%
because as you can see this font size is
 

00:07:58.800 --> 00:08:01.670 align:start position:0%
because as you can see this font size is
really<00:07:59.120><c> small</c><00:07:59.919><c> so</c><00:08:00.160><c> within</c><00:08:00.560><c> vs</c><00:08:00.960><c> code</c><00:08:01.199><c> to</c><00:08:01.360><c> change</c>

00:08:01.670 --> 00:08:01.680 align:start position:0%
really small so within vs code to change
 

00:08:01.680 --> 00:08:05.110 align:start position:0%
really small so within vs code to change
the<00:08:01.919><c> font</c><00:08:02.160><c> size</c><00:08:02.560><c> go</c><00:08:02.800><c> to</c><00:08:03.199><c> file</c><00:08:04.000><c> preferences</c>

00:08:05.110 --> 00:08:05.120 align:start position:0%
the font size go to file preferences
 

00:08:05.120 --> 00:08:07.350 align:start position:0%
the font size go to file preferences
settings<00:08:05.919><c> and</c><00:08:06.160><c> you</c><00:08:06.240><c> can</c><00:08:06.400><c> change</c><00:08:06.639><c> that</c><00:08:06.879><c> here</c>

00:08:07.350 --> 00:08:07.360 align:start position:0%
settings and you can change that here
 

00:08:07.360 --> 00:08:10.150 align:start position:0%
settings and you can change that here
let's<00:08:07.680><c> try</c><00:08:08.240><c> maybe</c><00:08:08.800><c> 20.</c><00:08:09.360><c> you</c><00:08:09.520><c> can</c><00:08:09.680><c> also</c><00:08:09.919><c> change</c>

00:08:10.150 --> 00:08:10.160 align:start position:0%
let's try maybe 20. you can also change
 

00:08:10.160 --> 00:08:11.749 align:start position:0%
let's try maybe 20. you can also change
the<00:08:10.319><c> font</c><00:08:10.639><c> family</c><00:08:10.960><c> too</c><00:08:11.120><c> if</c><00:08:11.199><c> you</c><00:08:11.280><c> want</c><00:08:11.599><c> and</c>

00:08:11.749 --> 00:08:11.759 align:start position:0%
the font family too if you want and
 

00:08:11.759 --> 00:08:12.710 align:start position:0%
the font family too if you want and
everything

00:08:12.710 --> 00:08:12.720 align:start position:0%
everything
 

00:08:12.720 --> 00:08:14.390 align:start position:0%
everything
uh<00:08:12.879><c> but</c><00:08:13.039><c> let's</c><00:08:13.280><c> close</c><00:08:13.599><c> out</c><00:08:13.680><c> of</c><00:08:13.759><c> that</c><00:08:14.080><c> and</c><00:08:14.160><c> try</c>

00:08:14.390 --> 00:08:14.400 align:start position:0%
uh but let's close out of that and try
 

00:08:14.400 --> 00:08:15.430 align:start position:0%
uh but let's close out of that and try
that<00:08:14.560><c> again</c>

00:08:15.430 --> 00:08:15.440 align:start position:0%
that again
 

00:08:15.440 --> 00:08:17.350 align:start position:0%
that again
okay<00:08:15.759><c> that</c><00:08:16.000><c> isn't</c><00:08:16.160><c> too</c><00:08:16.400><c> bad</c><00:08:16.800><c> i'll</c><00:08:17.039><c> stick</c><00:08:17.280><c> with</c>

00:08:17.350 --> 00:08:17.360 align:start position:0%
okay that isn't too bad i'll stick with
 

00:08:17.360 --> 00:08:19.670 align:start position:0%
okay that isn't too bad i'll stick with
this<00:08:17.599><c> font</c><00:08:17.840><c> size</c><00:08:18.080><c> for</c><00:08:18.240><c> now</c><00:08:18.639><c> i</c><00:08:18.879><c> also</c><00:08:19.120><c> recommend</c>

00:08:19.670 --> 00:08:19.680 align:start position:0%
this font size for now i also recommend
 

00:08:19.680 --> 00:08:21.589 align:start position:0%
this font size for now i also recommend
enabling<00:08:20.240><c> autosave</c><00:08:20.879><c> that's</c><00:08:21.120><c> going</c><00:08:21.199><c> to</c><00:08:21.280><c> save</c>

00:08:21.589 --> 00:08:21.599 align:start position:0%
enabling autosave that's going to save
 

00:08:21.599 --> 00:08:22.950 align:start position:0%
enabling autosave that's going to save
you<00:08:21.759><c> a</c><00:08:21.840><c> lot</c><00:08:22.000><c> of</c><00:08:22.160><c> headaches</c><00:08:22.560><c> later</c><00:08:22.800><c> in</c><00:08:22.879><c> the</c>

00:08:22.950 --> 00:08:22.960 align:start position:0%
you a lot of headaches later in the
 

00:08:22.960 --> 00:08:25.350 align:start position:0%
you a lot of headaches later in the
future<00:08:23.520><c> so</c><00:08:23.759><c> go</c><00:08:24.000><c> to</c><00:08:24.400><c> file</c>

00:08:25.350 --> 00:08:25.360 align:start position:0%
future so go to file
 

00:08:25.360 --> 00:08:26.629 align:start position:0%
future so go to file
auto<00:08:25.680><c> save</c>

00:08:26.629 --> 00:08:26.639 align:start position:0%
auto save
 

00:08:26.639 --> 00:08:28.230 align:start position:0%
auto save
okay<00:08:26.960><c> the</c><00:08:27.039><c> first</c><00:08:27.360><c> thing</c><00:08:27.520><c> that</c><00:08:27.680><c> we're</c><00:08:27.840><c> going</c><00:08:28.000><c> to</c>

00:08:28.230 --> 00:08:28.240 align:start position:0%
okay the first thing that we're going to
 

00:08:28.240 --> 00:08:31.110 align:start position:0%
okay the first thing that we're going to
include<00:08:28.639><c> within</c><00:08:29.280><c> our</c><00:08:29.520><c> c</c><00:08:29.759><c> program</c><00:08:30.319><c> is</c><00:08:30.400><c> the</c><00:08:30.560><c> word</c>

00:08:31.110 --> 00:08:31.120 align:start position:0%
include within our c program is the word
 

00:08:31.120 --> 00:08:32.870 align:start position:0%
include within our c program is the word
hashtag<00:08:31.840><c> include</c>

00:08:32.870 --> 00:08:32.880 align:start position:0%
hashtag include
 

00:08:32.880 --> 00:08:35.990 align:start position:0%
hashtag include
so<00:08:33.120><c> this</c><00:08:33.279><c> is</c><00:08:33.519><c> a</c><00:08:33.959><c> pre-processor</c><00:08:34.959><c> command</c><00:08:35.760><c> that</c>

00:08:35.990 --> 00:08:36.000 align:start position:0%
so this is a pre-processor command that
 

00:08:36.000 --> 00:08:38.230 align:start position:0%
so this is a pre-processor command that
tells<00:08:36.320><c> the</c><00:08:36.399><c> compiler</c><00:08:37.279><c> to</c><00:08:37.519><c> include</c><00:08:38.000><c> the</c>

00:08:38.230 --> 00:08:38.240 align:start position:0%
tells the compiler to include the
 

00:08:38.240 --> 00:08:40.949 align:start position:0%
tells the compiler to include the
contents<00:08:38.800><c> of</c><00:08:38.959><c> a</c><00:08:39.039><c> file</c><00:08:39.839><c> and</c><00:08:40.159><c> the</c><00:08:40.320><c> file</c><00:08:40.640><c> that</c><00:08:40.800><c> we</c>

00:08:40.949 --> 00:08:40.959 align:start position:0%
contents of a file and the file that we
 

00:08:40.959 --> 00:08:43.190 align:start position:0%
contents of a file and the file that we
would<00:08:41.120><c> like</c><00:08:41.279><c> to</c><00:08:41.440><c> include</c><00:08:42.320><c> is</c><00:08:42.560><c> within</c><00:08:42.959><c> angle</c>

00:08:43.190 --> 00:08:43.200 align:start position:0%
would like to include is within angle
 

00:08:43.200 --> 00:08:44.310 align:start position:0%
would like to include is within angle
brackets

00:08:44.310 --> 00:08:44.320 align:start position:0%
brackets
 

00:08:44.320 --> 00:08:49.670 align:start position:0%
brackets
std<00:08:45.200><c> for</c><00:08:45.440><c> standard</c><00:08:46.160><c> io</c><00:08:46.880><c> input</c><00:08:47.440><c> output</c><00:08:48.320><c> dot</c><00:08:48.800><c> h</c>

00:08:49.670 --> 00:08:49.680 align:start position:0%
std for standard io input output dot h
 

00:08:49.680 --> 00:08:51.829 align:start position:0%
std for standard io input output dot h
this<00:08:49.920><c> file</c><00:08:50.240><c> contains</c><00:08:50.800><c> some</c><00:08:50.959><c> useful</c><00:08:51.360><c> functions</c>

00:08:51.829 --> 00:08:51.839 align:start position:0%
this file contains some useful functions
 

00:08:51.839 --> 00:08:53.910 align:start position:0%
this file contains some useful functions
related<00:08:52.320><c> to</c><00:08:52.640><c> input</c><00:08:53.040><c> and</c><00:08:53.200><c> output</c><00:08:53.600><c> so</c><00:08:53.760><c> we'll</c>

00:08:53.910 --> 00:08:53.920 align:start position:0%
related to input and output so we'll
 

00:08:53.920 --> 00:08:54.870 align:start position:0%
related to input and output so we'll
need<00:08:54.160><c> that</c>

00:08:54.870 --> 00:08:54.880 align:start position:0%
need that
 

00:08:54.880 --> 00:08:57.110 align:start position:0%
need that
now<00:08:55.120><c> the</c><00:08:55.360><c> entry</c><00:08:55.760><c> point</c><00:08:56.000><c> of</c><00:08:56.160><c> our</c><00:08:56.320><c> program</c><00:08:56.880><c> is</c>

00:08:57.110 --> 00:08:57.120 align:start position:0%
now the entry point of our program is
 

00:08:57.120 --> 00:08:59.269 align:start position:0%
now the entry point of our program is
the<00:08:57.279><c> main</c><00:08:57.519><c> function</c><00:08:58.080><c> type</c><00:08:58.399><c> int</c>

00:08:59.269 --> 00:08:59.279 align:start position:0%
the main function type int
 

00:08:59.279 --> 00:09:02.550 align:start position:0%
the main function type int
main<00:08:59.839><c> parentheses</c><00:09:00.720><c> curly</c><00:09:01.040><c> braces</c><00:09:02.000><c> anything</c>

00:09:02.550 --> 00:09:02.560 align:start position:0%
main parentheses curly braces anything
 

00:09:02.560 --> 00:09:04.949 align:start position:0%
main parentheses curly braces anything
within<00:09:03.120><c> our</c><00:09:03.360><c> main</c><00:09:03.600><c> function</c><00:09:04.320><c> is</c><00:09:04.560><c> read</c>

00:09:04.949 --> 00:09:04.959 align:start position:0%
within our main function is read
 

00:09:04.959 --> 00:09:06.949 align:start position:0%
within our main function is read
procedurally<00:09:05.920><c> starting</c><00:09:06.240><c> from</c><00:09:06.399><c> the</c><00:09:06.560><c> top</c><00:09:06.880><c> and</c>

00:09:06.949 --> 00:09:06.959 align:start position:0%
procedurally starting from the top and
 

00:09:06.959 --> 00:09:09.190 align:start position:0%
procedurally starting from the top and
working<00:09:07.279><c> its</c><00:09:07.440><c> way</c><00:09:07.600><c> down</c><00:09:08.160><c> so</c><00:09:08.399><c> anything</c><00:09:08.720><c> within</c>

00:09:09.190 --> 00:09:09.200 align:start position:0%
working its way down so anything within
 

00:09:09.200 --> 00:09:11.190 align:start position:0%
working its way down so anything within
this<00:09:09.360><c> set</c><00:09:09.519><c> of</c><00:09:09.680><c> curly</c><00:09:10.000><c> braces</c><00:09:10.480><c> is</c><00:09:10.560><c> within</c><00:09:11.040><c> the</c>

00:09:11.190 --> 00:09:11.200 align:start position:0%
this set of curly braces is within the
 

00:09:11.200 --> 00:09:13.190 align:start position:0%
this set of curly braces is within the
main<00:09:11.519><c> function</c><00:09:12.160><c> and</c><00:09:12.399><c> at</c><00:09:12.560><c> the</c><00:09:12.640><c> end</c><00:09:12.800><c> of</c><00:09:12.880><c> our</c><00:09:12.959><c> main</c>

00:09:13.190 --> 00:09:13.200 align:start position:0%
main function and at the end of our main
 

00:09:13.200 --> 00:09:14.550 align:start position:0%
main function and at the end of our main
function<00:09:13.600><c> we're</c><00:09:13.760><c> going</c><00:09:13.920><c> to</c><00:09:14.080><c> add</c><00:09:14.399><c> the</c>

00:09:14.550 --> 00:09:14.560 align:start position:0%
function we're going to add the
 

00:09:14.560 --> 00:09:18.550 align:start position:0%
function we're going to add the
statement<00:09:15.120><c> return</c><00:09:15.920><c> 0</c><00:09:16.640><c> semicolon</c><00:09:17.600><c> a</c><00:09:17.839><c> semicolon</c>

00:09:18.550 --> 00:09:18.560 align:start position:0%
statement return 0 semicolon a semicolon
 

00:09:18.560 --> 00:09:20.630 align:start position:0%
statement return 0 semicolon a semicolon
is<00:09:18.640><c> used</c><00:09:18.959><c> to</c><00:09:19.200><c> terminate</c><00:09:19.839><c> statements</c><00:09:20.320><c> kind</c><00:09:20.560><c> of</c>

00:09:20.630 --> 00:09:20.640 align:start position:0%
is used to terminate statements kind of
 

00:09:20.640 --> 00:09:22.630 align:start position:0%
is used to terminate statements kind of
like<00:09:20.880><c> a</c><00:09:20.959><c> period</c><00:09:21.360><c> at</c><00:09:21.440><c> the</c><00:09:21.519><c> end</c><00:09:21.600><c> of</c><00:09:21.680><c> a</c><00:09:21.839><c> sentence</c>

00:09:22.630 --> 00:09:22.640 align:start position:0%
like a period at the end of a sentence
 

00:09:22.640 --> 00:09:24.389 align:start position:0%
like a period at the end of a sentence
at<00:09:22.800><c> the</c><00:09:22.880><c> end</c><00:09:23.040><c> of</c><00:09:23.120><c> our</c><00:09:23.279><c> main</c><00:09:23.519><c> function</c><00:09:23.920><c> we</c><00:09:24.080><c> have</c>

00:09:24.389 --> 00:09:24.399 align:start position:0%
at the end of our main function we have
 

00:09:24.399 --> 00:09:27.269 align:start position:0%
at the end of our main function we have
this<00:09:24.640><c> return</c><00:09:25.360><c> zero</c><00:09:25.680><c> statement</c><00:09:26.399><c> this</c><00:09:26.640><c> returns</c>

00:09:27.269 --> 00:09:27.279 align:start position:0%
this return zero statement this returns
 

00:09:27.279 --> 00:09:29.990 align:start position:0%
this return zero statement this returns
the<00:09:27.519><c> exit</c><00:09:27.839><c> status</c><00:09:28.320><c> of</c><00:09:28.480><c> our</c><00:09:28.640><c> program</c><00:09:29.360><c> we</c><00:09:29.519><c> return</c>

00:09:29.990 --> 00:09:30.000 align:start position:0%
the exit status of our program we return
 

00:09:30.000 --> 00:09:32.710 align:start position:0%
the exit status of our program we return
a<00:09:30.160><c> zero</c><00:09:30.720><c> if</c><00:09:31.040><c> our</c><00:09:31.279><c> program</c><00:09:31.760><c> runs</c><00:09:32.000><c> successfully</c>

00:09:32.710 --> 00:09:32.720 align:start position:0%
a zero if our program runs successfully
 

00:09:32.720 --> 00:09:35.110 align:start position:0%
a zero if our program runs successfully
with<00:09:32.959><c> no</c><00:09:33.200><c> errors</c><00:09:33.920><c> if</c><00:09:34.080><c> there</c><00:09:34.240><c> is</c><00:09:34.399><c> an</c><00:09:34.560><c> error</c><00:09:34.880><c> then</c>

00:09:35.110 --> 00:09:35.120 align:start position:0%
with no errors if there is an error then
 

00:09:35.120 --> 00:09:37.670 align:start position:0%
with no errors if there is an error then
we'll<00:09:35.279><c> return</c><00:09:35.760><c> a</c><00:09:36.000><c> 1.</c><00:09:36.640><c> so</c><00:09:36.880><c> now</c><00:09:37.120><c> we</c><00:09:37.279><c> can</c><00:09:37.440><c> add</c>

00:09:37.670 --> 00:09:37.680 align:start position:0%
we'll return a 1. so now we can add
 

00:09:37.680 --> 00:09:39.509 align:start position:0%
we'll return a 1. so now we can add
anything<00:09:38.000><c> that</c><00:09:38.080><c> we</c><00:09:38.240><c> want</c><00:09:38.560><c> within</c><00:09:39.040><c> this</c><00:09:39.279><c> main</c>

00:09:39.509 --> 00:09:39.519 align:start position:0%
anything that we want within this main
 

00:09:39.519 --> 00:09:42.150 align:start position:0%
anything that we want within this main
function<00:09:40.080><c> but</c><00:09:40.320><c> we'll</c><00:09:40.560><c> need</c><00:09:40.959><c> return</c><00:09:41.440><c> 0</c><00:09:41.839><c> at</c><00:09:42.000><c> the</c>

00:09:42.150 --> 00:09:42.160 align:start position:0%
function but we'll need return 0 at the
 

00:09:42.160 --> 00:09:44.389 align:start position:0%
function but we'll need return 0 at the
end<00:09:42.399><c> to</c><00:09:42.720><c> check</c><00:09:42.959><c> for</c><00:09:43.200><c> any</c><00:09:43.360><c> errors</c>

00:09:44.389 --> 00:09:44.399 align:start position:0%
end to check for any errors
 

00:09:44.399 --> 00:09:46.310 align:start position:0%
end to check for any errors
so<00:09:44.560><c> let's</c><00:09:44.880><c> print</c><00:09:45.120><c> something</c><00:09:45.440><c> to</c><00:09:45.680><c> our</c><00:09:45.839><c> console</c>

00:09:46.310 --> 00:09:46.320 align:start position:0%
so let's print something to our console
 

00:09:46.320 --> 00:09:48.790 align:start position:0%
so let's print something to our console
as<00:09:46.560><c> output</c><00:09:47.360><c> so</c><00:09:47.600><c> to</c><00:09:47.760><c> display</c><00:09:48.160><c> something</c><00:09:48.640><c> we're</c>

00:09:48.790 --> 00:09:48.800 align:start position:0%
as output so to display something we're
 

00:09:48.800 --> 00:09:51.750 align:start position:0%
as output so to display something we're
going<00:09:49.040><c> to</c><00:09:49.200><c> type</c><00:09:49.600><c> print</c><00:09:50.320><c> f</c><00:09:50.959><c> parentheses</c>

00:09:51.750 --> 00:09:51.760 align:start position:0%
going to type print f parentheses
 

00:09:51.760 --> 00:09:53.670 align:start position:0%
going to type print f parentheses
semicolon<00:09:52.399><c> because</c><00:09:52.720><c> we</c><00:09:52.880><c> end</c><00:09:53.120><c> our</c><00:09:53.200><c> statements</c>

00:09:53.670 --> 00:09:53.680 align:start position:0%
semicolon because we end our statements
 

00:09:53.680 --> 00:09:55.590 align:start position:0%
semicolon because we end our statements
with<00:09:53.839><c> a</c><00:09:54.000><c> semicolon</c><00:09:54.959><c> and</c><00:09:55.200><c> within</c><00:09:55.519><c> the</c>

00:09:55.590 --> 00:09:55.600 align:start position:0%
with a semicolon and within the
 

00:09:55.600 --> 00:09:57.509 align:start position:0%
with a semicolon and within the
parentheses<00:09:56.240><c> add</c><00:09:56.480><c> a</c><00:09:56.640><c> set</c><00:09:56.800><c> of</c><00:09:56.880><c> double</c><00:09:57.200><c> quotes</c>

00:09:57.509 --> 00:09:57.519 align:start position:0%
parentheses add a set of double quotes
 

00:09:57.519 --> 00:09:59.829 align:start position:0%
parentheses add a set of double quotes
because<00:09:57.920><c> we</c><00:09:58.080><c> would</c><00:09:58.240><c> like</c><00:09:58.560><c> to</c><00:09:59.040><c> literally</c><00:09:59.600><c> print</c>

00:09:59.829 --> 00:09:59.839 align:start position:0%
because we would like to literally print
 

00:09:59.839 --> 00:10:01.430 align:start position:0%
because we would like to literally print
something<00:10:00.480><c> and</c><00:10:00.560><c> you</c><00:10:00.640><c> can</c><00:10:00.800><c> type</c><00:10:01.040><c> in</c><00:10:01.120><c> whatever</c>

00:10:01.430 --> 00:10:01.440 align:start position:0%
something and you can type in whatever
 

00:10:01.440 --> 00:10:02.710 align:start position:0%
something and you can type in whatever
you<00:10:01.519><c> want</c><00:10:01.760><c> let's</c><00:10:02.000><c> say</c>

00:10:02.710 --> 00:10:02.720 align:start position:0%
you want let's say
 

00:10:02.720 --> 00:10:04.870 align:start position:0%
you want let's say
i<00:10:03.279><c> like</c><00:10:03.760><c> pizza</c>

00:10:04.870 --> 00:10:04.880 align:start position:0%
i like pizza
 

00:10:04.880 --> 00:10:06.470 align:start position:0%
i like pizza
then<00:10:05.120><c> to</c><00:10:05.360><c> run</c><00:10:05.519><c> this</c><00:10:05.760><c> code</c><00:10:06.000><c> you</c><00:10:06.079><c> can</c><00:10:06.240><c> either</c>

00:10:06.470 --> 00:10:06.480 align:start position:0%
then to run this code you can either
 

00:10:06.480 --> 00:10:08.790 align:start position:0%
then to run this code you can either
right<00:10:06.720><c> click</c><00:10:07.120><c> then</c><00:10:07.360><c> go</c><00:10:07.519><c> to</c><00:10:07.760><c> run</c><00:10:08.000><c> code</c>

00:10:08.790 --> 00:10:08.800 align:start position:0%
right click then go to run code
 

00:10:08.800 --> 00:10:11.670 align:start position:0%
right click then go to run code
alternatively<00:10:09.680><c> there</c><00:10:10.000><c> is</c><00:10:10.320><c> a</c><00:10:10.880><c> run</c><00:10:11.120><c> code</c><00:10:11.360><c> button</c>

00:10:11.670 --> 00:10:11.680 align:start position:0%
alternatively there is a run code button
 

00:10:11.680 --> 00:10:13.990 align:start position:0%
alternatively there is a run code button
in<00:10:11.760><c> the</c><00:10:11.839><c> top</c><00:10:12.079><c> right</c><00:10:12.399><c> corner</c><00:10:12.720><c> of</c><00:10:12.880><c> the</c><00:10:13.040><c> s</c><00:10:13.279><c> code</c><00:10:13.839><c> so</c>

00:10:13.990 --> 00:10:14.000 align:start position:0%
in the top right corner of the s code so
 

00:10:14.000 --> 00:10:16.470 align:start position:0%
in the top right corner of the s code so
after<00:10:14.399><c> running</c><00:10:14.640><c> this</c><00:10:14.880><c> code</c><00:10:15.519><c> this</c><00:10:15.760><c> displays</c><00:10:16.320><c> my</c>

00:10:16.470 --> 00:10:16.480 align:start position:0%
after running this code this displays my
 

00:10:16.480 --> 00:10:19.269 align:start position:0%
after running this code this displays my
output<00:10:17.200><c> i</c><00:10:17.360><c> like</c><00:10:17.680><c> pizza</c><00:10:18.560><c> so</c><00:10:18.800><c> what</c><00:10:18.959><c> if</c><00:10:19.120><c> i</c><00:10:19.200><c> would</c>

00:10:19.269 --> 00:10:19.279 align:start position:0%
output i like pizza so what if i would
 

00:10:19.279 --> 00:10:21.190 align:start position:0%
output i like pizza so what if i would
like<00:10:19.519><c> to</c><00:10:19.600><c> add</c><00:10:19.839><c> a</c><00:10:20.000><c> second</c><00:10:20.320><c> line</c><00:10:20.720><c> well</c><00:10:20.959><c> i</c><00:10:21.040><c> would</c>

00:10:21.190 --> 00:10:21.200 align:start position:0%
like to add a second line well i would
 

00:10:21.200 --> 00:10:23.350 align:start position:0%
like to add a second line well i would
just<00:10:21.360><c> follow</c><00:10:21.760><c> these</c><00:10:21.920><c> steps</c><00:10:22.240><c> again</c><00:10:22.720><c> so</c><00:10:22.959><c> i</c><00:10:23.040><c> need</c>

00:10:23.350 --> 00:10:23.360 align:start position:0%
just follow these steps again so i need
 

00:10:23.360 --> 00:10:25.430 align:start position:0%
just follow these steps again so i need
another<00:10:23.839><c> printf</c><00:10:24.399><c> statement</c>

00:10:25.430 --> 00:10:25.440 align:start position:0%
another printf statement
 

00:10:25.440 --> 00:10:29.190 align:start position:0%
another printf statement
print<00:10:26.160><c> f</c><00:10:26.560><c> parentheses</c><00:10:27.360><c> semicolon</c><00:10:28.480><c> any</c><00:10:28.720><c> text</c><00:10:29.120><c> i</c>

00:10:29.190 --> 00:10:29.200 align:start position:0%
print f parentheses semicolon any text i
 

00:10:29.200 --> 00:10:30.710 align:start position:0%
print f parentheses semicolon any text i
would<00:10:29.360><c> like</c><00:10:29.519><c> to</c><00:10:29.680><c> display</c><00:10:30.079><c> i'll</c><00:10:30.320><c> place</c><00:10:30.560><c> that</c>

00:10:30.710 --> 00:10:30.720 align:start position:0%
would like to display i'll place that
 

00:10:30.720 --> 00:10:33.190 align:start position:0%
would like to display i'll place that
within<00:10:31.120><c> a</c><00:10:31.279><c> set</c><00:10:31.440><c> of</c><00:10:31.519><c> double</c><00:10:31.839><c> quotes</c><00:10:32.640><c> this</c><00:10:32.880><c> time</c>

00:10:33.190 --> 00:10:33.200 align:start position:0%
within a set of double quotes this time
 

00:10:33.200 --> 00:10:36.230 align:start position:0%
within a set of double quotes this time
let's<00:10:33.440><c> add</c><00:10:33.760><c> a</c><00:10:33.920><c> second</c><00:10:34.240><c> line</c><00:10:34.880><c> i</c><00:10:35.040><c> like</c><00:10:35.360><c> pizza</c>

00:10:36.230 --> 00:10:36.240 align:start position:0%
let's add a second line i like pizza
 

00:10:36.240 --> 00:10:37.990 align:start position:0%
let's add a second line i like pizza
it's<00:10:37.040><c> really</c>

00:10:37.990 --> 00:10:38.000 align:start position:0%
it's really
 

00:10:38.000 --> 00:10:39.269 align:start position:0%
it's really
good

00:10:39.269 --> 00:10:39.279 align:start position:0%
good
 

00:10:39.279 --> 00:10:40.790 align:start position:0%
good
and<00:10:39.360><c> then</c><00:10:39.600><c> save</c>

00:10:40.790 --> 00:10:40.800 align:start position:0%
and then save
 

00:10:40.800 --> 00:10:42.630 align:start position:0%
and then save
all<00:10:40.959><c> right</c><00:10:41.440><c> and</c><00:10:41.760><c> this</c><00:10:41.920><c> is</c><00:10:42.079><c> what</c><00:10:42.160><c> this</c><00:10:42.399><c> looks</c>

00:10:42.630 --> 00:10:42.640 align:start position:0%
all right and this is what this looks
 

00:10:42.640 --> 00:10:44.790 align:start position:0%
all right and this is what this looks
like

00:10:44.790 --> 00:10:44.800 align:start position:0%
like
 

00:10:44.800 --> 00:10:47.670 align:start position:0%
like
i<00:10:45.040><c> like</c><00:10:45.279><c> pizza</c><00:10:45.920><c> it's</c><00:10:46.160><c> really</c><00:10:46.399><c> good</c><00:10:47.040><c> so</c><00:10:47.279><c> this</c><00:10:47.440><c> is</c>

00:10:47.670 --> 00:10:47.680 align:start position:0%
i like pizza it's really good so this is
 

00:10:47.680 --> 00:10:50.230 align:start position:0%
i like pizza it's really good so this is
all<00:10:48.240><c> one</c><00:10:48.640><c> long</c><00:10:49.120><c> line</c><00:10:49.440><c> what</c><00:10:49.600><c> if</c><00:10:49.760><c> i</c><00:10:49.839><c> would</c><00:10:50.000><c> like</c>

00:10:50.230 --> 00:10:50.240 align:start position:0%
all one long line what if i would like
 

00:10:50.240 --> 00:10:52.710 align:start position:0%
all one long line what if i would like
my<00:10:50.480><c> second</c><00:10:50.800><c> line</c><00:10:51.040><c> of</c><00:10:51.120><c> text</c><00:10:51.519><c> on</c><00:10:51.680><c> the</c><00:10:51.839><c> next</c><00:10:52.160><c> line</c>

00:10:52.710 --> 00:10:52.720 align:start position:0%
my second line of text on the next line
 

00:10:52.720 --> 00:10:55.190 align:start position:0%
my second line of text on the next line
well<00:10:52.959><c> i</c><00:10:53.040><c> can</c><00:10:53.200><c> add</c><00:10:53.519><c> an</c><00:10:53.680><c> escape</c><00:10:54.000><c> sequence</c><00:10:54.560><c> for</c><00:10:54.800><c> a</c>

00:10:55.190 --> 00:10:55.200 align:start position:0%
well i can add an escape sequence for a
 

00:10:55.200 --> 00:10:57.750 align:start position:0%
well i can add an escape sequence for a
new<00:10:55.440><c> line</c><00:10:55.680><c> character</c><00:10:56.480><c> so</c><00:10:56.720><c> at</c><00:10:56.800><c> the</c><00:10:56.959><c> end</c><00:10:57.360><c> of</c><00:10:57.519><c> my</c>

00:10:57.750 --> 00:10:57.760 align:start position:0%
new line character so at the end of my
 

00:10:57.760 --> 00:10:59.509 align:start position:0%
new line character so at the end of my
printf<00:10:58.240><c> statement</c><00:10:58.720><c> within</c><00:10:59.120><c> the</c><00:10:59.200><c> double</c>

00:10:59.509 --> 00:10:59.519 align:start position:0%
printf statement within the double
 

00:10:59.519 --> 00:11:01.350 align:start position:0%
printf statement within the double
quotes<00:11:00.160><c> i'll</c><00:11:00.399><c> add</c>

00:11:01.350 --> 00:11:01.360 align:start position:0%
quotes i'll add
 

00:11:01.360 --> 00:11:04.470 align:start position:0%
quotes i'll add
backslash<00:11:02.160><c> n</c><00:11:02.480><c> for</c><00:11:02.800><c> a</c><00:11:02.959><c> new</c><00:11:03.200><c> line</c><00:11:03.519><c> character</c>

00:11:04.470 --> 00:11:04.480 align:start position:0%
backslash n for a new line character
 

00:11:04.480 --> 00:11:06.710 align:start position:0%
backslash n for a new line character
and<00:11:04.640><c> let's</c><00:11:04.880><c> try</c><00:11:05.120><c> that</c><00:11:05.279><c> again</c><00:11:05.680><c> so</c><00:11:05.920><c> i'm</c><00:11:06.079><c> going</c><00:11:06.320><c> to</c>

00:11:06.710 --> 00:11:06.720 align:start position:0%
and let's try that again so i'm going to
 

00:11:06.720 --> 00:11:09.269 align:start position:0%
and let's try that again so i'm going to
clear<00:11:06.959><c> my</c><00:11:07.200><c> output</c><00:11:08.000><c> make</c><00:11:08.160><c> sure</c><00:11:08.399><c> i</c><00:11:08.560><c> save</c><00:11:09.120><c> and</c>

00:11:09.269 --> 00:11:09.279 align:start position:0%
clear my output make sure i save and
 

00:11:09.279 --> 00:11:11.590 align:start position:0%
clear my output make sure i save and
then<00:11:09.440><c> run</c><00:11:09.680><c> this</c><00:11:09.839><c> again</c>

00:11:11.590 --> 00:11:11.600 align:start position:0%
then run this again
 

00:11:11.600 --> 00:11:14.069 align:start position:0%
then run this again
i<00:11:11.839><c> like</c><00:11:12.079><c> pizza</c><00:11:12.800><c> it's</c><00:11:13.040><c> really</c><00:11:13.360><c> good</c><00:11:13.839><c> and</c><00:11:13.920><c> then</c>

00:11:14.069 --> 00:11:14.079 align:start position:0%
i like pizza it's really good and then
 

00:11:14.079 --> 00:11:15.750 align:start position:0%
i like pizza it's really good and then
we<00:11:14.240><c> have</c><00:11:14.320><c> that</c><00:11:14.480><c> extra</c><00:11:14.880><c> space</c><00:11:15.200><c> at</c><00:11:15.360><c> the</c><00:11:15.440><c> bottom</c>

00:11:15.750 --> 00:11:15.760 align:start position:0%
we have that extra space at the bottom
 

00:11:15.760 --> 00:11:17.590 align:start position:0%
we have that extra space at the bottom
because<00:11:16.000><c> we</c><00:11:16.160><c> added</c><00:11:16.480><c> an</c><00:11:16.640><c> additional</c><00:11:17.120><c> new</c><00:11:17.279><c> line</c>

00:11:17.590 --> 00:11:17.600 align:start position:0%
because we added an additional new line
 

00:11:17.600 --> 00:11:19.509 align:start position:0%
because we added an additional new line
character<00:11:18.079><c> which</c><00:11:18.320><c> is</c><00:11:18.480><c> optional</c>

00:11:19.509 --> 00:11:19.519 align:start position:0%
character which is optional
 

00:11:19.519 --> 00:11:21.430 align:start position:0%
character which is optional
also<00:11:19.920><c> take</c><00:11:20.160><c> notice</c><00:11:20.480><c> too</c><00:11:20.720><c> that</c><00:11:20.880><c> we</c><00:11:21.040><c> have</c><00:11:21.279><c> this</c>

00:11:21.430 --> 00:11:21.440 align:start position:0%
also take notice too that we have this
 

00:11:21.440 --> 00:11:25.110 align:start position:0%
also take notice too that we have this
message<00:11:22.160><c> exited</c><00:11:22.800><c> with</c><00:11:23.200><c> code</c><00:11:23.600><c> equal</c><00:11:24.000><c> zero</c><00:11:24.720><c> so</c>

00:11:25.110 --> 00:11:25.120 align:start position:0%
message exited with code equal zero so
 

00:11:25.120 --> 00:11:27.030 align:start position:0%
message exited with code equal zero so
if<00:11:25.279><c> there</c><00:11:25.519><c> are</c><00:11:25.680><c> no</c><00:11:25.920><c> errors</c><00:11:26.320><c> and</c><00:11:26.480><c> your</c><00:11:26.640><c> program</c>

00:11:27.030 --> 00:11:27.040 align:start position:0%
if there are no errors and your program
 

00:11:27.040 --> 00:11:29.190 align:start position:0%
if there are no errors and your program
runs<00:11:27.279><c> successfully</c><00:11:28.240><c> this</c><00:11:28.480><c> function</c><00:11:29.040><c> will</c>

00:11:29.190 --> 00:11:29.200 align:start position:0%
runs successfully this function will
 

00:11:29.200 --> 00:11:31.670 align:start position:0%
runs successfully this function will
return<00:11:29.760><c> zero</c><00:11:30.480><c> if</c><00:11:30.640><c> there</c><00:11:30.800><c> is</c><00:11:30.959><c> an</c><00:11:31.120><c> error</c><00:11:31.440><c> well</c>

00:11:31.670 --> 00:11:31.680 align:start position:0%
return zero if there is an error well
 

00:11:31.680 --> 00:11:34.069 align:start position:0%
return zero if there is an error well
then<00:11:32.000><c> this</c><00:11:32.160><c> will</c><00:11:32.399><c> return</c><00:11:33.040><c> one</c><00:11:33.600><c> so</c><00:11:33.839><c> let's</c>

00:11:34.069 --> 00:11:34.079 align:start position:0%
then this will return one so let's
 

00:11:34.079 --> 00:11:36.150 align:start position:0%
then this will return one so let's
misspell<00:11:34.640><c> something</c><00:11:34.959><c> let's</c><00:11:35.200><c> say</c><00:11:35.360><c> instead</c><00:11:35.760><c> of</c>

00:11:36.150 --> 00:11:36.160 align:start position:0%
misspell something let's say instead of
 

00:11:36.160 --> 00:11:38.230 align:start position:0%
misspell something let's say instead of
printf<00:11:36.720><c> we</c><00:11:36.800><c> just</c><00:11:37.040><c> have</c><00:11:37.279><c> print</c>

00:11:38.230 --> 00:11:38.240 align:start position:0%
printf we just have print
 

00:11:38.240 --> 00:11:41.990 align:start position:0%
printf we just have print
so<00:11:38.640><c> save</c><00:11:38.959><c> and</c><00:11:39.120><c> then</c><00:11:39.279><c> run</c><00:11:39.440><c> this</c><00:11:39.680><c> again</c>

00:11:41.990 --> 00:11:42.000 align:start position:0%
so save and then run this again
 

00:11:42.000 --> 00:11:43.590 align:start position:0%
so save and then run this again
okay<00:11:42.320><c> it</c><00:11:42.399><c> looks</c><00:11:42.560><c> like</c><00:11:42.800><c> we</c><00:11:42.959><c> have</c><00:11:43.120><c> an</c><00:11:43.279><c> error</c>

00:11:43.590 --> 00:11:43.600 align:start position:0%
okay it looks like we have an error
 

00:11:43.600 --> 00:11:46.069 align:start position:0%
okay it looks like we have an error
exited<00:11:44.160><c> with</c><00:11:44.399><c> code</c><00:11:44.800><c> equals</c><00:11:45.200><c> one</c>

00:11:46.069 --> 00:11:46.079 align:start position:0%
exited with code equals one
 

00:11:46.079 --> 00:11:48.310 align:start position:0%
exited with code equals one
all<00:11:46.240><c> right</c><00:11:46.480><c> people</c><00:11:46.959><c> well</c><00:11:47.360><c> that's</c><00:11:47.600><c> your</c><00:11:47.839><c> first</c>

00:11:48.310 --> 00:11:48.320 align:start position:0%
all right people well that's your first
 

00:11:48.320 --> 00:11:50.550 align:start position:0%
all right people well that's your first
c<00:11:48.720><c> program</c><00:11:49.200><c> in</c><00:11:49.360><c> the</c><00:11:49.440><c> next</c><00:11:49.680><c> video</c><00:11:50.079><c> we'll</c><00:11:50.240><c> cover</c>

00:11:50.550 --> 00:11:50.560 align:start position:0%
c program in the next video we'll cover
 

00:11:50.560 --> 00:11:53.350 align:start position:0%
c program in the next video we'll cover
escape<00:11:50.959><c> sequences</c><00:11:51.680><c> and</c><00:11:52.000><c> comments</c><00:11:52.880><c> i'll</c><00:11:53.120><c> post</c>

00:11:53.350 --> 00:11:53.360 align:start position:0%
escape sequences and comments i'll post
 

00:11:53.360 --> 00:11:55.110 align:start position:0%
escape sequences and comments i'll post
this<00:11:53.600><c> code</c><00:11:53.839><c> to</c><00:11:54.000><c> the</c><00:11:54.160><c> comments</c><00:11:54.560><c> section</c><00:11:54.880><c> down</c>

00:11:55.110 --> 00:11:55.120 align:start position:0%
this code to the comments section down
 

00:11:55.120 --> 00:11:56.949 align:start position:0%
this code to the comments section down
below<00:11:55.519><c> and</c><00:11:55.760><c> pin</c><00:11:56.000><c> it</c><00:11:56.079><c> to</c><00:11:56.240><c> the</c><00:11:56.320><c> top</c><00:11:56.639><c> if</c><00:11:56.720><c> you</c><00:11:56.880><c> would</c>

00:11:56.949 --> 00:11:56.959 align:start position:0%
below and pin it to the top if you would
 

00:11:56.959 --> 00:11:59.430 align:start position:0%
below and pin it to the top if you would
like<00:11:57.200><c> a</c><00:11:57.440><c> copy</c><00:11:57.839><c> for</c><00:11:58.079><c> yourself</c><00:11:58.720><c> but</c><00:11:58.959><c> yeah</c><00:11:59.200><c> that</c>

00:11:59.430 --> 00:11:59.440 align:start position:0%
like a copy for yourself but yeah that
 

00:11:59.440 --> 00:12:02.389 align:start position:0%
like a copy for yourself but yeah that
is<00:11:59.680><c> your</c><00:12:00.000><c> first</c><00:12:00.480><c> c</c><00:12:00.880><c> program</c>

00:12:02.389 --> 00:12:02.399 align:start position:0%
is your first c program
 

00:12:02.399 --> 00:12:04.790 align:start position:0%
is your first c program
hey<00:12:02.720><c> you</c><00:12:03.279><c> yeah</c><00:12:03.519><c> i'm</c><00:12:03.680><c> talking</c><00:12:04.000><c> to</c><00:12:04.079><c> you</c><00:12:04.560><c> if</c><00:12:04.639><c> you</c>

00:12:04.790 --> 00:12:04.800 align:start position:0%
hey you yeah i'm talking to you if you
 

00:12:04.800 --> 00:12:07.030 align:start position:0%
hey you yeah i'm talking to you if you
learned<00:12:05.040><c> something</c><00:12:05.360><c> new</c><00:12:05.839><c> then</c><00:12:06.079><c> help</c><00:12:06.320><c> me</c><00:12:06.720><c> help</c>

00:12:07.030 --> 00:12:07.040 align:start position:0%
learned something new then help me help
 

00:12:07.040 --> 00:12:09.750 align:start position:0%
learned something new then help me help
you<00:12:07.519><c> in</c><00:12:07.680><c> three</c><00:12:07.920><c> easy</c><00:12:08.240><c> steps</c><00:12:08.880><c> by</c><00:12:09.120><c> smashing</c><00:12:09.600><c> that</c>

00:12:09.750 --> 00:12:09.760 align:start position:0%
you in three easy steps by smashing that
 

00:12:09.760 --> 00:12:12.069 align:start position:0%
you in three easy steps by smashing that
like<00:12:10.079><c> button</c><00:12:10.560><c> drop</c><00:12:10.880><c> a</c><00:12:10.959><c> comment</c><00:12:11.279><c> down</c><00:12:11.519><c> below</c>

00:12:12.069 --> 00:12:12.079 align:start position:0%
like button drop a comment down below
 

00:12:12.079 --> 00:12:13.829 align:start position:0%
like button drop a comment down below
and<00:12:12.320><c> subscribe</c><00:12:12.880><c> if</c><00:12:12.959><c> you'd</c><00:12:13.120><c> like</c><00:12:13.279><c> to</c><00:12:13.440><c> become</c><00:12:13.680><c> a</c>

00:12:13.829 --> 00:12:13.839 align:start position:0%
and subscribe if you'd like to become a
 

00:12:13.839 --> 00:12:18.200 align:start position:0%
and subscribe if you'd like to become a
fellow<00:12:14.160><c> bro</c>

00:12:18.200 --> 00:12:18.210 align:start position:0%
 
 

00:12:18.210 --> 00:12:38.629 align:start position:0%
 
[Music]

00:12:38.629 --> 00:12:38.639 align:start position:0%
 
 

00:12:38.639 --> 00:12:41.030 align:start position:0%
 
all<00:12:38.959><c> right</c><00:12:39.279><c> everybody</c><00:12:39.760><c> welcome</c><00:12:40.160><c> back</c><00:12:40.560><c> in</c><00:12:40.800><c> this</c>

00:12:41.030 --> 00:12:41.040 align:start position:0%
all right everybody welcome back in this
 

00:12:41.040 --> 00:12:42.470 align:start position:0%
all right everybody welcome back in this
video<00:12:41.279><c> i'm</c><00:12:41.360><c> going</c><00:12:41.519><c> to</c><00:12:41.600><c> show</c><00:12:41.760><c> you</c><00:12:42.000><c> all</c><00:12:42.160><c> how</c><00:12:42.320><c> we</c>

00:12:42.470 --> 00:12:42.480 align:start position:0%
video i'm going to show you all how we
 

00:12:42.480 --> 00:12:45.269 align:start position:0%
video i'm going to show you all how we
can<00:12:42.720><c> compile</c><00:12:43.279><c> and</c><00:12:43.519><c> run</c><00:12:43.839><c> a</c><00:12:44.079><c> c</c><00:12:44.320><c> program</c><00:12:44.959><c> using</c>

00:12:45.269 --> 00:12:45.279 align:start position:0%
can compile and run a c program using
 

00:12:45.279 --> 00:12:47.990 align:start position:0%
can compile and run a c program using
command<00:12:45.680><c> prompt</c><00:12:46.399><c> in</c><00:12:46.560><c> my</c><00:12:46.800><c> text</c><00:12:47.120><c> editor</c><00:12:47.519><c> i</c><00:12:47.680><c> have</c>

00:12:47.990 --> 00:12:48.000 align:start position:0%
command prompt in my text editor i have
 

00:12:48.000 --> 00:12:50.629 align:start position:0%
command prompt in my text editor i have
a<00:12:48.240><c> simple</c><00:12:48.720><c> c</c><00:12:49.040><c> program</c><00:12:49.600><c> that</c><00:12:49.839><c> prints</c><00:12:50.240><c> i</c><00:12:50.399><c> love</c>

00:12:50.629 --> 00:12:50.639 align:start position:0%
a simple c program that prints i love
 

00:12:50.639 --> 00:12:52.470 align:start position:0%
a simple c program that prints i love
pizza<00:12:51.200><c> it's</c><00:12:51.360><c> really</c><00:12:51.600><c> good</c><00:12:52.000><c> what</c><00:12:52.160><c> we'll</c><00:12:52.320><c> need</c>

00:12:52.470 --> 00:12:52.480 align:start position:0%
pizza it's really good what we'll need
 

00:12:52.480 --> 00:12:55.030 align:start position:0%
pizza it's really good what we'll need
to<00:12:52.639><c> do</c><00:12:52.959><c> is</c><00:12:53.279><c> open</c><00:12:53.519><c> command</c><00:12:54.000><c> prompt</c><00:12:54.560><c> now</c><00:12:54.720><c> before</c>

00:12:55.030 --> 00:12:55.040 align:start position:0%
to do is open command prompt now before
 

00:12:55.040 --> 00:12:56.470 align:start position:0%
to do is open command prompt now before
we<00:12:55.120><c> begin</c><00:12:55.440><c> we</c><00:12:55.600><c> should</c><00:12:55.760><c> make</c><00:12:56.000><c> sure</c><00:12:56.160><c> that</c><00:12:56.320><c> we</c>

00:12:56.470 --> 00:12:56.480 align:start position:0%
we begin we should make sure that we
 

00:12:56.480 --> 00:12:59.190 align:start position:0%
we begin we should make sure that we
have<00:12:56.800><c> a</c><00:12:57.040><c> gcc</c><00:12:57.600><c> compiler</c><00:12:58.480><c> and</c><00:12:58.560><c> to</c><00:12:58.720><c> check</c><00:12:58.959><c> that</c>

00:12:59.190 --> 00:12:59.200 align:start position:0%
have a gcc compiler and to check that
 

00:12:59.200 --> 00:13:01.110 align:start position:0%
have a gcc compiler and to check that
just<00:12:59.440><c> type</c><00:12:59.839><c> gcc</c>

00:13:01.110 --> 00:13:01.120 align:start position:0%
just type gcc
 

00:13:01.120 --> 00:13:03.990 align:start position:0%
just type gcc
minus<00:13:01.519><c> minus</c><00:13:02.320><c> version</c>

00:13:03.990 --> 00:13:04.000 align:start position:0%
minus minus version
 

00:13:04.000 --> 00:13:05.670 align:start position:0%
minus minus version
and<00:13:04.240><c> it</c><00:13:04.320><c> looks</c><00:13:04.560><c> like</c><00:13:04.720><c> i</c><00:13:04.800><c> have</c><00:13:04.959><c> one</c><00:13:05.279><c> so</c><00:13:05.600><c> if</c>

00:13:05.670 --> 00:13:05.680 align:start position:0%
and it looks like i have one so if
 

00:13:05.680 --> 00:13:08.230 align:start position:0%
and it looks like i have one so if
you're<00:13:05.920><c> missing</c><00:13:06.320><c> a</c><00:13:06.560><c> gcc</c><00:13:07.120><c> compiler</c><00:13:07.839><c> check</c><00:13:08.079><c> the</c>

00:13:08.230 --> 00:13:08.240 align:start position:0%
you're missing a gcc compiler check the
 

00:13:08.240 --> 00:13:09.829 align:start position:0%
you're missing a gcc compiler check the
first<00:13:08.560><c> video</c><00:13:08.880><c> in</c><00:13:08.959><c> the</c><00:13:09.040><c> series</c><00:13:09.440><c> and</c><00:13:09.600><c> i'll</c><00:13:09.680><c> show</c>

00:13:09.829 --> 00:13:09.839 align:start position:0%
first video in the series and i'll show
 

00:13:09.839 --> 00:13:12.230 align:start position:0%
first video in the series and i'll show
you<00:13:09.920><c> how</c><00:13:10.079><c> to</c><00:13:10.160><c> download</c><00:13:10.560><c> one</c><00:13:11.120><c> now</c><00:13:11.360><c> step</c><00:13:11.680><c> one</c><00:13:12.000><c> to</c>

00:13:12.230 --> 00:13:12.240 align:start position:0%
you how to download one now step one to
 

00:13:12.240 --> 00:13:14.389 align:start position:0%
you how to download one now step one to
compiling<00:13:12.800><c> a</c><00:13:12.959><c> c</c><00:13:13.200><c> file</c><00:13:13.680><c> is</c><00:13:13.760><c> that</c><00:13:13.920><c> we</c><00:13:14.079><c> need</c><00:13:14.240><c> to</c>

00:13:14.389 --> 00:13:14.399 align:start position:0%
compiling a c file is that we need to
 

00:13:14.399 --> 00:13:16.710 align:start position:0%
compiling a c file is that we need to
change<00:13:14.880><c> our</c><00:13:15.040><c> active</c><00:13:15.360><c> working</c><00:13:15.680><c> directory</c><00:13:16.560><c> so</c>

00:13:16.710 --> 00:13:16.720 align:start position:0%
change our active working directory so
 

00:13:16.720 --> 00:13:18.069 align:start position:0%
change our active working directory so
that<00:13:16.959><c> it's</c><00:13:17.120><c> pointing</c><00:13:17.519><c> to</c><00:13:17.680><c> the</c><00:13:17.760><c> folder</c>

00:13:18.069 --> 00:13:18.079 align:start position:0%
that it's pointing to the folder
 

00:13:18.079 --> 00:13:19.990 align:start position:0%
that it's pointing to the folder
containing<00:13:18.480><c> our</c><00:13:18.639><c> c</c><00:13:18.880><c> file</c><00:13:19.279><c> an</c><00:13:19.440><c> easy</c><00:13:19.600><c> way</c><00:13:19.760><c> to</c>

00:13:19.990 --> 00:13:20.000 align:start position:0%
containing our c file an easy way to
 

00:13:20.000 --> 00:13:21.910 align:start position:0%
containing our c file an easy way to
change<00:13:20.320><c> that</c><00:13:20.560><c> is</c><00:13:20.639><c> that</c><00:13:20.800><c> we</c><00:13:21.040><c> need</c><00:13:21.360><c> the</c><00:13:21.600><c> file</c>

00:13:21.910 --> 00:13:21.920 align:start position:0%
change that is that we need the file
 

00:13:21.920 --> 00:13:23.509 align:start position:0%
change that is that we need the file
location<00:13:22.399><c> so</c><00:13:22.560><c> i'm</c><00:13:22.720><c> going</c><00:13:22.880><c> to</c><00:13:22.959><c> right</c><00:13:23.200><c> click</c><00:13:23.360><c> on</c>

00:13:23.509 --> 00:13:23.519 align:start position:0%
location so i'm going to right click on
 

00:13:23.519 --> 00:13:26.310 align:start position:0%
location so i'm going to right click on
my<00:13:23.680><c> c</c><00:13:23.920><c> file</c><00:13:24.240><c> go</c><00:13:24.480><c> to</c><00:13:24.800><c> properties</c><00:13:25.680><c> copy</c><00:13:26.079><c> this</c>

00:13:26.310 --> 00:13:26.320 align:start position:0%
my c file go to properties copy this
 

00:13:26.320 --> 00:13:28.310 align:start position:0%
my c file go to properties copy this
location<00:13:27.040><c> and</c><00:13:27.200><c> within</c><00:13:27.519><c> command</c><00:13:27.920><c> prompt</c><00:13:28.240><c> i</c>

00:13:28.310 --> 00:13:28.320 align:start position:0%
location and within command prompt i
 

00:13:28.320 --> 00:13:30.790 align:start position:0%
location and within command prompt i
will<00:13:28.560><c> type</c><00:13:28.959><c> cd</c><00:13:29.360><c> to</c><00:13:29.440><c> change</c><00:13:29.760><c> directory</c><00:13:30.639><c> and</c>

00:13:30.790 --> 00:13:30.800 align:start position:0%
will type cd to change directory and
 

00:13:30.800 --> 00:13:33.110 align:start position:0%
will type cd to change directory and
then<00:13:30.959><c> paste</c><00:13:31.279><c> that</c><00:13:31.440><c> location</c><00:13:32.399><c> so</c><00:13:32.560><c> our</c><00:13:32.720><c> current</c>

00:13:33.110 --> 00:13:33.120 align:start position:0%
then paste that location so our current
 

00:13:33.120 --> 00:13:35.030 align:start position:0%
then paste that location so our current
active<00:13:33.440><c> directory</c><00:13:34.160><c> is</c><00:13:34.320><c> pointing</c><00:13:34.639><c> to</c><00:13:34.800><c> that</c>

00:13:35.030 --> 00:13:35.040 align:start position:0%
active directory is pointing to that
 

00:13:35.040 --> 00:13:37.030 align:start position:0%
active directory is pointing to that
folder<00:13:35.360><c> containing</c><00:13:35.839><c> our</c><00:13:36.000><c> c</c><00:13:36.240><c> file</c><00:13:36.639><c> and</c><00:13:36.880><c> to</c>

00:13:37.030 --> 00:13:37.040 align:start position:0%
folder containing our c file and to
 

00:13:37.040 --> 00:13:39.509 align:start position:0%
folder containing our c file and to
compile<00:13:37.519><c> a</c><00:13:37.600><c> c</c><00:13:37.839><c> file</c><00:13:38.320><c> you</c><00:13:38.560><c> type</c>

00:13:39.509 --> 00:13:39.519 align:start position:0%
compile a c file you type
 

00:13:39.519 --> 00:13:40.870 align:start position:0%
compile a c file you type
gcc

00:13:40.870 --> 00:13:40.880 align:start position:0%
gcc
 

00:13:40.880 --> 00:13:42.470 align:start position:0%
gcc
the<00:13:41.040><c> name</c><00:13:41.199><c> of</c><00:13:41.360><c> the</c><00:13:41.440><c> file</c>

00:13:42.470 --> 00:13:42.480 align:start position:0%
the name of the file
 

00:13:42.480 --> 00:13:45.670 align:start position:0%
the name of the file
and<00:13:42.720><c> mine</c><00:13:43.040><c> is</c><00:13:43.279><c> hello</c><00:13:43.760><c> world</c><00:13:44.399><c> dot</c><00:13:44.720><c> c</c><00:13:45.279><c> then</c><00:13:45.440><c> hit</c>

00:13:45.670 --> 00:13:45.680 align:start position:0%
and mine is hello world dot c then hit
 

00:13:45.680 --> 00:13:47.910 align:start position:0%
and mine is hello world dot c then hit
enter<00:13:46.320><c> so</c><00:13:46.560><c> nothing</c><00:13:46.880><c> appears</c><00:13:47.199><c> to</c><00:13:47.360><c> happen</c><00:13:47.760><c> and</c>

00:13:47.910 --> 00:13:47.920 align:start position:0%
enter so nothing appears to happen and
 

00:13:47.920 --> 00:13:49.590 align:start position:0%
enter so nothing appears to happen and
that's<00:13:48.160><c> good</c><00:13:48.560><c> so</c><00:13:48.720><c> let's</c><00:13:48.880><c> take</c><00:13:49.120><c> a</c><00:13:49.199><c> look</c><00:13:49.360><c> at</c><00:13:49.440><c> the</c>

00:13:49.590 --> 00:13:49.600 align:start position:0%
that's good so let's take a look at the
 

00:13:49.600 --> 00:13:51.910 align:start position:0%
that's good so let's take a look at the
c<00:13:49.839><c> folder</c><00:13:50.160><c> again</c><00:13:50.560><c> this</c><00:13:50.800><c> is</c><00:13:50.959><c> the</c><00:13:51.199><c> file</c><00:13:51.519><c> that</c><00:13:51.680><c> we</c>

00:13:51.910 --> 00:13:51.920 align:start position:0%
c folder again this is the file that we
 

00:13:51.920 --> 00:13:53.910 align:start position:0%
c folder again this is the file that we
compiled<00:13:52.480><c> it</c><00:13:52.639><c> is</c><00:13:52.720><c> an</c><00:13:52.880><c> executable</c><00:13:53.519><c> and</c><00:13:53.680><c> all</c><00:13:53.760><c> we</c>

00:13:53.910 --> 00:13:53.920 align:start position:0%
compiled it is an executable and all we
 

00:13:53.920 --> 00:13:56.069 align:start position:0%
compiled it is an executable and all we
have<00:13:54.000><c> to</c><00:13:54.079><c> do</c><00:13:54.320><c> is</c><00:13:54.480><c> run</c><00:13:54.720><c> that</c><00:13:55.040><c> so</c><00:13:55.199><c> that</c><00:13:55.440><c> is</c><00:13:55.839><c> the</c>

00:13:56.069 --> 00:13:56.079 align:start position:0%
have to do is run that so that is the
 

00:13:56.079 --> 00:13:58.230 align:start position:0%
have to do is run that so that is the
third<00:13:56.399><c> step</c><00:13:57.120><c> a</c>

00:13:58.230 --> 00:13:58.240 align:start position:0%
third step a
 

00:13:58.240 --> 00:14:00.310 align:start position:0%
third step a
exe<00:13:59.360><c> enter</c>

00:14:00.310 --> 00:14:00.320 align:start position:0%
exe enter
 

00:14:00.320 --> 00:14:03.030 align:start position:0%
exe enter
i<00:14:00.560><c> love</c><00:14:00.800><c> pizza</c><00:14:01.440><c> it's</c><00:14:01.600><c> really</c><00:14:01.920><c> good</c><00:14:02.320><c> so</c><00:14:02.720><c> yeah</c>

00:14:03.030 --> 00:14:03.040 align:start position:0%
i love pizza it's really good so yeah
 

00:14:03.040 --> 00:14:05.910 align:start position:0%
i love pizza it's really good so yeah
that's<00:14:03.360><c> how</c><00:14:03.600><c> to</c><00:14:03.760><c> compile</c><00:14:04.320><c> and</c><00:14:04.480><c> run</c><00:14:04.880><c> a</c><00:14:05.120><c> c</c><00:14:05.440><c> file</c>

00:14:05.910 --> 00:14:05.920 align:start position:0%
that's how to compile and run a c file
 

00:14:05.920 --> 00:14:07.829 align:start position:0%
that's how to compile and run a c file
in<00:14:06.079><c> command</c><00:14:06.480><c> prompt</c><00:14:06.959><c> first</c><00:14:07.279><c> make</c><00:14:07.519><c> sure</c><00:14:07.680><c> that</c>

00:14:07.829 --> 00:14:07.839 align:start position:0%
in command prompt first make sure that
 

00:14:07.839 --> 00:14:10.150 align:start position:0%
in command prompt first make sure that
you<00:14:07.920><c> have</c><00:14:08.160><c> a</c><00:14:08.320><c> gcc</c><00:14:08.800><c> compiler</c><00:14:09.360><c> that</c><00:14:09.519><c> would</c><00:14:09.680><c> be</c><00:14:10.000><c> i</c>

00:14:10.150 --> 00:14:10.160 align:start position:0%
you have a gcc compiler that would be i
 

00:14:10.160 --> 00:14:12.949 align:start position:0%
you have a gcc compiler that would be i
guess<00:14:10.399><c> step</c><00:14:10.800><c> zero</c><00:14:11.279><c> step</c><00:14:11.680><c> one</c><00:14:12.079><c> is</c><00:14:12.240><c> to</c><00:14:12.560><c> change</c>

00:14:12.949 --> 00:14:12.959 align:start position:0%
guess step zero step one is to change
 

00:14:12.959 --> 00:14:14.710 align:start position:0%
guess step zero step one is to change
the<00:14:13.199><c> active</c><00:14:13.519><c> working</c><00:14:13.839><c> directory</c><00:14:14.480><c> to</c><00:14:14.639><c> the</c>

00:14:14.710 --> 00:14:14.720 align:start position:0%
the active working directory to the
 

00:14:14.720 --> 00:14:16.790 align:start position:0%
the active working directory to the
folder<00:14:15.040><c> containing</c><00:14:15.519><c> your</c><00:14:15.680><c> c</c><00:14:15.920><c> file</c><00:14:16.399><c> compile</c>

00:14:16.790 --> 00:14:16.800 align:start position:0%
folder containing your c file compile
 

00:14:16.800 --> 00:14:19.990 align:start position:0%
folder containing your c file compile
the<00:14:16.959><c> c</c><00:14:17.279><c> file</c><00:14:17.680><c> with</c><00:14:18.079><c> gcc</c><00:14:19.040><c> the</c><00:14:19.120><c> name</c><00:14:19.279><c> of</c><00:14:19.360><c> the</c><00:14:19.519><c> file</c>

00:14:19.990 --> 00:14:20.000 align:start position:0%
the c file with gcc the name of the file
 

00:14:20.000 --> 00:14:23.509 align:start position:0%
the c file with gcc the name of the file
and<00:14:20.160><c> then</c><00:14:20.560><c> run</c><00:14:20.959><c> the</c><00:14:21.120><c> compiled</c><00:14:21.680><c> file</c><00:14:22.160><c> a.exe</c><00:14:23.360><c> so</c>

00:14:23.509 --> 00:14:23.519 align:start position:0%
and then run the compiled file a.exe so
 

00:14:23.519 --> 00:14:25.990 align:start position:0%
and then run the compiled file a.exe so
yeah<00:14:23.839><c> that</c><00:14:24.079><c> is</c><00:14:24.160><c> how</c><00:14:24.399><c> to</c><00:14:24.639><c> compile</c><00:14:25.120><c> and</c><00:14:25.279><c> run</c><00:14:25.519><c> a</c><00:14:25.760><c> c</c>

00:14:25.990 --> 00:14:26.000 align:start position:0%
yeah that is how to compile and run a c
 

00:14:26.000 --> 00:14:27.910 align:start position:0%
yeah that is how to compile and run a c
file<00:14:26.320><c> with</c><00:14:26.560><c> command</c><00:14:27.040><c> prompt</c><00:14:27.440><c> if</c><00:14:27.600><c> you</c><00:14:27.680><c> found</c>

00:14:27.910 --> 00:14:27.920 align:start position:0%
file with command prompt if you found
 

00:14:27.920 --> 00:14:29.590 align:start position:0%
file with command prompt if you found
this<00:14:28.079><c> video</c><00:14:28.240><c> helpful</c><00:14:28.720><c> please</c><00:14:28.959><c> be</c><00:14:29.120><c> sure</c><00:14:29.360><c> to</c>

00:14:29.590 --> 00:14:29.600 align:start position:0%
this video helpful please be sure to
 

00:14:29.600 --> 00:14:31.269 align:start position:0%
this video helpful please be sure to
smash<00:14:30.000><c> that</c><00:14:30.160><c> like</c><00:14:30.399><c> button</c><00:14:30.720><c> leave</c><00:14:30.880><c> a</c><00:14:30.959><c> random</c>

00:14:31.269 --> 00:14:31.279 align:start position:0%
smash that like button leave a random
 

00:14:31.279 --> 00:14:32.949 align:start position:0%
smash that like button leave a random
comment<00:14:31.600><c> down</c><00:14:31.760><c> below</c><00:14:32.160><c> and</c><00:14:32.399><c> subscribe</c><00:14:32.880><c> if</c>

00:14:32.949 --> 00:14:32.959 align:start position:0%
comment down below and subscribe if
 

00:14:32.959 --> 00:14:35.350 align:start position:0%
comment down below and subscribe if
you'd<00:14:33.120><c> like</c><00:14:33.279><c> to</c><00:14:33.440><c> become</c><00:14:33.680><c> a</c><00:14:33.760><c> fellow</c><00:14:34.079><c> bro</c>

00:14:35.350 --> 00:14:35.360 align:start position:0%
you'd like to become a fellow bro
 

00:14:35.360 --> 00:14:37.269 align:start position:0%
you'd like to become a fellow bro
hey<00:14:35.600><c> y'all</c><00:14:35.920><c> what's</c><00:14:36.079><c> going</c><00:14:36.320><c> on</c><00:14:36.480><c> everybody</c><00:14:36.959><c> it's</c>

00:14:37.269 --> 00:14:37.279 align:start position:0%
hey y'all what's going on everybody it's
 

00:14:37.279 --> 00:14:38.870 align:start position:0%
hey y'all what's going on everybody it's
you<00:14:37.440><c> bro</c><00:14:37.680><c> hope</c><00:14:37.839><c> you're</c><00:14:38.000><c> doing</c><00:14:38.240><c> well</c><00:14:38.560><c> and</c><00:14:38.800><c> in</c>

00:14:38.870 --> 00:14:38.880 align:start position:0%
you bro hope you're doing well and in
 

00:14:38.880 --> 00:14:40.790 align:start position:0%
you bro hope you're doing well and in
this<00:14:39.040><c> video</c><00:14:39.360><c> i'm</c><00:14:39.440><c> going</c><00:14:39.600><c> to</c><00:14:39.839><c> explain</c><00:14:40.240><c> to</c><00:14:40.399><c> both</c>

00:14:40.790 --> 00:14:40.800 align:start position:0%
this video i'm going to explain to both
 

00:14:40.800 --> 00:14:43.910 align:start position:0%
this video i'm going to explain to both
comments<00:14:41.360><c> and</c><00:14:41.519><c> escape</c><00:14:41.920><c> sequences</c><00:14:42.720><c> in</c><00:14:43.040><c> c</c><00:14:43.519><c> so</c>

00:14:43.910 --> 00:14:43.920 align:start position:0%
comments and escape sequences in c so
 

00:14:43.920 --> 00:14:49.030 align:start position:0%
comments and escape sequences in c so
sit<00:14:44.240><c> back</c><00:14:44.560><c> relax</c><00:14:45.279><c> and</c><00:14:45.440><c> enjoy</c><00:14:45.760><c> the</c><00:14:45.920><c> show</c>

00:14:49.030 --> 00:14:49.040 align:start position:0%
 
 

00:14:49.040 --> 00:14:51.110 align:start position:0%
 
all<00:14:49.199><c> right</c><00:14:49.680><c> welcome</c><00:14:50.000><c> back</c><00:14:50.399><c> so</c><00:14:50.639><c> we</c><00:14:50.800><c> have</c><00:14:50.959><c> to</c>

00:14:51.110 --> 00:14:51.120 align:start position:0%
all right welcome back so we have to
 

00:14:51.120 --> 00:14:54.150 align:start position:0%
all right welcome back so we have to
discuss<00:14:51.760><c> comments</c><00:14:52.320><c> and</c><00:14:52.480><c> escape</c><00:14:52.880><c> sequences</c><00:14:53.839><c> so</c>

00:14:54.150 --> 00:14:54.160 align:start position:0%
discuss comments and escape sequences so
 

00:14:54.160 --> 00:14:57.269 align:start position:0%
discuss comments and escape sequences so
a<00:14:54.399><c> comment</c><00:14:55.279><c> is</c><00:14:55.680><c> some</c><00:14:56.000><c> text</c><00:14:56.480><c> that</c><00:14:56.720><c> is</c><00:14:56.959><c> ignored</c>

00:14:57.269 --> 00:14:57.279 align:start position:0%
a comment is some text that is ignored
 

00:14:57.279 --> 00:15:00.069 align:start position:0%
a comment is some text that is ignored
by<00:14:57.440><c> the</c><00:14:57.600><c> compiler</c><00:14:58.560><c> that</c><00:14:58.800><c> is</c><00:14:59.040><c> used</c><00:14:59.680><c> as</c><00:14:59.920><c> an</c>

00:15:00.069 --> 00:15:00.079 align:start position:0%
by the compiler that is used as an
 

00:15:00.079 --> 00:15:03.430 align:start position:0%
by the compiler that is used as an
explanation<00:15:01.040><c> description</c><00:15:02.079><c> or</c><00:15:02.320><c> a</c><00:15:02.560><c> note</c><00:15:03.120><c> for</c>

00:15:03.430 --> 00:15:03.440 align:start position:0%
explanation description or a note for
 

00:15:03.440 --> 00:15:05.670 align:start position:0%
explanation description or a note for
yourself<00:15:04.160><c> or</c><00:15:04.399><c> anyone</c><00:15:04.800><c> else</c><00:15:05.120><c> reading</c><00:15:05.440><c> over</c>

00:15:05.670 --> 00:15:05.680 align:start position:0%
yourself or anyone else reading over
 

00:15:05.680 --> 00:15:07.910 align:start position:0%
yourself or anyone else reading over
your<00:15:05.920><c> code</c><00:15:06.480><c> so</c><00:15:06.720><c> try</c><00:15:06.959><c> to</c><00:15:07.120><c> comment</c><00:15:07.519><c> you</c><00:15:07.680><c> will</c>

00:15:07.910 --> 00:15:07.920 align:start position:0%
your code so try to comment you will
 

00:15:07.920 --> 00:15:08.710 align:start position:0%
your code so try to comment you will
type

00:15:08.710 --> 00:15:08.720 align:start position:0%
type
 

00:15:08.720 --> 00:15:10.870 align:start position:0%
type
two<00:15:08.959><c> forward</c><00:15:09.279><c> slashes</c><00:15:10.160><c> then</c><00:15:10.399><c> anything</c>

00:15:10.870 --> 00:15:10.880 align:start position:0%
two forward slashes then anything
 

00:15:10.880 --> 00:15:13.430 align:start position:0%
two forward slashes then anything
afterwards<00:15:11.600><c> is</c><00:15:11.760><c> considered</c><00:15:12.320><c> a</c><00:15:12.560><c> comment</c><00:15:13.279><c> and</c>

00:15:13.430 --> 00:15:13.440 align:start position:0%
afterwards is considered a comment and
 

00:15:13.440 --> 00:15:16.710 align:start position:0%
afterwards is considered a comment and
will<00:15:13.600><c> be</c><00:15:13.839><c> ignored</c><00:15:14.240><c> by</c><00:15:14.399><c> the</c><00:15:14.560><c> compiler</c><00:15:15.680><c> this</c><00:15:16.240><c> is</c>

00:15:16.710 --> 00:15:16.720 align:start position:0%
will be ignored by the compiler this is
 

00:15:16.720 --> 00:15:17.509 align:start position:0%
will be ignored by the compiler this is
a

00:15:17.509 --> 00:15:17.519 align:start position:0%
a
 

00:15:17.519 --> 00:15:19.189 align:start position:0%
a
comment

00:15:19.189 --> 00:15:19.199 align:start position:0%
comment
 

00:15:19.199 --> 00:15:21.990 align:start position:0%
comment
blah<00:15:19.760><c> so</c><00:15:20.079><c> if</c><00:15:20.240><c> i</c><00:15:20.399><c> was</c><00:15:20.639><c> to</c><00:15:20.959><c> run</c><00:15:21.199><c> this</c>

00:15:21.990 --> 00:15:22.000 align:start position:0%
blah so if i was to run this
 

00:15:22.000 --> 00:15:23.750 align:start position:0%
blah so if i was to run this
this<00:15:22.240><c> text</c><00:15:22.639><c> will</c><00:15:22.880><c> be</c><00:15:23.120><c> ignored</c><00:15:23.440><c> by</c><00:15:23.680><c> the</c>

00:15:23.750 --> 00:15:23.760 align:start position:0%
this text will be ignored by the
 

00:15:23.760 --> 00:15:25.750 align:start position:0%
this text will be ignored by the
compiler<00:15:24.399><c> and</c><00:15:24.560><c> we</c><00:15:24.720><c> do</c><00:15:24.880><c> not</c><00:15:25.120><c> see</c><00:15:25.279><c> that</c><00:15:25.519><c> as</c>

00:15:25.750 --> 00:15:25.760 align:start position:0%
compiler and we do not see that as
 

00:15:25.760 --> 00:15:28.069 align:start position:0%
compiler and we do not see that as
output<00:15:26.560><c> i</c><00:15:26.720><c> tend</c><00:15:26.959><c> to</c><00:15:27.120><c> use</c><00:15:27.279><c> a</c><00:15:27.360><c> lot</c><00:15:27.519><c> of</c><00:15:27.680><c> comments</c>

00:15:28.069 --> 00:15:28.079 align:start position:0%
output i tend to use a lot of comments
 

00:15:28.079 --> 00:15:29.829 align:start position:0%
output i tend to use a lot of comments
when<00:15:28.320><c> explaining</c><00:15:28.880><c> things</c><00:15:29.360><c> so</c><00:15:29.519><c> this</c><00:15:29.759><c> is</c>

00:15:29.829 --> 00:15:29.839 align:start position:0%
when explaining things so this is
 

00:15:29.839 --> 00:15:31.590 align:start position:0%
when explaining things so this is
something<00:15:30.160><c> you'll</c><00:15:30.399><c> see</c><00:15:30.639><c> fairly</c><00:15:30.959><c> often</c><00:15:31.360><c> in</c><00:15:31.440><c> my</c>

00:15:31.590 --> 00:15:31.600 align:start position:0%
something you'll see fairly often in my
 

00:15:31.600 --> 00:15:33.590 align:start position:0%
something you'll see fairly often in my
videos<00:15:32.160><c> now</c><00:15:32.399><c> if</c><00:15:32.480><c> you</c><00:15:32.639><c> need</c><00:15:32.800><c> a</c><00:15:33.040><c> multi-line</c>

00:15:33.590 --> 00:15:33.600 align:start position:0%
videos now if you need a multi-line
 

00:15:33.600 --> 00:15:35.670 align:start position:0%
videos now if you need a multi-line
comment<00:15:34.079><c> this</c><00:15:34.320><c> is</c><00:15:34.480><c> only</c><00:15:34.720><c> for</c><00:15:34.959><c> a</c><00:15:35.120><c> single</c><00:15:35.440><c> line</c>

00:15:35.670 --> 00:15:35.680 align:start position:0%
comment this is only for a single line
 

00:15:35.680 --> 00:15:37.269 align:start position:0%
comment this is only for a single line
comment<00:15:36.079><c> if</c><00:15:36.240><c> i</c><00:15:36.320><c> was</c><00:15:36.480><c> to</c><00:15:36.639><c> type</c><00:15:36.880><c> this</c><00:15:37.040><c> again</c>

00:15:37.269 --> 00:15:37.279 align:start position:0%
comment if i was to type this again
 

00:15:37.279 --> 00:15:39.910 align:start position:0%
comment if i was to type this again
without<00:15:37.759><c> those</c><00:15:38.000><c> forward</c><00:15:38.320><c> slashes</c><00:15:39.199><c> this</c><00:15:39.519><c> is</c><00:15:39.680><c> a</c>

00:15:39.910 --> 00:15:39.920 align:start position:0%
without those forward slashes this is a
 

00:15:39.920 --> 00:15:42.069 align:start position:0%
without those forward slashes this is a
comment<00:15:40.560><c> well</c><00:15:40.880><c> our</c><00:15:41.040><c> program</c><00:15:41.519><c> thinks</c><00:15:41.839><c> that</c>

00:15:42.069 --> 00:15:42.079 align:start position:0%
comment well our program thinks that
 

00:15:42.079 --> 00:15:44.150 align:start position:0%
comment well our program thinks that
this<00:15:42.240><c> is</c><00:15:42.320><c> some</c><00:15:42.560><c> sort</c><00:15:42.800><c> of</c><00:15:42.880><c> code</c><00:15:43.519><c> if</c><00:15:43.680><c> we</c><00:15:43.839><c> need</c><00:15:44.000><c> a</c>

00:15:44.150 --> 00:15:44.160 align:start position:0%
this is some sort of code if we need a
 

00:15:44.160 --> 00:15:47.030 align:start position:0%
this is some sort of code if we need a
multi-line<00:15:44.800><c> comment</c><00:15:45.199><c> you</c><00:15:45.360><c> will</c><00:15:45.600><c> instead</c><00:15:46.160><c> type</c>

00:15:47.030 --> 00:15:47.040 align:start position:0%
multi-line comment you will instead type
 

00:15:47.040 --> 00:15:49.509 align:start position:0%
multi-line comment you will instead type
forward<00:15:47.360><c> slash</c><00:15:47.920><c> asterisk</c><00:15:48.720><c> then</c><00:15:49.040><c> anything</c>

00:15:49.509 --> 00:15:49.519 align:start position:0%
forward slash asterisk then anything
 

00:15:49.519 --> 00:15:51.350 align:start position:0%
forward slash asterisk then anything
after<00:15:50.000><c> is</c><00:15:50.160><c> considered</c><00:15:50.639><c> a</c><00:15:50.800><c> comment</c><00:15:51.120><c> you</c><00:15:51.279><c> can</c>

00:15:51.350 --> 00:15:51.360 align:start position:0%
after is considered a comment you can
 

00:15:51.360 --> 00:15:53.749 align:start position:0%
after is considered a comment you can
see<00:15:51.600><c> that</c><00:15:51.920><c> this</c><00:15:52.160><c> is</c><00:15:52.320><c> all</c><00:15:52.480><c> green</c><00:15:52.720><c> now</c><00:15:53.279><c> anything</c>

00:15:53.749 --> 00:15:53.759 align:start position:0%
see that this is all green now anything
 

00:15:53.759 --> 00:15:56.629 align:start position:0%
see that this is all green now anything
up<00:15:54.000><c> to</c><00:15:54.320><c> a</c><00:15:54.720><c> asterisk</c><00:15:55.360><c> and</c><00:15:55.519><c> forward</c><00:15:55.839><c> slash</c><00:15:56.399><c> will</c>

00:15:56.629 --> 00:15:56.639 align:start position:0%
up to a asterisk and forward slash will
 

00:15:56.639 --> 00:15:58.949 align:start position:0%
up to a asterisk and forward slash will
be<00:15:56.880><c> a</c><00:15:57.120><c> multi-line</c><00:15:57.839><c> comment</c>

00:15:58.949 --> 00:15:58.959 align:start position:0%
be a multi-line comment
 

00:15:58.959 --> 00:15:59.910 align:start position:0%
be a multi-line comment
this

00:15:59.910 --> 00:15:59.920 align:start position:0%
this
 

00:15:59.920 --> 00:16:01.670 align:start position:0%
this
is<00:16:00.720><c> a</c>

00:16:01.670 --> 00:16:01.680 align:start position:0%
is a
 

00:16:01.680 --> 00:16:04.230 align:start position:0%
is a
multi-line

00:16:04.230 --> 00:16:04.240 align:start position:0%
multi-line
 

00:16:04.240 --> 00:16:05.509 align:start position:0%
multi-line
comment

00:16:05.509 --> 00:16:05.519 align:start position:0%
comment
 

00:16:05.519 --> 00:16:07.269 align:start position:0%
comment
and<00:16:05.759><c> again</c><00:16:06.240><c> this</c><00:16:06.480><c> is</c><00:16:06.639><c> ignored</c><00:16:06.959><c> by</c><00:16:07.120><c> the</c>

00:16:07.269 --> 00:16:07.279 align:start position:0%
and again this is ignored by the
 

00:16:07.279 --> 00:16:10.230 align:start position:0%
and again this is ignored by the
compiler<00:16:08.160><c> so</c><00:16:08.399><c> if</c><00:16:08.560><c> you</c><00:16:08.720><c> need</c><00:16:08.959><c> to</c><00:16:09.199><c> write</c><00:16:09.440><c> a</c><00:16:09.759><c> note</c>

00:16:10.230 --> 00:16:10.240 align:start position:0%
compiler so if you need to write a note
 

00:16:10.240 --> 00:16:13.350 align:start position:0%
compiler so if you need to write a note
description<00:16:11.040><c> or</c><00:16:11.360><c> explanation</c><00:16:12.320><c> for</c><00:16:12.560><c> yourself</c>

00:16:13.350 --> 00:16:13.360 align:start position:0%
description or explanation for yourself
 

00:16:13.360 --> 00:16:15.110 align:start position:0%
description or explanation for yourself
or<00:16:13.600><c> for</c><00:16:13.759><c> somebody</c><00:16:14.160><c> else</c><00:16:14.480><c> you</c><00:16:14.639><c> can</c><00:16:14.800><c> write</c><00:16:14.959><c> that</c>

00:16:15.110 --> 00:16:15.120 align:start position:0%
or for somebody else you can write that
 

00:16:15.120 --> 00:16:17.590 align:start position:0%
or for somebody else you can write that
within<00:16:15.600><c> a</c><00:16:15.759><c> single</c><00:16:16.079><c> line</c><00:16:16.399><c> comment</c><00:16:17.040><c> or</c><00:16:17.440><c> a</c>

00:16:17.590 --> 00:16:17.600 align:start position:0%
within a single line comment or a
 

00:16:17.600 --> 00:16:19.829 align:start position:0%
within a single line comment or a
multi-line<00:16:18.240><c> comment</c><00:16:18.959><c> and</c><00:16:19.120><c> i</c><00:16:19.279><c> use</c><00:16:19.440><c> a</c><00:16:19.519><c> lot</c><00:16:19.680><c> of</c>

00:16:19.829 --> 00:16:19.839 align:start position:0%
multi-line comment and i use a lot of
 

00:16:19.839 --> 00:16:21.829 align:start position:0%
multi-line comment and i use a lot of
these<00:16:20.079><c> for</c><00:16:20.320><c> teaching</c><00:16:20.639><c> purposes</c><00:16:21.279><c> because</c><00:16:21.759><c> i</c>

00:16:21.829 --> 00:16:21.839 align:start position:0%
these for teaching purposes because i
 

00:16:21.839 --> 00:16:23.829 align:start position:0%
these for teaching purposes because i
have<00:16:21.920><c> a</c><00:16:22.000><c> lot</c><00:16:22.160><c> of</c><00:16:22.240><c> explaining</c><00:16:22.720><c> to</c><00:16:22.880><c> do</c><00:16:23.040><c> right</c>

00:16:23.829 --> 00:16:23.839 align:start position:0%
have a lot of explaining to do right
 

00:16:23.839 --> 00:16:26.230 align:start position:0%
have a lot of explaining to do right
okay<00:16:24.240><c> let's</c><00:16:24.480><c> move</c><00:16:24.720><c> on</c><00:16:24.880><c> to</c><00:16:25.279><c> part</c><00:16:25.600><c> two</c><00:16:25.920><c> of</c><00:16:26.000><c> this</c>

00:16:26.230 --> 00:16:26.240 align:start position:0%
okay let's move on to part two of this
 

00:16:26.240 --> 00:16:28.949 align:start position:0%
okay let's move on to part two of this
video<00:16:26.800><c> we</c><00:16:26.959><c> have</c><00:16:27.199><c> escape</c><00:16:27.600><c> sequences</c><00:16:28.480><c> an</c><00:16:28.639><c> escape</c>

00:16:28.949 --> 00:16:28.959 align:start position:0%
video we have escape sequences an escape
 

00:16:28.959 --> 00:16:31.430 align:start position:0%
video we have escape sequences an escape
sequence<00:16:29.600><c> is</c><00:16:29.920><c> a</c><00:16:30.160><c> character</c><00:16:30.639><c> combination</c>

00:16:31.430 --> 00:16:31.440 align:start position:0%
sequence is a character combination
 

00:16:31.440 --> 00:16:34.790 align:start position:0%
sequence is a character combination
consisting<00:16:32.160><c> of</c><00:16:32.399><c> a</c><00:16:32.560><c> backslash</c><00:16:33.600><c> followed</c><00:16:34.079><c> by</c><00:16:34.399><c> a</c>

00:16:34.790 --> 00:16:34.800 align:start position:0%
consisting of a backslash followed by a
 

00:16:34.800 --> 00:16:37.509 align:start position:0%
consisting of a backslash followed by a
letter<00:16:35.360><c> or</c><00:16:35.600><c> combination</c><00:16:36.240><c> of</c><00:16:36.399><c> digits</c><00:16:37.279><c> they</c>

00:16:37.509 --> 00:16:37.519 align:start position:0%
letter or combination of digits they
 

00:16:37.519 --> 00:16:40.389 align:start position:0%
letter or combination of digits they
specify<00:16:38.160><c> actions</c><00:16:38.639><c> within</c><00:16:39.120><c> a</c><00:16:39.360><c> line</c><00:16:39.600><c> of</c><00:16:39.759><c> text</c>

00:16:40.389 --> 00:16:40.399 align:start position:0%
specify actions within a line of text
 

00:16:40.399 --> 00:16:42.870 align:start position:0%
specify actions within a line of text
otherwise<00:16:40.959><c> known</c><00:16:41.199><c> as</c><00:16:41.519><c> a</c><00:16:41.680><c> string</c><00:16:42.480><c> so</c><00:16:42.720><c> we</c>

00:16:42.870 --> 00:16:42.880 align:start position:0%
otherwise known as a string so we
 

00:16:42.880 --> 00:16:44.550 align:start position:0%
otherwise known as a string so we
learned<00:16:43.120><c> in</c><00:16:43.199><c> the</c><00:16:43.360><c> last</c><00:16:43.600><c> video</c><00:16:44.000><c> that</c><00:16:44.160><c> we</c><00:16:44.320><c> can</c>

00:16:44.550 --> 00:16:44.560 align:start position:0%
learned in the last video that we can
 

00:16:44.560 --> 00:16:47.189 align:start position:0%
learned in the last video that we can
end<00:16:44.880><c> our</c><00:16:45.120><c> printf</c><00:16:45.680><c> statement</c><00:16:46.240><c> with</c><00:16:46.560><c> a</c>

00:16:47.189 --> 00:16:47.199 align:start position:0%
end our printf statement with a
 

00:16:47.199 --> 00:16:50.150 align:start position:0%
end our printf statement with a
backslash<00:16:47.920><c> n</c><00:16:48.079><c> to</c><00:16:48.240><c> create</c><00:16:48.639><c> a</c><00:16:48.959><c> new</c><00:16:49.279><c> line</c><00:16:49.839><c> this</c><00:16:50.079><c> is</c>

00:16:50.150 --> 00:16:50.160 align:start position:0%
backslash n to create a new line this is
 

00:16:50.160 --> 00:16:52.550 align:start position:0%
backslash n to create a new line this is
the<00:16:50.399><c> escape</c><00:16:50.720><c> sequence</c><00:16:51.199><c> for</c><00:16:51.440><c> a</c><00:16:51.519><c> new</c><00:16:51.759><c> line</c><00:16:52.399><c> and</c>

00:16:52.550 --> 00:16:52.560 align:start position:0%
the escape sequence for a new line and
 

00:16:52.560 --> 00:16:55.030 align:start position:0%
the escape sequence for a new line and
within<00:16:52.880><c> a</c><00:16:52.959><c> string</c><00:16:53.279><c> of</c><00:16:53.360><c> text</c><00:16:54.000><c> a</c><00:16:54.160><c> line</c><00:16:54.399><c> of</c><00:16:54.480><c> text</c>

00:16:55.030 --> 00:16:55.040 align:start position:0%
within a string of text a line of text
 

00:16:55.040 --> 00:16:57.670 align:start position:0%
within a string of text a line of text
and<00:16:55.279><c> within</c><00:16:55.759><c> a</c><00:16:56.000><c> string</c><00:16:56.320><c> of</c><00:16:56.480><c> text</c><00:16:56.880><c> we</c><00:16:57.040><c> can</c><00:16:57.199><c> add</c><00:16:57.519><c> a</c>

00:16:57.670 --> 00:16:57.680 align:start position:0%
and within a string of text we can add a
 

00:16:57.680 --> 00:17:00.230 align:start position:0%
and within a string of text we can add a
new<00:16:57.920><c> line</c><00:16:58.399><c> wherever</c><00:16:58.880><c> we</c><00:16:59.120><c> want</c><00:16:59.440><c> and</c><00:16:59.680><c> as</c><00:16:59.839><c> many</c><00:17:00.079><c> as</c>

00:17:00.230 --> 00:17:00.240 align:start position:0%
new line wherever we want and as many as
 

00:17:00.240 --> 00:17:02.470 align:start position:0%
new line wherever we want and as many as
we<00:17:00.320><c> want</c><00:17:00.800><c> let's</c><00:17:01.040><c> say</c><00:17:01.279><c> that</c><00:17:01.519><c> after</c><00:17:02.000><c> each</c><00:17:02.240><c> word</c>

00:17:02.470 --> 00:17:02.480 align:start position:0%
we want let's say that after each word
 

00:17:02.480 --> 00:17:04.949 align:start position:0%
we want let's say that after each word
within<00:17:02.880><c> my</c><00:17:03.120><c> line</c><00:17:03.360><c> of</c><00:17:03.440><c> text</c><00:17:03.839><c> i</c><00:17:04.000><c> would</c><00:17:04.160><c> like</c><00:17:04.480><c> to</c>

00:17:04.949 --> 00:17:04.959 align:start position:0%
within my line of text i would like to
 

00:17:04.959 --> 00:17:08.069 align:start position:0%
within my line of text i would like to
add<00:17:05.600><c> each</c><00:17:05.919><c> word</c><00:17:06.240><c> to</c><00:17:06.400><c> a</c><00:17:06.480><c> new</c><00:17:06.720><c> line</c><00:17:07.199><c> so</c><00:17:07.439><c> i</c><00:17:07.600><c> can</c><00:17:07.760><c> use</c>

00:17:08.069 --> 00:17:08.079 align:start position:0%
add each word to a new line so i can use
 

00:17:08.079 --> 00:17:10.470 align:start position:0%
add each word to a new line so i can use
the<00:17:08.160><c> escape</c><00:17:08.559><c> sequence</c><00:17:09.039><c> for</c><00:17:09.360><c> new</c><00:17:09.600><c> line</c><00:17:10.000><c> after</c>

00:17:10.470 --> 00:17:10.480 align:start position:0%
the escape sequence for new line after
 

00:17:10.480 --> 00:17:12.390 align:start position:0%
the escape sequence for new line after
each<00:17:10.720><c> of</c><00:17:10.799><c> these</c><00:17:11.039><c> words</c><00:17:11.760><c> so</c><00:17:11.919><c> that</c><00:17:12.079><c> would</c><00:17:12.240><c> look</c>

00:17:12.390 --> 00:17:12.400 align:start position:0%
each of these words so that would look
 

00:17:12.400 --> 00:17:15.750 align:start position:0%
each of these words so that would look
like<00:17:12.640><c> this</c><00:17:13.280><c> i</c><00:17:13.839><c> like</c><00:17:14.319><c> pizza</c><00:17:15.199><c> but</c><00:17:15.360><c> you</c><00:17:15.439><c> may</c><00:17:15.600><c> have</c>

00:17:15.750 --> 00:17:15.760 align:start position:0%
like this i like pizza but you may have
 

00:17:15.760 --> 00:17:18.549 align:start position:0%
like this i like pizza but you may have
to<00:17:15.839><c> work</c><00:17:16.160><c> on</c><00:17:16.319><c> the</c><00:17:16.480><c> spacing</c><00:17:16.959><c> though</c>

00:17:18.549 --> 00:17:18.559 align:start position:0%
to work on the spacing though
 

00:17:18.559 --> 00:17:20.789 align:start position:0%
to work on the spacing though
that's<00:17:18.799><c> a</c><00:17:18.959><c> little</c><00:17:19.120><c> bit</c><00:17:19.280><c> better</c><00:17:20.079><c> so</c><00:17:20.400><c> wherever</c>

00:17:20.789 --> 00:17:20.799 align:start position:0%
that's a little bit better so wherever
 

00:17:20.799 --> 00:17:23.829 align:start position:0%
that's a little bit better so wherever
you<00:17:21.039><c> place</c><00:17:21.600><c> a</c><00:17:21.839><c> backslash</c><00:17:22.559><c> n</c><00:17:22.880><c> that</c><00:17:23.039><c> will</c><00:17:23.280><c> create</c>

00:17:23.829 --> 00:17:23.839 align:start position:0%
you place a backslash n that will create
 

00:17:23.839 --> 00:17:26.630 align:start position:0%
you place a backslash n that will create
a<00:17:24.319><c> new</c><00:17:24.640><c> line</c><00:17:24.959><c> character</c><00:17:25.919><c> another</c><00:17:26.240><c> escape</c>

00:17:26.630 --> 00:17:26.640 align:start position:0%
a new line character another escape
 

00:17:26.640 --> 00:17:29.830 align:start position:0%
a new line character another escape
sequence<00:17:27.199><c> is</c><00:17:27.520><c> backslash</c><00:17:28.160><c> t</c><00:17:28.400><c> for</c><00:17:28.720><c> a</c><00:17:29.039><c> tab</c>

00:17:29.830 --> 00:17:29.840 align:start position:0%
sequence is backslash t for a tab
 

00:17:29.840 --> 00:17:31.510 align:start position:0%
sequence is backslash t for a tab
so<00:17:30.000><c> let's</c><00:17:30.240><c> say</c><00:17:30.400><c> i</c><00:17:30.480><c> have</c><00:17:30.640><c> a</c><00:17:30.720><c> few</c><00:17:30.880><c> numbers</c><00:17:31.200><c> here</c>

00:17:31.510 --> 00:17:31.520 align:start position:0%
so let's say i have a few numbers here
 

00:17:31.520 --> 00:17:34.230 align:start position:0%
so let's say i have a few numbers here
one<00:17:32.000><c> two</c><00:17:32.320><c> three</c><00:17:32.640><c> and</c><00:17:32.880><c> i</c><00:17:32.960><c> would</c><00:17:33.200><c> like</c><00:17:33.440><c> to</c><00:17:33.919><c> create</c>

00:17:34.230 --> 00:17:34.240 align:start position:0%
one two three and i would like to create
 

00:17:34.240 --> 00:17:36.230 align:start position:0%
one two three and i would like to create
even<00:17:34.480><c> spacing</c><00:17:34.960><c> between</c><00:17:35.280><c> these</c><00:17:35.440><c> numbers</c><00:17:36.000><c> i</c><00:17:36.080><c> can</c>

00:17:36.230 --> 00:17:36.240 align:start position:0%
even spacing between these numbers i can
 

00:17:36.240 --> 00:17:38.950 align:start position:0%
even spacing between these numbers i can
just<00:17:36.400><c> add</c><00:17:36.640><c> an</c><00:17:36.799><c> escape</c><00:17:37.120><c> sequence</c><00:17:37.760><c> for</c><00:17:38.400><c> a</c><00:17:38.640><c> tab</c>

00:17:38.950 --> 00:17:38.960 align:start position:0%
just add an escape sequence for a tab
 

00:17:38.960 --> 00:17:42.630 align:start position:0%
just add an escape sequence for a tab
character<00:17:39.840><c> one</c><00:17:40.400><c> backslash</c><00:17:41.039><c> t</c><00:17:41.520><c> two</c><00:17:42.000><c> backslash</c>

00:17:42.630 --> 00:17:42.640 align:start position:0%
character one backslash t two backslash
 

00:17:42.640 --> 00:17:44.390 align:start position:0%
character one backslash t two backslash
t

00:17:44.390 --> 00:17:44.400 align:start position:0%
t
 

00:17:44.400 --> 00:17:47.590 align:start position:0%
t
and<00:17:44.720><c> these</c><00:17:44.960><c> numbers</c><00:17:45.440><c> are</c><00:17:45.600><c> spaced</c><00:17:46.000><c> evenly</c>

00:17:47.590 --> 00:17:47.600 align:start position:0%
and these numbers are spaced evenly
 

00:17:47.600 --> 00:17:49.430 align:start position:0%
and these numbers are spaced evenly
or<00:17:47.840><c> i</c><00:17:47.919><c> can</c><00:17:48.000><c> get</c><00:17:48.160><c> really</c><00:17:48.400><c> fancy</c><00:17:48.799><c> and</c><00:17:48.960><c> add</c><00:17:49.120><c> a</c><00:17:49.280><c> new</c>

00:17:49.430 --> 00:17:49.440 align:start position:0%
or i can get really fancy and add a new
 

00:17:49.440 --> 00:17:50.630 align:start position:0%
or i can get really fancy and add a new
line<00:17:49.679><c> character</c>

00:17:50.630 --> 00:17:50.640 align:start position:0%
line character
 

00:17:50.640 --> 00:17:52.470 align:start position:0%
line character
then<00:17:50.880><c> maybe</c><00:17:51.280><c> a</c><00:17:51.520><c> four</c>

00:17:52.470 --> 00:17:52.480 align:start position:0%
then maybe a four
 

00:17:52.480 --> 00:17:55.110 align:start position:0%
then maybe a four
tab<00:17:53.280><c> five</c><00:17:54.000><c> tab</c>

00:17:55.110 --> 00:17:55.120 align:start position:0%
tab five tab
 

00:17:55.120 --> 00:17:57.430 align:start position:0%
tab five tab
six<00:17:55.760><c> new</c><00:17:56.000><c> line</c><00:17:56.320><c> character</c>

00:17:57.430 --> 00:17:57.440 align:start position:0%
six new line character
 

00:17:57.440 --> 00:17:59.110 align:start position:0%
six new line character
then<00:17:57.600><c> maybe</c><00:17:58.000><c> a7</c>

00:17:59.110 --> 00:17:59.120 align:start position:0%
then maybe a7
 

00:17:59.120 --> 00:18:01.190 align:start position:0%
then maybe a7
tab<00:18:00.000><c> 8</c>

00:18:01.190 --> 00:18:01.200 align:start position:0%
tab 8
 

00:18:01.200 --> 00:18:05.029 align:start position:0%
tab 8
tab<00:18:01.840><c> and</c><00:18:01.919><c> then</c><00:18:02.080><c> a</c><00:18:02.240><c> 9.</c>

00:18:05.029 --> 00:18:05.039 align:start position:0%
 
 

00:18:05.039 --> 00:18:07.590 align:start position:0%
 
so<00:18:05.200><c> now</c><00:18:05.440><c> we</c><00:18:05.600><c> have</c><00:18:06.000><c> a</c><00:18:06.320><c> grid</c><00:18:06.799><c> of</c><00:18:06.960><c> numbers</c><00:18:07.440><c> all</c>

00:18:07.590 --> 00:18:07.600 align:start position:0%
so now we have a grid of numbers all
 

00:18:07.600 --> 00:18:10.470 align:start position:0%
so now we have a grid of numbers all
spaced<00:18:08.000><c> evenly</c><00:18:08.799><c> so</c><00:18:09.039><c> that</c><00:18:09.280><c> is</c><00:18:09.520><c> the</c><00:18:10.000><c> new</c><00:18:10.240><c> line</c>

00:18:10.470 --> 00:18:10.480 align:start position:0%
spaced evenly so that is the new line
 

00:18:10.480 --> 00:18:12.549 align:start position:0%
spaced evenly so that is the new line
escape<00:18:10.799><c> sequence</c><00:18:11.440><c> and</c><00:18:11.679><c> the</c><00:18:11.919><c> tab</c><00:18:12.160><c> escape</c>

00:18:12.549 --> 00:18:12.559 align:start position:0%
escape sequence and the tab escape
 

00:18:12.559 --> 00:18:14.870 align:start position:0%
escape sequence and the tab escape
sequence<00:18:13.280><c> you</c><00:18:13.440><c> can</c><00:18:13.600><c> use</c><00:18:13.840><c> them</c><00:18:14.160><c> wherever</c><00:18:14.720><c> and</c>

00:18:14.870 --> 00:18:14.880 align:start position:0%
sequence you can use them wherever and
 

00:18:14.880 --> 00:18:17.029 align:start position:0%
sequence you can use them wherever and
however<00:18:15.200><c> many</c><00:18:15.520><c> you</c><00:18:15.600><c> want</c><00:18:15.919><c> within</c><00:18:16.400><c> a</c><00:18:16.559><c> string</c><00:18:16.880><c> of</c>

00:18:17.029 --> 00:18:17.039 align:start position:0%
however many you want within a string of
 

00:18:17.039 --> 00:18:19.510 align:start position:0%
however many you want within a string of
text<00:18:17.360><c> within</c><00:18:17.760><c> a</c><00:18:17.919><c> printf</c><00:18:18.400><c> statement</c><00:18:19.200><c> what</c><00:18:19.440><c> if</c>

00:18:19.510 --> 00:18:19.520 align:start position:0%
text within a printf statement what if
 

00:18:19.520 --> 00:18:21.510 align:start position:0%
text within a printf statement what if
we<00:18:19.679><c> need</c><00:18:19.840><c> to</c><00:18:20.000><c> display</c><00:18:20.480><c> quotes</c><00:18:21.039><c> like</c><00:18:21.280><c> we're</c>

00:18:21.510 --> 00:18:21.520 align:start position:0%
we need to display quotes like we're
 

00:18:21.520 --> 00:18:22.870 align:start position:0%
we need to display quotes like we're
quoting<00:18:21.840><c> somebody</c>

00:18:22.870 --> 00:18:22.880 align:start position:0%
quoting somebody
 

00:18:22.880 --> 00:18:25.510 align:start position:0%
quoting somebody
i<00:18:23.600><c> like</c><00:18:24.400><c> pizza</c>

00:18:25.510 --> 00:18:25.520 align:start position:0%
i like pizza
 

00:18:25.520 --> 00:18:27.830 align:start position:0%
i like pizza
this<00:18:25.760><c> is</c><00:18:25.919><c> a</c><00:18:26.160><c> quote</c><00:18:26.480><c> from</c>

00:18:27.830 --> 00:18:27.840 align:start position:0%
this is a quote from
 

00:18:27.840 --> 00:18:29.190 align:start position:0%
this is a quote from
abraham

00:18:29.190 --> 00:18:29.200 align:start position:0%
abraham
 

00:18:29.200 --> 00:18:30.870 align:start position:0%
abraham
lincoln

00:18:30.870 --> 00:18:30.880 align:start position:0%
lincoln
 

00:18:30.880 --> 00:18:34.549 align:start position:0%
lincoln
probably<00:18:31.760><c> i</c><00:18:32.000><c> need</c><00:18:32.160><c> to</c><00:18:32.320><c> place</c><00:18:32.640><c> quotes</c><00:18:33.039><c> around</c><00:18:33.919><c> i</c>

00:18:34.549 --> 00:18:34.559 align:start position:0%
probably i need to place quotes around i
 

00:18:34.559 --> 00:18:36.150 align:start position:0%
probably i need to place quotes around i
and<00:18:34.960><c> pizza</c>

00:18:36.150 --> 00:18:36.160 align:start position:0%
and pizza
 

00:18:36.160 --> 00:18:37.990 align:start position:0%
and pizza
so<00:18:36.480><c> if</c><00:18:36.640><c> i</c><00:18:36.720><c> were</c><00:18:36.880><c> to</c><00:18:37.039><c> write</c><00:18:37.200><c> it</c><00:18:37.280><c> like</c><00:18:37.520><c> that</c><00:18:37.760><c> well</c>

00:18:37.990 --> 00:18:38.000 align:start position:0%
so if i were to write it like that well
 

00:18:38.000 --> 00:18:39.830 align:start position:0%
so if i were to write it like that well
our<00:18:38.240><c> program</c><00:18:38.640><c> doesn't</c><00:18:38.960><c> know</c><00:18:39.280><c> where</c><00:18:39.600><c> our</c>

00:18:39.830 --> 00:18:39.840 align:start position:0%
our program doesn't know where our
 

00:18:39.840 --> 00:18:42.230 align:start position:0%
our program doesn't know where our
string<00:18:40.160><c> of</c><00:18:40.320><c> text</c><00:18:40.799><c> begins</c><00:18:41.200><c> and</c><00:18:41.440><c> ends</c><00:18:41.919><c> it's</c><00:18:42.080><c> kind</c>

00:18:42.230 --> 00:18:42.240 align:start position:0%
string of text begins and ends it's kind
 

00:18:42.240 --> 00:18:44.870 align:start position:0%
string of text begins and ends it's kind
of<00:18:42.400><c> confused</c><00:18:43.200><c> if</c><00:18:43.360><c> we</c><00:18:43.520><c> need</c><00:18:43.760><c> to</c><00:18:44.240><c> literally</c>

00:18:44.870 --> 00:18:44.880 align:start position:0%
of confused if we need to literally
 

00:18:44.880 --> 00:18:47.190 align:start position:0%
of confused if we need to literally
print<00:18:45.280><c> double</c><00:18:45.600><c> quotes</c><00:18:46.320><c> we</c><00:18:46.559><c> will</c><00:18:46.799><c> add</c><00:18:47.039><c> an</c>

00:18:47.190 --> 00:18:47.200 align:start position:0%
print double quotes we will add an
 

00:18:47.200 --> 00:18:48.630 align:start position:0%
print double quotes we will add an
escape<00:18:47.520><c> sequence</c>

00:18:48.630 --> 00:18:48.640 align:start position:0%
escape sequence
 

00:18:48.640 --> 00:18:51.350 align:start position:0%
escape sequence
backslash<00:18:49.760><c> then</c><00:18:50.000><c> double</c><00:18:50.240><c> quote</c>

00:18:51.350 --> 00:18:51.360 align:start position:0%
backslash then double quote
 

00:18:51.360 --> 00:18:53.590 align:start position:0%
backslash then double quote
and<00:18:51.520><c> then</c><00:18:51.679><c> add</c><00:18:51.840><c> that</c><00:18:52.000><c> here</c><00:18:52.240><c> as</c><00:18:52.400><c> well</c><00:18:53.120><c> so</c><00:18:53.360><c> this</c>

00:18:53.590 --> 00:18:53.600 align:start position:0%
and then add that here as well so this
 

00:18:53.600 --> 00:18:56.710 align:start position:0%
and then add that here as well so this
allows<00:18:54.000><c> us</c><00:18:54.320><c> to</c><00:18:54.880><c> literally</c><00:18:55.520><c> print</c><00:18:55.919><c> some</c><00:18:56.160><c> quotes</c>

00:18:56.710 --> 00:18:56.720 align:start position:0%
allows us to literally print some quotes
 

00:18:56.720 --> 00:18:58.789 align:start position:0%
allows us to literally print some quotes
as<00:18:56.960><c> i'll</c><00:18:57.120><c> put</c>

00:18:58.789 --> 00:18:58.799 align:start position:0%
as i'll put
 

00:18:58.799 --> 00:19:02.549 align:start position:0%
as i'll put
i<00:18:59.039><c> like</c><00:18:59.280><c> pizza</c><00:19:00.160><c> abraham</c><00:19:00.640><c> lincoln</c><00:19:01.440><c> probably</c><00:19:02.240><c> or</c>

00:19:02.549 --> 00:19:02.559 align:start position:0%
i like pizza abraham lincoln probably or
 

00:19:02.559 --> 00:19:04.630 align:start position:0%
i like pizza abraham lincoln probably or
if<00:19:02.640><c> you</c><00:19:02.799><c> need</c><00:19:03.039><c> to</c><00:19:03.200><c> display</c><00:19:03.600><c> single</c><00:19:03.919><c> quotes</c>

00:19:04.630 --> 00:19:04.640 align:start position:0%
if you need to display single quotes
 

00:19:04.640 --> 00:19:07.909 align:start position:0%
if you need to display single quotes
backslash<00:19:05.760><c> single</c><00:19:06.080><c> quotes</c>

00:19:07.909 --> 00:19:07.919 align:start position:0%
backslash single quotes
 

00:19:07.919 --> 00:19:10.230 align:start position:0%
backslash single quotes
so<00:19:08.240><c> that's</c><00:19:08.480><c> how</c><00:19:08.640><c> to</c><00:19:08.799><c> display</c><00:19:09.280><c> single</c><00:19:09.600><c> quotes</c>

00:19:10.230 --> 00:19:10.240 align:start position:0%
so that's how to display single quotes
 

00:19:10.240 --> 00:19:12.310 align:start position:0%
so that's how to display single quotes
and<00:19:10.400><c> if</c><00:19:10.559><c> you</c><00:19:10.640><c> need</c><00:19:10.880><c> to</c><00:19:11.039><c> display</c><00:19:11.440><c> a</c><00:19:11.600><c> backslash</c>

00:19:12.310 --> 00:19:12.320 align:start position:0%
and if you need to display a backslash
 

00:19:12.320 --> 00:19:15.430 align:start position:0%
and if you need to display a backslash
that<00:19:12.480><c> would</c><00:19:12.720><c> be</c><00:19:13.120><c> double</c><00:19:13.520><c> backslashes</c>

00:19:15.430 --> 00:19:15.440 align:start position:0%
that would be double backslashes
 

00:19:15.440 --> 00:19:18.710 align:start position:0%
that would be double backslashes
this<00:19:15.679><c> will</c><00:19:15.919><c> literally</c><00:19:16.559><c> print</c><00:19:17.039><c> backslashes</c>

00:19:18.710 --> 00:19:18.720 align:start position:0%
this will literally print backslashes
 

00:19:18.720 --> 00:19:20.870 align:start position:0%
this will literally print backslashes
so<00:19:18.880><c> yeah</c><00:19:19.200><c> those</c><00:19:19.440><c> are</c><00:19:19.600><c> just</c><00:19:20.000><c> a</c><00:19:20.240><c> few</c><00:19:20.559><c> escape</c>

00:19:20.870 --> 00:19:20.880 align:start position:0%
so yeah those are just a few escape
 

00:19:20.880 --> 00:19:23.029 align:start position:0%
so yeah those are just a few escape
sequences<00:19:21.600><c> here's</c><00:19:22.000><c> a</c><00:19:22.240><c> list</c><00:19:22.480><c> of</c><00:19:22.640><c> a</c><00:19:22.720><c> bunch</c><00:19:22.960><c> of</c>

00:19:23.029 --> 00:19:23.039 align:start position:0%
sequences here's a list of a bunch of
 

00:19:23.039 --> 00:19:24.950 align:start position:0%
sequences here's a list of a bunch of
them<00:19:23.280><c> but</c><00:19:23.840><c> a</c><00:19:23.919><c> lot</c><00:19:24.080><c> of</c><00:19:24.160><c> these</c><00:19:24.480><c> really</c><00:19:24.799><c> aren't</c>

00:19:24.950 --> 00:19:24.960 align:start position:0%
them but a lot of these really aren't
 

00:19:24.960 --> 00:19:27.510 align:start position:0%
them but a lot of these really aren't
going<00:19:25.120><c> to</c><00:19:25.280><c> be</c><00:19:25.440><c> relevant</c><00:19:25.919><c> to</c><00:19:26.080><c> us</c><00:19:26.640><c> so</c><00:19:26.799><c> yeah</c><00:19:27.120><c> those</c>

00:19:27.510 --> 00:19:27.520 align:start position:0%
going to be relevant to us so yeah those
 

00:19:27.520 --> 00:19:29.990 align:start position:0%
going to be relevant to us so yeah those
are<00:19:27.840><c> comments</c><00:19:28.320><c> and</c><00:19:28.559><c> escape</c><00:19:28.880><c> sequences</c><00:19:29.760><c> and</c>

00:19:29.990 --> 00:19:30.000 align:start position:0%
are comments and escape sequences and
 

00:19:30.000 --> 00:19:31.750 align:start position:0%
are comments and escape sequences and
see<00:19:30.400><c> if</c><00:19:30.559><c> you</c><00:19:30.640><c> found</c><00:19:30.880><c> this</c><00:19:31.039><c> video</c><00:19:31.280><c> helpful</c>

00:19:31.750 --> 00:19:31.760 align:start position:0%
see if you found this video helpful
 

00:19:31.760 --> 00:19:33.590 align:start position:0%
see if you found this video helpful
please<00:19:32.000><c> be</c><00:19:32.240><c> sure</c><00:19:32.559><c> to</c><00:19:32.799><c> destroy</c><00:19:33.200><c> that</c><00:19:33.360><c> like</c>

00:19:33.590 --> 00:19:33.600 align:start position:0%
please be sure to destroy that like
 

00:19:33.600 --> 00:19:35.909 align:start position:0%
please be sure to destroy that like
button<00:19:34.080><c> drop</c><00:19:34.320><c> a</c><00:19:34.400><c> random</c><00:19:34.720><c> comment</c><00:19:35.039><c> down</c><00:19:35.200><c> below</c>

00:19:35.909 --> 00:19:35.919 align:start position:0%
button drop a random comment down below
 

00:19:35.919 --> 00:19:37.590 align:start position:0%
button drop a random comment down below
and<00:19:36.240><c> subscribe</c><00:19:36.720><c> if</c><00:19:36.799><c> you'd</c><00:19:36.960><c> like</c><00:19:37.120><c> to</c><00:19:37.200><c> become</c><00:19:37.520><c> a</c>

00:19:37.590 --> 00:19:37.600 align:start position:0%
and subscribe if you'd like to become a
 

00:19:37.600 --> 00:19:39.430 align:start position:0%
and subscribe if you'd like to become a
fellow<00:19:37.919><c> bro</c>

00:19:39.430 --> 00:19:39.440 align:start position:0%
fellow bro
 

00:19:39.440 --> 00:19:41.510 align:start position:0%
fellow bro
hey<00:19:39.679><c> yeah</c><00:19:40.240><c> it's</c><00:19:40.480><c> you</c><00:19:40.559><c> bro</c><00:19:40.960><c> hope</c><00:19:41.120><c> you're</c><00:19:41.280><c> doing</c>

00:19:41.510 --> 00:19:41.520 align:start position:0%
hey yeah it's you bro hope you're doing
 

00:19:41.520 --> 00:19:43.590 align:start position:0%
hey yeah it's you bro hope you're doing
well<00:19:41.919><c> and</c><00:19:42.240><c> yeah</c><00:19:42.480><c> we're</c><00:19:42.640><c> doing</c><00:19:42.960><c> stuff</c><00:19:43.360><c> with</c>

00:19:43.590 --> 00:19:43.600 align:start position:0%
well and yeah we're doing stuff with
 

00:19:43.600 --> 00:19:47.190 align:start position:0%
well and yeah we're doing stuff with
variables<00:19:44.160><c> today</c><00:19:44.559><c> in</c><00:19:44.880><c> c</c><00:19:45.280><c> so</c><00:19:45.760><c> sit</c><00:19:46.000><c> back</c><00:19:46.400><c> relax</c>

00:19:47.190 --> 00:19:47.200 align:start position:0%
variables today in c so sit back relax
 

00:19:47.200 --> 00:19:50.870 align:start position:0%
variables today in c so sit back relax
and<00:19:47.520><c> well</c><00:19:47.919><c> enjoy</c><00:19:48.240><c> the</c><00:19:48.320><c> show</c>

00:19:50.870 --> 00:19:50.880 align:start position:0%
 
 

00:19:50.880 --> 00:19:53.110 align:start position:0%
 
welcome<00:19:51.200><c> back</c><00:19:51.440><c> to</c><00:19:51.600><c> another</c><00:19:52.000><c> video</c><00:19:52.559><c> so</c>

00:19:53.110 --> 00:19:53.120 align:start position:0%
welcome back to another video so
 

00:19:53.120 --> 00:19:55.990 align:start position:0%
welcome back to another video so
variables<00:19:53.840><c> variables</c><00:19:54.559><c> are</c><00:19:54.880><c> allocated</c><00:19:55.679><c> space</c>

00:19:55.990 --> 00:19:56.000 align:start position:0%
variables variables are allocated space
 

00:19:56.000 --> 00:19:58.789 align:start position:0%
variables variables are allocated space
and<00:19:56.160><c> memory</c><00:19:56.559><c> to</c><00:19:56.720><c> store</c><00:19:57.039><c> a</c><00:19:57.120><c> value</c><00:19:57.919><c> we</c><00:19:58.160><c> refer</c><00:19:58.559><c> to</c>

00:19:58.789 --> 00:19:58.799 align:start position:0%
and memory to store a value we refer to
 

00:19:58.799 --> 00:20:01.430 align:start position:0%
and memory to store a value we refer to
a<00:19:59.039><c> variable's</c><00:19:59.679><c> name</c><00:20:00.080><c> to</c><00:20:00.320><c> access</c><00:20:00.880><c> the</c><00:20:01.039><c> stored</c>

00:20:01.430 --> 00:20:01.440 align:start position:0%
a variable's name to access the stored
 

00:20:01.440 --> 00:20:02.470 align:start position:0%
a variable's name to access the stored
value

00:20:02.470 --> 00:20:02.480 align:start position:0%
value
 

00:20:02.480 --> 00:20:05.190 align:start position:0%
value
that<00:20:02.720><c> variable</c><00:20:03.440><c> now</c><00:20:03.679><c> behaves</c><00:20:04.240><c> as</c><00:20:04.480><c> if</c><00:20:04.640><c> it</c><00:20:04.799><c> was</c>

00:20:05.190 --> 00:20:05.200 align:start position:0%
that variable now behaves as if it was
 

00:20:05.200 --> 00:20:07.430 align:start position:0%
that variable now behaves as if it was
the<00:20:05.360><c> value</c><00:20:05.679><c> that</c><00:20:05.840><c> it</c><00:20:05.919><c> contains</c><00:20:06.880><c> but</c><00:20:07.120><c> to</c><00:20:07.280><c> create</c>

00:20:07.430 --> 00:20:07.440 align:start position:0%
the value that it contains but to create
 

00:20:07.440 --> 00:20:09.590 align:start position:0%
the value that it contains but to create
a<00:20:07.600><c> variable</c><00:20:08.000><c> we</c><00:20:08.240><c> first</c><00:20:08.480><c> need</c><00:20:08.720><c> to</c><00:20:08.880><c> declare</c><00:20:09.360><c> a</c>

00:20:09.590 --> 00:20:09.600 align:start position:0%
a variable we first need to declare a
 

00:20:09.600 --> 00:20:11.830 align:start position:0%
a variable we first need to declare a
name<00:20:09.840><c> for</c><00:20:10.080><c> a</c><00:20:10.159><c> variable</c><00:20:10.720><c> and</c><00:20:10.799><c> then</c><00:20:11.120><c> precede</c><00:20:11.679><c> it</c>

00:20:11.830 --> 00:20:11.840 align:start position:0%
name for a variable and then precede it
 

00:20:11.840 --> 00:20:13.590 align:start position:0%
name for a variable and then precede it
with<00:20:12.159><c> the</c><00:20:12.480><c> type</c><00:20:12.720><c> of</c><00:20:12.799><c> data</c><00:20:13.120><c> that</c><00:20:13.280><c> we</c><00:20:13.440><c> are</c>

00:20:13.590 --> 00:20:13.600 align:start position:0%
with the type of data that we are
 

00:20:13.600 --> 00:20:15.430 align:start position:0%
with the type of data that we are
storing<00:20:14.080><c> creating</c><00:20:14.400><c> a</c><00:20:14.480><c> variable</c><00:20:15.039><c> is</c><00:20:15.120><c> done</c><00:20:15.280><c> in</c>

00:20:15.430 --> 00:20:15.440 align:start position:0%
storing creating a variable is done in
 

00:20:15.440 --> 00:20:18.070 align:start position:0%
storing creating a variable is done in
two<00:20:15.600><c> steps</c><00:20:16.159><c> declaration</c><00:20:16.880><c> and</c><00:20:17.039><c> initialization</c>

00:20:18.070 --> 00:20:18.080 align:start position:0%
two steps declaration and initialization
 

00:20:18.080 --> 00:20:20.310 align:start position:0%
two steps declaration and initialization
so<00:20:18.400><c> we</c><00:20:18.559><c> need</c><00:20:18.799><c> to</c><00:20:18.960><c> first</c><00:20:19.200><c> declare</c><00:20:19.679><c> a</c><00:20:19.760><c> variable</c>

00:20:20.310 --> 00:20:20.320 align:start position:0%
so we need to first declare a variable
 

00:20:20.320 --> 00:20:22.310 align:start position:0%
so we need to first declare a variable
to<00:20:20.559><c> allocate</c><00:20:20.960><c> some</c><00:20:21.120><c> space</c><00:20:21.520><c> in</c><00:20:21.600><c> memory</c><00:20:22.159><c> to</c>

00:20:22.310 --> 00:20:22.320 align:start position:0%
to allocate some space in memory to
 

00:20:22.320 --> 00:20:25.190 align:start position:0%
to allocate some space in memory to
store<00:20:22.559><c> a</c><00:20:22.720><c> value</c><00:20:23.520><c> so</c><00:20:23.760><c> we</c><00:20:23.919><c> need</c><00:20:24.080><c> to</c><00:20:24.320><c> precede</c><00:20:24.960><c> our</c>

00:20:25.190 --> 00:20:25.200 align:start position:0%
store a value so we need to precede our
 

00:20:25.200 --> 00:20:27.669 align:start position:0%
store a value so we need to precede our
variable<00:20:25.679><c> name</c><00:20:26.080><c> with</c><00:20:26.400><c> the</c><00:20:26.559><c> data</c><00:20:26.880><c> type</c><00:20:27.440><c> of</c><00:20:27.520><c> what</c>

00:20:27.669 --> 00:20:27.679 align:start position:0%
variable name with the data type of what
 

00:20:27.679 --> 00:20:29.990 align:start position:0%
variable name with the data type of what
we<00:20:27.840><c> plan</c><00:20:28.080><c> on</c><00:20:28.240><c> storing</c><00:20:28.559><c> within</c><00:20:28.960><c> this</c><00:20:29.120><c> variable</c>

00:20:29.990 --> 00:20:30.000 align:start position:0%
we plan on storing within this variable
 

00:20:30.000 --> 00:20:32.149 align:start position:0%
we plan on storing within this variable
if<00:20:30.240><c> i</c><00:20:30.320><c> need</c><00:20:30.559><c> to</c><00:20:30.640><c> store</c><00:20:30.960><c> a</c><00:20:31.120><c> whole</c><00:20:31.360><c> integer</c><00:20:32.000><c> we</c>

00:20:32.149 --> 00:20:32.159 align:start position:0%
if i need to store a whole integer we
 

00:20:32.159 --> 00:20:34.870 align:start position:0%
if i need to store a whole integer we
would<00:20:32.400><c> precede</c><00:20:33.280><c> our</c><00:20:33.440><c> variable</c><00:20:33.840><c> name</c><00:20:34.159><c> withint</c>

00:20:34.870 --> 00:20:34.880 align:start position:0%
would precede our variable name withint
 

00:20:34.880 --> 00:20:37.110 align:start position:0%
would precede our variable name withint
int<00:20:35.120><c> for</c><00:20:35.440><c> integer</c><00:20:36.159><c> and</c><00:20:36.320><c> let's</c><00:20:36.480><c> say</c><00:20:36.720><c> that</c><00:20:36.880><c> this</c>

00:20:37.110 --> 00:20:37.120 align:start position:0%
int for integer and let's say that this
 

00:20:37.120 --> 00:20:38.710 align:start position:0%
int for integer and let's say that this
is<00:20:37.280><c> variable</c><00:20:37.840><c> x</c>

00:20:38.710 --> 00:20:38.720 align:start position:0%
is variable x
 

00:20:38.720 --> 00:20:41.669 align:start position:0%
is variable x
so<00:20:39.200><c> this</c><00:20:39.360><c> step</c><00:20:39.840><c> is</c><00:20:40.480><c> declaration</c><00:20:41.360><c> we</c><00:20:41.520><c> are</c>

00:20:41.669 --> 00:20:41.679 align:start position:0%
so this step is declaration we are
 

00:20:41.679 --> 00:20:43.590 align:start position:0%
so this step is declaration we are
creating<00:20:42.080><c> space</c><00:20:42.400><c> and</c><00:20:42.559><c> memory</c><00:20:42.960><c> to</c><00:20:43.200><c> store</c><00:20:43.520><c> a</c>

00:20:43.590 --> 00:20:43.600 align:start position:0%
creating space and memory to store a
 

00:20:43.600 --> 00:20:46.310 align:start position:0%
creating space and memory to store a
value<00:20:44.480><c> and</c><00:20:44.720><c> to</c><00:20:44.960><c> actually</c><00:20:45.280><c> store</c><00:20:45.600><c> a</c><00:20:45.679><c> value</c><00:20:46.159><c> that</c>

00:20:46.310 --> 00:20:46.320 align:start position:0%
value and to actually store a value that
 

00:20:46.320 --> 00:20:49.029 align:start position:0%
value and to actually store a value that
step<00:20:46.720><c> is</c><00:20:46.960><c> initialization</c><00:20:48.159><c> so</c><00:20:48.320><c> we</c><00:20:48.480><c> would</c><00:20:48.720><c> take</c>

00:20:49.029 --> 00:20:49.039 align:start position:0%
step is initialization so we would take
 

00:20:49.039 --> 00:20:50.470 align:start position:0%
step is initialization so we would take
our<00:20:49.200><c> variable</c><00:20:49.679><c> name</c>

00:20:50.470 --> 00:20:50.480 align:start position:0%
our variable name
 

00:20:50.480 --> 00:20:52.950 align:start position:0%
our variable name
x<00:20:50.720><c> in</c><00:20:50.799><c> this</c><00:20:51.039><c> example</c><00:20:51.840><c> and</c><00:20:52.000><c> set</c><00:20:52.240><c> it</c><00:20:52.400><c> equal</c><00:20:52.720><c> to</c>

00:20:52.950 --> 00:20:52.960 align:start position:0%
x in this example and set it equal to
 

00:20:52.960 --> 00:20:55.590 align:start position:0%
x in this example and set it equal to
some<00:20:53.200><c> value</c><00:20:54.000><c> so</c><00:20:54.159><c> we</c><00:20:54.320><c> declared</c><00:20:54.960><c> that</c><00:20:55.360><c> this</c>

00:20:55.590 --> 00:20:55.600 align:start position:0%
some value so we declared that this
 

00:20:55.600 --> 00:20:57.909 align:start position:0%
some value so we declared that this
variable<00:20:56.240><c> is</c><00:20:56.320><c> an</c><00:20:56.480><c> integer</c><00:20:56.960><c> we</c><00:20:57.039><c> can</c><00:20:57.200><c> only</c><00:20:57.520><c> store</c>

00:20:57.909 --> 00:20:57.919 align:start position:0%
variable is an integer we can only store
 

00:20:57.919 --> 00:21:00.149 align:start position:0%
variable is an integer we can only store
whole<00:20:58.159><c> integers</c><00:20:58.880><c> maybe</c><00:20:59.200><c> the</c><00:20:59.360><c> number</c><00:20:59.760><c> one</c><00:20:59.919><c> two</c>

00:21:00.149 --> 00:21:00.159 align:start position:0%
whole integers maybe the number one two
 

00:21:00.159 --> 00:21:01.110 align:start position:0%
whole integers maybe the number one two
three

00:21:01.110 --> 00:21:01.120 align:start position:0%
three
 

00:21:01.120 --> 00:21:02.350 align:start position:0%
three
so<00:21:01.360><c> this</c><00:21:01.679><c> is</c>

00:21:02.350 --> 00:21:02.360 align:start position:0%
so this is
 

00:21:02.360 --> 00:21:04.470 align:start position:0%
so this is
initialization<00:21:03.600><c> or</c><00:21:03.840><c> you</c><00:21:04.000><c> could</c><00:21:04.159><c> combine</c>

00:21:04.470 --> 00:21:04.480 align:start position:0%
initialization or you could combine
 

00:21:04.480 --> 00:21:06.630 align:start position:0%
initialization or you could combine
these<00:21:04.720><c> steps</c><00:21:05.039><c> together</c><00:21:05.679><c> and</c><00:21:06.000><c> let's</c><00:21:06.240><c> create</c>

00:21:06.630 --> 00:21:06.640 align:start position:0%
these steps together and let's create
 

00:21:06.640 --> 00:21:10.710 align:start position:0%
these steps together and let's create
into<00:21:07.200><c> y</c><00:21:07.679><c> into</c><00:21:08.000><c> y</c><00:21:08.320><c> equals</c><00:21:08.799><c> 3</c><00:21:09.120><c> 2</c><00:21:09.360><c> 1.</c><00:21:09.679><c> this</c><00:21:09.919><c> is</c><00:21:10.080><c> both</c>

00:21:10.710 --> 00:21:10.720 align:start position:0%
into y into y equals 3 2 1. this is both
 

00:21:10.720 --> 00:21:13.590 align:start position:0%
into y into y equals 3 2 1. this is both
declaration<00:21:11.760><c> and</c><00:21:12.240><c> initialization</c><00:21:13.360><c> so</c>

00:21:13.590 --> 00:21:13.600 align:start position:0%
declaration and initialization so
 

00:21:13.600 --> 00:21:15.510 align:start position:0%
declaration and initialization so
creating<00:21:14.080><c> and</c><00:21:14.240><c> storing</c><00:21:14.640><c> a</c><00:21:14.720><c> variable</c><00:21:15.200><c> takes</c>

00:21:15.510 --> 00:21:15.520 align:start position:0%
creating and storing a variable takes
 

00:21:15.520 --> 00:21:18.630 align:start position:0%
creating and storing a variable takes
two<00:21:15.760><c> steps</c><00:21:16.320><c> declaration</c><00:21:17.120><c> and</c><00:21:17.360><c> initialization</c>

00:21:18.630 --> 00:21:18.640 align:start position:0%
two steps declaration and initialization
 

00:21:18.640 --> 00:21:20.149 align:start position:0%
two steps declaration and initialization
and<00:21:18.799><c> in</c><00:21:18.960><c> order</c><00:21:19.120><c> to</c><00:21:19.280><c> create</c><00:21:19.440><c> a</c><00:21:19.520><c> variable</c><00:21:20.000><c> you</c>

00:21:20.149 --> 00:21:20.159 align:start position:0%
and in order to create a variable you
 

00:21:20.159 --> 00:21:22.549 align:start position:0%
and in order to create a variable you
have<00:21:20.320><c> to</c><00:21:20.480><c> precede</c><00:21:21.280><c> the</c><00:21:21.440><c> variable</c><00:21:21.919><c> name</c><00:21:22.400><c> with</c>

00:21:22.549 --> 00:21:22.559 align:start position:0%
have to precede the variable name with
 

00:21:22.559 --> 00:21:24.149 align:start position:0%
have to precede the variable name with
the<00:21:22.720><c> data</c><00:21:23.039><c> type</c><00:21:23.440><c> of</c><00:21:23.520><c> what</c><00:21:23.679><c> you</c><00:21:23.840><c> plan</c><00:21:24.080><c> on</c>

00:21:24.149 --> 00:21:24.159 align:start position:0%
the data type of what you plan on
 

00:21:24.159 --> 00:21:26.549 align:start position:0%
the data type of what you plan on
storing<00:21:24.559><c> within</c><00:21:24.880><c> that</c><00:21:25.120><c> variable</c><00:21:25.840><c> int</c><00:21:26.159><c> for</c><00:21:26.400><c> a</c>

00:21:26.549 --> 00:21:26.559 align:start position:0%
storing within that variable int for a
 

00:21:26.559 --> 00:21:28.149 align:start position:0%
storing within that variable int for a
whole<00:21:26.799><c> integer</c><00:21:27.200><c> but</c><00:21:27.360><c> there's</c><00:21:27.600><c> other</c><00:21:27.840><c> data</c>

00:21:28.149 --> 00:21:28.159 align:start position:0%
whole integer but there's other data
 

00:21:28.159 --> 00:21:29.669 align:start position:0%
whole integer but there's other data
types<00:21:28.480><c> too</c><00:21:28.799><c> let's</c><00:21:29.039><c> create</c><00:21:29.280><c> some</c><00:21:29.440><c> more</c>

00:21:29.669 --> 00:21:29.679 align:start position:0%
types too let's create some more
 

00:21:29.679 --> 00:21:32.230 align:start position:0%
types too let's create some more
variables<00:21:30.240><c> what</c><00:21:30.480><c> about</c><00:21:30.960><c> int</c><00:21:31.520><c> age</c><00:21:32.000><c> with</c>

00:21:32.230 --> 00:21:32.240 align:start position:0%
variables what about int age with
 

00:21:32.240 --> 00:21:34.070 align:start position:0%
variables what about int age with
variable<00:21:32.720><c> names</c><00:21:33.039><c> you're</c><00:21:33.200><c> not</c><00:21:33.440><c> limited</c><00:21:33.840><c> to</c>

00:21:34.070 --> 00:21:34.080 align:start position:0%
variable names you're not limited to
 

00:21:34.080 --> 00:21:36.710 align:start position:0%
variable names you're not limited to
only<00:21:34.480><c> just</c><00:21:34.960><c> x</c><00:21:35.200><c> and</c><00:21:35.360><c> y</c><00:21:35.919><c> you</c><00:21:36.080><c> can</c><00:21:36.159><c> really</c><00:21:36.400><c> name</c><00:21:36.640><c> it</c>

00:21:36.710 --> 00:21:36.720 align:start position:0%
only just x and y you can really name it
 

00:21:36.720 --> 00:21:38.070 align:start position:0%
only just x and y you can really name it
whatever<00:21:37.039><c> you</c><00:21:37.200><c> want</c><00:21:37.440><c> within</c><00:21:37.840><c> some</c>

00:21:38.070 --> 00:21:38.080 align:start position:0%
whatever you want within some
 

00:21:38.080 --> 00:21:40.149 align:start position:0%
whatever you want within some
limitations<00:21:39.039><c> but</c><00:21:39.280><c> make</c><00:21:39.520><c> sure</c><00:21:39.760><c> that</c><00:21:40.000><c> the</c>

00:21:40.149 --> 00:21:40.159 align:start position:0%
limitations but make sure that the
 

00:21:40.159 --> 00:21:42.230 align:start position:0%
limitations but make sure that the
variable<00:21:40.640><c> name</c><00:21:40.960><c> is</c><00:21:41.120><c> descriptive</c><00:21:41.840><c> of</c><00:21:42.000><c> what</c><00:21:42.159><c> it</c>

00:21:42.230 --> 00:21:42.240 align:start position:0%
variable name is descriptive of what it
 

00:21:42.240 --> 00:21:44.870 align:start position:0%
variable name is descriptive of what it
does<00:21:42.799><c> so</c><00:21:43.039><c> age</c><00:21:43.360><c> is</c><00:21:43.520><c> going</c><00:21:43.760><c> to</c><00:21:44.000><c> store</c><00:21:44.240><c> an</c><00:21:44.400><c> edge</c>

00:21:44.870 --> 00:21:44.880 align:start position:0%
does so age is going to store an edge
 

00:21:44.880 --> 00:21:47.990 align:start position:0%
does so age is going to store an edge
let's<00:21:45.120><c> say</c><00:21:45.440><c> that</c><00:21:45.679><c> i</c><00:21:45.919><c> am</c><00:21:46.080><c> 21</c><00:21:46.559><c> years</c><00:21:46.799><c> old</c><00:21:47.360><c> so</c><00:21:47.600><c> this</c>

00:21:47.990 --> 00:21:48.000 align:start position:0%
let's say that i am 21 years old so this
 

00:21:48.000 --> 00:21:50.710 align:start position:0%
let's say that i am 21 years old so this
is<00:21:48.240><c> an</c><00:21:48.559><c> integer</c><00:21:49.200><c> a</c><00:21:49.360><c> whole</c><00:21:49.679><c> number</c><00:21:50.240><c> if</c><00:21:50.400><c> we</c><00:21:50.480><c> need</c>

00:21:50.710 --> 00:21:50.720 align:start position:0%
is an integer a whole number if we need
 

00:21:50.720 --> 00:21:52.630 align:start position:0%
is an integer a whole number if we need
a<00:21:50.880><c> number</c><00:21:51.200><c> containing</c><00:21:51.600><c> a</c><00:21:51.679><c> decimal</c><00:21:52.080><c> portion</c>

00:21:52.630 --> 00:21:52.640 align:start position:0%
a number containing a decimal portion
 

00:21:52.640 --> 00:21:55.029 align:start position:0%
a number containing a decimal portion
that<00:21:52.880><c> would</c><00:21:53.039><c> be</c><00:21:53.360><c> a</c><00:21:53.600><c> float</c><00:21:54.080><c> for</c><00:21:54.320><c> floating</c><00:21:54.799><c> point</c>

00:21:55.029 --> 00:21:55.039 align:start position:0%
that would be a float for floating point
 

00:21:55.039 --> 00:21:57.990 align:start position:0%
that would be a float for floating point
number<00:21:55.679><c> so</c><00:21:55.919><c> one</c><00:21:56.240><c> example</c><00:21:56.799><c> of</c><00:21:57.120><c> a</c><00:21:57.280><c> variable</c><00:21:57.760><c> that</c>

00:21:57.990 --> 00:21:58.000 align:start position:0%
number so one example of a variable that
 

00:21:58.000 --> 00:22:00.230 align:start position:0%
number so one example of a variable that
could<00:21:58.240><c> contain</c><00:21:58.799><c> a</c><00:21:58.960><c> floating</c><00:21:59.360><c> point</c><00:21:59.520><c> number</c><00:21:59.919><c> is</c>

00:22:00.230 --> 00:22:00.240 align:start position:0%
could contain a floating point number is
 

00:22:00.240 --> 00:22:03.029 align:start position:0%
could contain a floating point number is
a<00:22:00.640><c> gpa</c><00:22:01.200><c> grade</c><00:22:01.440><c> point</c><00:22:01.679><c> average</c><00:22:02.400><c> let's</c><00:22:02.640><c> say</c><00:22:02.799><c> that</c>

00:22:03.029 --> 00:22:03.039 align:start position:0%
a gpa grade point average let's say that
 

00:22:03.039 --> 00:22:05.549 align:start position:0%
a gpa grade point average let's say that
my<00:22:03.280><c> grade</c><00:22:03.520><c> point</c><00:22:03.760><c> average</c><00:22:04.240><c> is</c><00:22:04.559><c> a</c>

00:22:05.549 --> 00:22:05.559 align:start position:0%
my grade point average is a
 

00:22:05.559 --> 00:22:10.390 align:start position:0%
my grade point average is a
2.05<00:22:06.960><c> so</c><00:22:07.200><c> this</c><00:22:07.440><c> is</c><00:22:07.679><c> a</c><00:22:08.240><c> floating</c><00:22:09.039><c> point</c><00:22:09.840><c> number</c>

00:22:10.390 --> 00:22:10.400 align:start position:0%
2.05 so this is a floating point number
 

00:22:10.400 --> 00:22:12.549 align:start position:0%
2.05 so this is a floating point number
it's<00:22:10.640><c> a</c><00:22:10.799><c> number</c><00:22:11.200><c> that</c><00:22:11.360><c> contains</c><00:22:11.919><c> a</c><00:22:12.080><c> decimal</c>

00:22:12.549 --> 00:22:12.559 align:start position:0%
it's a number that contains a decimal
 

00:22:12.559 --> 00:22:14.789 align:start position:0%
it's a number that contains a decimal
portion<00:22:13.520><c> we</c><00:22:13.679><c> can</c><00:22:13.840><c> also</c><00:22:14.159><c> store</c><00:22:14.480><c> single</c>

00:22:14.789 --> 00:22:14.799 align:start position:0%
portion we can also store single
 

00:22:14.799 --> 00:22:17.029 align:start position:0%
portion we can also store single
characters<00:22:15.440><c> with</c><00:22:15.679><c> the</c><00:22:16.000><c> char</c><00:22:16.320><c> data</c><00:22:16.640><c> type</c><00:22:16.880><c> like</c>

00:22:17.029 --> 00:22:17.039 align:start position:0%
characters with the char data type like
 

00:22:17.039 --> 00:22:19.350 align:start position:0%
characters with the char data type like
you're<00:22:17.200><c> pronouncing</c><00:22:17.919><c> charizard</c><00:22:18.799><c> and</c><00:22:19.200><c> this</c>

00:22:19.350 --> 00:22:19.360 align:start position:0%
you're pronouncing charizard and this
 

00:22:19.360 --> 00:22:22.070 align:start position:0%
you're pronouncing charizard and this
will<00:22:19.600><c> be</c><00:22:20.000><c> a</c><00:22:20.159><c> letter</c><00:22:20.480><c> grade</c><00:22:20.799><c> let's</c><00:22:21.039><c> say</c><00:22:21.760><c> now</c><00:22:21.919><c> to</c>

00:22:22.070 --> 00:22:22.080 align:start position:0%
will be a letter grade let's say now to
 

00:22:22.080 --> 00:22:23.510 align:start position:0%
will be a letter grade let's say now to
store<00:22:22.320><c> a</c><00:22:22.400><c> single</c><00:22:22.720><c> character</c><00:22:23.120><c> we</c><00:22:23.280><c> have</c><00:22:23.360><c> to</c>

00:22:23.510 --> 00:22:23.520 align:start position:0%
store a single character we have to
 

00:22:23.520 --> 00:22:25.750 align:start position:0%
store a single character we have to
place<00:22:23.760><c> it</c><00:22:23.919><c> within</c><00:22:24.720><c> single</c><00:22:25.039><c> quotes</c><00:22:25.360><c> when</c><00:22:25.600><c> we</c>

00:22:25.750 --> 00:22:25.760 align:start position:0%
place it within single quotes when we
 

00:22:25.760 --> 00:22:28.630 align:start position:0%
place it within single quotes when we
initialize<00:22:26.400><c> it</c><00:22:26.960><c> with</c><00:22:27.280><c> my</c><00:22:27.600><c> grade</c><00:22:27.919><c> variable</c>

00:22:28.630 --> 00:22:28.640 align:start position:0%
initialize it with my grade variable
 

00:22:28.640 --> 00:22:31.510 align:start position:0%
initialize it with my grade variable
what<00:22:28.799><c> about</c><00:22:29.280><c> a</c><00:22:29.600><c> c</c><00:22:30.080><c> like</c><00:22:30.320><c> my</c><00:22:30.559><c> average</c><00:22:30.960><c> grade</c><00:22:31.280><c> is</c>

00:22:31.510 --> 00:22:31.520 align:start position:0%
what about a c like my average grade is
 

00:22:31.520 --> 00:22:34.710 align:start position:0%
what about a c like my average grade is
a<00:22:31.679><c> c</c><00:22:32.080><c> remember</c><00:22:32.640><c> everybody</c><00:22:33.360><c> c's</c><00:22:33.679><c> get</c><00:22:33.919><c> degrees</c>

00:22:34.710 --> 00:22:34.720 align:start position:0%
a c remember everybody c's get degrees
 

00:22:34.720 --> 00:22:38.390 align:start position:0%
a c remember everybody c's get degrees
so<00:22:35.120><c> char</c><00:22:35.440><c> stores</c><00:22:36.000><c> a</c><00:22:36.480><c> single</c><00:22:37.120><c> character</c>

00:22:38.390 --> 00:22:38.400 align:start position:0%
so char stores a single character
 

00:22:38.400 --> 00:22:41.510 align:start position:0%
so char stores a single character
now<00:22:38.799><c> c</c><00:22:39.280><c> isn't</c><00:22:39.679><c> an</c><00:22:39.919><c> object-oriented</c><00:22:40.880><c> language</c>

00:22:41.510 --> 00:22:41.520 align:start position:0%
now c isn't an object-oriented language
 

00:22:41.520 --> 00:22:44.070 align:start position:0%
now c isn't an object-oriented language
so<00:22:41.760><c> there</c><00:22:42.080><c> is</c><00:22:42.240><c> no</c><00:22:42.559><c> string</c><00:22:43.039><c> data</c><00:22:43.360><c> type</c><00:22:43.679><c> because</c>

00:22:44.070 --> 00:22:44.080 align:start position:0%
so there is no string data type because
 

00:22:44.080 --> 00:22:46.789 align:start position:0%
so there is no string data type because
strings<00:22:44.559><c> are</c><00:22:44.720><c> technically</c><00:22:45.280><c> objects</c><00:22:46.240><c> so</c><00:22:46.559><c> if</c><00:22:46.640><c> we</c>

00:22:46.789 --> 00:22:46.799 align:start position:0%
strings are technically objects so if we
 

00:22:46.799 --> 00:22:48.950 align:start position:0%
strings are technically objects so if we
would<00:22:46.960><c> like</c><00:22:47.200><c> to</c><00:22:47.360><c> store</c><00:22:47.760><c> like</c><00:22:48.080><c> somebody's</c><00:22:48.559><c> name</c>

00:22:48.950 --> 00:22:48.960 align:start position:0%
would like to store like somebody's name
 

00:22:48.960 --> 00:22:51.590 align:start position:0%
would like to store like somebody's name
we<00:22:49.120><c> need</c><00:22:49.360><c> a</c><00:22:49.600><c> series</c><00:22:49.919><c> of</c><00:22:50.080><c> characters</c><00:22:51.039><c> so</c><00:22:51.280><c> we</c><00:22:51.440><c> can</c>

00:22:51.590 --> 00:22:51.600 align:start position:0%
we need a series of characters so we can
 

00:22:51.600 --> 00:22:53.750 align:start position:0%
we need a series of characters so we can
create<00:22:51.840><c> what</c><00:22:52.080><c> is</c><00:22:52.159><c> called</c><00:22:52.480><c> an</c><00:22:52.640><c> array</c><00:22:53.440><c> and</c><00:22:53.600><c> to</c>

00:22:53.750 --> 00:22:53.760 align:start position:0%
create what is called an array and to
 

00:22:53.760 --> 00:22:55.430 align:start position:0%
create what is called an array and to
create<00:22:54.000><c> an</c><00:22:54.159><c> array</c><00:22:54.400><c> we</c><00:22:54.559><c> would</c><00:22:54.799><c> follow</c><00:22:55.200><c> our</c>

00:22:55.430 --> 00:22:55.440 align:start position:0%
create an array we would follow our
 

00:22:55.440 --> 00:22:57.830 align:start position:0%
create an array we would follow our
variable<00:22:55.919><c> name</c><00:22:56.240><c> with</c><00:22:56.480><c> a</c><00:22:56.640><c> set</c><00:22:57.039><c> of</c><00:22:57.520><c> square</c>

00:22:57.830 --> 00:22:57.840 align:start position:0%
variable name with a set of square
 

00:22:57.840 --> 00:23:00.390 align:start position:0%
variable name with a set of square
brackets<00:22:58.799><c> and</c><00:22:58.880><c> then</c><00:22:59.120><c> assign</c><00:22:59.440><c> this</c><00:22:59.600><c> equal</c><00:23:00.080><c> to</c>

00:23:00.390 --> 00:23:00.400 align:start position:0%
brackets and then assign this equal to
 

00:23:00.400 --> 00:23:02.310 align:start position:0%
brackets and then assign this equal to
some<00:23:00.640><c> string</c><00:23:00.960><c> of</c><00:23:01.039><c> text</c><00:23:01.520><c> some</c><00:23:01.840><c> series</c><00:23:02.240><c> of</c>

00:23:02.310 --> 00:23:02.320 align:start position:0%
some string of text some series of
 

00:23:02.320 --> 00:23:04.390 align:start position:0%
some string of text some series of
characters<00:23:03.360><c> place</c><00:23:03.679><c> your</c><00:23:03.919><c> series</c><00:23:04.240><c> of</c>

00:23:04.390 --> 00:23:04.400 align:start position:0%
characters place your series of
 

00:23:04.400 --> 00:23:06.230 align:start position:0%
characters place your series of
characters<00:23:04.880><c> within</c><00:23:05.200><c> double</c><00:23:05.520><c> quotes</c><00:23:05.919><c> and</c><00:23:06.080><c> we</c>

00:23:06.230 --> 00:23:06.240 align:start position:0%
characters within double quotes and we
 

00:23:06.240 --> 00:23:08.390 align:start position:0%
characters within double quotes and we
can<00:23:06.400><c> store</c><00:23:06.720><c> more</c><00:23:06.880><c> than</c><00:23:07.039><c> one</c><00:23:07.280><c> character</c><00:23:08.080><c> so</c>

00:23:08.390 --> 00:23:08.400 align:start position:0%
can store more than one character so
 

00:23:08.400 --> 00:23:11.110 align:start position:0%
can store more than one character so
this<00:23:08.720><c> data</c><00:23:09.039><c> type</c><00:23:09.440><c> would</c><00:23:09.679><c> be</c><00:23:09.919><c> technically</c><00:23:10.720><c> an</c>

00:23:11.110 --> 00:23:11.120 align:start position:0%
this data type would be technically an
 

00:23:11.120 --> 00:23:13.990 align:start position:0%
this data type would be technically an
array<00:23:11.840><c> of</c><00:23:12.080><c> characters</c><00:23:13.120><c> i'll</c><00:23:13.360><c> create</c><00:23:13.600><c> a</c><00:23:13.760><c> whole</c>

00:23:13.990 --> 00:23:14.000 align:start position:0%
array of characters i'll create a whole
 

00:23:14.000 --> 00:23:16.070 align:start position:0%
array of characters i'll create a whole
separate<00:23:14.400><c> video</c><00:23:14.720><c> on</c><00:23:14.960><c> arrays</c><00:23:15.760><c> this</c><00:23:15.919><c> is</c>

00:23:16.070 --> 00:23:16.080 align:start position:0%
separate video on arrays this is
 

00:23:16.080 --> 00:23:18.390 align:start position:0%
separate video on arrays this is
basically<00:23:16.480><c> how</c><00:23:16.720><c> you</c><00:23:16.960><c> can</c><00:23:17.200><c> emulate</c><00:23:17.840><c> a</c><00:23:18.000><c> string</c>

00:23:18.390 --> 00:23:18.400 align:start position:0%
basically how you can emulate a string
 

00:23:18.400 --> 00:23:20.549 align:start position:0%
basically how you can emulate a string
it's<00:23:18.640><c> really</c><00:23:18.960><c> just</c><00:23:19.440><c> a</c><00:23:19.600><c> whole</c><00:23:19.840><c> combination</c><00:23:20.400><c> of</c>

00:23:20.549 --> 00:23:20.559 align:start position:0%
it's really just a whole combination of
 

00:23:20.559 --> 00:23:22.470 align:start position:0%
it's really just a whole combination of
single<00:23:20.880><c> characters</c><00:23:21.600><c> there's</c><00:23:21.840><c> still</c><00:23:22.080><c> a</c><00:23:22.240><c> lot</c>

00:23:22.470 --> 00:23:22.480 align:start position:0%
single characters there's still a lot
 

00:23:22.480 --> 00:23:24.470 align:start position:0%
single characters there's still a lot
more<00:23:22.720><c> data</c><00:23:23.039><c> types</c><00:23:23.360><c> than</c><00:23:23.600><c> just</c><00:23:23.840><c> these</c><00:23:24.080><c> four</c><00:23:24.400><c> i</c>

00:23:24.470 --> 00:23:24.480 align:start position:0%
more data types than just these four i
 

00:23:24.480 --> 00:23:25.990 align:start position:0%
more data types than just these four i
thought<00:23:24.720><c> i</c><00:23:24.799><c> would</c><00:23:24.960><c> cover</c><00:23:25.280><c> just</c><00:23:25.520><c> some</c><00:23:25.679><c> of</c><00:23:25.760><c> the</c>

00:23:25.990 --> 00:23:26.000 align:start position:0%
thought i would cover just some of the
 

00:23:26.000 --> 00:23:28.470 align:start position:0%
thought i would cover just some of the
more<00:23:26.240><c> basic</c><00:23:26.799><c> data</c><00:23:27.120><c> types</c><00:23:27.760><c> just</c><00:23:28.000><c> because</c><00:23:28.320><c> in</c>

00:23:28.470 --> 00:23:28.480 align:start position:0%
more basic data types just because in
 

00:23:28.480 --> 00:23:30.470 align:start position:0%
more basic data types just because in
this<00:23:28.640><c> video</c><00:23:28.960><c> we're</c><00:23:29.200><c> going</c><00:23:29.360><c> to</c><00:23:29.520><c> focus</c><00:23:29.919><c> more</c><00:23:30.159><c> on</c>

00:23:30.470 --> 00:23:30.480 align:start position:0%
this video we're going to focus more on
 

00:23:30.480 --> 00:23:32.950 align:start position:0%
this video we're going to focus more on
variables<00:23:31.120><c> than</c><00:23:31.360><c> data</c><00:23:31.679><c> types</c><00:23:32.240><c> i'm</c><00:23:32.480><c> planning</c><00:23:32.799><c> a</c>

00:23:32.950 --> 00:23:32.960 align:start position:0%
variables than data types i'm planning a
 

00:23:32.960 --> 00:23:35.110 align:start position:0%
variables than data types i'm planning a
separate<00:23:33.360><c> video</c><00:23:33.760><c> just</c><00:23:34.000><c> dedicated</c><00:23:34.559><c> to</c><00:23:34.799><c> data</c>

00:23:35.110 --> 00:23:35.120 align:start position:0%
separate video just dedicated to data
 

00:23:35.120 --> 00:23:37.190 align:start position:0%
separate video just dedicated to data
types<00:23:35.520><c> because</c><00:23:35.919><c> there's</c><00:23:36.320><c> way</c><00:23:36.640><c> more</c><00:23:36.880><c> data</c>

00:23:37.190 --> 00:23:37.200 align:start position:0%
types because there's way more data
 

00:23:37.200 --> 00:23:39.750 align:start position:0%
types because there's way more data
types<00:23:37.520><c> than</c><00:23:37.760><c> just</c><00:23:38.000><c> these</c><00:23:38.320><c> four</c><00:23:38.799><c> there's</c><00:23:39.280><c> bytes</c>

00:23:39.750 --> 00:23:39.760 align:start position:0%
types than just these four there's bytes
 

00:23:39.760 --> 00:23:42.789 align:start position:0%
types than just these four there's bytes
there's<00:23:40.159><c> doubles</c><00:23:40.640><c> there's</c><00:23:41.039><c> longs</c><00:23:41.600><c> etc</c><00:23:42.559><c> now</c>

00:23:42.789 --> 00:23:42.799 align:start position:0%
there's doubles there's longs etc now
 

00:23:42.799 --> 00:23:45.190 align:start position:0%
there's doubles there's longs etc now
how<00:23:43.039><c> can</c><00:23:43.200><c> we</c><00:23:43.360><c> display</c><00:23:44.159><c> the</c><00:23:44.400><c> value</c><00:23:44.880><c> stored</c>

00:23:45.190 --> 00:23:45.200 align:start position:0%
how can we display the value stored
 

00:23:45.200 --> 00:23:47.190 align:start position:0%
how can we display the value stored
within<00:23:45.520><c> a</c><00:23:45.600><c> variable</c><00:23:46.080><c> within</c><00:23:46.559><c> a</c><00:23:46.720><c> printf</c>

00:23:47.190 --> 00:23:47.200 align:start position:0%
within a variable within a printf
 

00:23:47.200 --> 00:23:49.269 align:start position:0%
within a variable within a printf
statement<00:23:47.840><c> here's</c><00:23:48.159><c> how</c><00:23:48.400><c> we</c><00:23:48.559><c> have</c><00:23:48.640><c> to</c><00:23:48.799><c> use</c><00:23:49.039><c> what</c>

00:23:49.269 --> 00:23:49.279 align:start position:0%
statement here's how we have to use what
 

00:23:49.279 --> 00:23:52.310 align:start position:0%
statement here's how we have to use what
is<00:23:49.440><c> referred</c><00:23:49.919><c> to</c><00:23:50.159><c> as</c><00:23:50.559><c> a</c><00:23:50.799><c> format</c><00:23:51.200><c> specifier</c>

00:23:52.310 --> 00:23:52.320 align:start position:0%
is referred to as a format specifier
 

00:23:52.320 --> 00:23:55.190 align:start position:0%
is referred to as a format specifier
let's<00:23:52.480><c> say</c><00:23:52.640><c> we</c><00:23:52.799><c> have</c><00:23:53.039><c> a</c><00:23:53.360><c> printf</c><00:23:54.080><c> statement</c>

00:23:55.190 --> 00:23:55.200 align:start position:0%
let's say we have a printf statement
 

00:23:55.200 --> 00:23:57.350 align:start position:0%
let's say we have a printf statement
and<00:23:55.440><c> i</c><00:23:55.520><c> would</c><00:23:55.679><c> like</c><00:23:55.919><c> to</c><00:23:56.159><c> display</c><00:23:56.720><c> my</c><00:23:57.039><c> age</c>

00:23:57.350 --> 00:23:57.360 align:start position:0%
and i would like to display my age
 

00:23:57.360 --> 00:23:59.590 align:start position:0%
and i would like to display my age
within<00:23:57.760><c> a</c><00:23:57.919><c> message</c><00:23:58.799><c> so</c><00:23:58.960><c> let's</c><00:23:59.200><c> create</c><00:23:59.440><c> some</c>

00:23:59.590 --> 00:23:59.600 align:start position:0%
within a message so let's create some
 

00:23:59.600 --> 00:24:01.830 align:start position:0%
within a message so let's create some
text<00:24:00.159><c> you</c><00:24:00.960><c> are</c>

00:24:01.830 --> 00:24:01.840 align:start position:0%
text you are
 

00:24:01.840 --> 00:24:05.350 align:start position:0%
text you are
age<00:24:02.640><c> years</c><00:24:03.279><c> old</c><00:24:04.080><c> if</c><00:24:04.320><c> i</c><00:24:04.400><c> would</c><00:24:04.559><c> like</c><00:24:04.799><c> to</c><00:24:04.960><c> display</c>

00:24:05.350 --> 00:24:05.360 align:start position:0%
age years old if i would like to display
 

00:24:05.360 --> 00:24:07.190 align:start position:0%
age years old if i would like to display
the<00:24:05.520><c> value</c><00:24:05.919><c> contained</c><00:24:06.400><c> within</c><00:24:06.720><c> my</c><00:24:06.960><c> edge</c>

00:24:07.190 --> 00:24:07.200 align:start position:0%
the value contained within my edge
 

00:24:07.200 --> 00:24:10.070 align:start position:0%
the value contained within my edge
variable<00:24:08.000><c> wherever</c><00:24:08.480><c> i</c><00:24:08.640><c> would</c><00:24:08.880><c> like</c><00:24:09.120><c> to</c><00:24:09.440><c> insert</c>

00:24:10.070 --> 00:24:10.080 align:start position:0%
variable wherever i would like to insert
 

00:24:10.080 --> 00:24:12.390 align:start position:0%
variable wherever i would like to insert
that<00:24:10.320><c> value</c><00:24:11.039><c> i</c><00:24:11.200><c> will</c><00:24:11.360><c> place</c><00:24:11.760><c> a</c><00:24:12.000><c> format</c>

00:24:12.390 --> 00:24:12.400 align:start position:0%
that value i will place a format
 

00:24:12.400 --> 00:24:14.630 align:start position:0%
that value i will place a format
specifier<00:24:13.120><c> which</c><00:24:13.360><c> is</c><00:24:13.520><c> represented</c><00:24:14.240><c> by</c><00:24:14.480><c> a</c>

00:24:14.630 --> 00:24:14.640 align:start position:0%
specifier which is represented by a
 

00:24:14.640 --> 00:24:17.430 align:start position:0%
specifier which is represented by a
percent<00:24:15.120><c> sign</c><00:24:15.679><c> and</c><00:24:15.760><c> then</c><00:24:16.000><c> follow</c><00:24:16.320><c> this</c><00:24:16.640><c> with</c><00:24:16.960><c> a</c>

00:24:17.430 --> 00:24:17.440 align:start position:0%
percent sign and then follow this with a
 

00:24:17.440 --> 00:24:19.430 align:start position:0%
percent sign and then follow this with a
secret<00:24:17.919><c> character</c><00:24:18.480><c> that</c><00:24:18.640><c> represents</c><00:24:19.279><c> the</c>

00:24:19.430 --> 00:24:19.440 align:start position:0%
secret character that represents the
 

00:24:19.440 --> 00:24:21.990 align:start position:0%
secret character that represents the
data<00:24:19.760><c> type</c><00:24:20.080><c> of</c><00:24:20.240><c> what</c><00:24:20.400><c> we're</c><00:24:20.640><c> inserting</c><00:24:21.520><c> so</c><00:24:21.760><c> if</c>

00:24:21.990 --> 00:24:22.000 align:start position:0%
data type of what we're inserting so if
 

00:24:22.000 --> 00:24:24.789 align:start position:0%
data type of what we're inserting so if
i<00:24:22.080><c> need</c><00:24:22.320><c> to</c><00:24:22.640><c> display</c><00:24:23.200><c> my</c><00:24:23.440><c> age</c><00:24:23.679><c> variable</c><00:24:24.400><c> i</c><00:24:24.559><c> will</c>

00:24:24.789 --> 00:24:24.799 align:start position:0%
i need to display my age variable i will
 

00:24:24.799 --> 00:24:27.430 align:start position:0%
i need to display my age variable i will
use<00:24:25.120><c> a</c><00:24:25.279><c> percent</c><00:24:25.679><c> sign</c><00:24:26.000><c> as</c><00:24:26.240><c> a</c><00:24:26.480><c> placeholder</c>

00:24:27.430 --> 00:24:27.440 align:start position:0%
use a percent sign as a placeholder
 

00:24:27.440 --> 00:24:30.710 align:start position:0%
use a percent sign as a placeholder
followed<00:24:27.840><c> by</c><00:24:28.400><c> d</c><00:24:28.799><c> for</c><00:24:29.120><c> decimal</c><00:24:30.000><c> and</c><00:24:30.159><c> then</c><00:24:30.400><c> after</c>

00:24:30.710 --> 00:24:30.720 align:start position:0%
followed by d for decimal and then after
 

00:24:30.720 --> 00:24:32.950 align:start position:0%
followed by d for decimal and then after
my<00:24:30.960><c> string</c><00:24:31.200><c> of</c><00:24:31.360><c> text</c><00:24:31.760><c> outside</c><00:24:32.240><c> of</c><00:24:32.400><c> the</c><00:24:32.640><c> double</c>

00:24:32.950 --> 00:24:32.960 align:start position:0%
my string of text outside of the double
 

00:24:32.960 --> 00:24:35.669 align:start position:0%
my string of text outside of the double
quotes<00:24:33.679><c> add</c><00:24:34.080><c> comma</c><00:24:34.640><c> then</c><00:24:34.960><c> the</c><00:24:35.200><c> name</c><00:24:35.440><c> of</c><00:24:35.600><c> the</c>

00:24:35.669 --> 00:24:35.679 align:start position:0%
quotes add comma then the name of the
 

00:24:35.679 --> 00:24:37.669 align:start position:0%
quotes add comma then the name of the
variable<00:24:36.159><c> you</c><00:24:36.320><c> would</c><00:24:36.480><c> like</c><00:24:36.720><c> to</c><00:24:36.960><c> insert</c><00:24:37.440><c> at</c>

00:24:37.669 --> 00:24:37.679 align:start position:0%
variable you would like to insert at
 

00:24:37.679 --> 00:24:41.110 align:start position:0%
variable you would like to insert at
this<00:24:38.000><c> placeholder</c><00:24:39.279><c> so</c><00:24:39.679><c> at</c><00:24:40.159><c> this</c><00:24:40.400><c> location</c><00:24:41.039><c> i</c>

00:24:41.110 --> 00:24:41.120 align:start position:0%
this placeholder so at this location i
 

00:24:41.120 --> 00:24:44.630 align:start position:0%
this placeholder so at this location i
will<00:24:41.360><c> insert</c><00:24:42.000><c> age</c><00:24:42.559><c> and</c><00:24:42.720><c> then</c><00:24:42.880><c> let's</c><00:24:43.120><c> try</c><00:24:43.360><c> this</c>

00:24:44.630 --> 00:24:44.640 align:start position:0%
will insert age and then let's try this
 

00:24:44.640 --> 00:24:47.590 align:start position:0%
will insert age and then let's try this
you<00:24:45.039><c> are</c><00:24:45.440><c> 21</c><00:24:46.000><c> years</c><00:24:46.240><c> old</c><00:24:46.799><c> so</c><00:24:46.960><c> let's</c><00:24:47.200><c> try</c><00:24:47.440><c> that</c>

00:24:47.590 --> 00:24:47.600 align:start position:0%
you are 21 years old so let's try that
 

00:24:47.600 --> 00:24:49.510 align:start position:0%
you are 21 years old so let's try that
again<00:24:47.919><c> with</c><00:24:48.159><c> a</c><00:24:48.400><c> different</c><00:24:48.720><c> variable</c><00:24:49.279><c> let's</c>

00:24:49.510 --> 00:24:49.520 align:start position:0%
again with a different variable let's
 

00:24:49.520 --> 00:24:51.669 align:start position:0%
again with a different variable let's
say<00:24:50.080><c> let's</c><00:24:50.240><c> go</c><00:24:50.400><c> with</c><00:24:50.640><c> name</c>

00:24:51.669 --> 00:24:51.679 align:start position:0%
say let's go with name
 

00:24:51.679 --> 00:24:54.950 align:start position:0%
say let's go with name
i'll<00:24:51.919><c> add</c><00:24:52.240><c> a</c><00:24:52.559><c> second</c><00:24:52.880><c> printf</c><00:24:53.360><c> statement</c><00:24:54.240><c> print</c>

00:24:54.950 --> 00:24:54.960 align:start position:0%
i'll add a second printf statement print
 

00:24:54.960 --> 00:24:56.789 align:start position:0%
i'll add a second printf statement print
f

00:24:56.789 --> 00:24:56.799 align:start position:0%
f
 

00:24:56.799 --> 00:24:59.190 align:start position:0%
f
and<00:24:56.960><c> then</c><00:24:57.279><c> let's</c><00:24:57.520><c> say</c><00:24:57.840><c> hello</c>

00:24:59.190 --> 00:24:59.200 align:start position:0%
and then let's say hello
 

00:24:59.200 --> 00:25:01.750 align:start position:0%
and then let's say hello
and<00:24:59.440><c> i</c><00:24:59.520><c> would</c><00:24:59.679><c> like</c><00:25:00.000><c> to</c><00:25:00.159><c> insert</c><00:25:00.799><c> my</c><00:25:01.120><c> name</c><00:25:01.440><c> here</c>

00:25:01.750 --> 00:25:01.760 align:start position:0%
and i would like to insert my name here
 

00:25:01.760 --> 00:25:04.630 align:start position:0%
and i would like to insert my name here
so<00:25:02.000><c> use</c><00:25:02.240><c> a</c><00:25:02.400><c> percent</c><00:25:02.799><c> sign</c><00:25:03.200><c> as</c><00:25:03.600><c> a</c><00:25:04.000><c> placeholder</c>

00:25:04.630 --> 00:25:04.640 align:start position:0%
so use a percent sign as a placeholder
 

00:25:04.640 --> 00:25:07.510 align:start position:0%
so use a percent sign as a placeholder
it's<00:25:04.799><c> a</c><00:25:04.960><c> format</c><00:25:05.360><c> specifier</c><00:25:06.480><c> then</c><00:25:06.720><c> to</c><00:25:06.960><c> display</c>

00:25:07.510 --> 00:25:07.520 align:start position:0%
it's a format specifier then to display
 

00:25:07.520 --> 00:25:09.750 align:start position:0%
it's a format specifier then to display
a<00:25:07.679><c> character</c><00:25:08.080><c> array</c><00:25:08.480><c> that</c><00:25:08.640><c> would</c><00:25:08.799><c> be</c><00:25:09.039><c> s</c><00:25:09.520><c> for</c>

00:25:09.750 --> 00:25:09.760 align:start position:0%
a character array that would be s for
 

00:25:09.760 --> 00:25:10.710 align:start position:0%
a character array that would be s for
string

00:25:10.710 --> 00:25:10.720 align:start position:0%
string
 

00:25:10.720 --> 00:25:13.029 align:start position:0%
string
and<00:25:10.880><c> then</c><00:25:11.200><c> add</c><00:25:11.760><c> comma</c>

00:25:13.029 --> 00:25:13.039 align:start position:0%
and then add comma
 

00:25:13.039 --> 00:25:15.430 align:start position:0%
and then add comma
name

00:25:15.430 --> 00:25:15.440 align:start position:0%
name
 

00:25:15.440 --> 00:25:17.590 align:start position:0%
name
oh<00:25:15.679><c> then</c><00:25:15.919><c> we</c><00:25:16.080><c> may</c><00:25:16.240><c> need</c><00:25:16.400><c> to</c><00:25:16.559><c> add</c><00:25:16.799><c> a</c><00:25:17.200><c> new</c><00:25:17.360><c> line</c>

00:25:17.590 --> 00:25:17.600 align:start position:0%
oh then we may need to add a new line
 

00:25:17.600 --> 00:25:19.110 align:start position:0%
oh then we may need to add a new line
character<00:25:18.000><c> to</c><00:25:18.080><c> the</c><00:25:18.159><c> end</c><00:25:18.320><c> of</c><00:25:18.400><c> these</c><00:25:18.640><c> because</c><00:25:18.960><c> i</c>

00:25:19.110 --> 00:25:19.120 align:start position:0%
character to the end of these because i
 

00:25:19.120 --> 00:25:21.830 align:start position:0%
character to the end of these because i
forgot<00:25:19.679><c> let's</c><00:25:19.919><c> try</c><00:25:20.080><c> that</c><00:25:20.240><c> again</c>

00:25:21.830 --> 00:25:21.840 align:start position:0%
forgot let's try that again
 

00:25:21.840 --> 00:25:24.710 align:start position:0%
forgot let's try that again
hello<00:25:22.240><c> bro</c><00:25:22.640><c> you</c><00:25:22.880><c> are</c><00:25:23.039><c> 21</c><00:25:23.520><c> years</c><00:25:23.760><c> old</c><00:25:24.480><c> okay</c>

00:25:24.710 --> 00:25:24.720 align:start position:0%
hello bro you are 21 years old okay
 

00:25:24.720 --> 00:25:26.830 align:start position:0%
hello bro you are 21 years old okay
let's<00:25:25.039><c> display</c><00:25:25.600><c> our</c>

00:25:26.830 --> 00:25:26.840 align:start position:0%
let's display our
 

00:25:26.840 --> 00:25:30.390 align:start position:0%
let's display our
grade<00:25:27.919><c> printf</c>

00:25:30.390 --> 00:25:30.400 align:start position:0%
grade printf
 

00:25:30.400 --> 00:25:32.310 align:start position:0%
grade printf
then<00:25:30.640><c> within</c><00:25:31.039><c> quotes</c>

00:25:32.310 --> 00:25:32.320 align:start position:0%
then within quotes
 

00:25:32.320 --> 00:25:34.950 align:start position:0%
then within quotes
your<00:25:33.200><c> average</c>

00:25:34.950 --> 00:25:34.960 align:start position:0%
your average
 

00:25:34.960 --> 00:25:35.990 align:start position:0%
your average
grade

00:25:35.990 --> 00:25:36.000 align:start position:0%
grade
 

00:25:36.000 --> 00:25:36.950 align:start position:0%
grade
is

00:25:36.950 --> 00:25:36.960 align:start position:0%
is
 

00:25:36.960 --> 00:25:39.110 align:start position:0%
is
then<00:25:37.200><c> to</c><00:25:37.360><c> display</c><00:25:37.919><c> a</c><00:25:38.240><c> character</c><00:25:38.640><c> variable</c>

00:25:39.110 --> 00:25:39.120 align:start position:0%
then to display a character variable
 

00:25:39.120 --> 00:25:42.710 align:start position:0%
then to display a character variable
that<00:25:39.279><c> would</c><00:25:39.440><c> be</c><00:25:39.840><c> percent</c><00:25:40.720><c> c</c><00:25:41.039><c> for</c><00:25:41.279><c> character</c>

00:25:42.710 --> 00:25:42.720 align:start position:0%
that would be percent c for character
 

00:25:42.720 --> 00:25:44.870 align:start position:0%
that would be percent c for character
then<00:25:42.960><c> outside</c><00:25:43.360><c> of</c><00:25:43.520><c> our</c><00:25:43.600><c> double</c><00:25:43.919><c> quotes</c><00:25:44.320><c> add</c>

00:25:44.870 --> 00:25:44.880 align:start position:0%
then outside of our double quotes add
 

00:25:44.880 --> 00:25:46.789 align:start position:0%
then outside of our double quotes add
comma<00:25:45.600><c> the</c><00:25:45.760><c> name</c><00:25:45.919><c> of</c><00:25:46.000><c> the</c><00:25:46.080><c> variable</c><00:25:46.480><c> we</c><00:25:46.640><c> would</c>

00:25:46.789 --> 00:25:46.799 align:start position:0%
comma the name of the variable we would
 

00:25:46.799 --> 00:25:49.430 align:start position:0%
comma the name of the variable we would
like<00:25:46.960><c> to</c><00:25:47.120><c> insert</c><00:25:47.520><c> at</c><00:25:47.600><c> this</c><00:25:47.840><c> location</c><00:25:48.640><c> so</c><00:25:48.880><c> comma</c>

00:25:49.430 --> 00:25:49.440 align:start position:0%
like to insert at this location so comma
 

00:25:49.440 --> 00:25:50.470 align:start position:0%
like to insert at this location so comma
grid

00:25:50.470 --> 00:25:50.480 align:start position:0%
grid
 

00:25:50.480 --> 00:25:51.990 align:start position:0%
grid
i<00:25:50.559><c> think</c><00:25:50.799><c> i'm</c><00:25:50.880><c> just</c><00:25:51.039><c> going</c><00:25:51.200><c> to</c><00:25:51.440><c> space</c><00:25:51.760><c> these</c>

00:25:51.990 --> 00:25:52.000 align:start position:0%
i think i'm just going to space these
 

00:25:52.000 --> 00:25:53.269 align:start position:0%
i think i'm just going to space these
out<00:25:52.159><c> a</c><00:25:52.240><c> little</c><00:25:52.400><c> bit</c>

00:25:53.269 --> 00:25:53.279 align:start position:0%
out a little bit
 

00:25:53.279 --> 00:25:55.430 align:start position:0%
out a little bit
okay<00:25:53.760><c> then</c><00:25:54.000><c> i</c><00:25:54.080><c> will</c><00:25:54.320><c> add</c><00:25:54.640><c> a</c><00:25:55.039><c> new</c><00:25:55.200><c> line</c>

00:25:55.430 --> 00:25:55.440 align:start position:0%
okay then i will add a new line
 

00:25:55.440 --> 00:25:59.110 align:start position:0%
okay then i will add a new line
character<00:25:55.760><c> to</c><00:25:55.919><c> the</c><00:25:56.080><c> end</c><00:25:56.159><c> of</c><00:25:56.320><c> this</c>

00:25:59.110 --> 00:25:59.120 align:start position:0%
 
 

00:25:59.120 --> 00:26:01.750 align:start position:0%
 
okay<00:25:59.440><c> hello</c><00:25:59.760><c> bro</c><00:26:00.080><c> you</c><00:26:00.240><c> are</c><00:26:00.400><c> 21</c><00:26:00.880><c> years</c><00:26:01.120><c> old</c><00:26:01.520><c> your</c>

00:26:01.750 --> 00:26:01.760 align:start position:0%
okay hello bro you are 21 years old your
 

00:26:01.760 --> 00:26:04.710 align:start position:0%
okay hello bro you are 21 years old your
average<00:26:02.320><c> grade</c><00:26:03.039><c> is</c><00:26:03.679><c> c</c>

00:26:04.710 --> 00:26:04.720 align:start position:0%
average grade is c
 

00:26:04.720 --> 00:26:07.110 align:start position:0%
average grade is c
then<00:26:04.960><c> to</c><00:26:05.120><c> display</c><00:26:05.760><c> a</c><00:26:06.080><c> float</c><00:26:06.559><c> that</c><00:26:06.720><c> would</c><00:26:06.880><c> be</c>

00:26:07.110 --> 00:26:07.120 align:start position:0%
then to display a float that would be
 

00:26:07.120 --> 00:26:08.549 align:start position:0%
then to display a float that would be
percent<00:26:07.760><c> f</c>

00:26:08.549 --> 00:26:08.559 align:start position:0%
percent f
 

00:26:08.559 --> 00:26:11.669 align:start position:0%
percent f
print<00:26:09.120><c> f</c>

00:26:11.669 --> 00:26:11.679 align:start position:0%
print f
 

00:26:11.679 --> 00:26:13.669 align:start position:0%
print f
your<00:26:12.240><c> gpa</c>

00:26:13.669 --> 00:26:13.679 align:start position:0%
your gpa
 

00:26:13.679 --> 00:26:15.029 align:start position:0%
your gpa
is

00:26:15.029 --> 00:26:15.039 align:start position:0%
is
 

00:26:15.039 --> 00:26:16.870 align:start position:0%
is
percent<00:26:16.159><c> f</c>

00:26:16.870 --> 00:26:16.880 align:start position:0%
percent f
 

00:26:16.880 --> 00:26:19.750 align:start position:0%
percent f
then<00:26:17.120><c> i'll</c><00:26:17.279><c> add</c><00:26:17.520><c> a</c><00:26:17.679><c> new</c><00:26:17.840><c> line</c><00:26:18.080><c> character</c>

00:26:19.750 --> 00:26:19.760 align:start position:0%
then i'll add a new line character
 

00:26:19.760 --> 00:26:21.830 align:start position:0%
then i'll add a new line character
so<00:26:20.159><c> follow</c><00:26:20.480><c> this</c><00:26:20.720><c> with</c><00:26:20.960><c> comma</c><00:26:21.520><c> the</c><00:26:21.600><c> name</c><00:26:21.760><c> of</c>

00:26:21.830 --> 00:26:21.840 align:start position:0%
so follow this with comma the name of
 

00:26:21.840 --> 00:26:24.230 align:start position:0%
so follow this with comma the name of
the<00:26:22.000><c> variable</c><00:26:22.640><c> gpa</c>

00:26:24.230 --> 00:26:24.240 align:start position:0%
the variable gpa
 

00:26:24.240 --> 00:26:28.070 align:start position:0%
the variable gpa
okay<00:26:24.640><c> your</c><00:26:24.880><c> gpa</c><00:26:25.600><c> is</c><00:26:26.000><c> 2.05</c>

00:26:28.070 --> 00:26:28.080 align:start position:0%
okay your gpa is 2.05
 

00:26:28.080 --> 00:26:30.310 align:start position:0%
okay your gpa is 2.05
so<00:26:28.240><c> later</c><00:26:28.559><c> on</c><00:26:28.880><c> we'll</c><00:26:29.120><c> discuss</c><00:26:29.520><c> more</c><00:26:29.840><c> about</c>

00:26:30.310 --> 00:26:30.320 align:start position:0%
so later on we'll discuss more about
 

00:26:30.320 --> 00:26:32.230 align:start position:0%
so later on we'll discuss more about
format<00:26:30.720><c> specifiers</c><00:26:31.360><c> there's</c><00:26:31.679><c> ways</c><00:26:31.919><c> that</c><00:26:32.080><c> we</c>

00:26:32.230 --> 00:26:32.240 align:start position:0%
format specifiers there's ways that we
 

00:26:32.240 --> 00:26:34.310 align:start position:0%
format specifiers there's ways that we
can<00:26:32.400><c> format</c><00:26:32.960><c> how</c><00:26:33.360><c> our</c><00:26:33.600><c> variables</c><00:26:34.159><c> are</c>

00:26:34.310 --> 00:26:34.320 align:start position:0%
can format how our variables are
 

00:26:34.320 --> 00:26:36.149 align:start position:0%
can format how our variables are
displayed<00:26:35.120><c> i</c><00:26:35.279><c> just</c><00:26:35.520><c> realized</c><00:26:35.919><c> that</c><00:26:36.000><c> i</c>

00:26:36.149 --> 00:26:36.159 align:start position:0%
displayed i just realized that i
 

00:26:36.159 --> 00:26:38.870 align:start position:0%
displayed i just realized that i
misspelled<00:26:36.640><c> average</c><00:26:37.039><c> twice</c><00:26:37.919><c> so</c><00:26:38.159><c> yeah</c><00:26:38.480><c> those</c>

00:26:38.870 --> 00:26:38.880 align:start position:0%
misspelled average twice so yeah those
 

00:26:38.880 --> 00:26:41.350 align:start position:0%
misspelled average twice so yeah those
are<00:26:39.039><c> variables</c><00:26:39.919><c> they</c><00:26:40.240><c> are</c><00:26:40.400><c> allocated</c><00:26:41.039><c> space</c>

00:26:41.350 --> 00:26:41.360 align:start position:0%
are variables they are allocated space
 

00:26:41.360 --> 00:26:44.230 align:start position:0%
are variables they are allocated space
and<00:26:41.520><c> memory</c><00:26:41.919><c> to</c><00:26:42.080><c> store</c><00:26:42.320><c> a</c><00:26:42.480><c> value</c><00:26:43.360><c> we</c><00:26:43.600><c> refer</c><00:26:44.000><c> to</c>

00:26:44.230 --> 00:26:44.240 align:start position:0%
and memory to store a value we refer to
 

00:26:44.240 --> 00:26:47.190 align:start position:0%
and memory to store a value we refer to
a<00:26:44.559><c> variable's</c><00:26:45.279><c> name</c><00:26:45.840><c> to</c><00:26:46.080><c> access</c><00:26:46.640><c> the</c><00:26:46.799><c> stored</c>

00:26:47.190 --> 00:26:47.200 align:start position:0%
a variable's name to access the stored
 

00:26:47.200 --> 00:26:48.149 align:start position:0%
a variable's name to access the stored
value

00:26:48.149 --> 00:26:48.159 align:start position:0%
value
 

00:26:48.159 --> 00:26:51.029 align:start position:0%
value
that<00:26:48.480><c> variable</c><00:26:49.200><c> now</c><00:26:49.440><c> behaves</c><00:26:50.159><c> as</c><00:26:50.400><c> if</c><00:26:50.559><c> it</c><00:26:50.640><c> was</c>

00:26:51.029 --> 00:26:51.039 align:start position:0%
that variable now behaves as if it was
 

00:26:51.039 --> 00:26:52.950 align:start position:0%
that variable now behaves as if it was
the<00:26:51.200><c> value</c><00:26:51.600><c> that</c><00:26:51.840><c> it</c><00:26:51.919><c> contains</c>

00:26:52.950 --> 00:26:52.960 align:start position:0%
the value that it contains
 

00:26:52.960 --> 00:26:54.870 align:start position:0%
the value that it contains
but<00:26:53.200><c> to</c><00:26:53.360><c> declare</c><00:26:53.760><c> a</c><00:26:53.840><c> variable</c><00:26:54.320><c> we</c><00:26:54.559><c> have</c><00:26:54.720><c> to</c>

00:26:54.870 --> 00:26:54.880 align:start position:0%
but to declare a variable we have to
 

00:26:54.880 --> 00:26:56.789 align:start position:0%
but to declare a variable we have to
state<00:26:55.360><c> what</c><00:26:55.600><c> type</c><00:26:55.840><c> of</c><00:26:56.000><c> data</c><00:26:56.320><c> that</c><00:26:56.480><c> we</c><00:26:56.640><c> are</c>

00:26:56.789 --> 00:26:56.799 align:start position:0%
state what type of data that we are
 

00:26:56.799 --> 00:26:59.110 align:start position:0%
state what type of data that we are
storing<00:26:57.200><c> within</c><00:26:57.520><c> that</c><00:26:57.760><c> variable</c><00:26:58.559><c> so</c><00:26:58.799><c> yeah</c>

00:26:59.110 --> 00:26:59.120 align:start position:0%
storing within that variable so yeah
 

00:26:59.120 --> 00:27:01.269 align:start position:0%
storing within that variable so yeah
those<00:26:59.440><c> are</c><00:26:59.679><c> variables</c><00:27:00.400><c> if</c><00:27:00.559><c> this</c><00:27:00.799><c> video</c><00:27:01.039><c> helped</c>

00:27:01.269 --> 00:27:01.279 align:start position:0%
those are variables if this video helped
 

00:27:01.279 --> 00:27:03.110 align:start position:0%
those are variables if this video helped
you<00:27:01.440><c> out</c><00:27:01.600><c> help</c><00:27:01.919><c> me</c><00:27:02.080><c> out</c><00:27:02.240><c> by</c><00:27:02.559><c> smashing</c><00:27:02.960><c> that</c>

00:27:03.110 --> 00:27:03.120 align:start position:0%
you out help me out by smashing that
 

00:27:03.120 --> 00:27:04.870 align:start position:0%
you out help me out by smashing that
like<00:27:03.360><c> button</c><00:27:03.760><c> leave</c><00:27:03.919><c> a</c><00:27:04.000><c> random</c><00:27:04.320><c> comment</c><00:27:04.640><c> down</c>

00:27:04.870 --> 00:27:04.880 align:start position:0%
like button leave a random comment down
 

00:27:04.880 --> 00:27:06.789 align:start position:0%
like button leave a random comment down
below<00:27:05.600><c> and</c><00:27:05.840><c> subscribe</c><00:27:06.320><c> if</c><00:27:06.480><c> you'd</c><00:27:06.559><c> like</c><00:27:06.720><c> to</c>

00:27:06.789 --> 00:27:06.799 align:start position:0%
below and subscribe if you'd like to
 

00:27:06.799 --> 00:27:11.110 align:start position:0%
below and subscribe if you'd like to
become<00:27:07.039><c> a</c><00:27:07.200><c> fellow</c><00:27:07.520><c> bro</c>

00:27:11.110 --> 00:27:11.120 align:start position:0%
 
 

00:27:11.120 --> 00:27:12.710 align:start position:0%
 
all<00:27:11.279><c> right</c><00:27:11.520><c> what's</c><00:27:11.760><c> going</c><00:27:12.000><c> on</c><00:27:12.159><c> people</c><00:27:12.480><c> let's</c>

00:27:12.710 --> 00:27:12.720 align:start position:0%
all right what's going on people let's
 

00:27:12.720 --> 00:27:14.470 align:start position:0%
all right what's going on people let's
discuss<00:27:13.200><c> more</c><00:27:13.360><c> about</c><00:27:13.679><c> data</c><00:27:14.000><c> types</c><00:27:14.400><c> we</c>

00:27:14.470 --> 00:27:14.480 align:start position:0%
discuss more about data types we
 

00:27:14.480 --> 00:27:15.909 align:start position:0%
discuss more about data types we
discussed<00:27:14.880><c> a</c><00:27:14.960><c> few</c><00:27:15.120><c> in</c><00:27:15.200><c> the</c><00:27:15.279><c> last</c><00:27:15.520><c> video</c><00:27:15.760><c> but</c>

00:27:15.909 --> 00:27:15.919 align:start position:0%
discussed a few in the last video but
 

00:27:15.919 --> 00:27:17.110 align:start position:0%
discussed a few in the last video but
there's<00:27:16.159><c> a</c><00:27:16.240><c> few</c><00:27:16.400><c> more</c><00:27:16.640><c> that</c><00:27:16.720><c> you</c><00:27:16.799><c> should</c><00:27:16.960><c> be</c>

00:27:17.110 --> 00:27:17.120 align:start position:0%
there's a few more that you should be
 

00:27:17.120 --> 00:27:19.269 align:start position:0%
there's a few more that you should be
made<00:27:17.279><c> aware</c><00:27:17.600><c> of</c><00:27:17.919><c> so</c><00:27:18.320><c> chars</c><00:27:18.720><c> they</c><00:27:18.960><c> store</c><00:27:19.200><c> a</c>

00:27:19.269 --> 00:27:19.279 align:start position:0%
made aware of so chars they store a
 

00:27:19.279 --> 00:27:21.990 align:start position:0%
made aware of so chars they store a
single<00:27:19.600><c> character</c><00:27:20.240><c> and</c><00:27:20.480><c> use</c><00:27:20.799><c> the</c><00:27:21.120><c> percent</c><00:27:21.760><c> c</c>

00:27:21.990 --> 00:27:22.000 align:start position:0%
single character and use the percent c
 

00:27:22.000 --> 00:27:24.070 align:start position:0%
single character and use the percent c
format<00:27:22.320><c> specifier</c><00:27:23.039><c> to</c><00:27:23.120><c> display</c><00:27:23.600><c> a</c><00:27:23.760><c> single</c>

00:27:24.070 --> 00:27:24.080 align:start position:0%
format specifier to display a single
 

00:27:24.080 --> 00:27:25.830 align:start position:0%
format specifier to display a single
character<00:27:24.640><c> there's</c><00:27:24.799><c> an</c><00:27:24.960><c> array</c><00:27:25.200><c> of</c><00:27:25.279><c> characters</c>

00:27:25.830 --> 00:27:25.840 align:start position:0%
character there's an array of characters
 

00:27:25.840 --> 00:27:28.310 align:start position:0%
character there's an array of characters
which<00:27:26.080><c> can</c><00:27:26.240><c> store</c><00:27:26.799><c> one</c><00:27:27.039><c> or</c><00:27:27.279><c> more</c><00:27:27.600><c> characters</c>

00:27:28.310 --> 00:27:28.320 align:start position:0%
which can store one or more characters
 

00:27:28.320 --> 00:27:30.710 align:start position:0%
which can store one or more characters
then<00:27:28.480><c> to</c><00:27:28.640><c> display</c><00:27:29.039><c> that</c><00:27:29.360><c> you</c><00:27:29.520><c> use</c><00:27:29.840><c> percent</c><00:27:30.399><c> s</c>

00:27:30.710 --> 00:27:30.720 align:start position:0%
then to display that you use percent s
 

00:27:30.720 --> 00:27:32.870 align:start position:0%
then to display that you use percent s
as<00:27:30.880><c> the</c><00:27:30.960><c> format</c><00:27:31.279><c> specifier</c><00:27:32.000><c> floats</c><00:27:32.559><c> they</c><00:27:32.720><c> will</c>

00:27:32.870 --> 00:27:32.880 align:start position:0%
as the format specifier floats they will
 

00:27:32.880 --> 00:27:35.830 align:start position:0%
as the format specifier floats they will
store<00:27:33.520><c> a</c><00:27:33.919><c> decimal</c><00:27:34.480><c> number</c><00:27:34.880><c> and</c><00:27:35.039><c> we</c><00:27:35.279><c> use</c><00:27:35.600><c> the</c>

00:27:35.830 --> 00:27:35.840 align:start position:0%
store a decimal number and we use the
 

00:27:35.840 --> 00:27:38.470 align:start position:0%
store a decimal number and we use the
percent<00:27:36.399><c> f</c><00:27:36.720><c> format</c><00:27:37.120><c> specifier</c><00:27:37.760><c> to</c><00:27:37.840><c> display</c><00:27:38.320><c> a</c>

00:27:38.470 --> 00:27:38.480 align:start position:0%
percent f format specifier to display a
 

00:27:38.480 --> 00:27:40.789 align:start position:0%
percent f format specifier to display a
floating<00:27:38.799><c> point</c><00:27:39.039><c> number</c><00:27:39.440><c> and</c><00:27:39.679><c> then</c><00:27:40.080><c> we</c><00:27:40.320><c> have</c>

00:27:40.789 --> 00:27:40.799 align:start position:0%
floating point number and then we have
 

00:27:40.799 --> 00:27:42.950 align:start position:0%
floating point number and then we have
integers<00:27:41.279><c> which</c><00:27:41.600><c> only</c><00:27:41.919><c> store</c><00:27:42.320><c> a</c><00:27:42.559><c> whole</c>

00:27:42.950 --> 00:27:42.960 align:start position:0%
integers which only store a whole
 

00:27:42.960 --> 00:27:44.950 align:start position:0%
integers which only store a whole
integer<00:27:43.440><c> there</c><00:27:43.520><c> is</c><00:27:43.679><c> no</c><00:27:43.919><c> decimal</c><00:27:44.320><c> portion</c><00:27:44.799><c> and</c>

00:27:44.950 --> 00:27:44.960 align:start position:0%
integer there is no decimal portion and
 

00:27:44.960 --> 00:27:47.430 align:start position:0%
integer there is no decimal portion and
we<00:27:45.120><c> use</c><00:27:45.360><c> percent</c><00:27:45.760><c> d</c><00:27:46.080><c> to</c><00:27:46.240><c> display</c><00:27:46.720><c> an</c><00:27:46.960><c> integer</c>

00:27:47.430 --> 00:27:47.440 align:start position:0%
we use percent d to display an integer
 

00:27:47.440 --> 00:27:49.430 align:start position:0%
we use percent d to display an integer
now<00:27:47.600><c> along</c><00:27:47.919><c> with</c><00:27:48.080><c> floats</c><00:27:48.480><c> we</c><00:27:48.640><c> have</c><00:27:48.799><c> doubles</c>

00:27:49.430 --> 00:27:49.440 align:start position:0%
now along with floats we have doubles
 

00:27:49.440 --> 00:27:51.669 align:start position:0%
now along with floats we have doubles
doubles<00:27:49.840><c> have</c><00:27:50.240><c> double</c><00:27:50.640><c> the</c><00:27:50.880><c> precision</c><00:27:51.440><c> of</c><00:27:51.600><c> a</c>

00:27:51.669 --> 00:27:51.679 align:start position:0%
doubles have double the precision of a
 

00:27:51.679 --> 00:27:53.830 align:start position:0%
doubles have double the precision of a
float<00:27:52.000><c> we</c><00:27:52.159><c> can</c><00:27:52.320><c> store</c><00:27:52.640><c> even</c><00:27:52.960><c> more</c><00:27:53.200><c> significant</c>

00:27:53.830 --> 00:27:53.840 align:start position:0%
float we can store even more significant
 

00:27:53.840 --> 00:27:56.230 align:start position:0%
float we can store even more significant
digits<00:27:54.399><c> floats</c><00:27:54.880><c> use</c><00:27:55.279><c> four</c><00:27:55.440><c> bytes</c><00:27:55.760><c> of</c><00:27:55.840><c> memory</c>

00:27:56.230 --> 00:27:56.240 align:start position:0%
digits floats use four bytes of memory
 

00:27:56.240 --> 00:27:58.389 align:start position:0%
digits floats use four bytes of memory
they<00:27:56.399><c> have</c><00:27:56.640><c> 32</c><00:27:57.120><c> bits</c><00:27:57.440><c> of</c><00:27:57.520><c> precision</c><00:27:58.080><c> and</c><00:27:58.240><c> we</c>

00:27:58.389 --> 00:27:58.399 align:start position:0%
they have 32 bits of precision and we
 

00:27:58.399 --> 00:28:00.070 align:start position:0%
they have 32 bits of precision and we
can<00:27:58.559><c> store</c><00:27:58.799><c> between</c><00:27:59.360><c> six</c><00:27:59.600><c> to</c><00:27:59.760><c> seven</c>

00:28:00.070 --> 00:28:00.080 align:start position:0%
can store between six to seven
 

00:28:00.080 --> 00:28:02.549 align:start position:0%
can store between six to seven
significant<00:28:00.720><c> digits</c><00:28:01.360><c> doubles</c><00:28:02.000><c> they</c><00:28:02.159><c> have</c>

00:28:02.549 --> 00:28:02.559 align:start position:0%
significant digits doubles they have
 

00:28:02.559 --> 00:28:04.630 align:start position:0%
significant digits doubles they have
eight<00:28:02.799><c> bytes</c><00:28:03.039><c> of</c><00:28:03.200><c> memory</c><00:28:03.919><c> double</c><00:28:04.240><c> that</c><00:28:04.559><c> of</c>

00:28:04.630 --> 00:28:04.640 align:start position:0%
eight bytes of memory double that of
 

00:28:04.640 --> 00:28:07.269 align:start position:0%
eight bytes of memory double that of
floats<00:28:05.360><c> and</c><00:28:05.679><c> they</c><00:28:05.840><c> have</c><00:28:06.320><c> 64</c><00:28:06.960><c> bits</c><00:28:07.200><c> of</c>

00:28:07.269 --> 00:28:07.279 align:start position:0%
floats and they have 64 bits of
 

00:28:07.279 --> 00:28:09.830 align:start position:0%
floats and they have 64 bits of
precision<00:28:07.919><c> and</c><00:28:08.080><c> we</c><00:28:08.240><c> can</c><00:28:08.399><c> store</c><00:28:08.720><c> between</c><00:28:09.200><c> 15</c><00:28:09.679><c> to</c>

00:28:09.830 --> 00:28:09.840 align:start position:0%
precision and we can store between 15 to
 

00:28:09.840 --> 00:28:12.389 align:start position:0%
precision and we can store between 15 to
16<00:28:10.320><c> significant</c><00:28:10.960><c> digits</c><00:28:11.440><c> with</c><00:28:11.679><c> my</c><00:28:11.840><c> float</c><00:28:12.240><c> and</c>

00:28:12.389 --> 00:28:12.399 align:start position:0%
16 significant digits with my float and
 

00:28:12.399 --> 00:28:14.870 align:start position:0%
16 significant digits with my float and
my<00:28:12.640><c> double</c><00:28:13.039><c> i'm</c><00:28:13.279><c> storing</c><00:28:13.760><c> the</c><00:28:14.000><c> first</c><00:28:14.480><c> several</c>

00:28:14.870 --> 00:28:14.880 align:start position:0%
my double i'm storing the first several
 

00:28:14.880 --> 00:28:17.110 align:start position:0%
my double i'm storing the first several
digits<00:28:15.279><c> of</c><00:28:15.360><c> pi</c><00:28:15.840><c> i'm</c><00:28:16.080><c> going</c><00:28:16.320><c> to</c><00:28:16.559><c> attempt</c><00:28:16.960><c> to</c>

00:28:17.110 --> 00:28:17.120 align:start position:0%
digits of pi i'm going to attempt to
 

00:28:17.120 --> 00:28:20.149 align:start position:0%
digits of pi i'm going to attempt to
display<00:28:17.600><c> as</c><00:28:17.840><c> many</c><00:28:18.159><c> digits</c><00:28:18.799><c> of</c><00:28:19.120><c> pi</c><00:28:19.440><c> as</c><00:28:19.600><c> i</c><00:28:19.760><c> can</c>

00:28:20.149 --> 00:28:20.159 align:start position:0%
display as many digits of pi as i can
 

00:28:20.159 --> 00:28:22.310 align:start position:0%
display as many digits of pi as i can
with<00:28:20.399><c> a</c><00:28:20.559><c> float</c><00:28:21.279><c> so</c><00:28:21.440><c> i'm</c><00:28:21.600><c> going</c><00:28:21.760><c> to</c><00:28:21.919><c> display</c>

00:28:22.310 --> 00:28:22.320 align:start position:0%
with a float so i'm going to display
 

00:28:22.320 --> 00:28:25.590 align:start position:0%
with a float so i'm going to display
these<00:28:22.799><c> so</c><00:28:23.120><c> to</c><00:28:23.279><c> display</c><00:28:24.000><c> a</c><00:28:24.240><c> float</c><00:28:24.720><c> use</c><00:28:25.039><c> percent</c>

00:28:25.590 --> 00:28:25.600 align:start position:0%
these so to display a float use percent
 

00:28:25.600 --> 00:28:29.190 align:start position:0%
these so to display a float use percent
f<00:28:26.000><c> and</c><00:28:26.320><c> lf</c><00:28:26.880><c> for</c><00:28:27.200><c> a</c><00:28:27.520><c> double</c><00:28:27.919><c> which</c><00:28:28.159><c> means</c><00:28:28.720><c> long</c>

00:28:29.190 --> 00:28:29.200 align:start position:0%
f and lf for a double which means long
 

00:28:29.200 --> 00:28:31.510 align:start position:0%
f and lf for a double which means long
float<00:28:29.600><c> now</c><00:28:29.840><c> by</c><00:28:30.000><c> default</c><00:28:30.399><c> when</c><00:28:30.559><c> i</c><00:28:30.640><c> use</c><00:28:30.880><c> printf</c>

00:28:31.510 --> 00:28:31.520 align:start position:0%
float now by default when i use printf
 

00:28:31.520 --> 00:28:33.590 align:start position:0%
float now by default when i use printf
to<00:28:31.679><c> display</c><00:28:32.240><c> a</c><00:28:32.399><c> floating</c><00:28:32.720><c> point</c><00:28:32.960><c> number</c><00:28:33.279><c> or</c><00:28:33.440><c> a</c>

00:28:33.590 --> 00:28:33.600 align:start position:0%
to display a floating point number or a
 

00:28:33.600 --> 00:28:36.070 align:start position:0%
to display a floating point number or a
double<00:28:34.159><c> this</c><00:28:34.320><c> will</c><00:28:34.559><c> only</c><00:28:34.880><c> display</c><00:28:35.360><c> the</c><00:28:35.679><c> first</c>

00:28:36.070 --> 00:28:36.080 align:start position:0%
double this will only display the first
 

00:28:36.080 --> 00:28:38.149 align:start position:0%
double this will only display the first
six<00:28:36.320><c> to</c><00:28:36.480><c> seven</c><00:28:36.799><c> digits</c><00:28:37.360><c> but</c><00:28:37.520><c> we</c><00:28:37.679><c> can</c><00:28:37.840><c> actually</c>

00:28:38.149 --> 00:28:38.159 align:start position:0%
six to seven digits but we can actually
 

00:28:38.159 --> 00:28:39.750 align:start position:0%
six to seven digits but we can actually
change<00:28:38.399><c> that</c><00:28:38.559><c> we'll</c><00:28:38.720><c> discuss</c><00:28:39.200><c> more</c><00:28:39.440><c> about</c>

00:28:39.750 --> 00:28:39.760 align:start position:0%
change that we'll discuss more about
 

00:28:39.760 --> 00:28:41.590 align:start position:0%
change that we'll discuss more about
these<00:28:40.159><c> in</c><00:28:40.399><c> the</c><00:28:40.480><c> next</c><00:28:40.799><c> video</c><00:28:41.120><c> on</c><00:28:41.279><c> format</c>

00:28:41.590 --> 00:28:41.600 align:start position:0%
these in the next video on format
 

00:28:41.600 --> 00:28:43.590 align:start position:0%
these in the next video on format
specifiers<00:28:42.480><c> if</c><00:28:42.640><c> i</c><00:28:42.720><c> would</c><00:28:42.880><c> like</c><00:28:43.039><c> to</c><00:28:43.200><c> display</c>

00:28:43.590 --> 00:28:43.600 align:start position:0%
specifiers if i would like to display
 

00:28:43.600 --> 00:28:45.909 align:start position:0%
specifiers if i would like to display
even<00:28:44.080><c> more</c><00:28:44.320><c> digits</c><00:28:44.960><c> after</c><00:28:45.200><c> the</c><00:28:45.360><c> decimal</c><00:28:45.840><c> i</c>

00:28:45.909 --> 00:28:45.919 align:start position:0%
even more digits after the decimal i
 

00:28:45.919 --> 00:28:47.830 align:start position:0%
even more digits after the decimal i
will<00:28:46.080><c> add</c><00:28:46.480><c> zero</c><00:28:46.880><c> point</c><00:28:47.279><c> and</c><00:28:47.440><c> the</c><00:28:47.520><c> amount</c><00:28:47.760><c> of</c>

00:28:47.830 --> 00:28:47.840 align:start position:0%
will add zero point and the amount of
 

00:28:47.840 --> 00:28:49.750 align:start position:0%
will add zero point and the amount of
digits<00:28:48.240><c> i</c><00:28:48.320><c> would</c><00:28:48.399><c> like</c><00:28:48.559><c> to</c><00:28:48.720><c> display</c><00:28:49.520><c> so</c><00:28:49.679><c> i</c>

00:28:49.750 --> 00:28:49.760 align:start position:0%
digits i would like to display so i
 

00:28:49.760 --> 00:28:52.149 align:start position:0%
digits i would like to display so i
would<00:28:49.919><c> like</c><00:28:50.080><c> to</c><00:28:50.159><c> display</c><00:28:50.880><c> 15</c><00:28:51.279><c> digits</c><00:28:51.679><c> after</c><00:28:52.000><c> my</c>

00:28:52.149 --> 00:28:52.159 align:start position:0%
would like to display 15 digits after my
 

00:28:52.159 --> 00:28:54.549 align:start position:0%
would like to display 15 digits after my
decimal<00:28:52.880><c> and</c><00:28:53.039><c> i'll</c><00:28:53.120><c> do</c><00:28:53.279><c> that</c><00:28:53.520><c> for</c><00:28:53.840><c> my</c><00:28:54.159><c> double</c>

00:28:54.549 --> 00:28:54.559 align:start position:0%
decimal and i'll do that for my double
 

00:28:54.559 --> 00:28:57.830 align:start position:0%
decimal and i'll do that for my double
as<00:28:54.640><c> well</c><00:28:55.279><c> so</c><00:28:55.520><c> after</c><00:28:55.760><c> the</c><00:28:55.840><c> percent</c><00:28:56.240><c> signed</c><00:28:56.840><c> 0.1</c>

00:28:57.830 --> 00:28:57.840 align:start position:0%
as well so after the percent signed 0.1
 

00:28:57.840 --> 00:29:00.389 align:start position:0%
as well so after the percent signed 0.1
f<00:28:58.320><c> then</c><00:28:58.559><c> add</c><00:28:59.039><c> lf</c><00:28:59.520><c> and</c><00:28:59.679><c> let's</c><00:28:59.919><c> take</c><00:29:00.080><c> a</c><00:29:00.159><c> look</c><00:29:00.320><c> at</c>

00:29:00.389 --> 00:29:00.399 align:start position:0%
f then add lf and let's take a look at
 

00:29:00.399 --> 00:29:03.350 align:start position:0%
f then add lf and let's take a look at
these<00:29:00.559><c> numbers</c><00:29:01.200><c> okay</c><00:29:01.520><c> after</c><00:29:02.240><c> my</c><00:29:02.559><c> two</c><00:29:02.880><c> which</c><00:29:03.120><c> is</c>

00:29:03.350 --> 00:29:03.360 align:start position:0%
these numbers okay after my two which is
 

00:29:03.360 --> 00:29:06.149 align:start position:0%
these numbers okay after my two which is
i<00:29:03.600><c> believe</c><00:29:04.080><c> the</c><00:29:04.720><c> sixth</c><00:29:05.279><c> digit</c><00:29:05.760><c> after</c><00:29:06.000><c> the</c>

00:29:06.149 --> 00:29:06.159 align:start position:0%
i believe the sixth digit after the
 

00:29:06.159 --> 00:29:08.470 align:start position:0%
i believe the sixth digit after the
decimal<00:29:06.799><c> we</c><00:29:06.960><c> actually</c><00:29:07.360><c> lose</c><00:29:07.679><c> our</c><00:29:07.919><c> precision</c>

00:29:08.470 --> 00:29:08.480 align:start position:0%
decimal we actually lose our precision
 

00:29:08.480 --> 00:29:10.630 align:start position:0%
decimal we actually lose our precision
these<00:29:08.720><c> numbers</c><00:29:09.039><c> are</c><00:29:09.120><c> not</c><00:29:09.279><c> the</c><00:29:09.440><c> same</c><00:29:10.080><c> but</c><00:29:10.399><c> our</c>

00:29:10.630 --> 00:29:10.640 align:start position:0%
these numbers are not the same but our
 

00:29:10.640 --> 00:29:12.470 align:start position:0%
these numbers are not the same but our
double<00:29:11.039><c> will</c><00:29:11.279><c> actually</c><00:29:11.600><c> retain</c><00:29:12.240><c> these</c>

00:29:12.470 --> 00:29:12.480 align:start position:0%
double will actually retain these
 

00:29:12.480 --> 00:29:15.430 align:start position:0%
double will actually retain these
numbers<00:29:13.120><c> so</c><00:29:13.440><c> point</c><00:29:13.679><c> being</c><00:29:14.080><c> a</c><00:29:14.320><c> double</c><00:29:14.799><c> is</c><00:29:14.960><c> even</c>

00:29:15.430 --> 00:29:15.440 align:start position:0%
numbers so point being a double is even
 

00:29:15.440 --> 00:29:17.190 align:start position:0%
numbers so point being a double is even
more<00:29:15.679><c> accurate</c><00:29:16.240><c> than</c><00:29:16.480><c> a</c><00:29:16.640><c> floating</c><00:29:16.960><c> point</c>

00:29:17.190 --> 00:29:17.200 align:start position:0%
more accurate than a floating point
 

00:29:17.200 --> 00:29:19.190 align:start position:0%
more accurate than a floating point
number<00:29:17.760><c> there</c><00:29:18.000><c> is</c><00:29:18.159><c> more</c><00:29:18.399><c> precision</c><00:29:18.960><c> but</c><00:29:19.120><c> it</c>

00:29:19.190 --> 00:29:19.200 align:start position:0%
number there is more precision but it
 

00:29:19.200 --> 00:29:21.510 align:start position:0%
number there is more precision but it
uses<00:29:19.600><c> more</c><00:29:19.840><c> memory</c><00:29:20.399><c> a</c><00:29:20.640><c> double</c><00:29:21.039><c> uses</c><00:29:21.360><c> eight</c>

00:29:21.510 --> 00:29:21.520 align:start position:0%
uses more memory a double uses eight
 

00:29:21.520 --> 00:29:23.190 align:start position:0%
uses more memory a double uses eight
bytes<00:29:21.840><c> of</c><00:29:21.919><c> memory</c><00:29:22.399><c> because</c><00:29:22.640><c> of</c><00:29:22.720><c> this</c><00:29:22.880><c> reason</c>

00:29:23.190 --> 00:29:23.200 align:start position:0%
bytes of memory because of this reason
 

00:29:23.200 --> 00:29:24.789 align:start position:0%
bytes of memory because of this reason
we<00:29:23.360><c> tend</c><00:29:23.520><c> to</c><00:29:23.600><c> use</c><00:29:23.840><c> doubles</c><00:29:24.240><c> a</c><00:29:24.320><c> lot</c><00:29:24.480><c> more</c><00:29:24.640><c> than</c>

00:29:24.789 --> 00:29:24.799 align:start position:0%
we tend to use doubles a lot more than
 

00:29:24.799 --> 00:29:26.789 align:start position:0%
we tend to use doubles a lot more than
floats<00:29:25.200><c> just</c><00:29:25.440><c> because</c><00:29:25.760><c> they're</c><00:29:26.000><c> more</c><00:29:26.159><c> precise</c>

00:29:26.789 --> 00:29:26.799 align:start position:0%
floats just because they're more precise
 

00:29:26.799 --> 00:29:28.870 align:start position:0%
floats just because they're more precise
we<00:29:26.960><c> don't</c><00:29:27.120><c> want</c><00:29:27.279><c> to</c><00:29:27.440><c> lose</c><00:29:27.679><c> our</c><00:29:27.840><c> precision</c><00:29:28.480><c> next</c>

00:29:28.870 --> 00:29:28.880 align:start position:0%
we don't want to lose our precision next
 

00:29:28.880 --> 00:29:30.549 align:start position:0%
we don't want to lose our precision next
up<00:29:29.039><c> we</c><00:29:29.200><c> have</c><00:29:29.440><c> booleans</c><00:29:30.000><c> to</c><00:29:30.159><c> work</c><00:29:30.399><c> with</c>

00:29:30.549 --> 00:29:30.559 align:start position:0%
up we have booleans to work with
 

00:29:30.559 --> 00:29:33.269 align:start position:0%
up we have booleans to work with
booleans<00:29:31.200><c> and</c><00:29:31.440><c> c</c><00:29:31.840><c> include</c><00:29:32.159><c> this</c><00:29:32.399><c> at</c><00:29:32.480><c> the</c><00:29:32.640><c> top</c>

00:29:33.269 --> 00:29:33.279 align:start position:0%
booleans and c include this at the top
 

00:29:33.279 --> 00:29:38.549 align:start position:0%
booleans and c include this at the top
std<00:29:34.159><c> bool.h</c><00:29:35.600><c> booleans</c><00:29:36.320><c> store</c><00:29:36.799><c> true</c><00:29:37.360><c> or</c><00:29:37.760><c> false</c>

00:29:38.549 --> 00:29:38.559 align:start position:0%
std bool.h booleans store true or false
 

00:29:38.559 --> 00:29:41.110 align:start position:0%
std bool.h booleans store true or false
so<00:29:38.799><c> they</c><00:29:39.039><c> work</c><00:29:39.279><c> in</c><00:29:39.440><c> binary</c><00:29:40.159><c> one</c><00:29:40.480><c> represents</c>

00:29:41.110 --> 00:29:41.120 align:start position:0%
so they work in binary one represents
 

00:29:41.120 --> 00:29:43.590 align:start position:0%
so they work in binary one represents
true<00:29:41.520><c> and</c><00:29:41.760><c> zero</c><00:29:42.159><c> represents</c><00:29:42.720><c> false</c><00:29:43.200><c> so</c><00:29:43.440><c> when</c>

00:29:43.590 --> 00:29:43.600 align:start position:0%
true and zero represents false so when
 

00:29:43.600 --> 00:29:45.669 align:start position:0%
true and zero represents false so when
you<00:29:43.760><c> need</c><00:29:43.919><c> to</c><00:29:44.080><c> declare</c><00:29:44.559><c> a</c><00:29:44.720><c> boolean</c><00:29:45.200><c> variable</c>

00:29:45.669 --> 00:29:45.679 align:start position:0%
you need to declare a boolean variable
 

00:29:45.679 --> 00:29:48.070 align:start position:0%
you need to declare a boolean variable
you<00:29:45.919><c> type</c><00:29:46.320><c> bool</c><00:29:46.720><c> then</c><00:29:46.960><c> a</c><00:29:47.039><c> variable</c><00:29:47.520><c> name</c><00:29:48.000><c> and</c>

00:29:48.070 --> 00:29:48.080 align:start position:0%
you type bool then a variable name and
 

00:29:48.080 --> 00:29:50.710 align:start position:0%
you type bool then a variable name and
you<00:29:48.240><c> set</c><00:29:48.480><c> it</c><00:29:48.640><c> equal</c><00:29:48.960><c> to</c><00:29:49.360><c> true</c><00:29:49.840><c> or</c><00:29:50.159><c> false</c>

00:29:50.710 --> 00:29:50.720 align:start position:0%
you set it equal to true or false
 

00:29:50.720 --> 00:29:53.110 align:start position:0%
you set it equal to true or false
technically<00:29:51.279><c> we</c><00:29:51.440><c> only</c><00:29:51.760><c> need</c><00:29:52.080><c> one</c><00:29:52.559><c> bit</c><00:29:52.880><c> to</c>

00:29:53.110 --> 00:29:53.120 align:start position:0%
technically we only need one bit to
 

00:29:53.120 --> 00:29:55.990 align:start position:0%
technically we only need one bit to
represent<00:29:53.760><c> true</c><00:29:54.159><c> or</c><00:29:54.399><c> false</c><00:29:54.799><c> one</c><00:29:55.039><c> for</c><00:29:55.360><c> true</c><00:29:55.760><c> and</c>

00:29:55.990 --> 00:29:56.000 align:start position:0%
represent true or false one for true and
 

00:29:56.000 --> 00:29:58.470 align:start position:0%
represent true or false one for true and
zero<00:29:56.320><c> for</c><00:29:56.559><c> false</c><00:29:57.200><c> but</c><00:29:57.360><c> this</c><00:29:57.600><c> still</c><00:29:57.840><c> uses</c><00:29:58.240><c> up</c>

00:29:58.470 --> 00:29:58.480 align:start position:0%
zero for false but this still uses up
 

00:29:58.480 --> 00:30:00.710 align:start position:0%
zero for false but this still uses up
one<00:29:58.720><c> byte</c><00:29:59.039><c> of</c><00:29:59.120><c> memory</c><00:29:59.760><c> and</c><00:29:59.840><c> then</c><00:30:00.080><c> to</c><00:30:00.240><c> display</c><00:30:00.559><c> a</c>

00:30:00.710 --> 00:30:00.720 align:start position:0%
one byte of memory and then to display a
 

00:30:00.720 --> 00:30:03.510 align:start position:0%
one byte of memory and then to display a
boolean<00:30:01.360><c> you</c><00:30:01.520><c> can</c><00:30:01.679><c> use</c><00:30:02.000><c> percent</c><00:30:02.559><c> d</c><00:30:02.960><c> so</c><00:30:03.200><c> if</c><00:30:03.440><c> i</c>

00:30:03.510 --> 00:30:03.520 align:start position:0%
boolean you can use percent d so if i
 

00:30:03.520 --> 00:30:05.830 align:start position:0%
boolean you can use percent d so if i
was<00:30:03.679><c> to</c><00:30:03.840><c> display</c><00:30:04.240><c> this</c><00:30:04.480><c> boolean</c><00:30:05.120><c> variable</c><00:30:05.760><c> i</c>

00:30:05.830 --> 00:30:05.840 align:start position:0%
was to display this boolean variable i
 

00:30:05.840 --> 00:30:09.430 align:start position:0%
was to display this boolean variable i
would<00:30:06.080><c> use</c><00:30:06.480><c> percent</c><00:30:07.120><c> d</c><00:30:07.919><c> so</c><00:30:08.399><c> one</c><00:30:08.799><c> corresponds</c>

00:30:09.430 --> 00:30:09.440 align:start position:0%
would use percent d so one corresponds
 

00:30:09.440 --> 00:30:12.549 align:start position:0%
would use percent d so one corresponds
to<00:30:09.600><c> true</c><00:30:10.320><c> and</c><00:30:10.720><c> zero</c><00:30:11.200><c> corresponds</c><00:30:11.760><c> to</c><00:30:11.919><c> false</c>

00:30:12.549 --> 00:30:12.559 align:start position:0%
to true and zero corresponds to false
 

00:30:12.559 --> 00:30:13.990 align:start position:0%
to true and zero corresponds to false
although<00:30:12.960><c> there</c><00:30:13.120><c> are</c><00:30:13.279><c> some</c><00:30:13.440><c> tricks</c><00:30:13.760><c> that</c><00:30:13.919><c> we</c>

00:30:13.990 --> 00:30:14.000 align:start position:0%
although there are some tricks that we
 

00:30:14.000 --> 00:30:15.590 align:start position:0%
although there are some tricks that we
can<00:30:14.159><c> do</c><00:30:14.240><c> in</c><00:30:14.320><c> the</c><00:30:14.480><c> future</c><00:30:14.960><c> where</c><00:30:15.200><c> we</c><00:30:15.440><c> could</c>

00:30:15.590 --> 00:30:15.600 align:start position:0%
can do in the future where we could
 

00:30:15.600 --> 00:30:17.430 align:start position:0%
can do in the future where we could
display<00:30:16.000><c> the</c><00:30:16.159><c> word</c><00:30:16.399><c> to</c><00:30:16.559><c> true</c><00:30:16.880><c> or</c><00:30:16.960><c> the</c><00:30:17.120><c> word</c>

00:30:17.430 --> 00:30:17.440 align:start position:0%
display the word to true or the word
 

00:30:17.440 --> 00:30:19.590 align:start position:0%
display the word to true or the word
false<00:30:18.080><c> but</c><00:30:18.320><c> for</c><00:30:18.480><c> now</c><00:30:18.720><c> we're</c><00:30:18.880><c> going</c><00:30:19.039><c> to</c><00:30:19.200><c> stick</c>

00:30:19.590 --> 00:30:19.600 align:start position:0%
false but for now we're going to stick
 

00:30:19.600 --> 00:30:22.230 align:start position:0%
false but for now we're going to stick
with<00:30:20.000><c> percent</c><00:30:20.559><c> d</c><00:30:20.799><c> as</c><00:30:20.960><c> the</c><00:30:21.039><c> format</c><00:30:21.440><c> specifier</c>

00:30:22.230 --> 00:30:22.240 align:start position:0%
with percent d as the format specifier
 

00:30:22.240 --> 00:30:24.710 align:start position:0%
with percent d as the format specifier
so<00:30:22.480><c> these</c><00:30:22.720><c> work</c><00:30:22.960><c> in</c><00:30:23.039><c> binary</c><00:30:23.679><c> one</c><00:30:23.919><c> for</c><00:30:24.159><c> true</c>

00:30:24.710 --> 00:30:24.720 align:start position:0%
so these work in binary one for true
 

00:30:24.720 --> 00:30:26.870 align:start position:0%
so these work in binary one for true
zero<00:30:25.039><c> for</c><00:30:25.279><c> false</c><00:30:25.840><c> now</c><00:30:26.080><c> another</c><00:30:26.399><c> thing</c><00:30:26.559><c> that</c><00:30:26.720><c> we</c>

00:30:26.870 --> 00:30:26.880 align:start position:0%
zero for false now another thing that we
 

00:30:26.880 --> 00:30:29.430 align:start position:0%
zero for false now another thing that we
can<00:30:26.960><c> do</c><00:30:27.120><c> with</c><00:30:27.360><c> chars</c><00:30:27.919><c> is</c><00:30:28.080><c> that</c><00:30:28.320><c> we</c><00:30:28.480><c> can</c><00:30:28.720><c> store</c><00:30:29.200><c> a</c>

00:30:29.430 --> 00:30:29.440 align:start position:0%
can do with chars is that we can store a
 

00:30:29.440 --> 00:30:31.669 align:start position:0%
can do with chars is that we can store a
whole<00:30:29.840><c> integer</c><00:30:30.320><c> between</c><00:30:30.640><c> the</c><00:30:30.799><c> range</c><00:30:31.279><c> of</c>

00:30:31.669 --> 00:30:31.679 align:start position:0%
whole integer between the range of
 

00:30:31.679 --> 00:30:35.750 align:start position:0%
whole integer between the range of
negative<00:30:32.159><c> 128</c><00:30:33.360><c> to</c><00:30:33.600><c> positive</c><00:30:34.159><c> 127.</c><00:30:35.279><c> so</c><00:30:35.520><c> in</c><00:30:35.600><c> this</c>

00:30:35.750 --> 00:30:35.760 align:start position:0%
negative 128 to positive 127. so in this
 

00:30:35.760 --> 00:30:38.149 align:start position:0%
negative 128 to positive 127. so in this
example<00:30:36.320><c> we</c><00:30:36.480><c> have</c><00:30:36.880><c> char</c><00:30:37.360><c> f</c><00:30:37.520><c> and</c><00:30:37.679><c> i</c><00:30:37.760><c> will</c><00:30:37.919><c> store</c>

00:30:38.149 --> 00:30:38.159 align:start position:0%
example we have char f and i will store
 

00:30:38.159 --> 00:30:40.710 align:start position:0%
example we have char f and i will store
the<00:30:38.399><c> integer</c><00:30:38.799><c> number</c><00:30:39.120><c> 100</c><00:30:39.919><c> we</c><00:30:40.080><c> can</c><00:30:40.320><c> display</c>

00:30:40.710 --> 00:30:40.720 align:start position:0%
the integer number 100 we can display
 

00:30:40.720 --> 00:30:43.029 align:start position:0%
the integer number 100 we can display
this<00:30:40.880><c> number</c><00:30:41.279><c> as</c><00:30:41.520><c> either</c><00:30:42.080><c> a</c><00:30:42.399><c> decimal</c><00:30:42.880><c> an</c>

00:30:43.029 --> 00:30:43.039 align:start position:0%
this number as either a decimal an
 

00:30:43.039 --> 00:30:46.230 align:start position:0%
this number as either a decimal an
integer<00:30:43.919><c> or</c><00:30:44.320><c> a</c><00:30:44.559><c> character</c><00:30:45.360><c> so</c><00:30:45.600><c> if</c><00:30:45.760><c> i</c><00:30:45.840><c> was</c><00:30:46.080><c> to</c>

00:30:46.230 --> 00:30:46.240 align:start position:0%
integer or a character so if i was to
 

00:30:46.240 --> 00:30:48.870 align:start position:0%
integer or a character so if i was to
display<00:30:46.720><c> this</c><00:30:47.120><c> number</c><00:30:47.600><c> as</c><00:30:47.840><c> a</c><00:30:48.080><c> character</c><00:30:48.720><c> we</c>

00:30:48.870 --> 00:30:48.880 align:start position:0%
display this number as a character we
 

00:30:48.880 --> 00:30:51.590 align:start position:0%
display this number as a character we
will<00:30:49.120><c> use</c><00:30:49.360><c> the</c><00:30:49.520><c> ascii</c><00:30:50.080><c> table</c><00:30:50.640><c> to</c><00:30:50.799><c> convert</c><00:30:51.360><c> this</c>

00:30:51.590 --> 00:30:51.600 align:start position:0%
will use the ascii table to convert this
 

00:30:51.600 --> 00:30:54.389 align:start position:0%
will use the ascii table to convert this
number<00:30:52.240><c> to</c><00:30:52.559><c> a</c><00:30:52.720><c> character</c><00:30:53.279><c> representation</c><00:30:54.240><c> the</c>

00:30:54.389 --> 00:30:54.399 align:start position:0%
number to a character representation the
 

00:30:54.399 --> 00:30:57.509 align:start position:0%
number to a character representation the
ascii<00:30:54.799><c> table</c><00:30:55.120><c> has</c><00:30:55.200><c> a</c><00:30:55.360><c> range</c><00:30:55.679><c> between</c><00:30:56.159><c> 0</c><00:30:56.399><c> to</c><00:30:56.559><c> 127</c>

00:30:57.509 --> 00:30:57.519 align:start position:0%
ascii table has a range between 0 to 127
 

00:30:57.519 --> 00:30:59.830 align:start position:0%
ascii table has a range between 0 to 127
so<00:30:57.760><c> if</c><00:30:57.919><c> i</c><00:30:58.000><c> was</c><00:30:58.159><c> to</c><00:30:58.320><c> display</c><00:30:58.720><c> this</c><00:30:58.960><c> number</c><00:30:59.360><c> as</c><00:30:59.600><c> a</c>

00:30:59.830 --> 00:30:59.840 align:start position:0%
so if i was to display this number as a
 

00:30:59.840 --> 00:31:01.909 align:start position:0%
so if i was to display this number as a
decimal<00:31:00.320><c> using</c><00:31:00.640><c> the</c><00:31:00.799><c> percent</c><00:31:01.279><c> d</c><00:31:01.519><c> format</c>

00:31:01.909 --> 00:31:01.919 align:start position:0%
decimal using the percent d format
 

00:31:01.919 --> 00:31:04.470 align:start position:0%
decimal using the percent d format
specifier<00:31:02.880><c> of</c><00:31:03.039><c> course</c><00:31:03.360><c> this</c><00:31:03.600><c> will</c><00:31:03.760><c> display</c><00:31:04.240><c> as</c>

00:31:04.470 --> 00:31:04.480 align:start position:0%
specifier of course this will display as
 

00:31:04.480 --> 00:31:07.190 align:start position:0%
specifier of course this will display as
100<00:31:05.279><c> but</c><00:31:05.519><c> if</c><00:31:05.679><c> i</c><00:31:05.760><c> was</c><00:31:06.000><c> to</c><00:31:06.159><c> convert</c><00:31:06.480><c> this</c><00:31:06.720><c> to</c><00:31:06.960><c> a</c>

00:31:07.190 --> 00:31:07.200 align:start position:0%
100 but if i was to convert this to a
 

00:31:07.200 --> 00:31:09.830 align:start position:0%
100 but if i was to convert this to a
character<00:31:07.919><c> using</c><00:31:08.240><c> the</c><00:31:08.480><c> percent</c><00:31:09.200><c> c</c><00:31:09.440><c> format</c>

00:31:09.830 --> 00:31:09.840 align:start position:0%
character using the percent c format
 

00:31:09.840 --> 00:31:12.230 align:start position:0%
character using the percent c format
specifier<00:31:10.799><c> this</c><00:31:11.039><c> has</c><00:31:11.279><c> a</c><00:31:11.519><c> corresponding</c>

00:31:12.230 --> 00:31:12.240 align:start position:0%
specifier this has a corresponding
 

00:31:12.240 --> 00:31:14.710 align:start position:0%
specifier this has a corresponding
character<00:31:12.720><c> and</c><00:31:12.880><c> that</c><00:31:13.039><c> would</c><00:31:13.200><c> be</c><00:31:13.600><c> lowercase</c><00:31:14.240><c> d</c>

00:31:14.710 --> 00:31:14.720 align:start position:0%
character and that would be lowercase d
 

00:31:14.720 --> 00:31:16.070 align:start position:0%
character and that would be lowercase d
so<00:31:14.880><c> i'm</c><00:31:15.039><c> actually</c><00:31:15.279><c> going</c><00:31:15.440><c> to</c><00:31:15.519><c> change</c><00:31:15.760><c> this</c><00:31:16.000><c> to</c>

00:31:16.070 --> 00:31:16.080 align:start position:0%
so i'm actually going to change this to
 

00:31:16.080 --> 00:31:18.230 align:start position:0%
so i'm actually going to change this to
something<00:31:16.399><c> else</c><00:31:16.640><c> what</c><00:31:16.880><c> about</c><00:31:17.679><c> i</c><00:31:17.760><c> don't</c><00:31:18.000><c> know</c>

00:31:18.230 --> 00:31:18.240 align:start position:0%
something else what about i don't know
 

00:31:18.240 --> 00:31:21.590 align:start position:0%
something else what about i don't know
uh<00:31:18.799><c> 120</c><00:31:20.159><c> so</c><00:31:20.320><c> let's</c><00:31:20.559><c> see</c><00:31:20.720><c> what</c><00:31:20.960><c> the</c><00:31:21.200><c> character</c>

00:31:21.590 --> 00:31:21.600 align:start position:0%
uh 120 so let's see what the character
 

00:31:21.600 --> 00:31:23.909 align:start position:0%
uh 120 so let's see what the character
representation<00:31:22.320><c> of</c><00:31:22.559><c> that</c><00:31:22.799><c> number</c><00:31:23.120><c> is</c><00:31:23.760><c> and</c>

00:31:23.909 --> 00:31:23.919 align:start position:0%
representation of that number is and
 

00:31:23.919 --> 00:31:25.029 align:start position:0%
representation of that number is and
that<00:31:24.080><c> would</c><00:31:24.320><c> be</c>

00:31:25.029 --> 00:31:25.039 align:start position:0%
that would be
 

00:31:25.039 --> 00:31:28.230 align:start position:0%
that would be
a<00:31:25.200><c> lowercase</c><00:31:25.919><c> x</c><00:31:26.559><c> so</c><00:31:26.799><c> you</c><00:31:26.960><c> can</c><00:31:27.279><c> use</c><00:31:27.600><c> chars</c><00:31:28.080><c> to</c>

00:31:28.230 --> 00:31:28.240 align:start position:0%
a lowercase x so you can use chars to
 

00:31:28.240 --> 00:31:30.310 align:start position:0%
a lowercase x so you can use chars to
store<00:31:28.640><c> more</c><00:31:28.880><c> than</c><00:31:29.120><c> single</c><00:31:29.440><c> characters</c><00:31:30.159><c> you</c>

00:31:30.310 --> 00:31:30.320 align:start position:0%
store more than single characters you
 

00:31:30.320 --> 00:31:32.630 align:start position:0%
store more than single characters you
can<00:31:30.480><c> also</c><00:31:30.799><c> use</c><00:31:31.039><c> them</c><00:31:31.279><c> to</c><00:31:31.440><c> store</c><00:31:31.919><c> a</c><00:31:32.320><c> whole</c>

00:31:32.630 --> 00:31:32.640 align:start position:0%
can also use them to store a whole
 

00:31:32.640 --> 00:31:34.870 align:start position:0%
can also use them to store a whole
integer<00:31:33.120><c> however</c><00:31:33.519><c> the</c><00:31:33.679><c> range</c><00:31:34.080><c> is</c><00:31:34.240><c> between</c>

00:31:34.870 --> 00:31:34.880 align:start position:0%
integer however the range is between
 

00:31:34.880 --> 00:31:38.789 align:start position:0%
integer however the range is between
negative<00:31:35.440><c> 128</c><00:31:36.240><c> to</c><00:31:36.480><c> positive</c><00:31:37.120><c> 127</c><00:31:38.240><c> because</c>

00:31:38.789 --> 00:31:38.799 align:start position:0%
negative 128 to positive 127 because
 

00:31:38.799 --> 00:31:41.110 align:start position:0%
negative 128 to positive 127 because
they<00:31:38.960><c> have</c><00:31:39.360><c> one</c><00:31:39.679><c> byte</c><00:31:39.919><c> of</c><00:31:40.080><c> memory</c><00:31:40.640><c> now</c><00:31:40.880><c> there</c>

00:31:41.110 --> 00:31:41.120 align:start position:0%
they have one byte of memory now there
 

00:31:41.120 --> 00:31:43.750 align:start position:0%
they have one byte of memory now there
is<00:31:41.279><c> a</c><00:31:41.440><c> keyword</c><00:31:42.159><c> unsigned</c><00:31:43.120><c> so</c><00:31:43.360><c> when</c><00:31:43.600><c> you</c>

00:31:43.750 --> 00:31:43.760 align:start position:0%
is a keyword unsigned so when you
 

00:31:43.760 --> 00:31:46.389 align:start position:0%
is a keyword unsigned so when you
declare<00:31:44.240><c> a</c><00:31:44.399><c> variable</c><00:31:44.880><c> that</c><00:31:45.120><c> is</c><00:31:45.279><c> unsigned</c><00:31:46.159><c> we</c>

00:31:46.389 --> 00:31:46.399 align:start position:0%
declare a variable that is unsigned we
 

00:31:46.399 --> 00:31:49.269 align:start position:0%
declare a variable that is unsigned we
disregard<00:31:47.200><c> any</c><00:31:47.760><c> negative</c><00:31:48.240><c> numbers</c><00:31:49.039><c> so</c>

00:31:49.269 --> 00:31:49.279 align:start position:0%
disregard any negative numbers so
 

00:31:49.279 --> 00:31:51.590 align:start position:0%
disregard any negative numbers so
effectively<00:31:50.000><c> this</c><00:31:50.320><c> doubles</c><00:31:50.720><c> our</c><00:31:50.960><c> range</c><00:31:51.360><c> with</c>

00:31:51.590 --> 00:31:51.600 align:start position:0%
effectively this doubles our range with
 

00:31:51.600 --> 00:31:54.149 align:start position:0%
effectively this doubles our range with
our<00:31:51.760><c> positive</c><00:31:52.320><c> numbers</c><00:31:53.039><c> so</c><00:31:53.279><c> if</c><00:31:53.440><c> we</c><00:31:53.600><c> have</c>

00:31:54.149 --> 00:31:54.159 align:start position:0%
our positive numbers so if we have
 

00:31:54.159 --> 00:31:56.789 align:start position:0%
our positive numbers so if we have
unsigned<00:31:55.039><c> char</c><00:31:55.679><c> we</c><00:31:55.840><c> can</c><00:31:56.000><c> store</c><00:31:56.399><c> a</c><00:31:56.559><c> number</c>

00:31:56.789 --> 00:31:56.799 align:start position:0%
unsigned char we can store a number
 

00:31:56.799 --> 00:32:00.789 align:start position:0%
unsigned char we can store a number
between<00:31:57.440><c> 0</c><00:31:58.080><c> to</c><00:31:58.320><c> positive</c><00:31:59.039><c> 255</c><00:32:00.159><c> because</c><00:32:00.559><c> we</c>

00:32:00.789 --> 00:32:00.799 align:start position:0%
between 0 to positive 255 because we
 

00:32:00.799 --> 00:32:02.549 align:start position:0%
between 0 to positive 255 because we
know<00:32:00.960><c> we're</c><00:32:01.120><c> not</c><00:32:01.360><c> going</c><00:32:01.519><c> to</c><00:32:01.600><c> store</c><00:32:02.000><c> a</c><00:32:02.159><c> negative</c>

00:32:02.549 --> 00:32:02.559 align:start position:0%
know we're not going to store a negative
 

00:32:02.559 --> 00:32:05.350 align:start position:0%
know we're not going to store a negative
number<00:32:03.120><c> so</c><00:32:03.279><c> then</c><00:32:03.600><c> if</c><00:32:03.679><c> you</c><00:32:03.840><c> need</c><00:32:04.080><c> to</c><00:32:04.240><c> display</c><00:32:05.039><c> an</c>

00:32:05.350 --> 00:32:05.360 align:start position:0%
number so then if you need to display an
 

00:32:05.360 --> 00:32:07.509 align:start position:0%
number so then if you need to display an
unsigned<00:32:06.000><c> character</c><00:32:06.640><c> we</c><00:32:06.799><c> can</c><00:32:06.960><c> use</c><00:32:07.279><c> just</c>

00:32:07.509 --> 00:32:07.519 align:start position:0%
unsigned character we can use just
 

00:32:07.519 --> 00:32:10.789 align:start position:0%
unsigned character we can use just
percent<00:32:07.919><c> d</c><00:32:08.320><c> i'm</c><00:32:08.480><c> going</c><00:32:08.640><c> to</c><00:32:08.720><c> store</c><00:32:09.120><c> 255</c><00:32:10.159><c> within</c>

00:32:10.789 --> 00:32:10.799 align:start position:0%
percent d i'm going to store 255 within
 

00:32:10.799 --> 00:32:13.190 align:start position:0%
percent d i'm going to store 255 within
my<00:32:11.200><c> unsigned</c><00:32:11.919><c> chart</c><00:32:12.480><c> and</c><00:32:12.559><c> that</c><00:32:12.720><c> would</c><00:32:12.880><c> be</c><00:32:13.039><c> of</c>

00:32:13.190 --> 00:32:13.200 align:start position:0%
my unsigned chart and that would be of
 

00:32:13.200 --> 00:32:16.149 align:start position:0%
my unsigned chart and that would be of
course<00:32:13.679><c> 255.</c><00:32:14.559><c> however</c><00:32:14.960><c> if</c><00:32:15.120><c> we</c><00:32:15.279><c> go</c><00:32:15.440><c> beyond</c><00:32:15.919><c> this</c>

00:32:16.149 --> 00:32:16.159 align:start position:0%
course 255. however if we go beyond this
 

00:32:16.159 --> 00:32:18.789 align:start position:0%
course 255. however if we go beyond this
range<00:32:16.640><c> this</c><00:32:16.880><c> will</c><00:32:17.200><c> overflow</c><00:32:17.840><c> and</c><00:32:18.159><c> go</c><00:32:18.320><c> back</c><00:32:18.559><c> to</c>

00:32:18.789 --> 00:32:18.799 align:start position:0%
range this will overflow and go back to
 

00:32:18.799 --> 00:32:19.750 align:start position:0%
range this will overflow and go back to
zero

00:32:19.750 --> 00:32:19.760 align:start position:0%
zero
 

00:32:19.760 --> 00:32:22.070 align:start position:0%
zero
so<00:32:20.000><c> if</c><00:32:20.159><c> i</c><00:32:20.240><c> was</c><00:32:20.399><c> to</c><00:32:20.559><c> display</c><00:32:21.039><c> this</c><00:32:21.679><c> we</c><00:32:21.840><c> have</c><00:32:22.000><c> a</c>

00:32:22.070 --> 00:32:22.080 align:start position:0%
so if i was to display this we have a
 

00:32:22.080 --> 00:32:25.430 align:start position:0%
so if i was to display this we have a
warning<00:32:22.960><c> unsigned</c><00:32:23.440><c> conversion</c><00:32:24.080><c> from</c><00:32:24.399><c> int</c><00:32:24.960><c> to</c>

00:32:25.430 --> 00:32:25.440 align:start position:0%
warning unsigned conversion from int to
 

00:32:25.440 --> 00:32:27.990 align:start position:0%
warning unsigned conversion from int to
unsigned<00:32:26.159><c> chart</c><00:32:26.559><c> so</c><00:32:26.799><c> then</c><00:32:27.120><c> this</c><00:32:27.279><c> resets</c><00:32:27.760><c> back</c>

00:32:27.990 --> 00:32:28.000 align:start position:0%
unsigned chart so then this resets back
 

00:32:28.000 --> 00:32:30.549 align:start position:0%
unsigned chart so then this resets back
to<00:32:28.159><c> zero</c><00:32:28.559><c> so</c><00:32:28.720><c> if</c><00:32:28.880><c> you</c><00:32:28.960><c> go</c><00:32:29.200><c> beyond</c><00:32:29.760><c> the</c><00:32:29.919><c> maximum</c>

00:32:30.549 --> 00:32:30.559 align:start position:0%
to zero so if you go beyond the maximum
 

00:32:30.559 --> 00:32:32.630 align:start position:0%
to zero so if you go beyond the maximum
range<00:32:31.039><c> this</c><00:32:31.279><c> will</c><00:32:31.440><c> reset</c><00:32:31.919><c> all</c><00:32:32.080><c> the</c><00:32:32.159><c> way</c><00:32:32.399><c> back</c>

00:32:32.630 --> 00:32:32.640 align:start position:0%
range this will reset all the way back
 

00:32:32.640 --> 00:32:34.789 align:start position:0%
range this will reset all the way back
to<00:32:32.880><c> zero</c><00:32:33.200><c> whatever</c><00:32:33.519><c> the</c><00:32:33.679><c> beginning</c><00:32:34.080><c> is</c><00:32:34.480><c> so</c><00:32:34.640><c> if</c>

00:32:34.789 --> 00:32:34.799 align:start position:0%
to zero whatever the beginning is so if
 

00:32:34.799 --> 00:32:36.789 align:start position:0%
to zero whatever the beginning is so if
you<00:32:34.960><c> add</c><00:32:35.200><c> this</c><00:32:35.360><c> keyword</c><00:32:35.840><c> unsigned</c><00:32:36.480><c> you</c><00:32:36.640><c> can</c>

00:32:36.789 --> 00:32:36.799 align:start position:0%
you add this keyword unsigned you can
 

00:32:36.799 --> 00:32:39.909 align:start position:0%
you add this keyword unsigned you can
effectively<00:32:37.679><c> double</c><00:32:38.159><c> the</c><00:32:38.480><c> range</c><00:32:39.120><c> of</c><00:32:39.440><c> positive</c>

00:32:39.909 --> 00:32:39.919 align:start position:0%
effectively double the range of positive
 

00:32:39.919 --> 00:32:41.669 align:start position:0%
effectively double the range of positive
numbers<00:32:40.320><c> that</c><00:32:40.480><c> you</c><00:32:40.559><c> can</c><00:32:40.720><c> store</c><00:32:41.039><c> within</c><00:32:41.440><c> a</c>

00:32:41.669 --> 00:32:41.679 align:start position:0%
numbers that you can store within a
 

00:32:41.679 --> 00:32:44.470 align:start position:0%
numbers that you can store within a
variable<00:32:42.399><c> by</c><00:32:42.559><c> default</c><00:32:43.039><c> most</c><00:32:43.360><c> data</c><00:32:43.679><c> types</c><00:32:44.159><c> are</c>

00:32:44.470 --> 00:32:44.480 align:start position:0%
variable by default most data types are
 

00:32:44.480 --> 00:32:46.870 align:start position:0%
variable by default most data types are
already<00:32:45.039><c> signed</c><00:32:45.600><c> but</c><00:32:45.760><c> we</c><00:32:46.000><c> don't</c><00:32:46.240><c> need</c><00:32:46.480><c> to</c>

00:32:46.870 --> 00:32:46.880 align:start position:0%
already signed but we don't need to
 

00:32:46.880 --> 00:32:49.669 align:start position:0%
already signed but we don't need to
explicitly<00:32:47.679><c> type</c><00:32:48.000><c> that</c><00:32:48.480><c> so</c><00:32:48.799><c> point</c><00:32:49.039><c> being</c><00:32:49.360><c> with</c>

00:32:49.669 --> 00:32:49.679 align:start position:0%
explicitly type that so point being with
 

00:32:49.679 --> 00:32:51.590 align:start position:0%
explicitly type that so point being with
chars<00:32:50.159><c> you</c><00:32:50.240><c> can</c><00:32:50.399><c> store</c><00:32:50.799><c> more</c><00:32:50.960><c> than</c><00:32:51.200><c> a</c><00:32:51.279><c> single</c>

00:32:51.590 --> 00:32:51.600 align:start position:0%
chars you can store more than a single
 

00:32:51.600 --> 00:32:54.230 align:start position:0%
chars you can store more than a single
character<00:32:52.080><c> you</c><00:32:52.320><c> can</c><00:32:52.559><c> store</c><00:32:52.960><c> a</c><00:32:53.120><c> whole</c><00:32:53.440><c> integer</c>

00:32:54.230 --> 00:32:54.240 align:start position:0%
character you can store a whole integer
 

00:32:54.240 --> 00:32:57.909 align:start position:0%
character you can store a whole integer
between<00:32:54.880><c> ranges</c><00:32:55.519><c> negative</c><00:32:55.919><c> 128</c><00:32:57.120><c> to</c><00:32:57.360><c> positive</c>

00:32:57.909 --> 00:32:57.919 align:start position:0%
between ranges negative 128 to positive
 

00:32:57.919 --> 00:33:01.190 align:start position:0%
between ranges negative 128 to positive
127<00:32:59.039><c> if</c><00:32:59.200><c> it's</c><00:32:59.360><c> signed</c><00:32:59.919><c> if</c><00:33:00.159><c> it's</c><00:33:00.320><c> unsigned</c><00:33:01.039><c> you</c>

00:33:01.190 --> 00:33:01.200 align:start position:0%
127 if it's signed if it's unsigned you
 

00:33:01.200 --> 00:33:04.470 align:start position:0%
127 if it's signed if it's unsigned you
can<00:33:01.360><c> store</c><00:33:01.760><c> numbers</c><00:33:02.240><c> between</c><00:33:02.799><c> 0</c><00:33:03.279><c> to</c><00:33:03.440><c> 255.</c><00:33:04.320><c> you</c>

00:33:04.470 --> 00:33:04.480 align:start position:0%
can store numbers between 0 to 255. you
 

00:33:04.480 --> 00:33:06.630 align:start position:0%
can store numbers between 0 to 255. you
can<00:33:04.640><c> display</c><00:33:05.039><c> them</c><00:33:05.279><c> as</c><00:33:05.440><c> an</c><00:33:05.600><c> integer</c><00:33:06.080><c> by</c><00:33:06.240><c> using</c>

00:33:06.630 --> 00:33:06.640 align:start position:0%
can display them as an integer by using
 

00:33:06.640 --> 00:33:09.269 align:start position:0%
can display them as an integer by using
the<00:33:06.880><c> percent</c><00:33:07.360><c> d</c><00:33:07.600><c> format</c><00:33:08.000><c> specifier</c><00:33:08.880><c> or</c><00:33:09.120><c> you</c>

00:33:09.269 --> 00:33:09.279 align:start position:0%
the percent d format specifier or you
 

00:33:09.279 --> 00:33:11.430 align:start position:0%
the percent d format specifier or you
could<00:33:09.519><c> convert</c><00:33:09.919><c> them</c><00:33:10.159><c> to</c><00:33:10.399><c> a</c><00:33:10.640><c> character</c><00:33:11.200><c> using</c>

00:33:11.430 --> 00:33:11.440 align:start position:0%
could convert them to a character using
 

00:33:11.440 --> 00:33:14.389 align:start position:0%
could convert them to a character using
the<00:33:11.600><c> ascii</c><00:33:12.080><c> table</c><00:33:12.640><c> by</c><00:33:12.880><c> using</c><00:33:13.200><c> the</c><00:33:13.440><c> percent</c><00:33:14.000><c> c</c>

00:33:14.389 --> 00:33:14.399 align:start position:0%
the ascii table by using the percent c
 

00:33:14.399 --> 00:33:17.669 align:start position:0%
the ascii table by using the percent c
format<00:33:14.799><c> specifier</c><00:33:15.840><c> next</c><00:33:16.240><c> we</c><00:33:16.399><c> have</c><00:33:17.039><c> short</c>

00:33:17.669 --> 00:33:17.679 align:start position:0%
format specifier next we have short
 

00:33:17.679 --> 00:33:20.789 align:start position:0%
format specifier next we have short
hints<00:33:18.399><c> short</c><00:33:18.880><c> ins</c><00:33:19.279><c> use</c><00:33:19.760><c> two</c><00:33:19.919><c> bytes</c><00:33:20.159><c> of</c><00:33:20.320><c> memory</c>

00:33:20.789 --> 00:33:20.799 align:start position:0%
hints short ins use two bytes of memory
 

00:33:20.799 --> 00:33:23.269 align:start position:0%
hints short ins use two bytes of memory
they<00:33:20.960><c> can</c><00:33:21.120><c> store</c><00:33:21.519><c> a</c><00:33:21.679><c> number</c><00:33:22.000><c> between</c><00:33:22.640><c> negative</c>

00:33:23.269 --> 00:33:23.279 align:start position:0%
they can store a number between negative
 

00:33:23.279 --> 00:33:24.509 align:start position:0%
they can store a number between negative
32

00:33:24.509 --> 00:33:24.519 align:start position:0%
32
 

00:33:24.519 --> 00:33:28.190 align:start position:0%
32
768<00:33:25.840><c> to</c><00:33:26.320><c> positive</c><00:33:26.960><c> 32</c>

00:33:28.190 --> 00:33:28.200 align:start position:0%
768 to positive 32
 

00:33:28.200 --> 00:33:30.710 align:start position:0%
768 to positive 32
767<00:33:29.279><c> because</c><00:33:29.679><c> while</c><00:33:29.840><c> they</c><00:33:30.080><c> use</c><00:33:30.240><c> two</c><00:33:30.399><c> bytes</c><00:33:30.640><c> of</c>

00:33:30.710 --> 00:33:30.720 align:start position:0%
767 because while they use two bytes of
 

00:33:30.720 --> 00:33:33.029 align:start position:0%
767 because while they use two bytes of
memory<00:33:31.440><c> they</c><00:33:31.600><c> can</c><00:33:31.760><c> only</c><00:33:31.919><c> store</c><00:33:32.240><c> a</c><00:33:32.320><c> number</c><00:33:32.799><c> so</c>

00:33:33.029 --> 00:33:33.039 align:start position:0%
memory they can only store a number so
 

00:33:33.039 --> 00:33:36.070 align:start position:0%
memory they can only store a number so
large<00:33:33.440><c> and</c><00:33:33.679><c> if</c><00:33:33.840><c> it's</c><00:33:34.000><c> an</c><00:33:34.240><c> unsigned</c><00:33:34.960><c> short</c><00:33:35.440><c> int</c>

00:33:36.070 --> 00:33:36.080 align:start position:0%
large and if it's an unsigned short int
 

00:33:36.080 --> 00:33:41.669 align:start position:0%
large and if it's an unsigned short int
the<00:33:36.240><c> range</c><00:33:36.720><c> is</c><00:33:37.039><c> instead</c><00:33:37.600><c> between</c><00:33:38.240><c> 0</c><00:33:38.720><c> to</c><00:33:39.120><c> 65</c><00:33:40.159><c> 535</c>

00:33:41.669 --> 00:33:41.679 align:start position:0%
the range is instead between 0 to 65 535
 

00:33:41.679 --> 00:33:43.750 align:start position:0%
the range is instead between 0 to 65 535
and<00:33:41.919><c> we</c><00:33:42.080><c> use</c><00:33:42.320><c> the</c><00:33:42.559><c> percent</c><00:33:43.120><c> d</c><00:33:43.360><c> format</c>

00:33:43.750 --> 00:33:43.760 align:start position:0%
and we use the percent d format
 

00:33:43.760 --> 00:33:46.070 align:start position:0%
and we use the percent d format
specifier<00:33:44.480><c> to</c><00:33:44.640><c> display</c><00:33:45.039><c> a</c><00:33:45.279><c> short</c><00:33:45.679><c> in</c><00:33:45.919><c> so</c>

00:33:46.070 --> 00:33:46.080 align:start position:0%
specifier to display a short in so
 

00:33:46.080 --> 00:33:48.149 align:start position:0%
specifier to display a short in so
within<00:33:46.480><c> my</c><00:33:46.720><c> printf</c><00:33:47.120><c> statement</c><00:33:47.679><c> i'm</c><00:33:47.840><c> going</c><00:33:48.000><c> to</c>

00:33:48.149 --> 00:33:48.159 align:start position:0%
within my printf statement i'm going to
 

00:33:48.159 --> 00:33:49.990 align:start position:0%
within my printf statement i'm going to
display<00:33:48.559><c> these</c><00:33:48.720><c> two</c><00:33:48.880><c> numbers</c><00:33:49.519><c> so</c><00:33:49.679><c> i</c><00:33:49.840><c> will</c>

00:33:49.990 --> 00:33:50.000 align:start position:0%
display these two numbers so i will
 

00:33:50.000 --> 00:33:53.669 align:start position:0%
display these two numbers so i will
display<00:33:50.720><c> variable</c><00:33:51.360><c> h</c><00:33:51.679><c> and</c><00:33:52.000><c> i</c><00:33:52.480><c> h</c><00:33:52.880><c> is</c><00:33:53.039><c> a</c><00:33:53.279><c> short</c>

00:33:53.669 --> 00:33:53.679 align:start position:0%
display variable h and i h is a short
 

00:33:53.679 --> 00:33:56.310 align:start position:0%
display variable h and i h is a short
integer<00:33:54.399><c> and</c><00:33:54.640><c> i</c><00:33:55.039><c> is</c><00:33:55.200><c> an</c><00:33:55.360><c> unsigned</c><00:33:56.000><c> short</c>

00:33:56.310 --> 00:33:56.320 align:start position:0%
integer and i is an unsigned short
 

00:33:56.320 --> 00:33:57.269 align:start position:0%
integer and i is an unsigned short
integer

00:33:57.269 --> 00:33:57.279 align:start position:0%
integer
 

00:33:57.279 --> 00:33:59.909 align:start position:0%
integer
so<00:33:57.519><c> these</c><00:33:57.840><c> are</c><00:33:58.000><c> the</c><00:33:58.159><c> maximum</c><00:33:58.720><c> values</c><00:33:59.279><c> for</c><00:33:59.679><c> a</c>

00:33:59.909 --> 00:33:59.919 align:start position:0%
so these are the maximum values for a
 

00:33:59.919 --> 00:34:02.070 align:start position:0%
so these are the maximum values for a
short<00:34:00.320><c> integer</c><00:34:00.880><c> and</c><00:34:01.039><c> an</c><00:34:01.200><c> unsigned</c><00:34:01.760><c> short</c>

00:34:02.070 --> 00:34:02.080 align:start position:0%
short integer and an unsigned short
 

00:34:02.080 --> 00:34:04.630 align:start position:0%
short integer and an unsigned short
integer<00:34:02.640><c> and</c><00:34:02.799><c> like</c><00:34:03.039><c> i</c><00:34:03.200><c> discussed</c><00:34:03.760><c> with</c><00:34:04.080><c> chars</c>

00:34:04.630 --> 00:34:04.640 align:start position:0%
integer and like i discussed with chars
 

00:34:04.640 --> 00:34:06.789 align:start position:0%
integer and like i discussed with chars
if<00:34:04.799><c> we</c><00:34:04.960><c> go</c><00:34:05.200><c> beyond</c><00:34:05.679><c> this</c><00:34:05.919><c> range</c><00:34:06.399><c> we</c><00:34:06.559><c> will</c>

00:34:06.789 --> 00:34:06.799 align:start position:0%
if we go beyond this range we will
 

00:34:06.799 --> 00:34:09.190 align:start position:0%
if we go beyond this range we will
encounter<00:34:07.360><c> an</c><00:34:07.519><c> overflow</c><00:34:08.480><c> so</c><00:34:08.639><c> i'm</c><00:34:08.879><c> going</c><00:34:09.040><c> to</c>

00:34:09.190 --> 00:34:09.200 align:start position:0%
encounter an overflow so i'm going to
 

00:34:09.200 --> 00:34:14.230 align:start position:0%
encounter an overflow so i'm going to
change<00:34:09.679><c> this</c><00:34:10.000><c> short</c><00:34:10.399><c> end</c><00:34:10.720><c> to</c><00:34:11.040><c> 32768</c>

00:34:14.230 --> 00:34:14.240 align:start position:0%
 
 

00:34:14.240 --> 00:34:17.109 align:start position:0%
 
and<00:34:14.560><c> let's</c><00:34:14.720><c> see</c><00:34:14.879><c> what</c><00:34:15.040><c> number</c><00:34:15.359><c> displays</c>

00:34:17.109 --> 00:34:17.119 align:start position:0%
and let's see what number displays
 

00:34:17.119 --> 00:34:19.829 align:start position:0%
and let's see what number displays
so<00:34:17.359><c> this</c><00:34:17.599><c> will</c><00:34:17.839><c> overflow</c><00:34:18.560><c> and</c><00:34:18.960><c> reset</c><00:34:19.599><c> this</c>

00:34:19.829 --> 00:34:19.839 align:start position:0%
so this will overflow and reset this
 

00:34:19.839 --> 00:34:22.230 align:start position:0%
so this will overflow and reset this
value<00:34:20.399><c> back</c><00:34:20.639><c> to</c><00:34:20.800><c> the</c><00:34:20.879><c> minimum</c><00:34:21.440><c> value</c><00:34:21.839><c> which</c><00:34:22.079><c> in</c>

00:34:22.230 --> 00:34:22.240 align:start position:0%
value back to the minimum value which in
 

00:34:22.240 --> 00:34:25.389 align:start position:0%
value back to the minimum value which in
this<00:34:22.399><c> case</c><00:34:22.879><c> is</c><00:34:23.599><c> negative</c><00:34:24.159><c> 32</c>

00:34:25.389 --> 00:34:25.399 align:start position:0%
this case is negative 32
 

00:34:25.399 --> 00:34:27.750 align:start position:0%
this case is negative 32
768<00:34:26.480><c> and</c><00:34:26.639><c> if</c><00:34:26.720><c> you</c><00:34:26.879><c> do</c><00:34:27.040><c> the</c><00:34:27.119><c> same</c><00:34:27.359><c> thing</c><00:34:27.599><c> with</c>

00:34:27.750 --> 00:34:27.760 align:start position:0%
768 and if you do the same thing with
 

00:34:27.760 --> 00:34:30.310 align:start position:0%
768 and if you do the same thing with
the<00:34:28.079><c> unsigned</c><00:34:28.720><c> short</c><00:34:29.040><c> integer</c><00:34:29.679><c> that</c><00:34:29.919><c> would</c><00:34:30.079><c> be</c>

00:34:30.310 --> 00:34:30.320 align:start position:0%
the unsigned short integer that would be
 

00:34:30.320 --> 00:34:32.790 align:start position:0%
the unsigned short integer that would be
zero<00:34:30.720><c> because</c><00:34:31.280><c> that's</c><00:34:31.520><c> the</c><00:34:31.679><c> minimum</c><00:34:32.240><c> value</c>

00:34:32.790 --> 00:34:32.800 align:start position:0%
zero because that's the minimum value
 

00:34:32.800 --> 00:34:35.909 align:start position:0%
zero because that's the minimum value
for<00:34:33.119><c> an</c><00:34:33.440><c> unsigned</c><00:34:34.159><c> short</c><00:34:34.560><c> integer</c><00:34:35.440><c> so</c><00:34:35.599><c> those</c>

00:34:35.909 --> 00:34:35.919 align:start position:0%
for an unsigned short integer so those
 

00:34:35.919 --> 00:34:37.990 align:start position:0%
for an unsigned short integer so those
are<00:34:36.079><c> short</c><00:34:36.399><c> integers</c><00:34:36.960><c> they</c><00:34:37.200><c> use</c><00:34:37.440><c> two</c><00:34:37.599><c> bytes</c><00:34:37.919><c> of</c>

00:34:37.990 --> 00:34:38.000 align:start position:0%
are short integers they use two bytes of
 

00:34:38.000 --> 00:34:39.510 align:start position:0%
are short integers they use two bytes of
memory<00:34:38.399><c> and</c><00:34:38.480><c> they</c><00:34:38.639><c> can</c><00:34:38.800><c> store</c><00:34:39.119><c> numbers</c>

00:34:39.510 --> 00:34:39.520 align:start position:0%
memory and they can store numbers
 

00:34:39.520 --> 00:34:41.750 align:start position:0%
memory and they can store numbers
between<00:34:40.159><c> these</c><00:34:40.399><c> ranges</c><00:34:40.879><c> depending</c><00:34:41.359><c> if</c><00:34:41.520><c> it's</c>

00:34:41.750 --> 00:34:41.760 align:start position:0%
between these ranges depending if it's
 

00:34:41.760 --> 00:34:44.310 align:start position:0%
between these ranges depending if it's
signed<00:34:42.159><c> or</c><00:34:42.480><c> unsigned</c><00:34:43.200><c> oh</c><00:34:43.599><c> and</c><00:34:43.760><c> another</c><00:34:44.079><c> way</c><00:34:44.240><c> of</c>

00:34:44.310 --> 00:34:44.320 align:start position:0%
signed or unsigned oh and another way of
 

00:34:44.320 --> 00:34:46.550 align:start position:0%
signed or unsigned oh and another way of
writing<00:34:44.639><c> these</c><00:34:45.040><c> you</c><00:34:45.200><c> don't</c><00:34:45.440><c> necessarily</c><00:34:46.320><c> need</c>

00:34:46.550 --> 00:34:46.560 align:start position:0%
writing these you don't necessarily need
 

00:34:46.560 --> 00:34:48.790 align:start position:0%
writing these you don't necessarily need
to<00:34:46.720><c> declare</c><00:34:47.200><c> these</c><00:34:47.520><c> with</c><00:34:47.760><c> the</c><00:34:47.919><c> word</c><00:34:48.320><c> and</c><00:34:48.639><c> you</c>

00:34:48.790 --> 00:34:48.800 align:start position:0%
to declare these with the word and you
 

00:34:48.800 --> 00:34:50.310 align:start position:0%
to declare these with the word and you
could<00:34:48.960><c> just</c><00:34:49.200><c> say</c><00:34:49.440><c> short</c><00:34:49.760><c> and</c><00:34:49.839><c> that</c><00:34:50.000><c> would</c><00:34:50.159><c> do</c>

00:34:50.310 --> 00:34:50.320 align:start position:0%
could just say short and that would do
 

00:34:50.320 --> 00:34:52.470 align:start position:0%
could just say short and that would do
the<00:34:50.399><c> same</c><00:34:50.720><c> thing</c><00:34:51.359><c> people</c><00:34:51.679><c> usually</c><00:34:52.079><c> just</c><00:34:52.240><c> call</c>

00:34:52.470 --> 00:34:52.480 align:start position:0%
the same thing people usually just call
 

00:34:52.480 --> 00:34:55.109 align:start position:0%
the same thing people usually just call
them<00:34:52.720><c> shorts</c><00:34:53.200><c> instead</c><00:34:53.520><c> of</c><00:34:53.839><c> short</c><00:34:54.320><c> ants</c><00:34:54.879><c> so</c>

00:34:55.109 --> 00:34:55.119 align:start position:0%
them shorts instead of short ants so
 

00:34:55.119 --> 00:34:56.869 align:start position:0%
them shorts instead of short ants so
those<00:34:55.440><c> are</c><00:34:55.520><c> what</c><00:34:55.760><c> shorts</c><00:34:56.159><c> are</c><00:34:56.480><c> now</c><00:34:56.639><c> with</c>

00:34:56.869 --> 00:34:56.879 align:start position:0%
those are what shorts are now with
 

00:34:56.879 --> 00:34:58.470 align:start position:0%
those are what shorts are now with
integers<00:34:57.359><c> we</c><00:34:57.520><c> kind</c><00:34:57.680><c> of</c><00:34:57.760><c> discussed</c><00:34:58.160><c> this</c><00:34:58.320><c> in</c>

00:34:58.470 --> 00:34:58.480 align:start position:0%
integers we kind of discussed this in
 

00:34:58.480 --> 00:35:00.470 align:start position:0%
integers we kind of discussed this in
the<00:34:58.560><c> last</c><00:34:58.880><c> video</c><00:34:59.200><c> just</c><00:34:59.440><c> briefly</c><00:35:00.000><c> integers</c>

00:35:00.470 --> 00:35:00.480 align:start position:0%
the last video just briefly integers
 

00:35:00.480 --> 00:35:03.750 align:start position:0%
the last video just briefly integers
store<00:35:00.880><c> a</c><00:35:01.200><c> whole</c><00:35:01.680><c> number</c><00:35:02.160><c> between</c><00:35:03.040><c> just</c><00:35:03.440><c> under</c>

00:35:03.750 --> 00:35:03.760 align:start position:0%
store a whole number between just under
 

00:35:03.760 --> 00:35:06.870 align:start position:0%
store a whole number between just under
negative<00:35:04.320><c> 2</c><00:35:04.560><c> billion</c><00:35:05.280><c> to</c><00:35:05.599><c> just</c><00:35:06.000><c> over</c><00:35:06.400><c> positive</c>

00:35:06.870 --> 00:35:06.880 align:start position:0%
negative 2 billion to just over positive
 

00:35:06.880 --> 00:35:09.270 align:start position:0%
negative 2 billion to just over positive
2<00:35:07.119><c> billion</c><00:35:07.680><c> because</c><00:35:08.240><c> they</c><00:35:08.400><c> use</c><00:35:08.640><c> 4</c><00:35:08.880><c> bytes</c><00:35:09.200><c> of</c>

00:35:09.270 --> 00:35:09.280 align:start position:0%
2 billion because they use 4 bytes of
 

00:35:09.280 --> 00:35:11.990 align:start position:0%
2 billion because they use 4 bytes of
memory<00:35:09.920><c> and</c><00:35:10.160><c> we</c><00:35:10.320><c> use</c><00:35:10.560><c> the</c><00:35:10.720><c> percent</c><00:35:11.359><c> d</c><00:35:11.680><c> format</c>

00:35:11.990 --> 00:35:12.000 align:start position:0%
memory and we use the percent d format
 

00:35:12.000 --> 00:35:15.109 align:start position:0%
memory and we use the percent d format
specifier<00:35:12.800><c> to</c><00:35:12.960><c> display</c><00:35:13.680><c> a</c><00:35:13.839><c> signed</c><00:35:14.320><c> integer</c><00:35:14.960><c> if</c>

00:35:15.109 --> 00:35:15.119 align:start position:0%
specifier to display a signed integer if
 

00:35:15.119 --> 00:35:17.670 align:start position:0%
specifier to display a signed integer if
that<00:35:15.359><c> integer</c><00:35:15.920><c> is</c><00:35:16.160><c> unsigned</c><00:35:16.960><c> the</c><00:35:17.119><c> range</c>

00:35:17.670 --> 00:35:17.680 align:start position:0%
that integer is unsigned the range
 

00:35:17.680 --> 00:35:21.589 align:start position:0%
that integer is unsigned the range
changes<00:35:18.400><c> from</c><00:35:18.800><c> 0</c><00:35:19.520><c> to</c><00:35:19.839><c> just</c><00:35:20.160><c> over</c><00:35:20.640><c> positive</c><00:35:21.359><c> 4</c>

00:35:21.589 --> 00:35:21.599 align:start position:0%
changes from 0 to just over positive 4
 

00:35:21.599 --> 00:35:24.150 align:start position:0%
changes from 0 to just over positive 4
billion<00:35:22.320><c> however</c><00:35:22.800><c> there</c><00:35:23.119><c> is</c><00:35:23.359><c> a</c><00:35:23.680><c> different</c>

00:35:24.150 --> 00:35:24.160 align:start position:0%
billion however there is a different
 

00:35:24.160 --> 00:35:27.270 align:start position:0%
billion however there is a different
format<00:35:24.560><c> specifier</c><00:35:25.599><c> to</c><00:35:25.760><c> display</c><00:35:26.480><c> an</c><00:35:26.720><c> unsigned</c>

00:35:27.270 --> 00:35:27.280 align:start position:0%
format specifier to display an unsigned
 

00:35:27.280 --> 00:35:30.390 align:start position:0%
format specifier to display an unsigned
integer<00:35:27.839><c> you</c><00:35:28.079><c> instead</c><00:35:28.560><c> use</c><00:35:28.880><c> percent</c><00:35:29.599><c> u</c><00:35:30.160><c> so</c>

00:35:30.390 --> 00:35:30.400 align:start position:0%
integer you instead use percent u so
 

00:35:30.400 --> 00:35:32.950 align:start position:0%
integer you instead use percent u so
then<00:35:30.640><c> let's</c><00:35:30.960><c> display</c><00:35:31.359><c> these</c><00:35:31.680><c> percent</c><00:35:32.079><c> d</c><00:35:32.480><c> for</c><00:35:32.800><c> a</c>

00:35:32.950 --> 00:35:32.960 align:start position:0%
then let's display these percent d for a
 

00:35:32.960 --> 00:35:36.390 align:start position:0%
then let's display these percent d for a
signed<00:35:33.440><c> integer</c><00:35:34.400><c> and</c><00:35:35.119><c> percent</c><00:35:35.680><c> u</c><00:35:36.079><c> for</c><00:35:36.240><c> an</c>

00:35:36.390 --> 00:35:36.400 align:start position:0%
signed integer and percent u for an
 

00:35:36.400 --> 00:35:38.550 align:start position:0%
signed integer and percent u for an
unsigned<00:35:36.880><c> integer</c>

00:35:38.550 --> 00:35:38.560 align:start position:0%
unsigned integer
 

00:35:38.560 --> 00:35:41.109 align:start position:0%
unsigned integer
and<00:35:38.880><c> these</c><00:35:39.200><c> are</c><00:35:39.359><c> the</c><00:35:39.680><c> maximum</c><00:35:40.160><c> numbers</c><00:35:40.960><c> and</c>

00:35:41.109 --> 00:35:41.119 align:start position:0%
and these are the maximum numbers and
 

00:35:41.119 --> 00:35:45.190 align:start position:0%
and these are the maximum numbers and
then<00:35:41.440><c> if</c><00:35:41.680><c> i</c><00:35:41.920><c> was</c><00:35:42.240><c> to</c><00:35:42.480><c> exceed</c><00:35:42.960><c> the</c><00:35:43.119><c> range</c>

00:35:45.190 --> 00:35:45.200 align:start position:0%
then if i was to exceed the range
 

00:35:45.200 --> 00:35:47.430 align:start position:0%
then if i was to exceed the range
this<00:35:45.440><c> again</c><00:35:45.839><c> would</c><00:35:46.079><c> cause</c><00:35:46.400><c> an</c><00:35:46.560><c> overflow</c><00:35:47.200><c> and</c>

00:35:47.430 --> 00:35:47.440 align:start position:0%
this again would cause an overflow and
 

00:35:47.440 --> 00:35:49.190 align:start position:0%
this again would cause an overflow and
reset<00:35:47.920><c> these</c><00:35:48.160><c> numbers</c><00:35:48.640><c> back</c><00:35:48.800><c> to</c><00:35:48.960><c> their</c>

00:35:49.190 --> 00:35:49.200 align:start position:0%
reset these numbers back to their
 

00:35:49.200 --> 00:35:52.470 align:start position:0%
reset these numbers back to their
minimum<00:35:49.760><c> values</c><00:35:50.800><c> so</c><00:35:51.119><c> those</c><00:35:51.520><c> are</c><00:35:51.839><c> standard</c>

00:35:52.470 --> 00:35:52.480 align:start position:0%
minimum values so those are standard
 

00:35:52.480 --> 00:35:54.870 align:start position:0%
minimum values so those are standard
integers<00:35:53.119><c> they</c><00:35:53.280><c> use</c><00:35:53.680><c> four</c><00:35:53.920><c> bytes</c><00:35:54.240><c> of</c><00:35:54.320><c> memory</c>

00:35:54.870 --> 00:35:54.880 align:start position:0%
integers they use four bytes of memory
 

00:35:54.880 --> 00:35:57.270 align:start position:0%
integers they use four bytes of memory
so<00:35:55.040><c> they</c><00:35:55.200><c> can</c><00:35:55.359><c> store</c><00:35:56.000><c> numbers</c><00:35:56.400><c> between</c><00:35:56.960><c> these</c>

00:35:57.270 --> 00:35:57.280 align:start position:0%
so they can store numbers between these
 

00:35:57.280 --> 00:35:59.349 align:start position:0%
so they can store numbers between these
ranges<00:35:57.760><c> depending</c><00:35:58.240><c> if</c><00:35:58.320><c> they're</c><00:35:58.640><c> signed</c><00:35:59.040><c> or</c>

00:35:59.349 --> 00:35:59.359 align:start position:0%
ranges depending if they're signed or
 

00:35:59.359 --> 00:36:01.430 align:start position:0%
ranges depending if they're signed or
unsigned<00:36:00.079><c> all</c><00:36:00.160><c> right</c><00:36:00.480><c> the</c><00:36:00.640><c> last</c><00:36:00.880><c> data</c><00:36:01.200><c> type</c>

00:36:01.430 --> 00:36:01.440 align:start position:0%
unsigned all right the last data type
 

00:36:01.440 --> 00:36:03.270 align:start position:0%
unsigned all right the last data type
we're<00:36:01.599><c> going</c><00:36:01.680><c> to</c><00:36:01.760><c> talk</c><00:36:02.000><c> about</c><00:36:02.240><c> for</c><00:36:02.400><c> this</c><00:36:02.640><c> topic</c>

00:36:03.270 --> 00:36:03.280 align:start position:0%
we're going to talk about for this topic
 

00:36:03.280 --> 00:36:06.150 align:start position:0%
we're going to talk about for this topic
is<00:36:03.520><c> a</c><00:36:04.000><c> long</c><00:36:04.560><c> long</c><00:36:04.960><c> integer</c><00:36:05.520><c> now</c><00:36:05.680><c> the</c><00:36:05.839><c> reason</c>

00:36:06.150 --> 00:36:06.160 align:start position:0%
is a long long integer now the reason
 

00:36:06.160 --> 00:36:08.470 align:start position:0%
is a long long integer now the reason
that<00:36:06.320><c> we</c><00:36:06.480><c> have</c><00:36:06.720><c> long</c><00:36:07.119><c> twice</c><00:36:07.760><c> is</c><00:36:08.000><c> that</c><00:36:08.240><c> with</c>

00:36:08.470 --> 00:36:08.480 align:start position:0%
that we have long twice is that with
 

00:36:08.480 --> 00:36:10.550 align:start position:0%
that we have long twice is that with
standard<00:36:09.040><c> integers</c><00:36:09.680><c> these</c><00:36:09.920><c> are</c><00:36:10.079><c> already</c>

00:36:10.550 --> 00:36:10.560 align:start position:0%
standard integers these are already
 

00:36:10.560 --> 00:36:12.790 align:start position:0%
standard integers these are already
considered<00:36:11.200><c> longs</c><00:36:11.760><c> but</c><00:36:12.000><c> we</c><00:36:12.160><c> don't</c><00:36:12.320><c> need</c><00:36:12.560><c> to</c>

00:36:12.790 --> 00:36:12.800 align:start position:0%
considered longs but we don't need to
 

00:36:12.800 --> 00:36:15.030 align:start position:0%
considered longs but we don't need to
explicitly<00:36:13.599><c> type</c><00:36:13.920><c> long</c><00:36:14.320><c> for</c><00:36:14.560><c> standard</c>

00:36:15.030 --> 00:36:15.040 align:start position:0%
explicitly type long for standard
 

00:36:15.040 --> 00:36:17.990 align:start position:0%
explicitly type long for standard
integers<00:36:15.680><c> so</c><00:36:15.920><c> to</c><00:36:16.079><c> represent</c><00:36:16.880><c> a</c><00:36:17.280><c> really</c><00:36:17.599><c> large</c>

00:36:17.990 --> 00:36:18.000 align:start position:0%
integers so to represent a really large
 

00:36:18.000 --> 00:36:21.510 align:start position:0%
integers so to represent a really large
number<00:36:18.480><c> we</c><00:36:18.640><c> can</c><00:36:18.800><c> use</c><00:36:19.119><c> a</c><00:36:19.599><c> long</c><00:36:20.160><c> long</c><00:36:20.640><c> integer</c>

00:36:21.510 --> 00:36:21.520 align:start position:0%
number we can use a long long integer
 

00:36:21.520 --> 00:36:24.230 align:start position:0%
number we can use a long long integer
and<00:36:21.920><c> these</c><00:36:22.320><c> use</c><00:36:22.720><c> eight</c><00:36:22.960><c> bytes</c><00:36:23.280><c> of</c><00:36:23.359><c> memory</c><00:36:24.079><c> the</c>

00:36:24.230 --> 00:36:24.240 align:start position:0%
and these use eight bytes of memory the
 

00:36:24.240 --> 00:36:27.190 align:start position:0%
and these use eight bytes of memory the
effective<00:36:24.720><c> range</c><00:36:25.280><c> for</c><00:36:25.520><c> a</c><00:36:25.839><c> signed</c><00:36:26.480><c> long</c><00:36:26.800><c> long</c>

00:36:27.190 --> 00:36:27.200 align:start position:0%
effective range for a signed long long
 

00:36:27.200 --> 00:36:29.750 align:start position:0%
effective range for a signed long long
integer<00:36:28.079><c> is</c><00:36:28.480><c> just</c><00:36:28.800><c> underneath</c><00:36:29.440><c> nine</c>

00:36:29.750 --> 00:36:29.760 align:start position:0%
integer is just underneath nine
 

00:36:29.760 --> 00:36:32.310 align:start position:0%
integer is just underneath nine
quintillion<00:36:31.040><c> to</c><00:36:31.359><c> just</c><00:36:31.760><c> over</c><00:36:32.079><c> nine</c>

00:36:32.310 --> 00:36:32.320 align:start position:0%
quintillion to just over nine
 

00:36:32.320 --> 00:36:35.190 align:start position:0%
quintillion to just over nine
quintillion<00:36:33.280><c> and</c><00:36:33.440><c> the</c><00:36:33.599><c> format</c><00:36:34.000><c> specifier</c><00:36:34.880><c> for</c>

00:36:35.190 --> 00:36:35.200 align:start position:0%
quintillion and the format specifier for
 

00:36:35.200 --> 00:36:38.310 align:start position:0%
quintillion and the format specifier for
a<00:36:35.599><c> long</c><00:36:36.079><c> long</c><00:36:36.400><c> integer</c><00:36:36.880><c> one</c><00:36:37.119><c> that</c><00:36:37.359><c> is</c><00:36:37.520><c> signed</c>

00:36:38.310 --> 00:36:38.320 align:start position:0%
a long long integer one that is signed
 

00:36:38.320 --> 00:36:40.870 align:start position:0%
a long long integer one that is signed
is<00:36:38.880><c> percent</c><00:36:39.599><c> lld</c>

00:36:40.870 --> 00:36:40.880 align:start position:0%
is percent lld
 

00:36:40.880 --> 00:36:43.430 align:start position:0%
is percent lld
now<00:36:41.200><c> if</c><00:36:41.359><c> it's</c><00:36:41.599><c> unsigned</c><00:36:42.560><c> that</c><00:36:42.800><c> changes</c><00:36:43.280><c> the</c>

00:36:43.430 --> 00:36:43.440 align:start position:0%
now if it's unsigned that changes the
 

00:36:43.440 --> 00:36:46.790 align:start position:0%
now if it's unsigned that changes the
range<00:36:43.760><c> between</c><00:36:44.480><c> zero</c><00:36:45.040><c> to</c><00:36:45.359><c> just</c><00:36:45.760><c> over</c><00:36:46.160><c> positive</c>

00:36:46.790 --> 00:36:46.800 align:start position:0%
range between zero to just over positive
 

00:36:46.800 --> 00:36:49.910 align:start position:0%
range between zero to just over positive
18<00:36:47.359><c> quintillion</c><00:36:48.240><c> and</c><00:36:48.480><c> the</c><00:36:48.720><c> format</c><00:36:49.040><c> specifier</c>

00:36:49.910 --> 00:36:49.920 align:start position:0%
18 quintillion and the format specifier
 

00:36:49.920 --> 00:36:52.870 align:start position:0%
18 quintillion and the format specifier
is<00:36:50.079><c> percent</c><00:36:50.720><c> llu</c><00:36:51.760><c> then</c><00:36:52.000><c> let's</c><00:36:52.240><c> display</c><00:36:52.640><c> these</c>

00:36:52.870 --> 00:36:52.880 align:start position:0%
is percent llu then let's display these
 

00:36:52.880 --> 00:36:53.670 align:start position:0%
is percent llu then let's display these
so

00:36:53.670 --> 00:36:53.680 align:start position:0%
so
 

00:36:53.680 --> 00:36:56.550 align:start position:0%
so
for<00:36:54.000><c> a</c><00:36:54.240><c> signed</c><00:36:54.720><c> long</c><00:36:55.040><c> long</c><00:36:55.280><c> integer</c><00:36:55.760><c> that</c><00:36:56.079><c> is</c>

00:36:56.550 --> 00:36:56.560 align:start position:0%
for a signed long long integer that is
 

00:36:56.560 --> 00:37:00.150 align:start position:0%
for a signed long long integer that is
lld<00:36:57.520><c> and</c><00:36:57.680><c> if</c><00:36:57.839><c> it's</c><00:36:58.000><c> unsigned</c><00:36:58.480><c> that</c><00:36:58.720><c> is</c><00:36:58.960><c> llu</c><00:37:00.000><c> now</c>

00:37:00.150 --> 00:37:00.160 align:start position:0%
lld and if it's unsigned that is llu now
 

00:37:00.160 --> 00:37:02.790 align:start position:0%
lld and if it's unsigned that is llu now
we'll<00:37:00.400><c> encounter</c><00:37:00.880><c> a</c><00:37:01.040><c> warning</c>

00:37:02.790 --> 00:37:02.800 align:start position:0%
we'll encounter a warning
 

00:37:02.800 --> 00:37:05.589 align:start position:0%
we'll encounter a warning
so<00:37:03.040><c> this</c><00:37:03.280><c> warning</c><00:37:03.680><c> applies</c><00:37:04.320><c> to</c><00:37:04.640><c> our</c><00:37:04.880><c> unsigned</c>

00:37:05.589 --> 00:37:05.599 align:start position:0%
so this warning applies to our unsigned
 

00:37:05.599 --> 00:37:07.510 align:start position:0%
so this warning applies to our unsigned
long<00:37:06.079><c> long</c><00:37:06.480><c> integer</c>

00:37:07.510 --> 00:37:07.520 align:start position:0%
long long integer
 

00:37:07.520 --> 00:37:10.150 align:start position:0%
long long integer
integer<00:37:08.000><c> constant</c><00:37:08.560><c> is</c><00:37:08.640><c> so</c><00:37:08.960><c> large</c><00:37:09.440><c> that</c><00:37:09.680><c> it</c><00:37:09.839><c> is</c>

00:37:10.150 --> 00:37:10.160 align:start position:0%
integer constant is so large that it is
 

00:37:10.160 --> 00:37:12.790 align:start position:0%
integer constant is so large that it is
unsigned<00:37:11.200><c> so</c><00:37:11.520><c> one</c><00:37:11.760><c> way</c><00:37:12.160><c> in</c><00:37:12.240><c> which</c><00:37:12.480><c> we</c><00:37:12.640><c> can</c>

00:37:12.790 --> 00:37:12.800 align:start position:0%
unsigned so one way in which we can
 

00:37:12.800 --> 00:37:15.349 align:start position:0%
unsigned so one way in which we can
prevent<00:37:13.200><c> that</c><00:37:13.440><c> warning</c><00:37:13.920><c> is</c><00:37:14.160><c> after</c><00:37:14.640><c> our</c><00:37:14.960><c> number</c>

00:37:15.349 --> 00:37:15.359 align:start position:0%
prevent that warning is after our number
 

00:37:15.359 --> 00:37:18.230 align:start position:0%
prevent that warning is after our number
within<00:37:15.760><c> our</c><00:37:16.000><c> unsigned</c><00:37:16.800><c> long</c><00:37:17.119><c> long</c><00:37:17.440><c> integer</c>

00:37:18.230 --> 00:37:18.240 align:start position:0%
within our unsigned long long integer
 

00:37:18.240 --> 00:37:20.550 align:start position:0%
within our unsigned long long integer
add<00:37:18.800><c> a</c><00:37:18.960><c> u</c><00:37:19.200><c> to</c><00:37:19.359><c> the</c><00:37:19.440><c> end</c><00:37:19.599><c> of</c><00:37:19.680><c> this</c><00:37:20.079><c> so</c><00:37:20.240><c> then</c><00:37:20.400><c> we</c>

00:37:20.550 --> 00:37:20.560 align:start position:0%
add a u to the end of this so then we
 

00:37:20.560 --> 00:37:22.390 align:start position:0%
add a u to the end of this so then we
can<00:37:20.640><c> display</c><00:37:21.040><c> this</c><00:37:21.200><c> number</c><00:37:21.440><c> with</c><00:37:21.599><c> no</c><00:37:21.839><c> warning</c>

00:37:22.390 --> 00:37:22.400 align:start position:0%
can display this number with no warning
 

00:37:22.400 --> 00:37:25.430 align:start position:0%
can display this number with no warning
so<00:37:22.720><c> since</c><00:37:23.119><c> long</c><00:37:23.440><c> long</c><00:37:23.760><c> integers</c><00:37:24.480><c> use</c><00:37:24.800><c> so</c><00:37:25.040><c> many</c>

00:37:25.430 --> 00:37:25.440 align:start position:0%
so since long long integers use so many
 

00:37:25.440 --> 00:37:28.150 align:start position:0%
so since long long integers use so many
bytes<00:37:25.839><c> they</c><00:37:26.000><c> can</c><00:37:26.160><c> store</c><00:37:26.640><c> a</c><00:37:26.880><c> gigantic</c><00:37:27.599><c> number</c>

00:37:28.150 --> 00:37:28.160 align:start position:0%
bytes they can store a gigantic number
 

00:37:28.160 --> 00:37:30.310 align:start position:0%
bytes they can store a gigantic number
we<00:37:28.320><c> tend</c><00:37:28.480><c> to</c><00:37:28.640><c> not</c><00:37:28.880><c> use</c><00:37:29.280><c> long</c><00:37:29.520><c> long</c><00:37:29.839><c> integers</c>

00:37:30.310 --> 00:37:30.320 align:start position:0%
we tend to not use long long integers
 

00:37:30.320 --> 00:37:32.550 align:start position:0%
we tend to not use long long integers
very<00:37:30.640><c> often</c><00:37:31.119><c> because</c><00:37:31.839><c> well</c><00:37:32.079><c> we</c><00:37:32.240><c> don't</c><00:37:32.400><c> really</c>

00:37:32.550 --> 00:37:32.560 align:start position:0%
very often because well we don't really
 

00:37:32.560 --> 00:37:34.630 align:start position:0%
very often because well we don't really
have<00:37:32.800><c> a</c><00:37:32.880><c> need</c><00:37:33.119><c> for</c><00:37:33.359><c> this</c><00:37:33.599><c> large</c><00:37:33.839><c> of</c><00:37:34.000><c> a</c><00:37:34.079><c> number</c>

00:37:34.630 --> 00:37:34.640 align:start position:0%
have a need for this large of a number
 

00:37:34.640 --> 00:37:36.710 align:start position:0%
have a need for this large of a number
but<00:37:34.880><c> in</c><00:37:34.960><c> certain</c><00:37:35.280><c> circumstances</c><00:37:36.160><c> you</c><00:37:36.320><c> might</c>

00:37:36.710 --> 00:37:36.720 align:start position:0%
but in certain circumstances you might
 

00:37:36.720 --> 00:37:38.550 align:start position:0%
but in certain circumstances you might
perhaps<00:37:37.119><c> you're</c><00:37:37.280><c> dealing</c><00:37:37.680><c> with</c><00:37:37.920><c> the</c><00:37:38.079><c> speed</c><00:37:38.400><c> of</c>

00:37:38.550 --> 00:37:38.560 align:start position:0%
perhaps you're dealing with the speed of
 

00:37:38.560 --> 00:37:40.950 align:start position:0%
perhaps you're dealing with the speed of
light<00:37:38.880><c> or</c><00:37:39.040><c> something</c><00:37:39.680><c> you</c><00:37:39.920><c> may</c><00:37:40.160><c> need</c><00:37:40.320><c> to</c><00:37:40.400><c> use</c><00:37:40.720><c> a</c>

00:37:40.950 --> 00:37:40.960 align:start position:0%
light or something you may need to use a
 

00:37:40.960 --> 00:37:43.270 align:start position:0%
light or something you may need to use a
long<00:37:41.280><c> long</c><00:37:41.599><c> integer</c><00:37:42.240><c> but</c><00:37:42.400><c> commonly</c><00:37:42.880><c> we</c><00:37:43.040><c> use</c>

00:37:43.270 --> 00:37:43.280 align:start position:0%
long long integer but commonly we use
 

00:37:43.280 --> 00:37:45.589 align:start position:0%
long long integer but commonly we use
standard<00:37:43.760><c> integers</c><00:37:44.240><c> a</c><00:37:44.320><c> lot</c><00:37:44.560><c> more</c><00:37:45.040><c> well</c><00:37:45.359><c> yeah</c>

00:37:45.589 --> 00:37:45.599 align:start position:0%
standard integers a lot more well yeah
 

00:37:45.599 --> 00:37:47.750 align:start position:0%
standard integers a lot more well yeah
everybody<00:37:46.079><c> those</c><00:37:46.320><c> are</c><00:37:46.560><c> even</c><00:37:46.800><c> more</c><00:37:47.119><c> c</c><00:37:47.440><c> data</c>

00:37:47.750 --> 00:37:47.760 align:start position:0%
everybody those are even more c data
 

00:37:47.760 --> 00:37:49.910 align:start position:0%
everybody those are even more c data
types<00:37:48.160><c> we</c><00:37:48.400><c> likely</c><00:37:48.800><c> won't</c><00:37:49.040><c> be</c><00:37:49.200><c> using</c><00:37:49.520><c> most</c><00:37:49.839><c> of</c>

00:37:49.910 --> 00:37:49.920 align:start position:0%
types we likely won't be using most of
 

00:37:49.920 --> 00:37:51.589 align:start position:0%
types we likely won't be using most of
these<00:37:50.160><c> but</c><00:37:50.320><c> you</c><00:37:50.480><c> should</c><00:37:50.720><c> still</c><00:37:50.960><c> be</c><00:37:51.119><c> made</c><00:37:51.359><c> aware</c>

00:37:51.589 --> 00:37:51.599 align:start position:0%
these but you should still be made aware
 

00:37:51.599 --> 00:37:53.829 align:start position:0%
these but you should still be made aware
of<00:37:51.680><c> their</c><00:37:51.920><c> existence</c><00:37:53.040><c> i</c><00:37:53.119><c> would</c><00:37:53.359><c> say</c><00:37:53.680><c> that</c>

00:37:53.829 --> 00:37:53.839 align:start position:0%
of their existence i would say that
 

00:37:53.839 --> 00:37:56.630 align:start position:0%
of their existence i would say that
we're<00:37:54.079><c> going</c><00:37:54.240><c> to</c><00:37:54.400><c> focus</c><00:37:54.880><c> on</c><00:37:55.280><c> chars</c><00:37:56.160><c> array</c><00:37:56.480><c> of</c>

00:37:56.630 --> 00:37:56.640 align:start position:0%
we're going to focus on chars array of
 

00:37:56.640 --> 00:37:57.589 align:start position:0%
we're going to focus on chars array of
chars

00:37:57.589 --> 00:37:57.599 align:start position:0%
chars
 

00:37:57.599 --> 00:37:59.910 align:start position:0%
chars
doubles<00:37:58.560><c> booleans</c>

00:37:59.910 --> 00:37:59.920 align:start position:0%
doubles booleans
 

00:37:59.920 --> 00:38:02.390 align:start position:0%
doubles booleans
and<00:38:00.400><c> integers</c><00:38:01.119><c> so</c><00:38:01.440><c> pay</c><00:38:01.599><c> attention</c><00:38:02.000><c> to</c><00:38:02.160><c> those</c>

00:38:02.390 --> 00:38:02.400 align:start position:0%
and integers so pay attention to those
 

00:38:02.400 --> 00:38:04.310 align:start position:0%
and integers so pay attention to those
ones<00:38:02.880><c> but</c><00:38:03.040><c> you</c><00:38:03.119><c> should</c><00:38:03.359><c> still</c><00:38:03.520><c> be</c><00:38:03.680><c> made</c><00:38:03.920><c> aware</c>

00:38:04.310 --> 00:38:04.320 align:start position:0%
ones but you should still be made aware
 

00:38:04.320 --> 00:38:06.470 align:start position:0%
ones but you should still be made aware
of<00:38:04.400><c> the</c><00:38:04.720><c> existence</c><00:38:05.359><c> of</c><00:38:05.599><c> other</c><00:38:05.839><c> data</c><00:38:06.160><c> types</c>

00:38:06.470 --> 00:38:06.480 align:start position:0%
of the existence of other data types
 

00:38:06.480 --> 00:38:08.310 align:start position:0%
of the existence of other data types
just<00:38:06.720><c> in</c><00:38:06.800><c> case</c><00:38:07.040><c> you</c><00:38:07.200><c> encounter</c><00:38:07.680><c> them</c><00:38:08.079><c> if</c><00:38:08.160><c> you</c>

00:38:08.310 --> 00:38:08.320 align:start position:0%
just in case you encounter them if you
 

00:38:08.320 --> 00:38:10.150 align:start position:0%
just in case you encounter them if you
found<00:38:08.560><c> this</c><00:38:08.720><c> video</c><00:38:08.960><c> helpful</c><00:38:09.440><c> please</c><00:38:09.839><c> smash</c>

00:38:10.150 --> 00:38:10.160 align:start position:0%
found this video helpful please smash
 

00:38:10.160 --> 00:38:11.829 align:start position:0%
found this video helpful please smash
that<00:38:10.320><c> like</c><00:38:10.560><c> button</c><00:38:10.960><c> leave</c><00:38:11.119><c> a</c><00:38:11.200><c> random</c><00:38:11.520><c> comment</c>

00:38:11.829 --> 00:38:11.839 align:start position:0%
that like button leave a random comment
 

00:38:11.839 --> 00:38:13.750 align:start position:0%
that like button leave a random comment
down<00:38:12.000><c> below</c><00:38:12.560><c> and</c><00:38:12.800><c> subscribe</c><00:38:13.280><c> if</c><00:38:13.440><c> you'd</c><00:38:13.599><c> like</c>

00:38:13.750 --> 00:38:13.760 align:start position:0%
down below and subscribe if you'd like
 

00:38:13.760 --> 00:38:18.390 align:start position:0%
down below and subscribe if you'd like
to<00:38:13.839><c> become</c><00:38:14.079><c> a</c><00:38:14.240><c> fellow</c><00:38:14.560><c> bro</c>

00:38:18.390 --> 00:38:18.400 align:start position:0%
 
 

00:38:18.400 --> 00:38:20.390 align:start position:0%
 
all<00:38:18.640><c> right</c><00:38:18.960><c> welcome</c><00:38:19.280><c> back</c><00:38:19.599><c> everybody</c><00:38:20.079><c> in</c><00:38:20.240><c> this</c>

00:38:20.390 --> 00:38:20.400 align:start position:0%
all right welcome back everybody in this
 

00:38:20.400 --> 00:38:21.750 align:start position:0%
all right welcome back everybody in this
video<00:38:20.640><c> i'm</c><00:38:20.720><c> going</c><00:38:20.880><c> to</c><00:38:20.960><c> show</c><00:38:21.119><c> you</c><00:38:21.200><c> while</c><00:38:21.440><c> a</c><00:38:21.520><c> few</c>

00:38:21.750 --> 00:38:21.760 align:start position:0%
video i'm going to show you while a few
 

00:38:21.760 --> 00:38:23.589 align:start position:0%
video i'm going to show you while a few
extra<00:38:22.079><c> things</c><00:38:22.400><c> that</c><00:38:22.480><c> we</c><00:38:22.640><c> can</c><00:38:22.800><c> do</c><00:38:22.960><c> with</c><00:38:23.200><c> format</c>

00:38:23.589 --> 00:38:23.599 align:start position:0%
extra things that we can do with format
 

00:38:23.599 --> 00:38:26.150 align:start position:0%
extra things that we can do with format
specifiers<00:38:24.640><c> using</c><00:38:24.960><c> a</c><00:38:25.119><c> format</c><00:38:25.599><c> specifier</c>

00:38:26.150 --> 00:38:26.160 align:start position:0%
specifiers using a format specifier
 

00:38:26.160 --> 00:38:28.870 align:start position:0%
specifiers using a format specifier
within<00:38:26.640><c> a</c><00:38:26.800><c> printf</c><00:38:27.280><c> statement</c><00:38:28.079><c> we</c><00:38:28.240><c> can</c><00:38:28.400><c> define</c>

00:38:28.870 --> 00:38:28.880 align:start position:0%
within a printf statement we can define
 

00:38:28.880 --> 00:38:30.790 align:start position:0%
within a printf statement we can define
and<00:38:29.040><c> format</c><00:38:29.599><c> a</c><00:38:29.839><c> type</c><00:38:30.079><c> of</c><00:38:30.160><c> data</c><00:38:30.480><c> to</c><00:38:30.640><c> be</c>

00:38:30.790 --> 00:38:30.800 align:start position:0%
and format a type of data to be
 

00:38:30.800 --> 00:38:33.190 align:start position:0%
and format a type of data to be
displayed<00:38:31.440><c> to</c><00:38:31.599><c> use</c><00:38:31.839><c> a</c><00:38:31.920><c> format</c><00:38:32.320><c> specifier</c><00:38:32.960><c> you</c>

00:38:33.190 --> 00:38:33.200 align:start position:0%
displayed to use a format specifier you
 

00:38:33.200 --> 00:38:35.270 align:start position:0%
displayed to use a format specifier you
use<00:38:33.520><c> a</c><00:38:33.680><c> percent</c><00:38:34.079><c> sign</c><00:38:34.400><c> then</c><00:38:34.720><c> follow</c><00:38:35.119><c> that</c>

00:38:35.270 --> 00:38:35.280 align:start position:0%
use a percent sign then follow that
 

00:38:35.280 --> 00:38:37.190 align:start position:0%
use a percent sign then follow that
percent<00:38:35.760><c> sign</c><00:38:36.000><c> with</c><00:38:36.240><c> a</c><00:38:36.400><c> certain</c><00:38:36.720><c> character</c>

00:38:37.190 --> 00:38:37.200 align:start position:0%
percent sign with a certain character
 

00:38:37.200 --> 00:38:39.030 align:start position:0%
percent sign with a certain character
depending<00:38:37.760><c> on</c><00:38:37.920><c> the</c><00:38:38.160><c> type</c><00:38:38.400><c> of</c><00:38:38.560><c> data</c><00:38:38.800><c> you</c><00:38:38.880><c> would</c>

00:38:39.030 --> 00:38:39.040 align:start position:0%
depending on the type of data you would
 

00:38:39.040 --> 00:38:40.710 align:start position:0%
depending on the type of data you would
like<00:38:39.200><c> to</c><00:38:39.280><c> display</c><00:38:39.839><c> let's</c><00:38:40.000><c> say</c><00:38:40.160><c> that</c><00:38:40.320><c> we</c><00:38:40.480><c> have</c>

00:38:40.710 --> 00:38:40.720 align:start position:0%
like to display let's say that we have
 

00:38:40.720 --> 00:38:42.790 align:start position:0%
like to display let's say that we have
three<00:38:41.040><c> variables</c><00:38:41.599><c> maybe</c><00:38:41.920><c> we</c><00:38:42.079><c> have</c><00:38:42.240><c> an</c><00:38:42.400><c> online</c>

00:38:42.790 --> 00:38:42.800 align:start position:0%
three variables maybe we have an online
 

00:38:42.800 --> 00:38:44.950 align:start position:0%
three variables maybe we have an online
store<00:38:43.200><c> or</c><00:38:43.280><c> something</c><00:38:43.599><c> like</c><00:38:43.839><c> that</c><00:38:44.480><c> so</c><00:38:44.720><c> let's</c>

00:38:44.950 --> 00:38:44.960 align:start position:0%
store or something like that so let's
 

00:38:44.960 --> 00:38:47.030 align:start position:0%
store or something like that so let's
say<00:38:45.200><c> that</c><00:38:45.440><c> these</c><00:38:45.680><c> are</c><00:38:45.920><c> of</c><00:38:46.160><c> the</c><00:38:46.400><c> float</c><00:38:46.800><c> data</c>

00:38:47.030 --> 00:38:47.040 align:start position:0%
say that these are of the float data
 

00:38:47.040 --> 00:38:49.190 align:start position:0%
say that these are of the float data
type<00:38:47.440><c> and</c><00:38:47.599><c> we'll</c><00:38:47.760><c> have</c><00:38:48.000><c> three</c><00:38:48.240><c> items</c><00:38:48.560><c> for</c><00:38:48.800><c> sale</c>

00:38:49.190 --> 00:38:49.200 align:start position:0%
type and we'll have three items for sale
 

00:38:49.200 --> 00:38:51.430 align:start position:0%
type and we'll have three items for sale
item<00:38:49.520><c> one</c><00:38:49.920><c> and</c><00:38:50.160><c> make</c><00:38:50.400><c> up</c><00:38:50.480><c> some</c><00:38:50.720><c> price</c><00:38:51.200><c> let's</c>

00:38:51.430 --> 00:38:51.440 align:start position:0%
item one and make up some price let's
 

00:38:51.440 --> 00:38:53.829 align:start position:0%
item one and make up some price let's
say<00:38:51.680><c> that</c><00:38:51.839><c> the</c><00:38:52.160><c> first</c><00:38:52.480><c> item</c><00:38:52.880><c> is</c><00:38:53.200><c> five</c><00:38:53.440><c> dollars</c>

00:38:53.829 --> 00:38:53.839 align:start position:0%
say that the first item is five dollars
 

00:38:53.839 --> 00:38:55.750 align:start position:0%
say that the first item is five dollars
and<00:38:53.920><c> seventy</c><00:38:54.240><c> five</c><00:38:54.560><c> cents</c>

00:38:55.750 --> 00:38:55.760 align:start position:0%
and seventy five cents
 

00:38:55.760 --> 00:38:58.310 align:start position:0%
and seventy five cents
and<00:38:56.000><c> we</c><00:38:56.160><c> have</c><00:38:56.560><c> item</c><00:38:57.119><c> two</c>

00:38:58.310 --> 00:38:58.320 align:start position:0%
and we have item two
 

00:38:58.320 --> 00:39:00.550 align:start position:0%
and we have item two
and<00:38:58.480><c> this</c><00:38:58.720><c> will</c><00:38:58.960><c> be</c><00:38:59.280><c> ten</c><00:38:59.440><c> dollars</c><00:38:59.920><c> even</c><00:39:00.400><c> and</c>

00:39:00.550 --> 00:39:00.560 align:start position:0%
and this will be ten dollars even and
 

00:39:00.560 --> 00:39:03.430 align:start position:0%
and this will be ten dollars even and
then<00:39:00.720><c> we</c><00:39:00.960><c> have</c><00:39:01.359><c> item</c><00:39:02.160><c> three</c><00:39:02.800><c> and</c><00:39:02.880><c> this</c><00:39:03.040><c> will</c><00:39:03.200><c> be</c>

00:39:03.430 --> 00:39:03.440 align:start position:0%
then we have item three and this will be
 

00:39:03.440 --> 00:39:04.870 align:start position:0%
then we have item three and this will be
one<00:39:03.599><c> hundred</c><00:39:03.839><c> dollars</c><00:39:04.240><c> and</c><00:39:04.320><c> ninety</c><00:39:04.640><c> nine</c>

00:39:04.870 --> 00:39:04.880 align:start position:0%
one hundred dollars and ninety nine
 

00:39:04.880 --> 00:39:07.670 align:start position:0%
one hundred dollars and ninety nine
cents<00:39:05.680><c> so</c><00:39:05.920><c> let's</c><00:39:06.160><c> display</c><00:39:06.640><c> item</c><00:39:06.960><c> one</c><00:39:07.280><c> item</c><00:39:07.520><c> two</c>

00:39:07.670 --> 00:39:07.680 align:start position:0%
cents so let's display item one item two
 

00:39:07.680 --> 00:39:09.910 align:start position:0%
cents so let's display item one item two
in<00:39:07.839><c> item</c><00:39:08.079><c> three</c><00:39:08.320><c> with</c><00:39:08.640><c> a</c><00:39:08.800><c> print</c><00:39:09.119><c> f</c><00:39:09.359><c> statement</c>

00:39:09.910 --> 00:39:09.920 align:start position:0%
in item three with a print f statement
 

00:39:09.920 --> 00:39:12.790 align:start position:0%
in item three with a print f statement
print<00:39:10.400><c> f</c><00:39:10.800><c> and</c><00:39:10.960><c> within</c><00:39:11.359><c> a</c><00:39:11.440><c> string</c><00:39:12.240><c> let's</c><00:39:12.480><c> say</c>

00:39:12.790 --> 00:39:12.800 align:start position:0%
print f and within a string let's say
 

00:39:12.800 --> 00:39:17.030 align:start position:0%
print f and within a string let's say
item<00:39:14.160><c> one</c><00:39:14.880><c> colon</c><00:39:15.680><c> space</c><00:39:16.240><c> then</c><00:39:16.480><c> i'll</c><00:39:16.640><c> add</c><00:39:16.880><c> a</c>

00:39:17.030 --> 00:39:17.040 align:start position:0%
item one colon space then i'll add a
 

00:39:17.040 --> 00:39:19.190 align:start position:0%
item one colon space then i'll add a
dollar<00:39:17.440><c> sign</c><00:39:18.079><c> wherever</c><00:39:18.480><c> you</c><00:39:18.560><c> would</c><00:39:18.720><c> like</c><00:39:18.960><c> to</c>

00:39:19.190 --> 00:39:19.200 align:start position:0%
dollar sign wherever you would like to
 

00:39:19.200 --> 00:39:21.990 align:start position:0%
dollar sign wherever you would like to
insert<00:39:19.680><c> a</c><00:39:19.839><c> value</c><00:39:20.320><c> or</c><00:39:20.480><c> variable</c><00:39:21.280><c> you</c><00:39:21.440><c> will</c><00:39:21.680><c> use</c>

00:39:21.990 --> 00:39:22.000 align:start position:0%
insert a value or variable you will use
 

00:39:22.000 --> 00:39:24.310 align:start position:0%
insert a value or variable you will use
that<00:39:22.160><c> format</c><00:39:22.560><c> specifier</c><00:39:23.280><c> the</c><00:39:23.440><c> percent</c><00:39:23.839><c> sign</c>

00:39:24.310 --> 00:39:24.320 align:start position:0%
that format specifier the percent sign
 

00:39:24.320 --> 00:39:27.030 align:start position:0%
that format specifier the percent sign
so<00:39:24.560><c> after</c><00:39:24.960><c> my</c><00:39:25.280><c> dollar</c><00:39:25.680><c> sign</c><00:39:26.079><c> i'll</c><00:39:26.320><c> add</c><00:39:26.720><c> item</c>

00:39:27.030 --> 00:39:27.040 align:start position:0%
so after my dollar sign i'll add item
 

00:39:27.040 --> 00:39:29.589 align:start position:0%
so after my dollar sign i'll add item
one<00:39:27.440><c> so</c><00:39:27.680><c> that</c><00:39:27.839><c> would</c><00:39:28.079><c> be</c><00:39:28.320><c> percent</c><00:39:29.119><c> then</c><00:39:29.359><c> for</c>

00:39:29.589 --> 00:39:29.599 align:start position:0%
one so that would be percent then for
 

00:39:29.599 --> 00:39:31.270 align:start position:0%
one so that would be percent then for
floats<00:39:30.000><c> you</c><00:39:30.079><c> need</c><00:39:30.320><c> f</c><00:39:30.560><c> and</c><00:39:30.640><c> then</c><00:39:30.800><c> after</c><00:39:31.119><c> the</c>

00:39:31.270 --> 00:39:31.280 align:start position:0%
floats you need f and then after the
 

00:39:31.280 --> 00:39:33.270 align:start position:0%
floats you need f and then after the
string<00:39:31.680><c> add</c><00:39:32.079><c> comma</c>

00:39:33.270 --> 00:39:33.280 align:start position:0%
string add comma
 

00:39:33.280 --> 00:39:35.270 align:start position:0%
string add comma
item<00:39:33.839><c> one</c><00:39:34.160><c> then</c><00:39:34.400><c> let's</c><00:39:34.640><c> just</c><00:39:34.800><c> make</c><00:39:34.960><c> sure</c><00:39:35.119><c> that</c>

00:39:35.270 --> 00:39:35.280 align:start position:0%
item one then let's just make sure that
 

00:39:35.280 --> 00:39:37.109 align:start position:0%
item one then let's just make sure that
this<00:39:35.520><c> works</c><00:39:36.240><c> so</c><00:39:36.480><c> we're</c><00:39:36.720><c> going</c><00:39:36.880><c> to</c><00:39:36.960><c> be</c>

00:39:37.109 --> 00:39:37.119 align:start position:0%
this works so we're going to be
 

00:39:37.119 --> 00:39:38.870 align:start position:0%
this works so we're going to be
formatting<00:39:37.599><c> this</c><00:39:37.839><c> output</c><00:39:38.240><c> what</c><00:39:38.400><c> if</c><00:39:38.560><c> we</c><00:39:38.640><c> don't</c>

00:39:38.870 --> 00:39:38.880 align:start position:0%
formatting this output what if we don't
 

00:39:38.880 --> 00:39:40.950 align:start position:0%
formatting this output what if we don't
want<00:39:39.119><c> all</c><00:39:39.200><c> the</c><00:39:39.359><c> zeros</c><00:39:40.000><c> we</c><00:39:40.160><c> can</c><00:39:40.400><c> set</c><00:39:40.720><c> the</c>

00:39:40.950 --> 00:39:40.960 align:start position:0%
want all the zeros we can set the
 

00:39:40.960 --> 00:39:43.829 align:start position:0%
want all the zeros we can set the
decimal<00:39:41.520><c> precision</c><00:39:42.320><c> of</c><00:39:42.480><c> a</c><00:39:42.640><c> float</c><00:39:43.040><c> or</c><00:39:43.200><c> double</c>

00:39:43.829 --> 00:39:43.839 align:start position:0%
decimal precision of a float or double
 

00:39:43.839 --> 00:39:46.550 align:start position:0%
decimal precision of a float or double
after<00:39:44.160><c> the</c><00:39:44.320><c> format</c><00:39:44.720><c> specifier</c><00:39:45.520><c> add</c><00:39:45.760><c> a</c><00:39:46.000><c> dot</c><00:39:46.400><c> and</c>

00:39:46.550 --> 00:39:46.560 align:start position:0%
after the format specifier add a dot and
 

00:39:46.560 --> 00:39:47.990 align:start position:0%
after the format specifier add a dot and
the<00:39:46.640><c> amount</c><00:39:46.960><c> of</c><00:39:47.040><c> digits</c><00:39:47.440><c> you</c><00:39:47.599><c> would</c><00:39:47.680><c> like</c><00:39:47.839><c> to</c>

00:39:47.990 --> 00:39:48.000 align:start position:0%
the amount of digits you would like to
 

00:39:48.000 --> 00:39:49.990 align:start position:0%
the amount of digits you would like to
display<00:39:48.560><c> if</c><00:39:48.720><c> i</c><00:39:48.800><c> would</c><00:39:49.040><c> only</c><00:39:49.280><c> like</c><00:39:49.440><c> to</c><00:39:49.599><c> display</c>

00:39:49.990 --> 00:39:50.000 align:start position:0%
display if i would only like to display
 

00:39:50.000 --> 00:39:52.630 align:start position:0%
display if i would only like to display
two<00:39:50.160><c> digits</c><00:39:50.800><c> after</c><00:39:51.119><c> the</c><00:39:51.359><c> percent</c><00:39:51.839><c> i</c><00:39:51.920><c> will</c><00:39:52.160><c> add</c>

00:39:52.630 --> 00:39:52.640 align:start position:0%
two digits after the percent i will add
 

00:39:52.640 --> 00:39:55.750 align:start position:0%
two digits after the percent i will add
point<00:39:53.440><c> two</c><00:39:54.000><c> and</c><00:39:54.160><c> this</c><00:39:54.320><c> will</c><00:39:54.640><c> only</c><00:39:54.880><c> display</c><00:39:55.520><c> two</c>

00:39:55.750 --> 00:39:55.760 align:start position:0%
point two and this will only display two
 

00:39:55.760 --> 00:39:57.750 align:start position:0%
point two and this will only display two
digits<00:39:56.400><c> for</c><00:39:56.640><c> the</c><00:39:56.720><c> amount</c><00:39:56.960><c> of</c><00:39:57.119><c> cents</c><00:39:57.440><c> that</c><00:39:57.599><c> we</c>

00:39:57.750 --> 00:39:57.760 align:start position:0%
digits for the amount of cents that we
 

00:39:57.760 --> 00:39:59.990 align:start position:0%
digits for the amount of cents that we
owe<00:39:58.079><c> okay</c><00:39:58.480><c> now</c><00:39:58.640><c> let's</c><00:39:58.880><c> do</c><00:39:59.040><c> the</c><00:39:59.119><c> same</c><00:39:59.359><c> thing</c><00:39:59.760><c> for</c>

00:39:59.990 --> 00:40:00.000 align:start position:0%
owe okay now let's do the same thing for
 

00:40:00.000 --> 00:40:03.109 align:start position:0%
owe okay now let's do the same thing for
items<00:40:00.640><c> two</c><00:40:00.960><c> and</c><00:40:01.280><c> three</c><00:40:01.680><c> so</c><00:40:01.920><c> item</c><00:40:02.320><c> two</c>

00:40:03.109 --> 00:40:03.119 align:start position:0%
items two and three so item two
 

00:40:03.119 --> 00:40:04.230 align:start position:0%
items two and three so item two
item<00:40:03.520><c> two</c>

00:40:04.230 --> 00:40:04.240 align:start position:0%
item two
 

00:40:04.240 --> 00:40:05.589 align:start position:0%
item two
item<00:40:04.640><c> three</c>

00:40:05.589 --> 00:40:05.599 align:start position:0%
item three
 

00:40:05.599 --> 00:40:07.030 align:start position:0%
item three
item<00:40:05.920><c> three</c>

00:40:07.030 --> 00:40:07.040 align:start position:0%
item three
 

00:40:07.040 --> 00:40:08.790 align:start position:0%
item three
okay<00:40:07.359><c> then</c><00:40:07.520><c> let's</c><00:40:07.760><c> add</c><00:40:07.920><c> a</c><00:40:08.000><c> new</c><00:40:08.160><c> line</c><00:40:08.400><c> character</c>

00:40:08.790 --> 00:40:08.800 align:start position:0%
okay then let's add a new line character
 

00:40:08.800 --> 00:40:11.990 align:start position:0%
okay then let's add a new line character
because<00:40:09.200><c> i</c><00:40:09.359><c> forgot</c><00:40:10.240><c> so</c><00:40:10.640><c> new</c><00:40:10.880><c> line</c>

00:40:11.990 --> 00:40:12.000 align:start position:0%
because i forgot so new line
 

00:40:12.000 --> 00:40:15.190 align:start position:0%
because i forgot so new line
new<00:40:12.319><c> line</c><00:40:12.880><c> and</c><00:40:13.119><c> new</c><00:40:13.359><c> line</c>

00:40:15.190 --> 00:40:15.200 align:start position:0%
new line and new line
 

00:40:15.200 --> 00:40:17.030 align:start position:0%
new line and new line
much<00:40:15.520><c> better</c><00:40:15.920><c> another</c><00:40:16.240><c> thing</c><00:40:16.480><c> that</c><00:40:16.640><c> we</c><00:40:16.720><c> can</c><00:40:16.880><c> do</c>

00:40:17.030 --> 00:40:17.040 align:start position:0%
much better another thing that we can do
 

00:40:17.040 --> 00:40:19.270 align:start position:0%
much better another thing that we can do
with<00:40:17.200><c> format</c><00:40:17.599><c> specifiers</c><00:40:18.560><c> is</c><00:40:18.720><c> that</c><00:40:18.880><c> we</c><00:40:19.040><c> can</c>

00:40:19.270 --> 00:40:19.280 align:start position:0%
with format specifiers is that we can
 

00:40:19.280 --> 00:40:22.069 align:start position:0%
with format specifiers is that we can
set<00:40:19.520><c> a</c><00:40:19.839><c> minimum</c><00:40:20.400><c> field</c><00:40:20.800><c> width</c><00:40:21.359><c> so</c><00:40:21.599><c> just</c><00:40:21.760><c> add</c><00:40:22.000><c> a</c>

00:40:22.069 --> 00:40:22.079 align:start position:0%
set a minimum field width so just add a
 

00:40:22.079 --> 00:40:24.230 align:start position:0%
set a minimum field width so just add a
number<00:40:22.480><c> after</c><00:40:22.720><c> the</c><00:40:22.880><c> percent</c><00:40:23.280><c> sign</c><00:40:23.680><c> let's</c><00:40:23.920><c> say</c>

00:40:24.230 --> 00:40:24.240 align:start position:0%
number after the percent sign let's say
 

00:40:24.240 --> 00:40:26.230 align:start position:0%
number after the percent sign let's say
that<00:40:24.480><c> i</c><00:40:24.560><c> would</c><00:40:24.800><c> like</c><00:40:25.040><c> to</c><00:40:25.359><c> allocate</c><00:40:25.920><c> eight</c>

00:40:26.230 --> 00:40:26.240 align:start position:0%
that i would like to allocate eight
 

00:40:26.240 --> 00:40:28.150 align:start position:0%
that i would like to allocate eight
spaces<00:40:26.640><c> worth</c><00:40:26.960><c> of</c><00:40:27.119><c> room</c><00:40:27.359><c> to</c><00:40:27.520><c> display</c><00:40:27.920><c> my</c>

00:40:28.150 --> 00:40:28.160 align:start position:0%
spaces worth of room to display my
 

00:40:28.160 --> 00:40:29.109 align:start position:0%
spaces worth of room to display my
number

00:40:29.109 --> 00:40:29.119 align:start position:0%
number
 

00:40:29.119 --> 00:40:31.510 align:start position:0%
number
so<00:40:29.359><c> after</c><00:40:29.680><c> the</c><00:40:29.839><c> percent</c><00:40:30.240><c> sign</c><00:40:30.800><c> but</c><00:40:31.040><c> before</c><00:40:31.359><c> the</c>

00:40:31.510 --> 00:40:31.520 align:start position:0%
so after the percent sign but before the
 

00:40:31.520 --> 00:40:33.510 align:start position:0%
so after the percent sign but before the
decimal<00:40:32.079><c> add</c><00:40:32.400><c> how</c><00:40:32.560><c> many</c><00:40:32.800><c> spaces</c><00:40:33.280><c> you</c><00:40:33.440><c> would</c>

00:40:33.510 --> 00:40:33.520 align:start position:0%
decimal add how many spaces you would
 

00:40:33.520 --> 00:40:36.069 align:start position:0%
decimal add how many spaces you would
like<00:40:33.680><c> to</c><00:40:33.839><c> set</c><00:40:34.160><c> for</c><00:40:34.319><c> the</c><00:40:34.560><c> minimum</c><00:40:35.040><c> field</c><00:40:35.359><c> width</c>

00:40:36.069 --> 00:40:36.079 align:start position:0%
like to set for the minimum field width
 

00:40:36.079 --> 00:40:37.670 align:start position:0%
like to set for the minimum field width
let's<00:40:36.319><c> say</c><00:40:36.560><c> eight</c>

00:40:37.670 --> 00:40:37.680 align:start position:0%
let's say eight
 

00:40:37.680 --> 00:40:39.670 align:start position:0%
let's say eight
and<00:40:37.920><c> let's</c><00:40:38.079><c> see</c><00:40:38.319><c> the</c><00:40:38.400><c> new</c><00:40:38.640><c> output</c><00:40:39.200><c> okay</c><00:40:39.520><c> there</c>

00:40:39.670 --> 00:40:39.680 align:start position:0%
and let's see the new output okay there
 

00:40:39.680 --> 00:40:41.750 align:start position:0%
and let's see the new output okay there
we<00:40:39.760><c> go</c><00:40:40.079><c> however</c><00:40:40.560><c> it's</c><00:40:40.720><c> all</c><00:40:40.960><c> right</c><00:40:41.200><c> aligned</c><00:40:41.599><c> if</c>

00:40:41.750 --> 00:40:41.760 align:start position:0%
we go however it's all right aligned if
 

00:40:41.760 --> 00:40:43.430 align:start position:0%
we go however it's all right aligned if
you<00:40:41.839><c> would</c><00:40:42.000><c> like</c><00:40:42.240><c> this</c><00:40:42.480><c> left</c><00:40:42.720><c> aligned</c><00:40:43.280><c> you</c>

00:40:43.430 --> 00:40:43.440 align:start position:0%
you would like this left aligned you
 

00:40:43.440 --> 00:40:45.829 align:start position:0%
you would like this left aligned you
would<00:40:43.599><c> use</c><00:40:44.000><c> a</c><00:40:44.319><c> negative</c><00:40:44.800><c> sign</c><00:40:45.200><c> after</c><00:40:45.599><c> the</c>

00:40:45.829 --> 00:40:45.839 align:start position:0%
would use a negative sign after the
 

00:40:45.839 --> 00:40:47.750 align:start position:0%
would use a negative sign after the
percent<00:40:46.240><c> to</c><00:40:46.480><c> left</c><00:40:46.720><c> align</c><00:40:47.040><c> all</c><00:40:47.200><c> this</c><00:40:47.520><c> this</c>

00:40:47.750 --> 00:40:47.760 align:start position:0%
percent to left align all this this
 

00:40:47.760 --> 00:40:49.030 align:start position:0%
percent to left align all this this
would<00:40:48.000><c> be</c>

00:40:49.030 --> 00:40:49.040 align:start position:0%
would be
 

00:40:49.040 --> 00:40:50.710 align:start position:0%
would be
negative<00:40:49.680><c> whatever</c><00:40:50.000><c> number</c><00:40:50.319><c> you</c><00:40:50.400><c> would</c><00:40:50.560><c> like</c>

00:40:50.710 --> 00:40:50.720 align:start position:0%
negative whatever number you would like
 

00:40:50.720 --> 00:40:53.589 align:start position:0%
negative whatever number you would like
to<00:40:50.880><c> allocate</c><00:40:52.240><c> so</c><00:40:52.480><c> the</c><00:40:52.640><c> number</c><00:40:53.119><c> is</c><00:40:53.359><c> left</c>

00:40:53.589 --> 00:40:53.599 align:start position:0%
to allocate so the number is left
 

00:40:53.599 --> 00:40:55.430 align:start position:0%
to allocate so the number is left
justified<00:40:54.240><c> but</c><00:40:54.400><c> we</c><00:40:54.560><c> still</c><00:40:54.800><c> have</c><00:40:55.040><c> all</c><00:40:55.119><c> of</c><00:40:55.280><c> this</c>

00:40:55.430 --> 00:40:55.440 align:start position:0%
justified but we still have all of this
 

00:40:55.440 --> 00:40:57.750 align:start position:0%
justified but we still have all of this
room<00:40:55.760><c> after</c><00:40:56.319><c> so</c><00:40:56.560><c> that's</c><00:40:56.880><c> what</c><00:40:57.119><c> a</c><00:40:57.280><c> format</c>

00:40:57.750 --> 00:40:57.760 align:start position:0%
room after so that's what a format
 

00:40:57.760 --> 00:41:00.550 align:start position:0%
room after so that's what a format
specifier<00:40:58.480><c> is</c><00:40:58.880><c> it</c><00:40:59.040><c> defines</c><00:40:59.599><c> and</c><00:40:59.760><c> formats</c><00:41:00.319><c> a</c>

00:41:00.550 --> 00:41:00.560 align:start position:0%
specifier is it defines and formats a
 

00:41:00.560 --> 00:41:03.190 align:start position:0%
specifier is it defines and formats a
type<00:41:00.800><c> of</c><00:41:00.960><c> data</c><00:41:01.280><c> to</c><00:41:01.440><c> be</c><00:41:01.599><c> displayed</c><00:41:02.400><c> so</c><00:41:02.720><c> place</c><00:41:03.040><c> a</c>

00:41:03.190 --> 00:41:03.200 align:start position:0%
type of data to be displayed so place a
 

00:41:03.200 --> 00:41:05.829 align:start position:0%
type of data to be displayed so place a
format<00:41:03.599><c> specifier</c><00:41:04.319><c> within</c><00:41:04.640><c> a</c><00:41:04.720><c> string</c><00:41:05.280><c> use</c><00:41:05.599><c> a</c>

00:41:05.829 --> 00:41:05.839 align:start position:0%
format specifier within a string use a
 

00:41:05.839 --> 00:41:07.670 align:start position:0%
format specifier within a string use a
certain<00:41:06.160><c> character</c><00:41:06.720><c> for</c><00:41:06.880><c> the</c><00:41:07.119><c> type</c><00:41:07.359><c> of</c><00:41:07.440><c> dad</c>

00:41:07.670 --> 00:41:07.680 align:start position:0%
certain character for the type of dad
 

00:41:07.680 --> 00:41:09.430 align:start position:0%
certain character for the type of dad
you<00:41:07.839><c> would</c><00:41:07.920><c> like</c><00:41:08.079><c> to</c><00:41:08.240><c> display</c><00:41:08.720><c> you</c><00:41:08.880><c> can</c><00:41:09.040><c> set</c>

00:41:09.430 --> 00:41:09.440 align:start position:0%
you would like to display you can set
 

00:41:09.440 --> 00:41:12.150 align:start position:0%
you would like to display you can set
decimal<00:41:09.920><c> precision</c><00:41:10.480><c> for</c><00:41:10.720><c> floats</c><00:41:11.119><c> and</c><00:41:11.280><c> doubles</c>

00:41:12.150 --> 00:41:12.160 align:start position:0%
decimal precision for floats and doubles
 

00:41:12.160 --> 00:41:14.230 align:start position:0%
decimal precision for floats and doubles
you<00:41:12.319><c> can</c><00:41:12.480><c> set</c><00:41:12.800><c> a</c><00:41:12.960><c> minimum</c><00:41:13.359><c> field</c><00:41:13.680><c> width</c><00:41:14.079><c> to</c>

00:41:14.230 --> 00:41:14.240 align:start position:0%
you can set a minimum field width to
 

00:41:14.240 --> 00:41:16.069 align:start position:0%
you can set a minimum field width to
display<00:41:14.640><c> your</c><00:41:14.800><c> output</c><00:41:15.359><c> if</c><00:41:15.520><c> you</c><00:41:15.680><c> would</c><00:41:15.760><c> like</c><00:41:15.920><c> to</c>

00:41:16.069 --> 00:41:16.079 align:start position:0%
display your output if you would like to
 

00:41:16.079 --> 00:41:18.150 align:start position:0%
display your output if you would like to
line<00:41:16.319><c> things</c><00:41:16.640><c> up</c><00:41:16.800><c> like</c><00:41:17.040><c> you</c><00:41:17.119><c> can</c><00:41:17.280><c> see</c><00:41:17.520><c> here</c><00:41:18.000><c> and</c>

00:41:18.150 --> 00:41:18.160 align:start position:0%
line things up like you can see here and
 

00:41:18.160 --> 00:41:20.470 align:start position:0%
line things up like you can see here and
you<00:41:18.319><c> can</c><00:41:18.480><c> left</c><00:41:18.800><c> or</c><00:41:18.960><c> right</c><00:41:19.200><c> align</c><00:41:19.599><c> your</c><00:41:19.839><c> output</c>

00:41:20.470 --> 00:41:20.480 align:start position:0%
you can left or right align your output
 

00:41:20.480 --> 00:41:23.030 align:start position:0%
you can left or right align your output
so<00:41:20.720><c> yeah</c><00:41:21.040><c> those</c><00:41:21.359><c> are</c><00:41:21.599><c> format</c><00:41:22.000><c> specifiers</c><00:41:22.880><c> if</c>

00:41:23.030 --> 00:41:23.040 align:start position:0%
so yeah those are format specifiers if
 

00:41:23.040 --> 00:41:24.550 align:start position:0%
so yeah those are format specifiers if
you<00:41:23.119><c> found</c><00:41:23.359><c> this</c><00:41:23.520><c> video</c><00:41:23.760><c> helpful</c><00:41:24.160><c> please</c><00:41:24.400><c> be</c>

00:41:24.550 --> 00:41:24.560 align:start position:0%
you found this video helpful please be
 

00:41:24.560 --> 00:41:26.630 align:start position:0%
you found this video helpful please be
sure<00:41:24.880><c> to</c><00:41:25.119><c> smash</c><00:41:25.520><c> that</c><00:41:25.680><c> like</c><00:41:25.920><c> button</c><00:41:26.400><c> leave</c><00:41:26.560><c> a</c>

00:41:26.630 --> 00:41:26.640 align:start position:0%
sure to smash that like button leave a
 

00:41:26.640 --> 00:41:28.710 align:start position:0%
sure to smash that like button leave a
random<00:41:26.960><c> comment</c><00:41:27.280><c> down</c><00:41:27.440><c> below</c><00:41:28.000><c> and</c><00:41:28.240><c> subscribe</c>

00:41:28.710 --> 00:41:28.720 align:start position:0%
random comment down below and subscribe
 

00:41:28.720 --> 00:41:33.670 align:start position:0%
random comment down below and subscribe
if<00:41:28.880><c> you'd</c><00:41:29.040><c> like</c><00:41:29.200><c> to</c><00:41:29.280><c> become</c><00:41:29.520><c> a</c><00:41:29.599><c> fellow</c><00:41:29.920><c> bro</c>

00:41:33.670 --> 00:41:33.680 align:start position:0%
 
 

00:41:33.680 --> 00:41:36.230 align:start position:0%
 
hey<00:41:34.000><c> everyone</c><00:41:34.640><c> so</c><00:41:34.960><c> i'm</c><00:41:35.200><c> going</c><00:41:35.440><c> to</c><00:41:35.680><c> attempt</c><00:41:36.000><c> to</c>

00:41:36.230 --> 00:41:36.240 align:start position:0%
hey everyone so i'm going to attempt to
 

00:41:36.240 --> 00:41:38.470 align:start position:0%
hey everyone so i'm going to attempt to
explain<00:41:36.720><c> constants</c><00:41:37.359><c> in</c><00:41:37.520><c> about</c><00:41:37.760><c> a</c><00:41:37.839><c> minute</c><00:41:38.240><c> a</c>

00:41:38.470 --> 00:41:38.480 align:start position:0%
explain constants in about a minute a
 

00:41:38.480 --> 00:41:41.430 align:start position:0%
explain constants in about a minute a
constant<00:41:39.200><c> is</c><00:41:39.520><c> a</c><00:41:39.839><c> fixed</c><00:41:40.240><c> value</c><00:41:40.720><c> that</c><00:41:40.880><c> cannot</c><00:41:41.200><c> be</c>

00:41:41.430 --> 00:41:41.440 align:start position:0%
constant is a fixed value that cannot be
 

00:41:41.440 --> 00:41:43.349 align:start position:0%
constant is a fixed value that cannot be
altered<00:41:41.920><c> by</c><00:41:42.160><c> the</c><00:41:42.319><c> program</c><00:41:42.880><c> during</c><00:41:43.200><c> its</c>

00:41:43.349 --> 00:41:43.359 align:start position:0%
altered by the program during its
 

00:41:43.359 --> 00:41:46.309 align:start position:0%
altered by the program during its
execution<00:41:44.079><c> i</c><00:41:44.240><c> have</c><00:41:44.400><c> a</c><00:41:44.480><c> variable</c><00:41:45.040><c> pi</c><00:41:45.440><c> pi</c><00:41:45.839><c> equals</c>

00:41:46.309 --> 00:41:46.319 align:start position:0%
execution i have a variable pi pi equals
 

00:41:46.319 --> 00:41:48.230 align:start position:0%
execution i have a variable pi pi equals
3.1415

00:41:48.230 --> 00:41:48.240 align:start position:0%
3.1415
 

00:41:48.240 --> 00:41:50.230 align:start position:0%
3.1415
but<00:41:48.400><c> what</c><00:41:48.640><c> if</c><00:41:48.800><c> we</c><00:41:48.960><c> accidentally</c><00:41:49.680><c> or</c><00:41:49.839><c> somebody</c>

00:41:50.230 --> 00:41:50.240 align:start position:0%
but what if we accidentally or somebody
 

00:41:50.240 --> 00:41:52.230 align:start position:0%
but what if we accidentally or somebody
else<00:41:50.480><c> changes</c><00:41:50.880><c> the</c><00:41:51.040><c> value</c><00:41:51.359><c> of</c><00:41:51.520><c> pi</c><00:41:51.920><c> it's</c><00:41:52.079><c> an</c>

00:41:52.230 --> 00:41:52.240 align:start position:0%
else changes the value of pi it's an
 

00:41:52.240 --> 00:41:56.550 align:start position:0%
else changes the value of pi it's an
important<00:41:52.560><c> number</c><00:41:53.040><c> pi</c><00:41:53.440><c> now</c><00:41:53.760><c> equals</c><00:41:54.640><c> 420</c><00:41:55.760><c> 69.</c>

00:41:56.550 --> 00:41:56.560 align:start position:0%
important number pi now equals 420 69.
 

00:41:56.560 --> 00:41:58.710 align:start position:0%
important number pi now equals 420 69.
since<00:41:56.800><c> this</c><00:41:57.040><c> value</c><00:41:57.440><c> was</c><00:41:57.760><c> changed</c><00:41:58.319><c> this</c><00:41:58.480><c> will</c>

00:41:58.710 --> 00:41:58.720 align:start position:0%
since this value was changed this will
 

00:41:58.720 --> 00:42:01.109 align:start position:0%
since this value was changed this will
alter<00:41:59.280><c> the</c><00:41:59.359><c> result</c><00:41:59.760><c> of</c><00:41:59.839><c> our</c><00:42:00.000><c> program</c><00:42:00.880><c> to</c>

00:42:01.109 --> 00:42:01.119 align:start position:0%
alter the result of our program to
 

00:42:01.119 --> 00:42:03.670 align:start position:0%
alter the result of our program to
prevent<00:42:01.760><c> a</c><00:42:02.000><c> variable</c><00:42:02.560><c> or</c><00:42:02.720><c> value</c><00:42:03.200><c> from</c><00:42:03.359><c> being</c>

00:42:03.670 --> 00:42:03.680 align:start position:0%
prevent a variable or value from being
 

00:42:03.680 --> 00:42:06.230 align:start position:0%
prevent a variable or value from being
changed<00:42:04.160><c> we</c><00:42:04.319><c> can</c><00:42:04.480><c> turn</c><00:42:04.960><c> that</c><00:42:05.200><c> variable</c><00:42:05.760><c> into</c><00:42:06.079><c> a</c>

00:42:06.230 --> 00:42:06.240 align:start position:0%
changed we can turn that variable into a
 

00:42:06.240 --> 00:42:09.270 align:start position:0%
changed we can turn that variable into a
constant<00:42:06.880><c> by</c><00:42:07.200><c> preceding</c><00:42:08.079><c> the</c><00:42:08.240><c> data</c><00:42:08.640><c> type</c><00:42:09.119><c> with</c>

00:42:09.270 --> 00:42:09.280 align:start position:0%
constant by preceding the data type with
 

00:42:09.280 --> 00:42:11.829 align:start position:0%
constant by preceding the data type with
this<00:42:09.520><c> keyword</c><00:42:10.319><c> const</c><00:42:10.800><c> and</c><00:42:11.040><c> a</c><00:42:11.200><c> common</c><00:42:11.520><c> naming</c>

00:42:11.829 --> 00:42:11.839 align:start position:0%
this keyword const and a common naming
 

00:42:11.839 --> 00:42:13.670 align:start position:0%
this keyword const and a common naming
convention<00:42:12.319><c> with</c><00:42:12.480><c> constants</c><00:42:13.280><c> is</c><00:42:13.359><c> that</c><00:42:13.520><c> you</c>

00:42:13.670 --> 00:42:13.680 align:start position:0%
convention with constants is that you
 

00:42:13.680 --> 00:42:15.589 align:start position:0%
convention with constants is that you
make<00:42:13.920><c> all</c><00:42:14.160><c> the</c><00:42:14.319><c> letters</c><00:42:14.640><c> uppercase</c><00:42:15.359><c> although</c>

00:42:15.589 --> 00:42:15.599 align:start position:0%
make all the letters uppercase although
 

00:42:15.599 --> 00:42:17.670 align:start position:0%
make all the letters uppercase although
it's<00:42:15.760><c> not</c><00:42:16.000><c> necessary</c><00:42:16.880><c> but</c><00:42:17.119><c> it's</c><00:42:17.280><c> considered</c>

00:42:17.670 --> 00:42:17.680 align:start position:0%
it's not necessary but it's considered
 

00:42:17.680 --> 00:42:20.230 align:start position:0%
it's not necessary but it's considered
good<00:42:17.920><c> practice</c><00:42:18.560><c> so</c><00:42:18.720><c> if</c><00:42:18.880><c> i</c><00:42:19.040><c> attempt</c><00:42:19.520><c> to</c><00:42:19.839><c> take</c>

00:42:20.230 --> 00:42:20.240 align:start position:0%
good practice so if i attempt to take
 

00:42:20.240 --> 00:42:22.630 align:start position:0%
good practice so if i attempt to take
our<00:42:20.480><c> constant</c><00:42:21.280><c> and</c><00:42:21.520><c> assign</c><00:42:21.839><c> this</c><00:42:22.079><c> a</c><00:42:22.319><c> different</c>

00:42:22.630 --> 00:42:22.640 align:start position:0%
our constant and assign this a different
 

00:42:22.640 --> 00:42:25.030 align:start position:0%
our constant and assign this a different
value<00:42:23.280><c> we'll</c><00:42:23.520><c> run</c><00:42:23.680><c> into</c><00:42:23.920><c> an</c><00:42:24.079><c> error</c><00:42:24.640><c> error</c>

00:42:25.030 --> 00:42:25.040 align:start position:0%
value we'll run into an error error
 

00:42:25.040 --> 00:42:27.829 align:start position:0%
value we'll run into an error error
assignment<00:42:25.599><c> of</c><00:42:26.000><c> read-only</c><00:42:26.720><c> variable</c><00:42:27.200><c> pi</c><00:42:27.599><c> that</c>

00:42:27.829 --> 00:42:27.839 align:start position:0%
assignment of read-only variable pi that
 

00:42:27.839 --> 00:42:30.470 align:start position:0%
assignment of read-only variable pi that
is<00:42:27.920><c> what</c><00:42:28.079><c> a</c><00:42:28.160><c> constant</c><00:42:28.720><c> is</c><00:42:29.040><c> it's</c><00:42:29.359><c> a</c><00:42:29.599><c> fixed</c><00:42:30.000><c> value</c>

00:42:30.470 --> 00:42:30.480 align:start position:0%
is what a constant is it's a fixed value
 

00:42:30.480 --> 00:42:32.470 align:start position:0%
is what a constant is it's a fixed value
that<00:42:30.640><c> cannot</c><00:42:30.880><c> be</c><00:42:31.040><c> altered</c><00:42:31.599><c> by</c><00:42:31.760><c> the</c><00:42:31.920><c> program</c>

00:42:32.470 --> 00:42:32.480 align:start position:0%
that cannot be altered by the program
 

00:42:32.480 --> 00:42:34.390 align:start position:0%
that cannot be altered by the program
during<00:42:32.800><c> its</c><00:42:32.960><c> execution</c><00:42:33.680><c> and</c><00:42:33.839><c> it</c><00:42:33.920><c> provides</c><00:42:34.319><c> a</c>

00:42:34.390 --> 00:42:34.400 align:start position:0%
during its execution and it provides a
 

00:42:34.400 --> 00:42:35.990 align:start position:0%
during its execution and it provides a
little<00:42:34.560><c> bit</c><00:42:34.720><c> of</c><00:42:34.800><c> security</c><00:42:35.440><c> so</c><00:42:35.599><c> if</c><00:42:35.680><c> you</c><00:42:35.760><c> found</c>

00:42:35.990 --> 00:42:36.000 align:start position:0%
little bit of security so if you found
 

00:42:36.000 --> 00:42:37.750 align:start position:0%
little bit of security so if you found
this<00:42:36.160><c> video</c><00:42:36.400><c> helpful</c><00:42:36.800><c> please</c><00:42:37.040><c> be</c><00:42:37.200><c> sure</c><00:42:37.440><c> to</c>

00:42:37.750 --> 00:42:37.760 align:start position:0%
this video helpful please be sure to
 

00:42:37.760 --> 00:42:39.510 align:start position:0%
this video helpful please be sure to
smash<00:42:38.160><c> that</c><00:42:38.319><c> like</c><00:42:38.560><c> button</c><00:42:38.960><c> leave</c><00:42:39.200><c> a</c><00:42:39.280><c> random</c>

00:42:39.510 --> 00:42:39.520 align:start position:0%
smash that like button leave a random
 

00:42:39.520 --> 00:42:41.349 align:start position:0%
smash that like button leave a random
comment<00:42:39.839><c> down</c><00:42:40.000><c> below</c><00:42:40.480><c> and</c><00:42:40.800><c> subscribe</c><00:42:41.280><c> if</c>

00:42:41.349 --> 00:42:41.359 align:start position:0%
comment down below and subscribe if
 

00:42:41.359 --> 00:42:45.750 align:start position:0%
comment down below and subscribe if
you'd<00:42:41.520><c> like</c><00:42:41.680><c> to</c><00:42:41.839><c> become</c><00:42:42.079><c> a</c><00:42:42.160><c> fellow</c><00:42:42.480><c> bro</c>

00:42:45.750 --> 00:42:45.760 align:start position:0%
 
 

00:42:45.760 --> 00:42:48.230 align:start position:0%
 
well<00:42:46.079><c> well</c><00:42:46.400><c> well</c><00:42:46.800><c> welcome</c><00:42:47.200><c> back</c><00:42:47.680><c> so</c><00:42:47.920><c> we</c><00:42:48.079><c> need</c>

00:42:48.230 --> 00:42:48.240 align:start position:0%
well well well welcome back so we need
 

00:42:48.240 --> 00:42:50.150 align:start position:0%
well well well welcome back so we need
to<00:42:48.400><c> talk</c><00:42:48.640><c> about</c><00:42:48.880><c> arithmetic</c><00:42:49.520><c> operators</c>

00:42:50.150 --> 00:42:50.160 align:start position:0%
to talk about arithmetic operators
 

00:42:50.160 --> 00:42:51.990 align:start position:0%
to talk about arithmetic operators
because<00:42:50.720><c> well</c><00:42:50.960><c> this</c><00:42:51.119><c> wouldn't</c><00:42:51.440><c> be</c><00:42:51.599><c> a</c><00:42:51.680><c> full</c>

00:42:51.990 --> 00:42:52.000 align:start position:0%
because well this wouldn't be a full
 

00:42:52.000 --> 00:42:53.750 align:start position:0%
because well this wouldn't be a full
course<00:42:52.319><c> without</c><00:42:52.720><c> them</c><00:42:52.960><c> so</c><00:42:53.200><c> as</c><00:42:53.359><c> you</c><00:42:53.520><c> probably</c>

00:42:53.750 --> 00:42:53.760 align:start position:0%
course without them so as you probably
 

00:42:53.760 --> 00:42:56.309 align:start position:0%
course without them so as you probably
know<00:42:54.079><c> arithmetic</c><00:42:54.800><c> operators</c><00:42:55.520><c> are</c><00:42:55.920><c> well</c>

00:42:56.309 --> 00:42:56.319 align:start position:0%
know arithmetic operators are well
 

00:42:56.319 --> 00:42:58.790 align:start position:0%
know arithmetic operators are well
addition<00:42:56.880><c> subtraction</c><00:42:57.760><c> multiplication</c>

00:42:58.790 --> 00:42:58.800 align:start position:0%
addition subtraction multiplication
 

00:42:58.800 --> 00:43:00.870 align:start position:0%
addition subtraction multiplication
division<00:42:59.680><c> and</c><00:42:59.839><c> there's</c><00:43:00.079><c> a</c><00:43:00.160><c> few</c><00:43:00.400><c> others</c><00:43:00.720><c> too</c>

00:43:00.870 --> 00:43:00.880 align:start position:0%
division and there's a few others too
 

00:43:00.880 --> 00:43:03.270 align:start position:0%
division and there's a few others too
unique<00:43:01.200><c> with</c><00:43:01.440><c> programming</c><00:43:01.920><c> such</c><00:43:02.319><c> as</c><00:43:02.640><c> modulus</c>

00:43:03.270 --> 00:43:03.280 align:start position:0%
unique with programming such as modulus
 

00:43:03.280 --> 00:43:05.270 align:start position:0%
unique with programming such as modulus
increment<00:43:03.839><c> and</c><00:43:04.079><c> decrement</c><00:43:04.640><c> so</c><00:43:04.800><c> let's</c><00:43:04.960><c> go</c><00:43:05.119><c> over</c>

00:43:05.270 --> 00:43:05.280 align:start position:0%
increment and decrement so let's go over
 

00:43:05.280 --> 00:43:08.309 align:start position:0%
increment and decrement so let's go over
a<00:43:05.359><c> few</c><00:43:05.680><c> let's</c><00:43:05.920><c> say</c><00:43:06.079><c> that</c><00:43:06.240><c> we</c><00:43:06.400><c> have</c><00:43:06.960><c> int</c><00:43:07.680><c> z</c><00:43:08.160><c> and</c>

00:43:08.309 --> 00:43:08.319 align:start position:0%
a few let's say that we have int z and
 

00:43:08.319 --> 00:43:10.150 align:start position:0%
a few let's say that we have int z and
if<00:43:08.480><c> we</c><00:43:08.560><c> need</c><00:43:08.800><c> to</c><00:43:09.040><c> add</c><00:43:09.280><c> two</c><00:43:09.440><c> numbers</c><00:43:09.839><c> we</c><00:43:10.000><c> could</c>

00:43:10.150 --> 00:43:10.160 align:start position:0%
if we need to add two numbers we could
 

00:43:10.160 --> 00:43:12.630 align:start position:0%
if we need to add two numbers we could
say<00:43:10.640><c> x</c><00:43:11.200><c> plus</c><00:43:11.680><c> y</c>

00:43:12.630 --> 00:43:12.640 align:start position:0%
say x plus y
 

00:43:12.640 --> 00:43:15.190 align:start position:0%
say x plus y
equals<00:43:13.119><c> z</c><00:43:13.520><c> and</c><00:43:13.599><c> then</c><00:43:13.839><c> display</c><00:43:14.319><c> the</c><00:43:14.640><c> sum</c><00:43:14.960><c> which</c>

00:43:15.190 --> 00:43:15.200 align:start position:0%
equals z and then display the sum which
 

00:43:15.200 --> 00:43:18.069 align:start position:0%
equals z and then display the sum which
of<00:43:15.359><c> course</c><00:43:15.839><c> is</c><00:43:16.000><c> seven</c><00:43:16.480><c> so</c><00:43:16.800><c> subtraction</c><00:43:17.920><c> is</c>

00:43:18.069 --> 00:43:18.079 align:start position:0%
of course is seven so subtraction is
 

00:43:18.079 --> 00:43:21.190 align:start position:0%
of course is seven so subtraction is
well<00:43:18.640><c> minus</c><00:43:19.359><c> five</c><00:43:19.599><c> minus</c><00:43:20.000><c> two</c><00:43:20.480><c> is</c><00:43:20.640><c> three</c>

00:43:21.190 --> 00:43:21.200 align:start position:0%
well minus five minus two is three
 

00:43:21.200 --> 00:43:24.069 align:start position:0%
well minus five minus two is three
multiplication<00:43:22.240><c> is</c><00:43:22.400><c> an</c><00:43:22.560><c> asterisk</c><00:43:23.359><c> five</c><00:43:23.760><c> times</c>

00:43:24.069 --> 00:43:24.079 align:start position:0%
multiplication is an asterisk five times
 

00:43:24.079 --> 00:43:25.109 align:start position:0%
multiplication is an asterisk five times
two

00:43:25.109 --> 00:43:25.119 align:start position:0%
two
 

00:43:25.119 --> 00:43:27.589 align:start position:0%
two
equals<00:43:25.680><c> 10.</c><00:43:26.240><c> okay</c><00:43:26.640><c> now</c><00:43:26.880><c> pay</c><00:43:27.040><c> attention</c><00:43:27.440><c> to</c>

00:43:27.589 --> 00:43:27.599 align:start position:0%
equals 10. okay now pay attention to
 

00:43:27.599 --> 00:43:30.630 align:start position:0%
equals 10. okay now pay attention to
this<00:43:27.839><c> with</c><00:43:28.079><c> division</c><00:43:28.960><c> so</c><00:43:29.280><c> 5</c><00:43:29.599><c> divided</c><00:43:30.000><c> by</c><00:43:30.240><c> 2</c>

00:43:30.630 --> 00:43:30.640 align:start position:0%
this with division so 5 divided by 2
 

00:43:30.640 --> 00:43:33.030 align:start position:0%
this with division so 5 divided by 2
equals<00:43:31.200><c> 2.5</c><00:43:32.079><c> right</c><00:43:32.480><c> well</c><00:43:32.640><c> that's</c><00:43:32.880><c> where</c>

00:43:33.030 --> 00:43:33.040 align:start position:0%
equals 2.5 right well that's where
 

00:43:33.040 --> 00:43:35.109 align:start position:0%
equals 2.5 right well that's where
you're<00:43:33.280><c> wrong</c><00:43:33.760><c> it's</c><00:43:34.079><c> 2</c><00:43:34.400><c> because</c><00:43:34.880><c> we're</c>

00:43:35.109 --> 00:43:35.119 align:start position:0%
you're wrong it's 2 because we're
 

00:43:35.119 --> 00:43:37.349 align:start position:0%
you're wrong it's 2 because we're
storing<00:43:35.440><c> the</c><00:43:35.599><c> result</c><00:43:36.079><c> within</c><00:43:36.480><c> an</c><00:43:36.640><c> integer</c><00:43:37.200><c> and</c>

00:43:37.349 --> 00:43:37.359 align:start position:0%
storing the result within an integer and
 

00:43:37.359 --> 00:43:39.270 align:start position:0%
storing the result within an integer and
with<00:43:37.599><c> integers</c><00:43:38.079><c> we</c><00:43:38.240><c> can</c><00:43:38.319><c> only</c><00:43:38.560><c> store</c><00:43:38.960><c> whole</c>

00:43:39.270 --> 00:43:39.280 align:start position:0%
with integers we can only store whole
 

00:43:39.280 --> 00:43:42.150 align:start position:0%
with integers we can only store whole
numbers<00:43:40.160><c> so</c><00:43:40.480><c> we</c><00:43:40.640><c> will</c><00:43:41.040><c> lose</c><00:43:41.440><c> that</c><00:43:41.680><c> decimal</c>

00:43:42.150 --> 00:43:42.160 align:start position:0%
numbers so we will lose that decimal
 

00:43:42.160 --> 00:43:44.150 align:start position:0%
numbers so we will lose that decimal
portion<00:43:42.560><c> it</c><00:43:42.640><c> will</c><00:43:42.880><c> be</c><00:43:43.040><c> truncated</c><00:43:43.839><c> there's</c><00:43:44.079><c> a</c>

00:43:44.150 --> 00:43:44.160 align:start position:0%
portion it will be truncated there's a
 

00:43:44.160 --> 00:43:46.069 align:start position:0%
portion it will be truncated there's a
few<00:43:44.319><c> things</c><00:43:44.560><c> we'll</c><00:43:44.720><c> need</c><00:43:44.880><c> to</c><00:43:45.040><c> change</c><00:43:45.680><c> first</c>

00:43:46.069 --> 00:43:46.079 align:start position:0%
few things we'll need to change first
 

00:43:46.079 --> 00:43:48.309 align:start position:0%
few things we'll need to change first
we'll<00:43:46.240><c> need</c><00:43:46.480><c> to</c><00:43:46.800><c> store</c><00:43:47.119><c> the</c><00:43:47.280><c> result</c><00:43:47.680><c> within</c><00:43:48.160><c> a</c>

00:43:48.309 --> 00:43:48.319 align:start position:0%
we'll need to store the result within a
 

00:43:48.319 --> 00:43:50.790 align:start position:0%
we'll need to store the result within a
float<00:43:48.800><c> or</c><00:43:48.960><c> a</c><00:43:49.119><c> double</c><00:43:49.680><c> and</c><00:43:49.839><c> then</c><00:43:50.079><c> let's</c><00:43:50.319><c> display</c>

00:43:50.790 --> 00:43:50.800 align:start position:0%
float or a double and then let's display
 

00:43:50.800 --> 00:43:53.430 align:start position:0%
float or a double and then let's display
this<00:43:51.200><c> percent</c><00:43:51.680><c> f</c><00:43:51.839><c> for</c><00:43:52.000><c> a</c><00:43:52.160><c> float</c><00:43:52.880><c> okay</c><00:43:53.119><c> another</c>

00:43:53.430 --> 00:43:53.440 align:start position:0%
this percent f for a float okay another
 

00:43:53.440 --> 00:43:54.950 align:start position:0%
this percent f for a float okay another
thing<00:43:53.599><c> that</c><00:43:53.680><c> we</c><00:43:53.760><c> need</c><00:43:53.920><c> to</c><00:43:54.079><c> change</c><00:43:54.400><c> too</c><00:43:54.800><c> and</c>

00:43:54.950 --> 00:43:54.960 align:start position:0%
thing that we need to change too and
 

00:43:54.960 --> 00:43:57.430 align:start position:0%
thing that we need to change too and
that<00:43:55.200><c> involves</c><00:43:55.839><c> integer</c><00:43:56.400><c> division</c><00:43:57.119><c> if</c><00:43:57.280><c> we're</c>

00:43:57.430 --> 00:43:57.440 align:start position:0%
that involves integer division if we're
 

00:43:57.440 --> 00:43:59.990 align:start position:0%
that involves integer division if we're
dividing<00:43:58.079><c> by</c><00:43:58.240><c> an</c><00:43:58.480><c> integer</c><00:43:59.119><c> we'll</c><00:43:59.359><c> truncate</c>

00:43:59.990 --> 00:44:00.000 align:start position:0%
dividing by an integer we'll truncate
 

00:44:00.000 --> 00:44:02.069 align:start position:0%
dividing by an integer we'll truncate
that<00:44:00.240><c> decimal</c><00:44:00.720><c> portion</c><00:44:01.359><c> there's</c><00:44:01.599><c> one</c><00:44:01.760><c> of</c><00:44:01.839><c> two</c>

00:44:02.069 --> 00:44:02.079 align:start position:0%
that decimal portion there's one of two
 

00:44:02.079 --> 00:44:03.990 align:start position:0%
that decimal portion there's one of two
things<00:44:02.240><c> we</c><00:44:02.400><c> can</c><00:44:02.480><c> do</c><00:44:02.880><c> we</c><00:44:03.040><c> can</c><00:44:03.119><c> either</c><00:44:03.440><c> change</c>

00:44:03.990 --> 00:44:04.000 align:start position:0%
things we can do we can either change
 

00:44:04.000 --> 00:44:06.230 align:start position:0%
things we can do we can either change
our<00:44:04.160><c> divisor</c><00:44:04.880><c> to</c><00:44:05.040><c> a</c><00:44:05.119><c> float</c>

00:44:06.230 --> 00:44:06.240 align:start position:0%
our divisor to a float
 

00:44:06.240 --> 00:44:08.950 align:start position:0%
our divisor to a float
or<00:44:06.400><c> a</c><00:44:06.839><c> double</c><00:44:08.000><c> and</c><00:44:08.160><c> that</c><00:44:08.319><c> will</c><00:44:08.480><c> solve</c><00:44:08.720><c> that</c>

00:44:08.950 --> 00:44:08.960 align:start position:0%
or a double and that will solve that
 

00:44:08.960 --> 00:44:12.150 align:start position:0%
or a double and that will solve that
problem<00:44:09.440><c> 2.5</c><00:44:10.640><c> or</c><00:44:10.960><c> if</c><00:44:11.119><c> we</c><00:44:11.280><c> would</c><00:44:11.440><c> like</c><00:44:11.680><c> to</c><00:44:12.000><c> keep</c>

00:44:12.150 --> 00:44:12.160 align:start position:0%
problem 2.5 or if we would like to keep
 

00:44:12.160 --> 00:44:14.630 align:start position:0%
problem 2.5 or if we would like to keep
this<00:44:12.400><c> as</c><00:44:12.560><c> an</c><00:44:12.720><c> integer</c><00:44:13.359><c> we</c><00:44:13.520><c> can</c><00:44:13.760><c> convert</c><00:44:14.400><c> this</c>

00:44:14.630 --> 00:44:14.640 align:start position:0%
this as an integer we can convert this
 

00:44:14.640 --> 00:44:16.790 align:start position:0%
this as an integer we can convert this
integer<00:44:15.119><c> to</c><00:44:15.280><c> a</c><00:44:15.359><c> float</c><00:44:15.760><c> or</c><00:44:16.000><c> double</c><00:44:16.560><c> by</c>

00:44:16.790 --> 00:44:16.800 align:start position:0%
integer to a float or double by
 

00:44:16.800 --> 00:44:19.510 align:start position:0%
integer to a float or double by
preceding<00:44:17.520><c> the</c><00:44:17.680><c> divisor</c><00:44:18.560><c> with</c>

00:44:19.510 --> 00:44:19.520 align:start position:0%
preceding the divisor with
 

00:44:19.520 --> 00:44:20.470 align:start position:0%
preceding the divisor with
float

00:44:20.470 --> 00:44:20.480 align:start position:0%
float
 

00:44:20.480 --> 00:44:23.349 align:start position:0%
float
or<00:44:21.040><c> double</c><00:44:21.839><c> either</c><00:44:22.160><c> one</c>

00:44:23.349 --> 00:44:23.359 align:start position:0%
or double either one
 

00:44:23.359 --> 00:44:25.430 align:start position:0%
or double either one
so<00:44:23.599><c> if</c><00:44:23.839><c> i</c><00:44:23.920><c> would</c><00:44:24.079><c> like</c><00:44:24.240><c> to</c><00:44:24.400><c> keep</c><00:44:24.800><c> y</c><00:44:25.119><c> as</c><00:44:25.280><c> an</c>

00:44:25.430 --> 00:44:25.440 align:start position:0%
so if i would like to keep y as an
 

00:44:25.440 --> 00:44:28.630 align:start position:0%
so if i would like to keep y as an
integer<00:44:26.000><c> and</c><00:44:26.160><c> we</c><00:44:26.400><c> divide</c><00:44:27.200><c> x</c><00:44:27.520><c> by</c><00:44:27.760><c> y</c><00:44:28.240><c> we</c><00:44:28.480><c> will</c>

00:44:28.630 --> 00:44:28.640 align:start position:0%
integer and we divide x by y we will
 

00:44:28.640 --> 00:44:32.550 align:start position:0%
integer and we divide x by y we will
convert<00:44:29.200><c> 2</c><00:44:29.599><c> into</c><00:44:30.000><c> a</c><00:44:30.160><c> float</c><00:44:30.640><c> so</c><00:44:30.960><c> 2.0</c><00:44:32.079><c> and</c><00:44:32.240><c> store</c>

00:44:32.550 --> 00:44:32.560 align:start position:0%
convert 2 into a float so 2.0 and store
 

00:44:32.560 --> 00:44:35.270 align:start position:0%
convert 2 into a float so 2.0 and store
the<00:44:32.640><c> result</c><00:44:32.960><c> within</c><00:44:33.520><c> float</c><00:44:34.160><c> z</c><00:44:34.480><c> and</c><00:44:34.640><c> the</c><00:44:34.720><c> result</c>

00:44:35.270 --> 00:44:35.280 align:start position:0%
the result within float z and the result
 

00:44:35.280 --> 00:44:38.550 align:start position:0%
the result within float z and the result
is<00:44:35.760><c> 2.5</c><00:44:36.800><c> so</c><00:44:37.040><c> if</c><00:44:37.200><c> you're</c><00:44:37.359><c> performing</c><00:44:38.079><c> division</c>

00:44:38.550 --> 00:44:38.560 align:start position:0%
is 2.5 so if you're performing division
 

00:44:38.560 --> 00:44:40.230 align:start position:0%
is 2.5 so if you're performing division
with<00:44:38.800><c> any</c><00:44:39.119><c> integers</c><00:44:39.680><c> you</c><00:44:39.760><c> need</c><00:44:39.920><c> to</c><00:44:40.079><c> pay</c>

00:44:40.230 --> 00:44:40.240 align:start position:0%
with any integers you need to pay
 

00:44:40.240 --> 00:44:42.550 align:start position:0%
with any integers you need to pay
attention<00:44:40.800><c> to</c><00:44:41.280><c> integer</c><00:44:41.760><c> division</c><00:44:42.319><c> and</c><00:44:42.400><c> you</c>

00:44:42.550 --> 00:44:42.560 align:start position:0%
attention to integer division and you
 

00:44:42.560 --> 00:44:45.750 align:start position:0%
attention to integer division and you
may<00:44:42.800><c> need</c><00:44:42.960><c> to</c><00:44:43.119><c> cast</c><00:44:43.599><c> your</c><00:44:43.920><c> divisor</c><00:44:44.720><c> as</c><00:44:45.040><c> a</c><00:44:45.280><c> float</c>

00:44:45.750 --> 00:44:45.760 align:start position:0%
may need to cast your divisor as a float
 

00:44:45.760 --> 00:44:48.390 align:start position:0%
may need to cast your divisor as a float
or<00:44:46.079><c> as</c><00:44:46.240><c> a</c><00:44:46.400><c> double</c><00:44:47.119><c> now</c><00:44:47.280><c> we</c><00:44:47.440><c> have</c><00:44:47.599><c> modulus</c>

00:44:48.390 --> 00:44:48.400 align:start position:0%
or as a double now we have modulus
 

00:44:48.400 --> 00:44:50.390 align:start position:0%
or as a double now we have modulus
modulus<00:44:49.040><c> gives</c><00:44:49.280><c> you</c><00:44:49.440><c> the</c><00:44:49.680><c> remainder</c><00:44:50.079><c> of</c><00:44:50.240><c> any</c>

00:44:50.390 --> 00:44:50.400 align:start position:0%
modulus gives you the remainder of any
 

00:44:50.400 --> 00:44:54.069 align:start position:0%
modulus gives you the remainder of any
division<00:44:51.280><c> 5</c><00:44:51.680><c> does</c><00:44:51.920><c> not</c><00:44:52.079><c> divide</c><00:44:52.480><c> by</c><00:44:52.800><c> 2</c><00:44:53.040><c> evenly</c>

00:44:54.069 --> 00:44:54.079 align:start position:0%
division 5 does not divide by 2 evenly
 

00:44:54.079 --> 00:44:57.270 align:start position:0%
division 5 does not divide by 2 evenly
int<00:44:54.720><c> z</c><00:44:55.359><c> equals</c><00:44:56.480><c> x</c>

00:44:57.270 --> 00:44:57.280 align:start position:0%
int z equals x
 

00:44:57.280 --> 00:44:59.270 align:start position:0%
int z equals x
modulus<00:44:58.160><c> y</c>

00:44:59.270 --> 00:44:59.280 align:start position:0%
modulus y
 

00:44:59.280 --> 00:45:01.510 align:start position:0%
modulus y
and<00:44:59.440><c> if</c><00:44:59.599><c> we</c><00:44:59.839><c> display</c><00:45:00.319><c> z</c>

00:45:01.510 --> 00:45:01.520 align:start position:0%
and if we display z
 

00:45:01.520 --> 00:45:03.030 align:start position:0%
and if we display z
so<00:45:01.760><c> make</c><00:45:01.920><c> sure</c><00:45:02.079><c> to</c><00:45:02.240><c> change</c><00:45:02.480><c> your</c><00:45:02.640><c> format</c>

00:45:03.030 --> 00:45:03.040 align:start position:0%
so make sure to change your format
 

00:45:03.040 --> 00:45:05.829 align:start position:0%
so make sure to change your format
specifier<00:45:03.680><c> if</c><00:45:03.760><c> you</c><00:45:03.920><c> didn't</c><00:45:04.640><c> the</c><00:45:04.800><c> remainder</c><00:45:05.520><c> of</c>

00:45:05.829 --> 00:45:05.839 align:start position:0%
specifier if you didn't the remainder of
 

00:45:05.839 --> 00:45:08.470 align:start position:0%
specifier if you didn't the remainder of
five<00:45:06.160><c> divided</c><00:45:06.560><c> by</c><00:45:06.800><c> two</c><00:45:07.359><c> is</c><00:45:07.680><c> one</c>

00:45:08.470 --> 00:45:08.480 align:start position:0%
five divided by two is one
 

00:45:08.480 --> 00:45:11.270 align:start position:0%
five divided by two is one
if<00:45:08.640><c> this</c><00:45:08.960><c> was</c><00:45:09.359><c> four</c><00:45:10.000><c> four</c><00:45:10.319><c> divides</c><00:45:10.800><c> by</c><00:45:11.040><c> two</c>

00:45:11.270 --> 00:45:11.280 align:start position:0%
if this was four four divides by two
 

00:45:11.280 --> 00:45:13.270 align:start position:0%
if this was four four divides by two
evenly<00:45:12.000><c> and</c><00:45:12.079><c> the</c><00:45:12.240><c> result</c><00:45:12.640><c> is</c><00:45:12.800><c> going</c><00:45:12.960><c> to</c><00:45:13.040><c> be</c>

00:45:13.270 --> 00:45:13.280 align:start position:0%
evenly and the result is going to be
 

00:45:13.280 --> 00:45:15.510 align:start position:0%
evenly and the result is going to be
zero<00:45:13.920><c> modulus</c><00:45:14.480><c> gives</c><00:45:14.720><c> you</c><00:45:14.800><c> the</c><00:45:14.960><c> remainder</c><00:45:15.359><c> of</c>

00:45:15.510 --> 00:45:15.520 align:start position:0%
zero modulus gives you the remainder of
 

00:45:15.520 --> 00:45:17.109 align:start position:0%
zero modulus gives you the remainder of
any<00:45:15.680><c> division</c><00:45:16.400><c> it's</c><00:45:16.640><c> actually</c><00:45:16.960><c> pretty</c>

00:45:17.109 --> 00:45:17.119 align:start position:0%
any division it's actually pretty
 

00:45:17.119 --> 00:45:19.829 align:start position:0%
any division it's actually pretty
helpful<00:45:17.680><c> to</c><00:45:17.920><c> find</c><00:45:18.240><c> if</c><00:45:18.400><c> a</c><00:45:18.560><c> number</c><00:45:18.960><c> is</c><00:45:19.119><c> even</c><00:45:19.520><c> odd</c>

00:45:19.829 --> 00:45:19.839 align:start position:0%
helpful to find if a number is even odd
 

00:45:19.839 --> 00:45:22.950 align:start position:0%
helpful to find if a number is even odd
all<00:45:20.000><c> you</c><00:45:20.160><c> do</c><00:45:20.400><c> is</c><00:45:20.640><c> say</c><00:45:20.960><c> modulus</c><00:45:21.839><c> 2</c><00:45:22.480><c> or</c><00:45:22.720><c> some</c>

00:45:22.950 --> 00:45:22.960 align:start position:0%
all you do is say modulus 2 or some
 

00:45:22.960 --> 00:45:24.790 align:start position:0%
all you do is say modulus 2 or some
variable<00:45:23.359><c> containing</c><00:45:23.839><c> the</c><00:45:23.920><c> value</c><00:45:24.319><c> of</c><00:45:24.400><c> 2</c>

00:45:24.790 --> 00:45:24.800 align:start position:0%
variable containing the value of 2
 

00:45:24.800 --> 00:45:27.109 align:start position:0%
variable containing the value of 2
either<00:45:25.119><c> way</c><00:45:25.599><c> and</c><00:45:25.760><c> then</c><00:45:26.000><c> we</c><00:45:26.160><c> can</c><00:45:26.400><c> increment</c><00:45:26.960><c> or</c>

00:45:27.109 --> 00:45:27.119 align:start position:0%
either way and then we can increment or
 

00:45:27.119 --> 00:45:29.990 align:start position:0%
either way and then we can increment or
decrement<00:45:27.760><c> a</c><00:45:27.839><c> number</c><00:45:28.160><c> by</c><00:45:28.400><c> 1.</c><00:45:29.119><c> if</c><00:45:29.359><c> i</c><00:45:29.440><c> need</c><00:45:29.680><c> to</c>

00:45:29.990 --> 00:45:30.000 align:start position:0%
decrement a number by 1. if i need to
 

00:45:30.000 --> 00:45:32.069 align:start position:0%
decrement a number by 1. if i need to
increment<00:45:30.640><c> x</c><00:45:30.880><c> for</c><00:45:31.040><c> some</c><00:45:31.280><c> reason</c><00:45:31.599><c> you'll</c><00:45:31.839><c> see</c>

00:45:32.069 --> 00:45:32.079 align:start position:0%
increment x for some reason you'll see
 

00:45:32.079 --> 00:45:34.470 align:start position:0%
increment x for some reason you'll see
this<00:45:32.240><c> when</c><00:45:32.400><c> we</c><00:45:32.480><c> get</c><00:45:32.640><c> to</c><00:45:32.720><c> the</c><00:45:32.800><c> video</c><00:45:33.200><c> on</c><00:45:33.520><c> loops</c><00:45:34.319><c> i</c>

00:45:34.470 --> 00:45:34.480 align:start position:0%
this when we get to the video on loops i
 

00:45:34.480 --> 00:45:35.750 align:start position:0%
this when we get to the video on loops i
could<00:45:34.640><c> say</c><00:45:34.960><c> x</c>

00:45:35.750 --> 00:45:35.760 align:start position:0%
could say x
 

00:45:35.760 --> 00:45:37.030 align:start position:0%
could say x
plus<00:45:36.079><c> plus</c>

00:45:37.030 --> 00:45:37.040 align:start position:0%
plus plus
 

00:45:37.040 --> 00:45:39.750 align:start position:0%
plus plus
and<00:45:37.359><c> then</c><00:45:37.680><c> let's</c><00:45:37.920><c> display</c><00:45:38.400><c> x</c>

00:45:39.750 --> 00:45:39.760 align:start position:0%
and then let's display x
 

00:45:39.760 --> 00:45:42.150 align:start position:0%
and then let's display x
x<00:45:40.160><c> incremented</c><00:45:40.720><c> by</c><00:45:40.960><c> one</c>

00:45:42.150 --> 00:45:42.160 align:start position:0%
x incremented by one
 

00:45:42.160 --> 00:45:43.750 align:start position:0%
x incremented by one
would<00:45:42.400><c> be</c><00:45:42.880><c> six</c>

00:45:43.750 --> 00:45:43.760 align:start position:0%
would be six
 

00:45:43.760 --> 00:45:47.510 align:start position:0%
would be six
and<00:45:44.079><c> then</c><00:45:44.400><c> let's</c><00:45:44.720><c> decrement</c><00:45:45.280><c> y</c><00:45:45.920><c> y</c><00:45:46.400><c> minus</c><00:45:46.800><c> minus</c>

00:45:47.510 --> 00:45:47.520 align:start position:0%
and then let's decrement y y minus minus
 

00:45:47.520 --> 00:45:51.829 align:start position:0%
and then let's decrement y y minus minus
and<00:45:47.839><c> y</c><00:45:48.400><c> decremented</c><00:45:49.280><c> by</c><00:45:49.520><c> one</c><00:45:50.319><c> equals</c><00:45:51.040><c> one</c><00:45:51.520><c> so</c>

00:45:51.829 --> 00:45:51.839 align:start position:0%
and y decremented by one equals one so
 

00:45:51.839 --> 00:45:53.430 align:start position:0%
and y decremented by one equals one so
yeah<00:45:52.160><c> everybody</c><00:45:52.640><c> those</c><00:45:52.960><c> are</c><00:45:53.119><c> a</c><00:45:53.200><c> few</c>

00:45:53.430 --> 00:45:53.440 align:start position:0%
yeah everybody those are a few
 

00:45:53.440 --> 00:45:55.430 align:start position:0%
yeah everybody those are a few
arithmetic<00:45:54.079><c> operators</c><00:45:54.720><c> a</c><00:45:54.800><c> lot</c><00:45:54.960><c> of</c><00:45:55.040><c> these</c><00:45:55.280><c> are</c>

00:45:55.430 --> 00:45:55.440 align:start position:0%
arithmetic operators a lot of these are
 

00:45:55.440 --> 00:45:57.190 align:start position:0%
arithmetic operators a lot of these are
fairly<00:45:55.839><c> simple</c><00:45:56.400><c> you</c><00:45:56.560><c> know</c><00:45:56.800><c> addition</c>

00:45:57.190 --> 00:45:57.200 align:start position:0%
fairly simple you know addition
 

00:45:57.200 --> 00:45:59.510 align:start position:0%
fairly simple you know addition
subtraction<00:45:57.920><c> multiplication</c><00:45:58.800><c> and</c><00:45:58.960><c> division</c>

00:45:59.510 --> 00:45:59.520 align:start position:0%
subtraction multiplication and division
 

00:45:59.520 --> 00:46:01.750 align:start position:0%
subtraction multiplication and division
do<00:45:59.760><c> pay</c><00:45:59.920><c> attention</c><00:46:00.480><c> to</c><00:46:00.880><c> integer</c><00:46:01.280><c> division</c>

00:46:01.750 --> 00:46:01.760 align:start position:0%
do pay attention to integer division
 

00:46:01.760 --> 00:46:03.589 align:start position:0%
do pay attention to integer division
because<00:46:02.079><c> that</c><00:46:02.319><c> can</c><00:46:02.480><c> throw</c><00:46:02.720><c> off</c><00:46:02.800><c> your</c><00:46:02.960><c> program</c>

00:46:03.589 --> 00:46:03.599 align:start position:0%
because that can throw off your program
 

00:46:03.599 --> 00:46:06.150 align:start position:0%
because that can throw off your program
then<00:46:03.760><c> there's</c><00:46:04.000><c> also</c><00:46:04.480><c> modulus</c><00:46:05.280><c> increment</c><00:46:05.920><c> and</c>

00:46:06.150 --> 00:46:06.160 align:start position:0%
then there's also modulus increment and
 

00:46:06.160 --> 00:46:07.750 align:start position:0%
then there's also modulus increment and
decrement<00:46:06.880><c> if</c><00:46:07.040><c> you</c><00:46:07.119><c> found</c><00:46:07.359><c> this</c><00:46:07.520><c> video</c>

00:46:07.750 --> 00:46:07.760 align:start position:0%
decrement if you found this video
 

00:46:07.760 --> 00:46:09.670 align:start position:0%
decrement if you found this video
helpful<00:46:08.160><c> please</c><00:46:08.400><c> remember</c><00:46:08.880><c> to</c><00:46:09.200><c> smash</c><00:46:09.520><c> that</c>

00:46:09.670 --> 00:46:09.680 align:start position:0%
helpful please remember to smash that
 

00:46:09.680 --> 00:46:11.349 align:start position:0%
helpful please remember to smash that
like<00:46:09.920><c> button</c><00:46:10.319><c> leave</c><00:46:10.480><c> a</c><00:46:10.560><c> random</c><00:46:10.880><c> comment</c><00:46:11.200><c> down</c>

00:46:11.349 --> 00:46:11.359 align:start position:0%
like button leave a random comment down
 

00:46:11.359 --> 00:46:13.190 align:start position:0%
like button leave a random comment down
below<00:46:11.839><c> and</c><00:46:12.079><c> subscribe</c><00:46:12.640><c> if</c><00:46:12.720><c> you'd</c><00:46:12.880><c> like</c><00:46:13.040><c> to</c>

00:46:13.190 --> 00:46:13.200 align:start position:0%
below and subscribe if you'd like to
 

00:46:13.200 --> 00:46:17.349 align:start position:0%
below and subscribe if you'd like to
become<00:46:13.440><c> a</c><00:46:13.520><c> fellow</c><00:46:13.920><c> bro</c>

00:46:17.349 --> 00:46:17.359 align:start position:0%
 
 

00:46:17.359 --> 00:46:19.670 align:start position:0%
 
hey<00:46:17.839><c> welcome</c><00:46:18.160><c> back</c><00:46:18.400><c> everybody</c><00:46:18.960><c> here's</c><00:46:19.440><c> a</c>

00:46:19.670 --> 00:46:19.680 align:start position:0%
hey welcome back everybody here's a
 

00:46:19.680 --> 00:46:21.670 align:start position:0%
hey welcome back everybody here's a
super<00:46:20.000><c> quick</c><00:46:20.240><c> video</c><00:46:20.800><c> on</c><00:46:21.119><c> augmented</c>

00:46:21.670 --> 00:46:21.680 align:start position:0%
super quick video on augmented
 

00:46:21.680 --> 00:46:23.510 align:start position:0%
super quick video on augmented
assignment<00:46:22.160><c> operators</c><00:46:22.880><c> they're</c><00:46:23.200><c> used</c><00:46:23.440><c> to</c>

00:46:23.510 --> 00:46:23.520 align:start position:0%
assignment operators they're used to
 

00:46:23.520 --> 00:46:25.750 align:start position:0%
assignment operators they're used to
replace<00:46:24.000><c> a</c><00:46:24.079><c> statement</c><00:46:24.720><c> where</c><00:46:24.960><c> an</c><00:46:25.119><c> operator</c>

00:46:25.750 --> 00:46:25.760 align:start position:0%
replace a statement where an operator
 

00:46:25.760 --> 00:46:27.990 align:start position:0%
replace a statement where an operator
takes<00:46:26.000><c> a</c><00:46:26.079><c> variable</c><00:46:26.720><c> as</c><00:46:26.880><c> one</c><00:46:27.040><c> of</c><00:46:27.119><c> its</c><00:46:27.359><c> arguments</c>

00:46:27.990 --> 00:46:28.000 align:start position:0%
takes a variable as one of its arguments
 

00:46:28.000 --> 00:46:29.750 align:start position:0%
takes a variable as one of its arguments
and<00:46:28.079><c> then</c><00:46:28.319><c> assigns</c><00:46:28.720><c> the</c><00:46:28.880><c> result</c><00:46:29.359><c> back</c><00:46:29.520><c> to</c><00:46:29.599><c> the</c>

00:46:29.750 --> 00:46:29.760 align:start position:0%
and then assigns the result back to the
 

00:46:29.760 --> 00:46:31.349 align:start position:0%
and then assigns the result back to the
same<00:46:30.000><c> variable</c><00:46:30.560><c> now</c><00:46:30.720><c> what</c><00:46:30.880><c> the</c><00:46:30.960><c> heck</c><00:46:31.119><c> does</c>

00:46:31.349 --> 00:46:31.359 align:start position:0%
same variable now what the heck does
 

00:46:31.359 --> 00:46:33.750 align:start position:0%
same variable now what the heck does
that<00:46:31.520><c> mean</c><00:46:32.079><c> okay</c><00:46:32.319><c> so</c><00:46:32.480><c> let's</c><00:46:32.720><c> say</c><00:46:33.040><c> that</c><00:46:33.280><c> we</c><00:46:33.520><c> need</c>

00:46:33.750 --> 00:46:33.760 align:start position:0%
that mean okay so let's say that we need
 

00:46:33.760 --> 00:46:36.470 align:start position:0%
that mean okay so let's say that we need
to<00:46:34.400><c> increment</c><00:46:35.040><c> the</c><00:46:35.200><c> value</c><00:46:35.599><c> of</c><00:46:35.680><c> x</c><00:46:35.920><c> by</c><00:46:36.160><c> one</c>

00:46:36.470 --> 00:46:36.480 align:start position:0%
to increment the value of x by one
 

00:46:36.480 --> 00:46:38.230 align:start position:0%
to increment the value of x by one
without<00:46:36.880><c> using</c><00:46:37.040><c> an</c><00:46:37.200><c> increment</c><00:46:37.680><c> operator</c><00:46:38.079><c> we</c>

00:46:38.230 --> 00:46:38.240 align:start position:0%
without using an increment operator we
 

00:46:38.240 --> 00:46:41.670 align:start position:0%
without using an increment operator we
could<00:46:38.560><c> say</c><00:46:39.040><c> x</c><00:46:39.520><c> equals</c><00:46:40.000><c> x</c><00:46:40.319><c> plus</c><00:46:40.640><c> one</c><00:46:41.200><c> so</c><00:46:41.440><c> writing</c>

00:46:41.670 --> 00:46:41.680 align:start position:0%
could say x equals x plus one so writing
 

00:46:41.680 --> 00:46:43.829 align:start position:0%
could say x equals x plus one so writing
this<00:46:42.000><c> out</c><00:46:42.240><c> can</c><00:46:42.400><c> be</c><00:46:42.640><c> somewhat</c><00:46:42.960><c> redundant</c><00:46:43.680><c> there</c>

00:46:43.829 --> 00:46:43.839 align:start position:0%
this out can be somewhat redundant there
 

00:46:43.839 --> 00:46:45.990 align:start position:0%
this out can be somewhat redundant there
is<00:46:44.000><c> a</c><00:46:44.079><c> shortcut</c><00:46:44.560><c> by</c><00:46:44.800><c> using</c><00:46:45.200><c> an</c><00:46:45.440><c> augmented</c>

00:46:45.990 --> 00:46:46.000 align:start position:0%
is a shortcut by using an augmented
 

00:46:46.000 --> 00:46:47.829 align:start position:0%
is a shortcut by using an augmented
assignment<00:46:46.480><c> operator</c><00:46:46.960><c> whatever</c><00:46:47.359><c> variable</c>

00:46:47.829 --> 00:46:47.839 align:start position:0%
assignment operator whatever variable
 

00:46:47.839 --> 00:46:49.430 align:start position:0%
assignment operator whatever variable
you<00:46:48.000><c> would</c><00:46:48.079><c> like</c><00:46:48.240><c> to</c><00:46:48.400><c> perform</c><00:46:48.720><c> an</c><00:46:48.880><c> operation</c>

00:46:49.430 --> 00:46:49.440 align:start position:0%
you would like to perform an operation
 

00:46:49.440 --> 00:46:51.750 align:start position:0%
you would like to perform an operation
on<00:46:49.680><c> you</c><00:46:49.920><c> will</c><00:46:50.319><c> list</c><00:46:50.560><c> that</c><00:46:50.800><c> variable</c><00:46:51.440><c> use</c><00:46:51.680><c> an</c>

00:46:51.750 --> 00:46:51.760 align:start position:0%
on you will list that variable use an
 

00:46:51.760 --> 00:46:54.390 align:start position:0%
on you will list that variable use an
arithmetic<00:46:52.400><c> operator</c><00:46:53.119><c> equals</c><00:46:53.839><c> and</c><00:46:54.000><c> then</c><00:46:54.160><c> some</c>

00:46:54.390 --> 00:46:54.400 align:start position:0%
arithmetic operator equals and then some
 

00:46:54.400 --> 00:46:56.950 align:start position:0%
arithmetic operator equals and then some
value<00:46:54.880><c> so</c><00:46:55.119><c> writing</c><00:46:55.440><c> this</c><00:46:55.760><c> would</c><00:46:56.079><c> increment</c><00:46:56.640><c> x</c>

00:46:56.950 --> 00:46:56.960 align:start position:0%
value so writing this would increment x
 

00:46:56.960 --> 00:46:59.270 align:start position:0%
value so writing this would increment x
by<00:46:57.200><c> one</c><00:46:57.520><c> so</c><00:46:57.680><c> let's</c><00:46:57.839><c> go</c><00:46:58.000><c> over</c><00:46:58.160><c> a</c><00:46:58.240><c> few</c><00:46:58.480><c> examples</c>

00:46:59.270 --> 00:46:59.280 align:start position:0%
by one so let's go over a few examples
 

00:46:59.280 --> 00:47:02.069 align:start position:0%
by one so let's go over a few examples
we<00:46:59.440><c> have</c><00:46:59.680><c> into</c><00:47:00.000><c> x</c><00:47:00.400><c> equals</c><00:47:00.800><c> ten</c><00:47:01.520><c> so</c><00:47:01.680><c> i</c><00:47:01.839><c> could</c>

00:47:02.069 --> 00:47:02.079 align:start position:0%
we have into x equals ten so i could
 

00:47:02.079 --> 00:47:05.270 align:start position:0%
we have into x equals ten so i could
write<00:47:02.560><c> x</c><00:47:02.880><c> equals</c><00:47:03.280><c> x</c><00:47:03.599><c> plus</c><00:47:04.000><c> two</c><00:47:04.319><c> to</c><00:47:04.560><c> increment</c><00:47:05.040><c> x</c>

00:47:05.270 --> 00:47:05.280 align:start position:0%
write x equals x plus two to increment x
 

00:47:05.280 --> 00:47:07.510 align:start position:0%
write x equals x plus two to increment x
by<00:47:05.520><c> two</c><00:47:05.839><c> right</c><00:47:06.160><c> or</c><00:47:06.560><c> i</c><00:47:06.720><c> could</c><00:47:06.880><c> say</c><00:47:07.200><c> as</c><00:47:07.440><c> a</c>

00:47:07.510 --> 00:47:07.520 align:start position:0%
by two right or i could say as a
 

00:47:07.520 --> 00:47:10.790 align:start position:0%
by two right or i could say as a
shortcut<00:47:08.480><c> x</c><00:47:09.040><c> plus</c><00:47:09.520><c> equals</c><00:47:10.079><c> two</c><00:47:10.400><c> and</c><00:47:10.480><c> that</c><00:47:10.640><c> will</c>

00:47:10.790 --> 00:47:10.800 align:start position:0%
shortcut x plus equals two and that will
 

00:47:10.800 --> 00:47:12.790 align:start position:0%
shortcut x plus equals two and that will
do<00:47:10.960><c> the</c><00:47:11.040><c> same</c><00:47:11.280><c> thing</c><00:47:11.680><c> and</c><00:47:11.839><c> that's</c><00:47:12.160><c> twelve</c><00:47:12.560><c> now</c>

00:47:12.790 --> 00:47:12.800 align:start position:0%
do the same thing and that's twelve now
 

00:47:12.800 --> 00:47:14.230 align:start position:0%
do the same thing and that's twelve now
let's<00:47:12.960><c> try</c><00:47:13.280><c> minus</c>

00:47:14.230 --> 00:47:14.240 align:start position:0%
let's try minus
 

00:47:14.240 --> 00:47:17.349 align:start position:0%
let's try minus
x<00:47:14.560><c> equals</c><00:47:15.040><c> x</c><00:47:15.520><c> minus</c><00:47:15.920><c> three</c><00:47:16.640><c> using</c><00:47:17.040><c> the</c>

00:47:17.349 --> 00:47:17.359 align:start position:0%
x equals x minus three using the
 

00:47:17.359 --> 00:47:19.349 align:start position:0%
x equals x minus three using the
augmented<00:47:17.920><c> assignment</c><00:47:18.400><c> operator</c><00:47:18.960><c> that</c><00:47:19.200><c> would</c>

00:47:19.349 --> 00:47:19.359 align:start position:0%
augmented assignment operator that would
 

00:47:19.359 --> 00:47:23.109 align:start position:0%
augmented assignment operator that would
be<00:47:20.000><c> x</c><00:47:20.640><c> minus</c><00:47:21.119><c> equals</c><00:47:21.599><c> three</c><00:47:22.319><c> which</c><00:47:22.559><c> is</c><00:47:22.720><c> seven</c>

00:47:23.109 --> 00:47:23.119 align:start position:0%
be x minus equals three which is seven
 

00:47:23.119 --> 00:47:25.990 align:start position:0%
be x minus equals three which is seven
what<00:47:23.359><c> about</c><00:47:23.680><c> x</c><00:47:24.079><c> equals</c><00:47:24.559><c> x</c><00:47:24.960><c> times</c><00:47:25.359><c> four</c><00:47:25.839><c> well</c>

00:47:25.990 --> 00:47:26.000 align:start position:0%
what about x equals x times four well
 

00:47:26.000 --> 00:47:29.990 align:start position:0%
what about x equals x times four well
that<00:47:26.160><c> would</c><00:47:26.319><c> be</c><00:47:26.800><c> x</c><00:47:27.440><c> times</c><00:47:28.160><c> equals</c><00:47:28.720><c> four</c><00:47:29.359><c> x</c>

00:47:29.990 --> 00:47:30.000 align:start position:0%
that would be x times equals four x
 

00:47:30.000 --> 00:47:31.430 align:start position:0%
that would be x times equals four x
times<00:47:30.400><c> four</c>

00:47:31.430 --> 00:47:31.440 align:start position:0%
times four
 

00:47:31.440 --> 00:47:33.589 align:start position:0%
times four
is<00:47:31.680><c> forty</c><00:47:32.240><c> and</c><00:47:32.480><c> division</c>

00:47:33.589 --> 00:47:33.599 align:start position:0%
is forty and division
 

00:47:33.599 --> 00:47:36.470 align:start position:0%
is forty and division
x<00:47:34.000><c> equals</c><00:47:34.480><c> x</c><00:47:34.720><c> divided</c><00:47:35.119><c> by</c><00:47:35.359><c> five</c>

00:47:36.470 --> 00:47:36.480 align:start position:0%
x equals x divided by five
 

00:47:36.480 --> 00:47:38.549 align:start position:0%
x equals x divided by five
the<00:47:36.720><c> augmented</c><00:47:37.359><c> assignment</c><00:47:37.839><c> operator</c><00:47:38.400><c> of</c>

00:47:38.549 --> 00:47:38.559 align:start position:0%
the augmented assignment operator of
 

00:47:38.559 --> 00:47:42.309 align:start position:0%
the augmented assignment operator of
this<00:47:38.880><c> equation</c><00:47:39.520><c> is</c><00:47:40.079><c> x</c><00:47:40.720><c> divided</c><00:47:41.280><c> by</c><00:47:41.760><c> equals</c>

00:47:42.309 --> 00:47:42.319 align:start position:0%
this equation is x divided by equals
 

00:47:42.319 --> 00:47:43.190 align:start position:0%
this equation is x divided by equals
five

00:47:43.190 --> 00:47:43.200 align:start position:0%
five
 

00:47:43.200 --> 00:47:46.549 align:start position:0%
five
which<00:47:43.520><c> is</c><00:47:43.680><c> two</c><00:47:44.240><c> and</c><00:47:44.640><c> lastly</c><00:47:45.200><c> modulus</c><00:47:46.160><c> so</c><00:47:46.319><c> what</c>

00:47:46.549 --> 00:47:46.559 align:start position:0%
which is two and lastly modulus so what
 

00:47:46.559 --> 00:47:50.309 align:start position:0%
which is two and lastly modulus so what
about<00:47:47.040><c> x</c><00:47:47.440><c> equals</c><00:47:48.000><c> x</c><00:47:48.480><c> modulus</c><00:47:49.040><c> two</c>

00:47:50.309 --> 00:47:50.319 align:start position:0%
about x equals x modulus two
 

00:47:50.319 --> 00:47:53.750 align:start position:0%
about x equals x modulus two
that<00:47:50.480><c> would</c><00:47:50.640><c> be</c><00:47:51.280><c> x</c><00:47:51.760><c> modulus</c><00:47:52.400><c> equals</c><00:47:52.960><c> two</c>

00:47:53.750 --> 00:47:53.760 align:start position:0%
that would be x modulus equals two
 

00:47:53.760 --> 00:47:57.190 align:start position:0%
that would be x modulus equals two
x<00:47:54.319><c> modulus</c><00:47:54.960><c> two</c><00:47:55.520><c> equals</c><00:47:55.920><c> zero</c><00:47:56.640><c> well</c><00:47:56.880><c> yeah</c>

00:47:57.190 --> 00:47:57.200 align:start position:0%
x modulus two equals zero well yeah
 

00:47:57.200 --> 00:47:59.270 align:start position:0%
x modulus two equals zero well yeah
everybody<00:47:57.599><c> those</c><00:47:57.920><c> are</c><00:47:58.240><c> augmented</c><00:47:58.800><c> assignment</c>

00:47:59.270 --> 00:47:59.280 align:start position:0%
everybody those are augmented assignment
 

00:47:59.280 --> 00:48:01.589 align:start position:0%
everybody those are augmented assignment
operators<00:48:00.000><c> they're</c><00:48:00.240><c> basically</c><00:48:00.640><c> a</c><00:48:00.720><c> shortcut</c>

00:48:01.589 --> 00:48:01.599 align:start position:0%
operators they're basically a shortcut
 

00:48:01.599 --> 00:48:03.270 align:start position:0%
operators they're basically a shortcut
they're<00:48:01.839><c> used</c><00:48:02.079><c> to</c><00:48:02.160><c> replace</c><00:48:02.559><c> a</c><00:48:02.720><c> statement</c>

00:48:03.270 --> 00:48:03.280 align:start position:0%
they're used to replace a statement
 

00:48:03.280 --> 00:48:05.270 align:start position:0%
they're used to replace a statement
where<00:48:03.440><c> an</c><00:48:03.680><c> operator</c><00:48:04.240><c> takes</c><00:48:04.559><c> a</c><00:48:04.640><c> variable</c><00:48:05.119><c> as</c>

00:48:05.270 --> 00:48:05.280 align:start position:0%
where an operator takes a variable as
 

00:48:05.280 --> 00:48:07.349 align:start position:0%
where an operator takes a variable as
one<00:48:05.440><c> of</c><00:48:05.520><c> its</c><00:48:05.760><c> arguments</c><00:48:06.640><c> and</c><00:48:06.800><c> then</c><00:48:06.960><c> assigns</c>

00:48:07.349 --> 00:48:07.359 align:start position:0%
one of its arguments and then assigns
 

00:48:07.359 --> 00:48:09.349 align:start position:0%
one of its arguments and then assigns
the<00:48:07.520><c> result</c><00:48:08.000><c> back</c><00:48:08.160><c> to</c><00:48:08.319><c> the</c><00:48:08.400><c> same</c><00:48:08.720><c> variable</c>

00:48:09.349 --> 00:48:09.359 align:start position:0%
the result back to the same variable
 

00:48:09.359 --> 00:48:11.430 align:start position:0%
the result back to the same variable
it's<00:48:09.599><c> a</c><00:48:09.680><c> shortcut</c><00:48:10.400><c> if</c><00:48:10.640><c> this</c><00:48:10.800><c> video</c><00:48:11.119><c> helped</c><00:48:11.280><c> you</c>

00:48:11.430 --> 00:48:11.440 align:start position:0%
it's a shortcut if this video helped you
 

00:48:11.440 --> 00:48:13.349 align:start position:0%
it's a shortcut if this video helped you
out<00:48:11.680><c> you</c><00:48:11.839><c> can</c><00:48:11.920><c> help</c><00:48:12.079><c> me</c><00:48:12.240><c> out</c><00:48:12.480><c> by</c><00:48:12.800><c> smashing</c><00:48:13.200><c> that</c>

00:48:13.349 --> 00:48:13.359 align:start position:0%
out you can help me out by smashing that
 

00:48:13.359 --> 00:48:15.030 align:start position:0%
out you can help me out by smashing that
like<00:48:13.599><c> button</c><00:48:14.000><c> leave</c><00:48:14.160><c> a</c><00:48:14.240><c> random</c><00:48:14.559><c> comment</c><00:48:14.880><c> down</c>

00:48:15.030 --> 00:48:15.040 align:start position:0%
like button leave a random comment down
 

00:48:15.040 --> 00:48:16.870 align:start position:0%
like button leave a random comment down
below<00:48:15.520><c> and</c><00:48:15.839><c> subscribe</c><00:48:16.400><c> if</c><00:48:16.480><c> you'd</c><00:48:16.640><c> like</c><00:48:16.800><c> to</c>

00:48:16.870 --> 00:48:16.880 align:start position:0%
below and subscribe if you'd like to
 

00:48:16.880 --> 00:48:20.950 align:start position:0%
below and subscribe if you'd like to
become<00:48:17.200><c> a</c><00:48:17.280><c> fellow</c><00:48:17.599><c> bro</c>

00:48:20.950 --> 00:48:20.960 align:start position:0%
 
 

00:48:20.960 --> 00:48:23.349 align:start position:0%
 
hey<00:48:21.280><c> uh</c><00:48:21.680><c> welcome</c><00:48:22.079><c> back</c><00:48:22.400><c> in</c><00:48:22.640><c> this</c><00:48:22.880><c> video</c><00:48:23.200><c> i'm</c>

00:48:23.349 --> 00:48:23.359 align:start position:0%
hey uh welcome back in this video i'm
 

00:48:23.359 --> 00:48:24.950 align:start position:0%
hey uh welcome back in this video i'm
going<00:48:23.440><c> to</c><00:48:23.520><c> show</c><00:48:23.760><c> you</c><00:48:23.920><c> all</c><00:48:24.079><c> how</c><00:48:24.240><c> we</c><00:48:24.319><c> can</c><00:48:24.480><c> accept</c>

00:48:24.950 --> 00:48:24.960 align:start position:0%
going to show you all how we can accept
 

00:48:24.960 --> 00:48:27.670 align:start position:0%
going to show you all how we can accept
user<00:48:25.359><c> input</c><00:48:25.839><c> in</c><00:48:26.000><c> c</c><00:48:26.480><c> now</c><00:48:26.720><c> if</c><00:48:26.800><c> you're</c><00:48:27.040><c> using</c><00:48:27.359><c> vs</c>

00:48:27.670 --> 00:48:27.680 align:start position:0%
user input in c now if you're using vs
 

00:48:27.680 --> 00:48:29.670 align:start position:0%
user input in c now if you're using vs
code<00:48:28.000><c> we</c><00:48:28.079><c> need</c><00:48:28.240><c> to</c><00:48:28.400><c> switch</c><00:48:28.800><c> from</c><00:48:28.960><c> using</c><00:48:29.440><c> our</c>

00:48:29.670 --> 00:48:29.680 align:start position:0%
code we need to switch from using our
 

00:48:29.680 --> 00:48:32.309 align:start position:0%
code we need to switch from using our
output<00:48:30.079><c> tab</c><00:48:30.720><c> to</c><00:48:31.040><c> terminal</c><00:48:31.680><c> and</c><00:48:31.839><c> one</c><00:48:32.000><c> way</c><00:48:32.240><c> in</c>

00:48:32.309 --> 00:48:32.319 align:start position:0%
output tab to terminal and one way in
 

00:48:32.319 --> 00:48:33.990 align:start position:0%
output tab to terminal and one way in
which<00:48:32.480><c> we</c><00:48:32.640><c> can</c><00:48:32.720><c> make</c><00:48:32.960><c> that</c><00:48:33.200><c> change</c><00:48:33.599><c> is</c><00:48:33.760><c> by</c>

00:48:33.990 --> 00:48:34.000 align:start position:0%
which we can make that change is by
 

00:48:34.000 --> 00:48:37.510 align:start position:0%
which we can make that change is by
going<00:48:34.240><c> to</c><00:48:34.559><c> file</c><00:48:35.359><c> preferences</c><00:48:36.559><c> settings</c>

00:48:37.510 --> 00:48:37.520 align:start position:0%
going to file preferences settings
 

00:48:37.520 --> 00:48:39.589 align:start position:0%
going to file preferences settings
search<00:48:37.839><c> for</c><00:48:38.079><c> code</c><00:48:38.319><c> runner</c>

00:48:39.589 --> 00:48:39.599 align:start position:0%
search for code runner
 

00:48:39.599 --> 00:48:41.829 align:start position:0%
search for code runner
and<00:48:39.680><c> then</c><00:48:39.920><c> check</c><00:48:40.240><c> this</c><00:48:40.640><c> run</c><00:48:40.880><c> in</c><00:48:40.960><c> terminal</c><00:48:41.680><c> so</c>

00:48:41.829 --> 00:48:41.839 align:start position:0%
and then check this run in terminal so
 

00:48:41.839 --> 00:48:43.589 align:start position:0%
and then check this run in terminal so
then<00:48:42.079><c> when</c><00:48:42.240><c> we</c><00:48:42.400><c> run</c><00:48:42.640><c> our</c><00:48:42.720><c> code</c><00:48:43.119><c> it</c><00:48:43.200><c> will</c><00:48:43.359><c> now</c>

00:48:43.589 --> 00:48:43.599 align:start position:0%
then when we run our code it will now
 

00:48:43.599 --> 00:48:46.069 align:start position:0%
then when we run our code it will now
display<00:48:44.160><c> in</c><00:48:44.319><c> terminal</c><00:48:45.119><c> which</c><00:48:45.359><c> accepts</c><00:48:45.760><c> user</c>

00:48:46.069 --> 00:48:46.079 align:start position:0%
display in terminal which accepts user
 

00:48:46.079 --> 00:48:48.549 align:start position:0%
display in terminal which accepts user
input<00:48:46.800><c> output</c><00:48:47.200><c> doesn't</c><00:48:47.599><c> because</c><00:48:48.000><c> well</c><00:48:48.400><c> it's</c>

00:48:48.549 --> 00:48:48.559 align:start position:0%
input output doesn't because well it's
 

00:48:48.559 --> 00:48:50.470 align:start position:0%
input output doesn't because well it's
only<00:48:48.720><c> for</c><00:48:48.960><c> output</c><00:48:49.440><c> and</c><00:48:49.680><c> you</c><00:48:49.760><c> can</c><00:48:49.920><c> ignore</c><00:48:50.240><c> this</c>

00:48:50.470 --> 00:48:50.480 align:start position:0%
only for output and you can ignore this
 

00:48:50.480 --> 00:48:52.390 align:start position:0%
only for output and you can ignore this
this<00:48:50.720><c> is</c><00:48:50.800><c> a</c><00:48:51.040><c> powershell</c><00:48:51.599><c> command</c><00:48:52.079><c> that</c><00:48:52.240><c> will</c>

00:48:52.390 --> 00:48:52.400 align:start position:0%
this is a powershell command that will
 

00:48:52.400 --> 00:48:54.630 align:start position:0%
this is a powershell command that will
compile<00:48:52.880><c> and</c><00:48:53.040><c> run</c><00:48:53.280><c> your</c><00:48:53.440><c> c</c><00:48:53.760><c> program</c><00:48:54.319><c> but</c><00:48:54.559><c> if</c>

00:48:54.630 --> 00:48:54.640 align:start position:0%
compile and run your c program but if
 

00:48:54.640 --> 00:48:56.309 align:start position:0%
compile and run your c program but if
you<00:48:54.800><c> prefer</c><00:48:55.119><c> instead</c><00:48:55.440><c> of</c><00:48:55.520><c> powershell</c><00:48:56.079><c> you</c><00:48:56.240><c> can</c>

00:48:56.309 --> 00:48:56.319 align:start position:0%
you prefer instead of powershell you can
 

00:48:56.319 --> 00:48:58.309 align:start position:0%
you prefer instead of powershell you can
use<00:48:56.480><c> command</c><00:48:56.800><c> prompt</c><00:48:57.359><c> but</c><00:48:57.599><c> you</c><00:48:57.680><c> would</c><00:48:57.839><c> need</c><00:48:58.079><c> to</c>

00:48:58.309 --> 00:48:58.319 align:start position:0%
use command prompt but you would need to
 

00:48:58.319 --> 00:49:00.710 align:start position:0%
use command prompt but you would need to
manually<00:48:58.880><c> compile</c><00:48:59.280><c> and</c><00:48:59.440><c> run</c><00:48:59.680><c> your</c><00:48:59.839><c> code</c><00:49:00.480><c> since</c>

00:49:00.710 --> 00:49:00.720 align:start position:0%
manually compile and run your code since
 

00:49:00.720 --> 00:49:03.589 align:start position:0%
manually compile and run your code since
i'm<00:49:00.880><c> using</c><00:49:01.119><c> windows</c><00:49:01.520><c> that</c><00:49:01.680><c> would</c><00:49:01.839><c> be</c><00:49:02.000><c> a</c><00:49:02.160><c> gcc</c>

00:49:03.589 --> 00:49:03.599 align:start position:0%
i'm using windows that would be a gcc
 

00:49:03.599 --> 00:49:05.829 align:start position:0%
i'm using windows that would be a gcc
the<00:49:03.760><c> name</c><00:49:03.920><c> of</c><00:49:04.000><c> your</c><00:49:04.160><c> c</c><00:49:04.400><c> program</c><00:49:04.960><c> hello</c><00:49:05.359><c> world</c>

00:49:05.829 --> 00:49:05.839 align:start position:0%
the name of your c program hello world
 

00:49:05.839 --> 00:49:08.069 align:start position:0%
the name of your c program hello world
dot<00:49:06.079><c> c</c><00:49:06.640><c> that</c><00:49:06.800><c> will</c><00:49:06.960><c> compile</c><00:49:07.440><c> your</c><00:49:07.599><c> program</c>

00:49:08.069 --> 00:49:08.079 align:start position:0%
dot c that will compile your program
 

00:49:08.079 --> 00:49:10.870 align:start position:0%
dot c that will compile your program
into<00:49:08.319><c> an</c><00:49:08.480><c> executable</c><00:49:09.040><c> named</c><00:49:09.359><c> a</c><00:49:09.599><c> dot</c><00:49:09.839><c> exe</c>

00:49:10.870 --> 00:49:10.880 align:start position:0%
into an executable named a dot exe
 

00:49:10.880 --> 00:49:12.710 align:start position:0%
into an executable named a dot exe
then<00:49:11.119><c> just</c><00:49:11.280><c> type</c><00:49:11.520><c> that</c><00:49:11.760><c> to</c><00:49:11.920><c> run</c><00:49:12.160><c> it</c><00:49:12.400><c> but</c><00:49:12.559><c> i'll</c>

00:49:12.710 --> 00:49:12.720 align:start position:0%
then just type that to run it but i'll
 

00:49:12.720 --> 00:49:14.549 align:start position:0%
then just type that to run it but i'll
stick<00:49:12.960><c> with</c><00:49:13.200><c> using</c><00:49:13.520><c> powershell</c><00:49:14.160><c> just</c><00:49:14.319><c> to</c><00:49:14.400><c> kind</c>

00:49:14.549 --> 00:49:14.559 align:start position:0%
stick with using powershell just to kind
 

00:49:14.559 --> 00:49:16.790 align:start position:0%
stick with using powershell just to kind
of<00:49:14.640><c> simplify</c><00:49:15.200><c> things</c><00:49:15.760><c> okay</c><00:49:16.079><c> now</c><00:49:16.240><c> how</c><00:49:16.400><c> can</c><00:49:16.559><c> we</c>

00:49:16.790 --> 00:49:16.800 align:start position:0%
of simplify things okay now how can we
 

00:49:16.800 --> 00:49:18.950 align:start position:0%
of simplify things okay now how can we
accept<00:49:17.119><c> user</c><00:49:17.520><c> input</c><00:49:18.079><c> let's</c><00:49:18.319><c> declare</c><00:49:18.800><c> a</c>

00:49:18.950 --> 00:49:18.960 align:start position:0%
accept user input let's declare a
 

00:49:18.960 --> 00:49:21.589 align:start position:0%
accept user input let's declare a
variable<00:49:19.440><c> age</c><00:49:19.680><c> but</c><00:49:19.839><c> not</c><00:49:20.000><c> yet</c><00:49:20.160><c> assign</c><00:49:20.559><c> it</c><00:49:21.200><c> next</c>

00:49:21.589 --> 00:49:21.599 align:start position:0%
variable age but not yet assign it next
 

00:49:21.599 --> 00:49:23.270 align:start position:0%
variable age but not yet assign it next
we're<00:49:21.760><c> going</c><00:49:21.920><c> to</c><00:49:22.000><c> create</c><00:49:22.319><c> a</c><00:49:22.400><c> prompt</c><00:49:22.880><c> to</c><00:49:23.040><c> ask</c>

00:49:23.270 --> 00:49:23.280 align:start position:0%
we're going to create a prompt to ask
 

00:49:23.280 --> 00:49:27.109 align:start position:0%
we're going to create a prompt to ask
the<00:49:23.440><c> user</c><00:49:23.920><c> for</c><00:49:24.160><c> their</c><00:49:24.400><c> age</c><00:49:25.200><c> and</c><00:49:25.359><c> we'll</c><00:49:25.599><c> ask</c><00:49:26.319><c> how</c>

00:49:27.109 --> 00:49:27.119 align:start position:0%
the user for their age and we'll ask how
 

00:49:27.119 --> 00:49:29.190 align:start position:0%
the user for their age and we'll ask how
old<00:49:27.839><c> are</c><00:49:28.240><c> you</c>

00:49:29.190 --> 00:49:29.200 align:start position:0%
old are you
 

00:49:29.200 --> 00:49:31.990 align:start position:0%
old are you
to<00:49:29.440><c> accept</c><00:49:29.839><c> user</c><00:49:30.160><c> input</c><00:49:30.480><c> we</c><00:49:30.640><c> can</c><00:49:30.800><c> use</c><00:49:31.200><c> the</c><00:49:31.440><c> scan</c>

00:49:31.990 --> 00:49:32.000 align:start position:0%
to accept user input we can use the scan
 

00:49:32.000 --> 00:49:34.309 align:start position:0%
to accept user input we can use the scan
f<00:49:32.240><c> function</c><00:49:32.960><c> it's</c><00:49:33.200><c> kind</c><00:49:33.359><c> of</c><00:49:33.440><c> the</c><00:49:33.599><c> inverse</c><00:49:34.079><c> of</c>

00:49:34.309 --> 00:49:34.319 align:start position:0%
f function it's kind of the inverse of
 

00:49:34.319 --> 00:49:36.870 align:start position:0%
f function it's kind of the inverse of
printf<00:49:35.200><c> printf</c><00:49:35.839><c> is</c><00:49:36.000><c> used</c><00:49:36.240><c> to</c><00:49:36.480><c> display</c>

00:49:36.870 --> 00:49:36.880 align:start position:0%
printf printf is used to display
 

00:49:36.880 --> 00:49:39.270 align:start position:0%
printf printf is used to display
something<00:49:37.200><c> as</c><00:49:37.440><c> output</c><00:49:38.160><c> scanf</c><00:49:38.800><c> is</c><00:49:38.880><c> used</c><00:49:39.119><c> to</c>

00:49:39.270 --> 00:49:39.280 align:start position:0%
something as output scanf is used to
 

00:49:39.280 --> 00:49:41.190 align:start position:0%
something as output scanf is used to
read<00:49:39.599><c> input</c><00:49:40.160><c> what</c><00:49:40.319><c> we're</c><00:49:40.559><c> going</c><00:49:40.720><c> to</c><00:49:40.880><c> place</c>

00:49:41.190 --> 00:49:41.200 align:start position:0%
read input what we're going to place
 

00:49:41.200 --> 00:49:43.990 align:start position:0%
read input what we're going to place
within<00:49:41.760><c> our</c><00:49:42.000><c> scanf</c><00:49:42.559><c> function</c><00:49:43.119><c> is</c><00:49:43.359><c> the</c><00:49:43.520><c> format</c>

00:49:43.990 --> 00:49:44.000 align:start position:0%
within our scanf function is the format
 

00:49:44.000 --> 00:49:46.390 align:start position:0%
within our scanf function is the format
specifier<00:49:44.800><c> of</c><00:49:44.960><c> the</c><00:49:45.119><c> variable</c><00:49:45.599><c> we</c><00:49:45.760><c> will</c><00:49:46.000><c> insert</c>

00:49:46.390 --> 00:49:46.400 align:start position:0%
specifier of the variable we will insert
 

00:49:46.400 --> 00:49:49.349 align:start position:0%
specifier of the variable we will insert
a<00:49:46.559><c> value</c><00:49:47.119><c> into</c><00:49:47.920><c> if</c><00:49:48.160><c> we</c><00:49:48.319><c> need</c><00:49:48.480><c> to</c><00:49:48.720><c> accept</c><00:49:49.119><c> a</c>

00:49:49.349 --> 00:49:49.359 align:start position:0%
a value into if we need to accept a
 

00:49:49.359 --> 00:49:51.829 align:start position:0%
a value into if we need to accept a
number<00:49:49.839><c> an</c><00:49:50.079><c> integer</c><00:49:50.559><c> as</c><00:49:50.880><c> input</c><00:49:51.599><c> the</c>

00:49:51.829 --> 00:49:51.839 align:start position:0%
number an integer as input the
 

00:49:51.839 --> 00:49:54.470 align:start position:0%
number an integer as input the
corresponding<00:49:52.640><c> format</c><00:49:53.119><c> specifier</c><00:49:54.000><c> is</c>

00:49:54.470 --> 00:49:54.480 align:start position:0%
corresponding format specifier is
 

00:49:54.480 --> 00:49:56.710 align:start position:0%
corresponding format specifier is
percent<00:49:55.359><c> d</c>

00:49:56.710 --> 00:49:56.720 align:start position:0%
percent d
 

00:49:56.720 --> 00:49:58.390 align:start position:0%
percent d
then<00:49:56.960><c> add</c><00:49:57.200><c> a</c><00:49:57.280><c> comma</c><00:49:57.920><c> the</c><00:49:58.000><c> name</c><00:49:58.240><c> of</c><00:49:58.319><c> the</c>

00:49:58.390 --> 00:49:58.400 align:start position:0%
then add a comma the name of the
 

00:49:58.400 --> 00:50:01.190 align:start position:0%
then add a comma the name of the
variable<00:49:59.200><c> but</c><00:49:59.520><c> precede</c><00:50:00.240><c> the</c><00:50:00.400><c> variable</c><00:50:00.880><c> name</c>

00:50:01.190 --> 00:50:01.200 align:start position:0%
variable but precede the variable name
 

00:50:01.200 --> 00:50:04.230 align:start position:0%
variable but precede the variable name
with<00:50:01.440><c> an</c><00:50:01.680><c> ampersand</c><00:50:02.640><c> that</c><00:50:02.960><c> is</c><00:50:03.119><c> the</c><00:50:03.359><c> address</c><00:50:03.920><c> of</c>

00:50:04.230 --> 00:50:04.240 align:start position:0%
with an ampersand that is the address of
 

00:50:04.240 --> 00:50:06.390 align:start position:0%
with an ampersand that is the address of
operator<00:50:04.960><c> let's</c><00:50:05.280><c> print</c><00:50:05.599><c> a</c><00:50:05.680><c> message</c><00:50:06.240><c> that</c>

00:50:06.390 --> 00:50:06.400 align:start position:0%
operator let's print a message that
 

00:50:06.400 --> 00:50:08.790 align:start position:0%
operator let's print a message that
contains<00:50:07.119><c> the</c><00:50:07.280><c> value</c><00:50:07.839><c> stored</c><00:50:08.160><c> within</c><00:50:08.559><c> our</c>

00:50:08.790 --> 00:50:08.800 align:start position:0%
contains the value stored within our
 

00:50:08.800 --> 00:50:11.109 align:start position:0%
contains the value stored within our
variable<00:50:09.440><c> edge</c><00:50:10.079><c> u</c>

00:50:11.109 --> 00:50:11.119 align:start position:0%
variable edge u
 

00:50:11.119 --> 00:50:12.470 align:start position:0%
variable edge u
are

00:50:12.470 --> 00:50:12.480 align:start position:0%
are
 

00:50:12.480 --> 00:50:14.230 align:start position:0%
are
percent<00:50:13.440><c> d</c>

00:50:14.230 --> 00:50:14.240 align:start position:0%
percent d
 

00:50:14.240 --> 00:50:16.870 align:start position:0%
percent d
years<00:50:14.880><c> old</c><00:50:15.680><c> so</c><00:50:16.000><c> this</c><00:50:16.160><c> is</c><00:50:16.319><c> our</c><00:50:16.480><c> format</c>

00:50:16.870 --> 00:50:16.880 align:start position:0%
years old so this is our format
 

00:50:16.880 --> 00:50:19.270 align:start position:0%
years old so this is our format
specifier<00:50:17.520><c> it</c><00:50:17.680><c> functions</c><00:50:18.160><c> as</c><00:50:18.319><c> a</c><00:50:18.400><c> placeholder</c>

00:50:19.270 --> 00:50:19.280 align:start position:0%
specifier it functions as a placeholder
 

00:50:19.280 --> 00:50:21.270 align:start position:0%
specifier it functions as a placeholder
and<00:50:19.440><c> i</c><00:50:19.599><c> would</c><00:50:19.760><c> like</c><00:50:19.920><c> to</c><00:50:20.079><c> display</c><00:50:20.640><c> the</c><00:50:20.880><c> value</c>

00:50:21.270 --> 00:50:21.280 align:start position:0%
and i would like to display the value
 

00:50:21.280 --> 00:50:23.510 align:start position:0%
and i would like to display the value
contained<00:50:21.680><c> within</c><00:50:22.079><c> my</c><00:50:22.319><c> edge</c><00:50:22.559><c> variable</c><00:50:23.280><c> so</c>

00:50:23.510 --> 00:50:23.520 align:start position:0%
contained within my edge variable so
 

00:50:23.520 --> 00:50:24.630 align:start position:0%
contained within my edge variable so
things<00:50:23.839><c> are</c><00:50:23.920><c> getting</c><00:50:24.160><c> a</c><00:50:24.240><c> little</c><00:50:24.400><c> bit</c>

00:50:24.630 --> 00:50:24.640 align:start position:0%
things are getting a little bit
 

00:50:24.640 --> 00:50:26.069 align:start position:0%
things are getting a little bit
difficult<00:50:24.960><c> to</c><00:50:25.119><c> read</c><00:50:25.440><c> i'm</c><00:50:25.520><c> just</c><00:50:25.599><c> going</c><00:50:25.760><c> to</c>

00:50:26.069 --> 00:50:26.079 align:start position:0%
difficult to read i'm just going to
 

00:50:26.079 --> 00:50:28.470 align:start position:0%
difficult to read i'm just going to
precede<00:50:26.559><c> this</c><00:50:26.800><c> with</c><00:50:26.960><c> a</c><00:50:27.040><c> new</c><00:50:27.280><c> line</c>

00:50:28.470 --> 00:50:28.480 align:start position:0%
precede this with a new line
 

00:50:28.480 --> 00:50:30.950 align:start position:0%
precede this with a new line
okay<00:50:28.720><c> let's</c><00:50:28.960><c> try</c><00:50:29.119><c> that</c><00:50:29.280><c> again</c><00:50:30.000><c> how</c><00:50:30.400><c> old</c><00:50:30.800><c> are</c>

00:50:30.950 --> 00:50:30.960 align:start position:0%
okay let's try that again how old are
 

00:50:30.960 --> 00:50:33.430 align:start position:0%
okay let's try that again how old are
you<00:50:31.440><c> let's</c><00:50:31.599><c> say</c><00:50:31.839><c> that</c><00:50:32.000><c> i'm</c><00:50:32.160><c> 21</c><00:50:32.800><c> not</c><00:50:33.040><c> anymore</c>

00:50:33.430 --> 00:50:33.440 align:start position:0%
you let's say that i'm 21 not anymore
 

00:50:33.440 --> 00:50:35.910 align:start position:0%
you let's say that i'm 21 not anymore
but<00:50:33.599><c> let's</c><00:50:33.839><c> pretend</c><00:50:34.160><c> that</c><00:50:34.319><c> i</c><00:50:34.400><c> still</c><00:50:34.720><c> am</c>

00:50:35.910 --> 00:50:35.920 align:start position:0%
but let's pretend that i still am
 

00:50:35.920 --> 00:50:39.030 align:start position:0%
but let's pretend that i still am
you<00:50:36.240><c> are</c><00:50:36.640><c> 21</c><00:50:37.200><c> years</c><00:50:37.520><c> old</c><00:50:38.000><c> that's</c><00:50:38.480><c> basically</c>

00:50:39.030 --> 00:50:39.040 align:start position:0%
you are 21 years old that's basically
 

00:50:39.040 --> 00:50:41.589 align:start position:0%
you are 21 years old that's basically
how<00:50:39.280><c> to</c><00:50:39.520><c> accept</c><00:50:40.000><c> user</c><00:50:40.400><c> input</c><00:50:40.880><c> you</c><00:50:41.119><c> use</c><00:50:41.440><c> the</c>

00:50:41.589 --> 00:50:41.599 align:start position:0%
how to accept user input you use the
 

00:50:41.599 --> 00:50:44.790 align:start position:0%
how to accept user input you use the
scanf<00:50:42.079><c> function</c><00:50:43.040><c> use</c><00:50:43.359><c> the</c><00:50:43.520><c> format</c><00:50:44.000><c> specifier</c>

00:50:44.790 --> 00:50:44.800 align:start position:0%
scanf function use the format specifier
 

00:50:44.800 --> 00:50:46.950 align:start position:0%
scanf function use the format specifier
of<00:50:44.960><c> the</c><00:50:45.040><c> variable</c><00:50:46.000><c> list</c><00:50:46.240><c> the</c><00:50:46.400><c> variable</c>

00:50:46.950 --> 00:50:46.960 align:start position:0%
of the variable list the variable
 

00:50:46.960 --> 00:50:49.750 align:start position:0%
of the variable list the variable
appreciated<00:50:47.680><c> with</c><00:50:47.839><c> the</c><00:50:48.079><c> address</c><00:50:48.559><c> of</c><00:50:48.880><c> operator</c>

00:50:49.750 --> 00:50:49.760 align:start position:0%
appreciated with the address of operator
 

00:50:49.760 --> 00:50:52.069 align:start position:0%
appreciated with the address of operator
let's<00:50:50.079><c> try</c><00:50:50.240><c> this</c><00:50:50.480><c> again</c><00:50:50.960><c> but</c><00:50:51.119><c> instead</c><00:50:51.680><c> accept</c>

00:50:52.069 --> 00:50:52.079 align:start position:0%
let's try this again but instead accept
 

00:50:52.079 --> 00:50:54.470 align:start position:0%
let's try this again but instead accept
a<00:50:52.319><c> string</c><00:50:52.640><c> from</c><00:50:52.800><c> a</c><00:50:52.960><c> user</c><00:50:53.359><c> like</c><00:50:53.599><c> a</c><00:50:53.680><c> name</c><00:50:54.160><c> we</c><00:50:54.319><c> need</c>

00:50:54.470 --> 00:50:54.480 align:start position:0%
a string from a user like a name we need
 

00:50:54.480 --> 00:50:56.390 align:start position:0%
a string from a user like a name we need
to<00:50:54.640><c> declare</c><00:50:55.119><c> an</c><00:50:55.200><c> array</c><00:50:55.520><c> of</c><00:50:55.599><c> characters</c><00:50:56.240><c> and</c>

00:50:56.390 --> 00:50:56.400 align:start position:0%
to declare an array of characters and
 

00:50:56.400 --> 00:50:58.950 align:start position:0%
to declare an array of characters and
set<00:50:56.640><c> asides</c><00:50:57.359><c> so</c><00:50:57.520><c> let's</c><00:50:57.839><c> create</c><00:50:58.240><c> a</c><00:50:58.480><c> character</c>

00:50:58.950 --> 00:50:58.960 align:start position:0%
set asides so let's create a character
 

00:50:58.960 --> 00:51:01.829 align:start position:0%
set asides so let's create a character
array<00:50:59.520><c> named</c><00:51:00.000><c> name</c>

00:51:01.829 --> 00:51:01.839 align:start position:0%
array named name
 

00:51:01.839 --> 00:51:03.750 align:start position:0%
array named name
now<00:51:02.079><c> with</c><00:51:02.319><c> character</c><00:51:02.720><c> arrays</c><00:51:03.200><c> we</c><00:51:03.359><c> can't</c>

00:51:03.750 --> 00:51:03.760 align:start position:0%
now with character arrays we can't
 

00:51:03.760 --> 00:51:05.670 align:start position:0%
now with character arrays we can't
change<00:51:04.160><c> the</c><00:51:04.319><c> size</c><00:51:04.640><c> of</c><00:51:04.720><c> the</c><00:51:04.880><c> array</c><00:51:05.280><c> after</c><00:51:05.520><c> the</c>

00:51:05.670 --> 00:51:05.680 align:start position:0%
change the size of the array after the
 

00:51:05.680 --> 00:51:07.589 align:start position:0%
change the size of the array after the
program<00:51:06.160><c> is</c><00:51:06.319><c> already</c><00:51:06.640><c> running</c><00:51:07.040><c> let's</c><00:51:07.280><c> set</c><00:51:07.520><c> a</c>

00:51:07.589 --> 00:51:07.599 align:start position:0%
program is already running let's set a
 

00:51:07.599 --> 00:51:10.150 align:start position:0%
program is already running let's set a
max<00:51:07.920><c> size</c><00:51:08.319><c> of</c><00:51:08.400><c> maybe</c><00:51:08.800><c> 25</c><00:51:09.359><c> bytes</c><00:51:09.760><c> for</c><00:51:09.920><c> this</c>

00:51:10.150 --> 00:51:10.160 align:start position:0%
max size of maybe 25 bytes for this
 

00:51:10.160 --> 00:51:12.549 align:start position:0%
max size of maybe 25 bytes for this
array<00:51:10.640><c> if</c><00:51:10.800><c> we</c><00:51:10.960><c> go</c><00:51:11.119><c> over</c><00:51:11.359><c> this</c><00:51:11.599><c> limit</c><00:51:12.160><c> this</c><00:51:12.319><c> will</c>

00:51:12.549 --> 00:51:12.559 align:start position:0%
array if we go over this limit this will
 

00:51:12.559 --> 00:51:15.349 align:start position:0%
array if we go over this limit this will
cause<00:51:12.960><c> a</c><00:51:13.119><c> buffer</c><00:51:13.599><c> overflow</c><00:51:14.400><c> and</c><00:51:14.720><c> let's</c><00:51:14.960><c> ask</c><00:51:15.280><c> a</c>

00:51:15.349 --> 00:51:15.359 align:start position:0%
cause a buffer overflow and let's ask a
 

00:51:15.359 --> 00:51:17.510 align:start position:0%
cause a buffer overflow and let's ask a
user<00:51:15.760><c> for</c><00:51:16.000><c> their</c><00:51:16.240><c> name</c><00:51:16.720><c> so</c><00:51:16.960><c> we'll</c><00:51:17.119><c> create</c><00:51:17.440><c> a</c>

00:51:17.510 --> 00:51:17.520 align:start position:0%
user for their name so we'll create a
 

00:51:17.520 --> 00:51:18.549 align:start position:0%
user for their name so we'll create a
prompt

00:51:18.549 --> 00:51:18.559 align:start position:0%
prompt
 

00:51:18.559 --> 00:51:21.670 align:start position:0%
prompt
printf

00:51:21.670 --> 00:51:21.680 align:start position:0%
 
 

00:51:21.680 --> 00:51:23.589 align:start position:0%
 
what's<00:51:22.559><c> your</c>

00:51:23.589 --> 00:51:23.599 align:start position:0%
what's your
 

00:51:23.599 --> 00:51:27.510 align:start position:0%
what's your
name<00:51:24.240><c> and</c><00:51:24.400><c> i</c><00:51:24.559><c> again</c><00:51:24.880><c> will</c><00:51:25.040><c> use</c><00:51:25.520><c> scanf</c>

00:51:27.510 --> 00:51:27.520 align:start position:0%
name and i again will use scanf
 

00:51:27.520 --> 00:51:29.829 align:start position:0%
name and i again will use scanf
list<00:51:27.920><c> the</c><00:51:28.079><c> appropriate</c><00:51:28.640><c> format</c><00:51:29.119><c> specifier</c>

00:51:29.829 --> 00:51:29.839 align:start position:0%
list the appropriate format specifier
 

00:51:29.839 --> 00:51:32.630 align:start position:0%
list the appropriate format specifier
for<00:51:30.079><c> character</c><00:51:30.559><c> arrays</c><00:51:31.119><c> which</c><00:51:31.359><c> is</c><00:51:31.599><c> percent</c><00:51:32.160><c> s</c>

00:51:32.630 --> 00:51:32.640 align:start position:0%
for character arrays which is percent s
 

00:51:32.640 --> 00:51:34.950 align:start position:0%
for character arrays which is percent s
then<00:51:32.880><c> our</c><00:51:33.119><c> variable</c><00:51:33.839><c> name</c><00:51:34.319><c> and</c><00:51:34.559><c> use</c><00:51:34.800><c> the</c>

00:51:34.950 --> 00:51:34.960 align:start position:0%
then our variable name and use the
 

00:51:34.960 --> 00:51:36.950 align:start position:0%
then our variable name and use the
address<00:51:35.359><c> of</c><00:51:35.599><c> operator</c><00:51:36.319><c> then</c><00:51:36.559><c> at</c><00:51:36.640><c> the</c><00:51:36.800><c> end</c>

00:51:36.950 --> 00:51:36.960 align:start position:0%
address of operator then at the end
 

00:51:36.960 --> 00:51:38.630 align:start position:0%
address of operator then at the end
we'll<00:51:37.119><c> display</c><00:51:37.520><c> our</c><00:51:37.680><c> name</c>

00:51:38.630 --> 00:51:38.640 align:start position:0%
we'll display our name
 

00:51:38.640 --> 00:51:41.190 align:start position:0%
we'll display our name
printf

00:51:41.190 --> 00:51:41.200 align:start position:0%
printf
 

00:51:41.200 --> 00:51:42.470 align:start position:0%
printf
hello

00:51:42.470 --> 00:51:42.480 align:start position:0%
hello
 

00:51:42.480 --> 00:51:44.309 align:start position:0%
hello
percent<00:51:43.200><c> s</c>

00:51:44.309 --> 00:51:44.319 align:start position:0%
percent s
 

00:51:44.319 --> 00:51:46.309 align:start position:0%
percent s
how<00:51:44.960><c> are</c><00:51:45.359><c> you</c>

00:51:46.309 --> 00:51:46.319 align:start position:0%
how are you
 

00:51:46.319 --> 00:51:49.109 align:start position:0%
how are you
then<00:51:46.800><c> comma</c><00:51:47.599><c> name</c><00:51:48.079><c> and</c><00:51:48.240><c> before</c><00:51:48.559><c> we</c><00:51:48.720><c> run</c><00:51:48.880><c> this</c>

00:51:49.109 --> 00:51:49.119 align:start position:0%
then comma name and before we run this
 

00:51:49.119 --> 00:51:50.549 align:start position:0%
then comma name and before we run this
i'm<00:51:49.200><c> just</c><00:51:49.359><c> going</c><00:51:49.520><c> to</c><00:51:49.599><c> add</c><00:51:49.839><c> some</c><00:51:50.000><c> new</c><00:51:50.240><c> line</c>

00:51:50.549 --> 00:51:50.559 align:start position:0%
i'm just going to add some new line
 

00:51:50.559 --> 00:51:52.309 align:start position:0%
i'm just going to add some new line
characters<00:51:51.359><c> just</c><00:51:51.520><c> to</c><00:51:51.599><c> make</c><00:51:51.839><c> everything</c>

00:51:52.309 --> 00:51:52.319 align:start position:0%
characters just to make everything
 

00:51:52.319 --> 00:51:54.390 align:start position:0%
characters just to make everything
easier<00:51:52.640><c> to</c><00:51:52.800><c> read</c>

00:51:54.390 --> 00:51:54.400 align:start position:0%
easier to read
 

00:51:54.400 --> 00:51:58.309 align:start position:0%
easier to read
okay<00:51:54.800><c> let's</c><00:51:55.040><c> try</c><00:51:55.359><c> it</c>

00:51:58.309 --> 00:51:58.319 align:start position:0%
 
 

00:51:58.319 --> 00:52:00.470 align:start position:0%
 
what's<00:51:58.640><c> your</c><00:51:58.880><c> name</c><00:51:59.440><c> i'll</c><00:51:59.680><c> type</c><00:51:59.920><c> in</c><00:52:00.079><c> just</c><00:52:00.319><c> my</c>

00:52:00.470 --> 00:52:00.480 align:start position:0%
what's your name i'll type in just my
 

00:52:00.480 --> 00:52:02.150 align:start position:0%
what's your name i'll type in just my
first<00:52:00.720><c> name</c><00:52:01.119><c> not</c><00:52:01.359><c> including</c><00:52:01.680><c> any</c><00:52:01.920><c> white</c>

00:52:02.150 --> 00:52:02.160 align:start position:0%
first name not including any white
 

00:52:02.160 --> 00:52:03.430 align:start position:0%
first name not including any white
spaces

00:52:03.430 --> 00:52:03.440 align:start position:0%
spaces
 

00:52:03.440 --> 00:52:05.510 align:start position:0%
spaces
how<00:52:03.680><c> old</c><00:52:03.920><c> are</c><00:52:04.000><c> you</c><00:52:04.400><c> 21</c>

00:52:05.510 --> 00:52:05.520 align:start position:0%
how old are you 21
 

00:52:05.520 --> 00:52:08.230 align:start position:0%
how old are you 21
hello<00:52:06.000><c> bro</c><00:52:06.480><c> how</c><00:52:06.720><c> are</c><00:52:06.880><c> you</c><00:52:07.119><c> you</c><00:52:07.359><c> are</c><00:52:07.520><c> 21</c><00:52:08.000><c> years</c>

00:52:08.230 --> 00:52:08.240 align:start position:0%
hello bro how are you you are 21 years
 

00:52:08.240 --> 00:52:10.950 align:start position:0%
hello bro how are you you are 21 years
old<00:52:08.559><c> so</c><00:52:08.800><c> now</c><00:52:09.200><c> this</c><00:52:09.520><c> time</c><00:52:09.920><c> let's</c><00:52:10.160><c> type</c><00:52:10.480><c> in</c><00:52:10.720><c> a</c>

00:52:10.950 --> 00:52:10.960 align:start position:0%
old so now this time let's type in a
 

00:52:10.960 --> 00:52:13.270 align:start position:0%
old so now this time let's type in a
first<00:52:11.440><c> and</c><00:52:11.839><c> last</c><00:52:12.160><c> name</c><00:52:12.720><c> because</c><00:52:12.960><c> this</c><00:52:13.200><c> is</c>

00:52:13.270 --> 00:52:13.280 align:start position:0%
first and last name because this is
 

00:52:13.280 --> 00:52:15.270 align:start position:0%
first and last name because this is
going<00:52:13.440><c> to</c><00:52:13.599><c> act</c><00:52:13.839><c> a</c><00:52:13.920><c> little</c><00:52:14.079><c> bit</c><00:52:14.319><c> bizarre</c><00:52:15.040><c> what's</c>

00:52:15.270 --> 00:52:15.280 align:start position:0%
going to act a little bit bizarre what's
 

00:52:15.280 --> 00:52:16.790 align:start position:0%
going to act a little bit bizarre what's
your<00:52:15.440><c> name</c><00:52:16.000><c> bro</c>

00:52:16.790 --> 00:52:16.800 align:start position:0%
your name bro
 

00:52:16.800 --> 00:52:18.390 align:start position:0%
your name bro
code<00:52:17.359><c> and</c><00:52:17.440><c> this</c><00:52:17.599><c> is</c><00:52:17.760><c> separated</c><00:52:18.240><c> with</c><00:52:18.319><c> the</c>

00:52:18.390 --> 00:52:18.400 align:start position:0%
code and this is separated with the
 

00:52:18.400 --> 00:52:20.549 align:start position:0%
code and this is separated with the
white<00:52:18.640><c> space</c><00:52:19.359><c> hit</c><00:52:19.680><c> enter</c>

00:52:20.549 --> 00:52:20.559 align:start position:0%
white space hit enter
 

00:52:20.559 --> 00:52:22.950 align:start position:0%
white space hit enter
hello<00:52:20.960><c> bro</c><00:52:21.440><c> it</c><00:52:21.520><c> did</c><00:52:21.760><c> not</c><00:52:22.000><c> include</c><00:52:22.400><c> my</c><00:52:22.640><c> last</c>

00:52:22.950 --> 00:52:22.960 align:start position:0%
hello bro it did not include my last
 

00:52:22.960 --> 00:52:25.829 align:start position:0%
hello bro it did not include my last
name<00:52:23.520><c> how</c><00:52:23.839><c> are</c><00:52:24.000><c> you</c><00:52:24.319><c> you</c><00:52:24.480><c> are</c><00:52:24.720><c> zero</c><00:52:25.200><c> years</c><00:52:25.440><c> old</c>

00:52:25.829 --> 00:52:25.839 align:start position:0%
name how are you you are zero years old
 

00:52:25.839 --> 00:52:28.549 align:start position:0%
name how are you you are zero years old
so<00:52:26.079><c> using</c><00:52:26.640><c> the</c><00:52:26.880><c> scan</c><00:52:27.359><c> f</c><00:52:27.520><c> function</c><00:52:28.160><c> we</c><00:52:28.319><c> will</c>

00:52:28.549 --> 00:52:28.559 align:start position:0%
so using the scan f function we will
 

00:52:28.559 --> 00:52:31.510 align:start position:0%
so using the scan f function we will
read<00:52:28.880><c> up</c><00:52:29.040><c> to</c><00:52:29.359><c> any</c><00:52:29.680><c> white</c><00:52:29.920><c> spaces</c><00:52:30.880><c> so</c><00:52:31.119><c> if</c><00:52:31.280><c> your</c>

00:52:31.510 --> 00:52:31.520 align:start position:0%
read up to any white spaces so if your
 

00:52:31.520 --> 00:52:33.750 align:start position:0%
read up to any white spaces so if your
user<00:52:31.920><c> input</c><00:52:32.400><c> is</c><00:52:32.480><c> going</c><00:52:32.720><c> to</c><00:52:32.880><c> include</c><00:52:33.359><c> a</c><00:52:33.520><c> white</c>

00:52:33.750 --> 00:52:33.760 align:start position:0%
user input is going to include a white
 

00:52:33.760 --> 00:52:35.750 align:start position:0%
user input is going to include a white
space<00:52:34.400><c> we</c><00:52:34.559><c> need</c><00:52:34.720><c> to</c><00:52:34.880><c> use</c><00:52:35.200><c> a</c><00:52:35.440><c> different</c>

00:52:35.750 --> 00:52:35.760 align:start position:0%
space we need to use a different
 

00:52:35.760 --> 00:52:39.910 align:start position:0%
space we need to use a different
function<00:52:36.240><c> and</c><00:52:36.400><c> that</c><00:52:36.640><c> is</c><00:52:37.040><c> the</c><00:52:37.520><c> f</c><00:52:37.920><c> gets</c><00:52:38.319><c> function</c>

00:52:39.910 --> 00:52:39.920 align:start position:0%
function and that is the f gets function
 

00:52:39.920 --> 00:52:41.109 align:start position:0%
function and that is the f gets function
f<00:52:40.160><c> gets</c>

00:52:41.109 --> 00:52:41.119 align:start position:0%
f gets
 

00:52:41.119 --> 00:52:42.790 align:start position:0%
f gets
parentheses

00:52:42.790 --> 00:52:42.800 align:start position:0%
parentheses
 

00:52:42.800 --> 00:52:44.630 align:start position:0%
parentheses
and<00:52:43.119><c> there</c><00:52:43.280><c> are</c><00:52:43.440><c> three</c><00:52:43.760><c> things</c><00:52:44.000><c> we</c><00:52:44.160><c> will</c><00:52:44.319><c> list</c>

00:52:44.630 --> 00:52:44.640 align:start position:0%
and there are three things we will list
 

00:52:44.640 --> 00:52:47.030 align:start position:0%
and there are three things we will list
within<00:52:45.119><c> the</c><00:52:45.359><c> fgets</c><00:52:45.920><c> function</c>

00:52:47.030 --> 00:52:47.040 align:start position:0%
within the fgets function
 

00:52:47.040 --> 00:52:49.349 align:start position:0%
within the fgets function
the<00:52:47.200><c> name</c><00:52:47.359><c> of</c><00:52:47.440><c> the</c><00:52:47.520><c> variable</c><00:52:48.400><c> and</c><00:52:48.640><c> we</c><00:52:48.800><c> do</c><00:52:48.960><c> not</c>

00:52:49.349 --> 00:52:49.359 align:start position:0%
the name of the variable and we do not
 

00:52:49.359 --> 00:52:51.190 align:start position:0%
the name of the variable and we do not
need<00:52:49.760><c> the</c><00:52:50.000><c> address</c><00:52:50.400><c> of</c><00:52:50.640><c> operator</c><00:52:51.040><c> that</c>

00:52:51.190 --> 00:52:51.200 align:start position:0%
need the address of operator that
 

00:52:51.200 --> 00:52:53.430 align:start position:0%
need the address of operator that
ampersand<00:52:51.839><c> for</c><00:52:52.079><c> this</c>

00:52:53.430 --> 00:52:53.440 align:start position:0%
ampersand for this
 

00:52:53.440 --> 00:52:55.990 align:start position:0%
ampersand for this
then<00:52:53.680><c> we</c><00:52:53.760><c> need</c><00:52:53.920><c> to</c><00:52:54.160><c> set</c><00:52:54.480><c> an</c><00:52:54.720><c> input</c><00:52:55.200><c> size</c><00:52:55.680><c> i</c><00:52:55.839><c> will</c>

00:52:55.990 --> 00:52:56.000 align:start position:0%
then we need to set an input size i will
 

00:52:56.000 --> 00:52:58.309 align:start position:0%
then we need to set an input size i will
set<00:52:56.160><c> this</c><00:52:56.319><c> to</c><00:52:56.559><c> 25</c><00:52:57.119><c> to</c><00:52:57.280><c> match</c><00:52:57.599><c> the</c><00:52:57.760><c> size</c><00:52:58.000><c> of</c><00:52:58.160><c> our</c>

00:52:58.309 --> 00:52:58.319 align:start position:0%
set this to 25 to match the size of our
 

00:52:58.319 --> 00:53:00.390 align:start position:0%
set this to 25 to match the size of our
array

00:53:00.390 --> 00:53:00.400 align:start position:0%
array
 

00:53:00.400 --> 00:53:03.510 align:start position:0%
array
and<00:53:00.559><c> then</c><00:53:00.960><c> std</c><00:53:01.920><c> in</c><00:53:02.160><c> which</c><00:53:02.480><c> means</c><00:53:02.960><c> standard</c>

00:53:03.510 --> 00:53:03.520 align:start position:0%
and then std in which means standard
 

00:53:03.520 --> 00:53:06.309 align:start position:0%
and then std in which means standard
input<00:53:04.319><c> so</c><00:53:04.559><c> using</c><00:53:05.040><c> this</c><00:53:05.280><c> function</c><00:53:05.760><c> we</c><00:53:05.920><c> can</c><00:53:06.079><c> read</c>

00:53:06.309 --> 00:53:06.319 align:start position:0%
input so using this function we can read
 

00:53:06.319 --> 00:53:08.069 align:start position:0%
input so using this function we can read
any<00:53:06.559><c> white</c><00:53:06.800><c> spaces</c>

00:53:08.069 --> 00:53:08.079 align:start position:0%
any white spaces
 

00:53:08.079 --> 00:53:10.230 align:start position:0%
any white spaces
what's<00:53:08.319><c> your</c><00:53:08.559><c> name</c><00:53:09.200><c> i'll</c><00:53:09.359><c> type</c><00:53:09.680><c> in</c><00:53:09.839><c> a</c><00:53:10.000><c> first</c>

00:53:10.230 --> 00:53:10.240 align:start position:0%
what's your name i'll type in a first
 

00:53:10.240 --> 00:53:12.069 align:start position:0%
what's your name i'll type in a first
name<00:53:10.480><c> and</c><00:53:10.640><c> a</c><00:53:10.720><c> last</c><00:53:11.040><c> name</c>

00:53:12.069 --> 00:53:12.079 align:start position:0%
name and a last name
 

00:53:12.079 --> 00:53:14.390 align:start position:0%
name and a last name
how<00:53:12.240><c> old</c><00:53:12.480><c> are</c><00:53:12.640><c> you</c><00:53:12.880><c> 21</c>

00:53:14.390 --> 00:53:14.400 align:start position:0%
how old are you 21
 

00:53:14.400 --> 00:53:16.390 align:start position:0%
how old are you 21
hello<00:53:14.800><c> bro</c><00:53:15.119><c> code</c><00:53:15.599><c> and</c><00:53:15.680><c> notice</c><00:53:16.000><c> that</c><00:53:16.160><c> our</c>

00:53:16.390 --> 00:53:16.400 align:start position:0%
hello bro code and notice that our
 

00:53:16.400 --> 00:53:18.069 align:start position:0%
hello bro code and notice that our
output<00:53:16.800><c> is</c><00:53:16.960><c> actually</c><00:53:17.280><c> being</c><00:53:17.520><c> displayed</c><00:53:18.000><c> on</c>

00:53:18.069 --> 00:53:18.079 align:start position:0%
output is actually being displayed on
 

00:53:18.079 --> 00:53:20.309 align:start position:0%
output is actually being displayed on
the<00:53:18.160><c> next</c><00:53:18.559><c> line</c><00:53:19.200><c> that's</c><00:53:19.520><c> because</c><00:53:20.000><c> when</c><00:53:20.240><c> you</c>

00:53:20.309 --> 00:53:20.319 align:start position:0%
the next line that's because when you
 

00:53:20.319 --> 00:53:23.430 align:start position:0%
the next line that's because when you
use<00:53:20.720><c> the</c><00:53:21.040><c> f</c><00:53:21.280><c> gets</c><00:53:21.599><c> function</c><00:53:22.480><c> it</c><00:53:22.720><c> will</c><00:53:23.040><c> include</c>

00:53:23.430 --> 00:53:23.440 align:start position:0%
use the f gets function it will include
 

00:53:23.440 --> 00:53:25.190 align:start position:0%
use the f gets function it will include
the<00:53:23.599><c> new</c><00:53:23.839><c> line</c><00:53:24.160><c> character</c><00:53:24.640><c> when</c><00:53:24.800><c> you</c><00:53:24.880><c> hit</c>

00:53:25.190 --> 00:53:25.200 align:start position:0%
the new line character when you hit
 

00:53:25.200 --> 00:53:27.030 align:start position:0%
the new line character when you hit
enter<00:53:25.760><c> if</c><00:53:25.839><c> you</c><00:53:26.000><c> need</c><00:53:26.160><c> to</c><00:53:26.240><c> get</c><00:53:26.400><c> rid</c><00:53:26.559><c> of</c><00:53:26.640><c> that</c><00:53:26.880><c> new</c>

00:53:27.030 --> 00:53:27.040 align:start position:0%
enter if you need to get rid of that new
 

00:53:27.040 --> 00:53:28.790 align:start position:0%
enter if you need to get rid of that new
line<00:53:27.280><c> character</c><00:53:27.680><c> at</c><00:53:27.839><c> the</c><00:53:28.000><c> end</c><00:53:28.240><c> so</c><00:53:28.400><c> that</c><00:53:28.640><c> it's</c>

00:53:28.790 --> 00:53:28.800 align:start position:0%
line character at the end so that it's
 

00:53:28.800 --> 00:53:30.630 align:start position:0%
line character at the end so that it's
not<00:53:29.040><c> included</c><00:53:29.440><c> with</c><00:53:29.599><c> your</c><00:53:29.760><c> input</c><00:53:30.240><c> here's</c><00:53:30.480><c> what</c>

00:53:30.630 --> 00:53:30.640 align:start position:0%
not included with your input here's what
 

00:53:30.640 --> 00:53:32.549 align:start position:0%
not included with your input here's what
we<00:53:30.720><c> can</c><00:53:30.880><c> do</c><00:53:31.119><c> it's</c><00:53:31.280><c> a</c><00:53:31.359><c> little</c><00:53:31.599><c> advanced</c><00:53:32.240><c> but</c>

00:53:32.549 --> 00:53:32.559 align:start position:0%
we can do it's a little advanced but
 

00:53:32.559 --> 00:53:34.630 align:start position:0%
we can do it's a little advanced but
we'll<00:53:32.720><c> cover</c><00:53:32.960><c> this</c><00:53:33.200><c> in</c><00:53:33.280><c> future</c><00:53:33.599><c> videos</c><00:53:34.319><c> we'll</c>

00:53:34.630 --> 00:53:34.640 align:start position:0%
we'll cover this in future videos we'll
 

00:53:34.640 --> 00:53:36.549 align:start position:0%
we'll cover this in future videos we'll
include<00:53:35.040><c> this</c><00:53:35.359><c> import</c>

00:53:36.549 --> 00:53:36.559 align:start position:0%
include this import
 

00:53:36.559 --> 00:53:38.470 align:start position:0%
include this import
include

00:53:38.470 --> 00:53:38.480 align:start position:0%
include
 

00:53:38.480 --> 00:53:41.030 align:start position:0%
include
string<00:53:39.440><c> dot</c><00:53:39.920><c> h</c>

00:53:41.030 --> 00:53:41.040 align:start position:0%
string dot h
 

00:53:41.040 --> 00:53:42.950 align:start position:0%
string dot h
so<00:53:41.280><c> using</c><00:53:41.599><c> this</c><00:53:41.839><c> import</c><00:53:42.240><c> we</c><00:53:42.400><c> can</c><00:53:42.480><c> work</c><00:53:42.720><c> with</c>

00:53:42.950 --> 00:53:42.960 align:start position:0%
so using this import we can work with
 

00:53:42.960 --> 00:53:45.030 align:start position:0%
so using this import we can work with
strings<00:53:43.599><c> all</c><00:53:43.760><c> we're</c><00:53:43.920><c> going</c><00:53:44.079><c> to</c><00:53:44.240><c> do</c><00:53:44.480><c> is</c><00:53:44.720><c> edit</c>

00:53:45.030 --> 00:53:45.040 align:start position:0%
strings all we're going to do is edit
 

00:53:45.040 --> 00:53:46.549 align:start position:0%
strings all we're going to do is edit
our<00:53:45.119><c> string</c><00:53:45.520><c> and</c><00:53:45.599><c> get</c><00:53:45.760><c> rid</c><00:53:45.920><c> of</c><00:53:46.000><c> that</c><00:53:46.160><c> newline</c>

00:53:46.549 --> 00:53:46.559 align:start position:0%
our string and get rid of that newline
 

00:53:46.559 --> 00:53:48.230 align:start position:0%
our string and get rid of that newline
character<00:53:46.960><c> at</c><00:53:47.119><c> the</c><00:53:47.200><c> end</c><00:53:47.520><c> what</c><00:53:47.760><c> i'm</c><00:53:47.839><c> about</c><00:53:48.079><c> to</c>

00:53:48.230 --> 00:53:48.240 align:start position:0%
character at the end what i'm about to
 

00:53:48.240 --> 00:53:49.829 align:start position:0%
character at the end what i'm about to
show<00:53:48.400><c> you</c><00:53:48.640><c> will</c><00:53:48.800><c> look</c><00:53:48.960><c> a</c><00:53:49.040><c> little</c><00:53:49.200><c> bit</c><00:53:49.440><c> advanced</c>

00:53:49.829 --> 00:53:49.839 align:start position:0%
show you will look a little bit advanced
 

00:53:49.839 --> 00:53:51.510 align:start position:0%
show you will look a little bit advanced
but<00:53:50.000><c> it's</c><00:53:50.160><c> going</c><00:53:50.319><c> to</c><00:53:50.480><c> make</c><00:53:50.720><c> more</c><00:53:50.960><c> sense</c><00:53:51.359><c> when</c>

00:53:51.510 --> 00:53:51.520 align:start position:0%
but it's going to make more sense when
 

00:53:51.520 --> 00:53:54.069 align:start position:0%
but it's going to make more sense when
we<00:53:51.680><c> get</c><00:53:51.839><c> to</c><00:53:52.000><c> the</c><00:53:52.160><c> video</c><00:53:52.640><c> on</c><00:53:52.800><c> string</c><00:53:53.200><c> functions</c>

00:53:54.069 --> 00:53:54.079 align:start position:0%
we get to the video on string functions
 

00:53:54.079 --> 00:53:55.910 align:start position:0%
we get to the video on string functions
type<00:53:54.319><c> the</c><00:53:54.480><c> name</c><00:53:54.640><c> of</c><00:53:54.720><c> the</c><00:53:54.880><c> variable</c><00:53:55.520><c> followed</c>

00:53:55.910 --> 00:53:55.920 align:start position:0%
type the name of the variable followed
 

00:53:55.920 --> 00:53:57.990 align:start position:0%
type the name of the variable followed
by<00:53:56.079><c> a</c><00:53:56.240><c> set</c><00:53:56.400><c> of</c><00:53:56.559><c> straight</c><00:53:56.880><c> brackets</c>

00:53:57.990 --> 00:53:58.000 align:start position:0%
by a set of straight brackets
 

00:53:58.000 --> 00:54:01.990 align:start position:0%
by a set of straight brackets
type<00:53:58.400><c> str</c><00:53:59.599><c> len</c><00:54:00.559><c> this</c><00:54:00.800><c> gets</c><00:54:01.200><c> the</c><00:54:01.440><c> length</c>

00:54:01.990 --> 00:54:02.000 align:start position:0%
type str len this gets the length
 

00:54:02.000 --> 00:54:04.549 align:start position:0%
type str len this gets the length
subtract<00:54:02.640><c> one</c><00:54:03.200><c> and</c><00:54:03.440><c> we</c><00:54:03.599><c> will</c><00:54:03.760><c> set</c><00:54:03.920><c> the</c><00:54:04.079><c> sequel</c>

00:54:04.549 --> 00:54:04.559 align:start position:0%
subtract one and we will set the sequel
 

00:54:04.559 --> 00:54:07.589 align:start position:0%
subtract one and we will set the sequel
to<00:54:05.200><c> backslash</c><00:54:06.079><c> zero</c><00:54:06.800><c> that</c><00:54:06.960><c> will</c><00:54:07.119><c> get</c><00:54:07.359><c> rid</c><00:54:07.520><c> of</c>

00:54:07.589 --> 00:54:07.599 align:start position:0%
to backslash zero that will get rid of
 

00:54:07.599 --> 00:54:09.670 align:start position:0%
to backslash zero that will get rid of
the<00:54:07.680><c> new</c><00:54:07.920><c> line</c><00:54:08.160><c> character</c><00:54:08.880><c> so</c><00:54:09.040><c> again</c><00:54:09.359><c> this</c><00:54:09.520><c> is</c>

00:54:09.670 --> 00:54:09.680 align:start position:0%
the new line character so again this is
 

00:54:09.680 --> 00:54:11.589 align:start position:0%
the new line character so again this is
a<00:54:09.760><c> little</c><00:54:10.000><c> bit</c><00:54:10.240><c> advanced</c><00:54:10.640><c> for</c><00:54:10.880><c> us</c><00:54:11.280><c> but</c><00:54:11.440><c> it'll</c>

00:54:11.589 --> 00:54:11.599 align:start position:0%
a little bit advanced for us but it'll
 

00:54:11.599 --> 00:54:13.589 align:start position:0%
a little bit advanced for us but it'll
make<00:54:11.839><c> more</c><00:54:12.079><c> sense</c><00:54:12.400><c> in</c><00:54:12.480><c> future</c><00:54:12.880><c> videos</c><00:54:13.280><c> when</c><00:54:13.440><c> we</c>

00:54:13.589 --> 00:54:13.599 align:start position:0%
make more sense in future videos when we
 

00:54:13.599 --> 00:54:15.990 align:start position:0%
make more sense in future videos when we
get<00:54:13.680><c> to</c><00:54:13.839><c> the</c><00:54:13.920><c> video</c><00:54:14.400><c> on</c><00:54:14.640><c> string</c><00:54:14.960><c> functions</c><00:54:15.760><c> and</c>

00:54:15.990 --> 00:54:16.000 align:start position:0%
get to the video on string functions and
 

00:54:16.000 --> 00:54:18.390 align:start position:0%
get to the video on string functions and
let's<00:54:16.240><c> try</c><00:54:16.480><c> this</c><00:54:16.640><c> one</c><00:54:16.800><c> last</c><00:54:17.040><c> time</c>

00:54:18.390 --> 00:54:18.400 align:start position:0%
let's try this one last time
 

00:54:18.400 --> 00:54:19.910 align:start position:0%
let's try this one last time
what's<00:54:18.720><c> your</c><00:54:18.960><c> name</c>

00:54:19.910 --> 00:54:19.920 align:start position:0%
what's your name
 

00:54:19.920 --> 00:54:22.069 align:start position:0%
what's your name
type<00:54:20.160><c> in</c><00:54:20.319><c> a</c><00:54:20.400><c> first</c><00:54:20.720><c> name</c><00:54:20.960><c> and</c><00:54:21.119><c> a</c><00:54:21.200><c> last</c><00:54:21.520><c> name</c><00:54:21.839><c> hit</c>

00:54:22.069 --> 00:54:22.079 align:start position:0%
type in a first name and a last name hit
 

00:54:22.079 --> 00:54:24.710 align:start position:0%
type in a first name and a last name hit
enter<00:54:22.800><c> how</c><00:54:22.960><c> old</c><00:54:23.200><c> are</c><00:54:23.359><c> you</c><00:54:23.599><c> 21.</c>

00:54:24.710 --> 00:54:24.720 align:start position:0%
enter how old are you 21.
 

00:54:24.720 --> 00:54:27.670 align:start position:0%
enter how old are you 21.
hello<00:54:25.040><c> bro</c><00:54:25.359><c> code</c><00:54:25.839><c> how</c><00:54:26.160><c> are</c><00:54:26.319><c> you</c><00:54:26.720><c> you</c><00:54:26.960><c> are</c><00:54:27.200><c> 21</c>

00:54:27.670 --> 00:54:27.680 align:start position:0%
hello bro code how are you you are 21
 

00:54:27.680 --> 00:54:30.309 align:start position:0%
hello bro code how are you you are 21
years<00:54:27.920><c> old</c><00:54:28.559><c> if</c><00:54:28.720><c> you</c><00:54:28.800><c> need</c><00:54:29.040><c> to</c><00:54:29.200><c> accept</c><00:54:29.760><c> a</c><00:54:30.000><c> string</c>

00:54:30.309 --> 00:54:30.319 align:start position:0%
years old if you need to accept a string
 

00:54:30.319 --> 00:54:32.710 align:start position:0%
years old if you need to accept a string
from<00:54:30.480><c> a</c><00:54:30.640><c> user</c><00:54:31.040><c> that</c><00:54:31.280><c> includes</c><00:54:31.680><c> white</c><00:54:31.920><c> spaces</c>

00:54:32.710 --> 00:54:32.720 align:start position:0%
from a user that includes white spaces
 

00:54:32.720 --> 00:54:34.870 align:start position:0%
from a user that includes white spaces
like<00:54:33.040><c> a</c><00:54:33.200><c> first</c><00:54:33.520><c> name</c><00:54:33.839><c> and</c><00:54:34.000><c> a</c><00:54:34.079><c> last</c><00:54:34.400><c> name</c><00:54:34.720><c> you'll</c>

00:54:34.870 --> 00:54:34.880 align:start position:0%
like a first name and a last name you'll
 

00:54:34.880 --> 00:54:37.670 align:start position:0%
like a first name and a last name you'll
want<00:54:35.119><c> to</c><00:54:35.280><c> use</c><00:54:35.680><c> fgets</c><00:54:36.319><c> in</c><00:54:36.480><c> place</c><00:54:36.880><c> of</c><00:54:37.119><c> scanf</c>

00:54:37.670 --> 00:54:37.680 align:start position:0%
want to use fgets in place of scanf
 

00:54:37.680 --> 00:54:39.430 align:start position:0%
want to use fgets in place of scanf
because<00:54:38.079><c> scanf</c><00:54:38.640><c> can't</c><00:54:38.799><c> read</c><00:54:39.040><c> those</c><00:54:39.200><c> white</c>

00:54:39.430 --> 00:54:39.440 align:start position:0%
because scanf can't read those white
 

00:54:39.440 --> 00:54:41.750 align:start position:0%
because scanf can't read those white
spaces<00:54:40.079><c> it</c><00:54:40.240><c> stops</c><00:54:40.640><c> right</c><00:54:40.880><c> there</c><00:54:41.200><c> but</c><00:54:41.440><c> it</c><00:54:41.520><c> will</c>

00:54:41.750 --> 00:54:41.760 align:start position:0%
spaces it stops right there but it will
 

00:54:41.760 --> 00:54:43.829 align:start position:0%
spaces it stops right there but it will
include<00:54:42.400><c> that</c><00:54:42.720><c> new</c><00:54:42.960><c> line</c><00:54:43.200><c> character</c><00:54:43.599><c> when</c><00:54:43.760><c> you</c>

00:54:43.829 --> 00:54:43.839 align:start position:0%
include that new line character when you
 

00:54:43.839 --> 00:54:45.030 align:start position:0%
include that new line character when you
hit<00:54:44.079><c> enter</c>

00:54:45.030 --> 00:54:45.040 align:start position:0%
hit enter
 

00:54:45.040 --> 00:54:47.190 align:start position:0%
hit enter
so<00:54:45.280><c> you</c><00:54:45.440><c> can</c><00:54:45.680><c> do</c><00:54:45.920><c> some</c><00:54:46.319><c> string</c><00:54:46.720><c> formatting</c>

00:54:47.190 --> 00:54:47.200 align:start position:0%
so you can do some string formatting
 

00:54:47.200 --> 00:54:48.470 align:start position:0%
so you can do some string formatting
just<00:54:47.359><c> to</c><00:54:47.520><c> get</c><00:54:47.680><c> rid</c><00:54:47.760><c> of</c><00:54:47.839><c> that</c><00:54:48.000><c> new</c><00:54:48.240><c> line</c>

00:54:48.470 --> 00:54:48.480 align:start position:0%
just to get rid of that new line
 

00:54:48.480 --> 00:54:50.390 align:start position:0%
just to get rid of that new line
character<00:54:49.040><c> and</c><00:54:49.119><c> like</c><00:54:49.359><c> i</c><00:54:49.520><c> said</c><00:54:49.839><c> this</c><00:54:50.079><c> statement</c>

00:54:50.390 --> 00:54:50.400 align:start position:0%
character and like i said this statement
 

00:54:50.400 --> 00:54:52.150 align:start position:0%
character and like i said this statement
here<00:54:50.640><c> will</c><00:54:50.799><c> make</c><00:54:51.040><c> more</c><00:54:51.280><c> sense</c><00:54:51.520><c> when</c><00:54:51.760><c> we</c><00:54:51.920><c> reach</c>

00:54:52.150 --> 00:54:52.160 align:start position:0%
here will make more sense when we reach
 

00:54:52.160 --> 00:54:54.470 align:start position:0%
here will make more sense when we reach
the<00:54:52.319><c> video</c><00:54:52.720><c> on</c><00:54:52.960><c> string</c><00:54:53.280><c> functions</c><00:54:53.839><c> but</c><00:54:54.160><c> yeah</c>

00:54:54.470 --> 00:54:54.480 align:start position:0%
the video on string functions but yeah
 

00:54:54.480 --> 00:54:56.309 align:start position:0%
the video on string functions but yeah
basically<00:54:54.960><c> that's</c><00:54:55.200><c> how</c><00:54:55.280><c> you</c><00:54:55.440><c> can</c><00:54:55.599><c> accept</c><00:54:56.000><c> user</c>

00:54:56.309 --> 00:54:56.319 align:start position:0%
basically that's how you can accept user
 

00:54:56.319 --> 00:54:59.109 align:start position:0%
basically that's how you can accept user
input<00:54:56.720><c> you</c><00:54:56.880><c> can</c><00:54:57.040><c> use</c><00:54:57.359><c> the</c><00:54:57.599><c> scanf</c><00:54:58.160><c> function</c><00:54:58.960><c> if</c>

00:54:59.109 --> 00:54:59.119 align:start position:0%
input you can use the scanf function if
 

00:54:59.119 --> 00:55:00.789 align:start position:0%
input you can use the scanf function if
you<00:54:59.200><c> need</c><00:54:59.440><c> to</c><00:54:59.680><c> accept</c><00:55:00.160><c> a</c><00:55:00.400><c> string</c><00:55:00.640><c> of</c>

00:55:00.789 --> 00:55:00.799 align:start position:0%
you need to accept a string of
 

00:55:00.799 --> 00:55:02.950 align:start position:0%
you need to accept a string of
characters<00:55:01.359><c> that</c><00:55:01.599><c> includes</c><00:55:01.920><c> white</c><00:55:02.160><c> spaces</c>

00:55:02.950 --> 00:55:02.960 align:start position:0%
characters that includes white spaces
 

00:55:02.960 --> 00:55:05.510 align:start position:0%
characters that includes white spaces
you'll<00:55:03.200><c> want</c><00:55:03.359><c> to</c><00:55:03.520><c> use</c><00:55:03.839><c> fgets</c><00:55:04.319><c> instead</c><00:55:04.960><c> so</c><00:55:05.280><c> yeah</c>

00:55:05.510 --> 00:55:05.520 align:start position:0%
you'll want to use fgets instead so yeah
 

00:55:05.520 --> 00:55:08.390 align:start position:0%
you'll want to use fgets instead so yeah
that's<00:55:05.760><c> how</c><00:55:06.000><c> to</c><00:55:06.160><c> accept</c><00:55:06.720><c> user</c><00:55:07.119><c> input</c><00:55:07.680><c> and</c><00:55:07.839><c> see</c>

00:55:08.390 --> 00:55:08.400 align:start position:0%
that's how to accept user input and see
 

00:55:08.400 --> 00:55:09.910 align:start position:0%
that's how to accept user input and see
if<00:55:08.559><c> you</c><00:55:08.640><c> found</c><00:55:08.880><c> this</c><00:55:09.040><c> video</c><00:55:09.200><c> helpful</c><00:55:09.680><c> please</c>

00:55:09.910 --> 00:55:09.920 align:start position:0%
if you found this video helpful please
 

00:55:09.920 --> 00:55:11.990 align:start position:0%
if you found this video helpful please
be<00:55:10.079><c> sure</c><00:55:10.400><c> to</c><00:55:10.720><c> smash</c><00:55:11.119><c> that</c><00:55:11.280><c> like</c><00:55:11.520><c> button</c><00:55:11.839><c> leave</c>

00:55:11.990 --> 00:55:12.000 align:start position:0%
be sure to smash that like button leave
 

00:55:12.000 --> 00:55:13.589 align:start position:0%
be sure to smash that like button leave
a<00:55:12.079><c> random</c><00:55:12.400><c> comment</c><00:55:12.720><c> down</c><00:55:12.880><c> below</c><00:55:13.359><c> and</c>

00:55:13.589 --> 00:55:13.599 align:start position:0%
a random comment down below and
 

00:55:13.599 --> 00:55:15.030 align:start position:0%
a random comment down below and
subscribe<00:55:14.160><c> if</c><00:55:14.240><c> you'd</c><00:55:14.400><c> like</c><00:55:14.559><c> to</c><00:55:14.720><c> become</c><00:55:14.960><c> a</c>

00:55:15.030 --> 00:55:15.040 align:start position:0%
subscribe if you'd like to become a
 

00:55:15.040 --> 00:55:17.910 align:start position:0%
subscribe if you'd like to become a
fellow<00:55:15.359><c> bro</c>

00:55:17.910 --> 00:55:17.920 align:start position:0%
 
 

00:55:17.920 --> 00:55:20.470 align:start position:0%
 
hey<00:55:18.559><c> what's</c><00:55:18.799><c> going</c><00:55:19.040><c> on</c><00:55:19.200><c> everybody</c><00:55:19.839><c> so</c><00:55:20.079><c> in</c><00:55:20.240><c> this</c>

00:55:20.470 --> 00:55:20.480 align:start position:0%
hey what's going on everybody so in this
 

00:55:20.480 --> 00:55:22.309 align:start position:0%
hey what's going on everybody so in this
video<00:55:20.799><c> i'm</c><00:55:20.880><c> gonna</c><00:55:21.119><c> show</c><00:55:21.280><c> you</c><00:55:21.599><c> some</c><00:55:21.839><c> useful</c>

00:55:22.309 --> 00:55:22.319 align:start position:0%
video i'm gonna show you some useful
 

00:55:22.319 --> 00:55:25.190 align:start position:0%
video i'm gonna show you some useful
math<00:55:22.640><c> functions</c><00:55:23.280><c> in</c><00:55:23.599><c> c</c><00:55:24.000><c> now</c><00:55:24.240><c> if</c><00:55:24.400><c> we</c><00:55:24.559><c> include</c>

00:55:25.190 --> 00:55:25.200 align:start position:0%
math functions in c now if we include
 

00:55:25.200 --> 00:55:27.510 align:start position:0%
math functions in c now if we include
this<00:55:25.520><c> math</c><00:55:25.760><c> header</c><00:55:26.160><c> file</c><00:55:26.640><c> this</c><00:55:26.880><c> contains</c><00:55:27.440><c> a</c>

00:55:27.510 --> 00:55:27.520 align:start position:0%
this math header file this contains a
 

00:55:27.520 --> 00:55:29.349 align:start position:0%
this math header file this contains a
lot<00:55:27.680><c> of</c><00:55:27.760><c> the</c><00:55:27.839><c> useful</c><00:55:28.319><c> functions</c><00:55:28.799><c> i'm</c><00:55:28.960><c> about</c><00:55:29.200><c> to</c>

00:55:29.349 --> 00:55:29.359 align:start position:0%
lot of the useful functions i'm about to
 

00:55:29.359 --> 00:55:31.670 align:start position:0%
lot of the useful functions i'm about to
show<00:55:29.599><c> you</c><00:55:29.920><c> one</c><00:55:30.160><c> useful</c><00:55:30.559><c> function</c><00:55:31.200><c> is</c><00:55:31.440><c> the</c>

00:55:31.670 --> 00:55:31.680 align:start position:0%
show you one useful function is the
 

00:55:31.680 --> 00:55:33.670 align:start position:0%
show you one useful function is the
square<00:55:32.079><c> root</c><00:55:32.400><c> function</c><00:55:32.960><c> let's</c><00:55:33.200><c> say</c><00:55:33.359><c> that</c><00:55:33.520><c> we</c>

00:55:33.670 --> 00:55:33.680 align:start position:0%
square root function let's say that we
 

00:55:33.680 --> 00:55:35.510 align:start position:0%
square root function let's say that we
have<00:55:34.000><c> a</c><00:55:34.160><c> bunch</c><00:55:34.400><c> of</c><00:55:34.480><c> variables</c><00:55:35.040><c> we</c><00:55:35.200><c> declared</c>

00:55:35.510 --> 00:55:35.520 align:start position:0%
have a bunch of variables we declared
 

00:55:35.520 --> 00:55:37.510 align:start position:0%
have a bunch of variables we declared
them<00:55:35.760><c> but</c><00:55:35.920><c> we</c><00:55:36.079><c> have</c><00:55:36.160><c> not</c><00:55:36.319><c> yet</c><00:55:36.559><c> assigned</c><00:55:36.880><c> them</c><00:55:37.359><c> i</c>

00:55:37.510 --> 00:55:37.520 align:start position:0%
them but we have not yet assigned them i
 

00:55:37.520 --> 00:55:40.950 align:start position:0%
them but we have not yet assigned them i
will<00:55:37.760><c> assign</c><00:55:38.400><c> a</c><00:55:38.799><c> the</c><00:55:39.200><c> square</c><00:55:39.599><c> root</c><00:55:39.920><c> of</c><00:55:40.240><c> nine</c><00:55:40.720><c> so</c>

00:55:40.950 --> 00:55:40.960 align:start position:0%
will assign a the square root of nine so
 

00:55:40.960 --> 00:55:43.750 align:start position:0%
will assign a the square root of nine so
after<00:55:41.280><c> including</c><00:55:41.920><c> this</c><00:55:42.240><c> math</c><00:55:42.640><c> header</c><00:55:42.960><c> file</c><00:55:43.599><c> i</c>

00:55:43.750 --> 00:55:43.760 align:start position:0%
after including this math header file i
 

00:55:43.760 --> 00:55:46.950 align:start position:0%
after including this math header file i
have<00:55:44.000><c> access</c><00:55:44.559><c> to</c><00:55:44.880><c> a</c><00:55:45.119><c> square</c><00:55:45.520><c> root</c><00:55:45.839><c> function</c>

00:55:46.950 --> 00:55:46.960 align:start position:0%
have access to a square root function
 

00:55:46.960 --> 00:55:49.670 align:start position:0%
have access to a square root function
so<00:55:47.200><c> type</c><00:55:47.799><c> sqrt</c><00:55:48.960><c> then</c><00:55:49.200><c> add</c><00:55:49.280><c> a</c><00:55:49.359><c> set</c><00:55:49.599><c> of</c>

00:55:49.670 --> 00:55:49.680 align:start position:0%
so type sqrt then add a set of
 

00:55:49.680 --> 00:55:51.670 align:start position:0%
so type sqrt then add a set of
parentheses<00:55:50.400><c> and</c><00:55:50.640><c> within</c><00:55:50.960><c> the</c><00:55:51.040><c> parentheses</c>

00:55:51.670 --> 00:55:51.680 align:start position:0%
parentheses and within the parentheses
 

00:55:51.680 --> 00:55:53.910 align:start position:0%
parentheses and within the parentheses
we<00:55:51.839><c> can</c><00:55:52.000><c> find</c><00:55:52.319><c> the</c><00:55:52.480><c> square</c><00:55:52.720><c> root</c><00:55:52.960><c> of</c><00:55:53.040><c> a</c><00:55:53.119><c> number</c>

00:55:53.910 --> 00:55:53.920 align:start position:0%
we can find the square root of a number
 

00:55:53.920 --> 00:55:55.670 align:start position:0%
we can find the square root of a number
let's<00:55:54.160><c> find</c><00:55:54.400><c> what</c><00:55:54.559><c> the</c><00:55:54.640><c> square</c><00:55:54.960><c> root</c><00:55:55.200><c> of</c><00:55:55.359><c> nine</c>

00:55:55.670 --> 00:55:55.680 align:start position:0%
let's find what the square root of nine
 

00:55:55.680 --> 00:55:57.750 align:start position:0%
let's find what the square root of nine
is<00:55:55.920><c> and</c><00:55:56.079><c> then</c><00:55:56.240><c> display</c><00:55:56.640><c> it</c><00:55:56.799><c> with</c><00:55:57.040><c> a</c><00:55:57.200><c> printf</c>

00:55:57.750 --> 00:55:57.760 align:start position:0%
is and then display it with a printf
 

00:55:57.760 --> 00:55:59.270 align:start position:0%
is and then display it with a printf
statement

00:55:59.270 --> 00:55:59.280 align:start position:0%
statement
 

00:55:59.280 --> 00:56:02.150 align:start position:0%
statement
so<00:55:59.520><c> the</c><00:55:59.599><c> square</c><00:55:59.920><c> root</c><00:56:00.160><c> of</c><00:56:00.319><c> nine</c><00:56:00.880><c> is</c><00:56:01.119><c> three</c><00:56:02.000><c> so</c>

00:56:02.150 --> 00:56:02.160 align:start position:0%
so the square root of nine is three so
 

00:56:02.160 --> 00:56:04.390 align:start position:0%
so the square root of nine is three so
let's<00:56:02.400><c> move</c><00:56:02.640><c> on</c><00:56:02.960><c> we</c><00:56:03.119><c> can</c><00:56:03.359><c> raise</c><00:56:03.680><c> a</c><00:56:03.920><c> base</c><00:56:04.160><c> to</c><00:56:04.319><c> a</c>

00:56:04.390 --> 00:56:04.400 align:start position:0%
let's move on we can raise a base to a
 

00:56:04.400 --> 00:56:07.589 align:start position:0%
let's move on we can raise a base to a
given<00:56:04.720><c> power</c><00:56:05.040><c> by</c><00:56:05.280><c> using</c><00:56:05.599><c> the</c><00:56:05.920><c> pow</c><00:56:06.240><c> function</c>

00:56:07.589 --> 00:56:07.599 align:start position:0%
given power by using the pow function
 

00:56:07.599 --> 00:56:10.069 align:start position:0%
given power by using the pow function
the<00:56:07.760><c> first</c><00:56:08.000><c> number</c><00:56:08.319><c> is</c><00:56:08.480><c> the</c><00:56:08.559><c> base</c><00:56:09.119><c> let's</c><00:56:09.440><c> raise</c>

00:56:10.069 --> 00:56:10.079 align:start position:0%
the first number is the base let's raise
 

00:56:10.079 --> 00:56:12.150 align:start position:0%
the first number is the base let's raise
two<00:56:10.319><c> to</c><00:56:10.480><c> the</c><00:56:10.640><c> power</c><00:56:11.119><c> of</c><00:56:11.440><c> four</c><00:56:11.920><c> and</c><00:56:12.000><c> then</c>

00:56:12.150 --> 00:56:12.160 align:start position:0%
two to the power of four and then
 

00:56:12.160 --> 00:56:13.589 align:start position:0%
two to the power of four and then
display<00:56:12.640><c> it</c>

00:56:13.589 --> 00:56:13.599 align:start position:0%
display it
 

00:56:13.599 --> 00:56:16.230 align:start position:0%
display it
two<00:56:13.839><c> to</c><00:56:14.000><c> the</c><00:56:14.079><c> power</c><00:56:14.400><c> of</c><00:56:14.559><c> four</c><00:56:15.040><c> is</c><00:56:15.280><c> 16.</c><00:56:15.920><c> we</c><00:56:16.079><c> can</c>

00:56:16.230 --> 00:56:16.240 align:start position:0%
two to the power of four is 16. we can
 

00:56:16.240 --> 00:56:18.150 align:start position:0%
two to the power of four is 16. we can
round<00:56:16.480><c> a</c><00:56:16.640><c> number</c><00:56:17.280><c> and</c><00:56:17.440><c> i</c><00:56:17.520><c> will</c><00:56:17.680><c> store</c><00:56:18.000><c> this</c>

00:56:18.150 --> 00:56:18.160 align:start position:0%
round a number and i will store this
 

00:56:18.160 --> 00:56:19.990 align:start position:0%
round a number and i will store this
within<00:56:18.559><c> an</c><00:56:18.720><c> integer</c>

00:56:19.990 --> 00:56:20.000 align:start position:0%
within an integer
 

00:56:20.000 --> 00:56:21.390 align:start position:0%
within an integer
let's<00:56:20.400><c> round</c>

00:56:21.390 --> 00:56:21.400 align:start position:0%
let's round
 

00:56:21.400 --> 00:56:23.109 align:start position:0%
let's round
3.14

00:56:23.109 --> 00:56:23.119 align:start position:0%
3.14
 

00:56:23.119 --> 00:56:24.950 align:start position:0%
3.14
oh<00:56:23.359><c> and</c><00:56:23.440><c> then</c><00:56:23.839><c> make</c><00:56:24.000><c> sure</c><00:56:24.240><c> you</c><00:56:24.480><c> use</c><00:56:24.799><c> the</c>

00:56:24.950 --> 00:56:24.960 align:start position:0%
oh and then make sure you use the
 

00:56:24.960 --> 00:56:29.030 align:start position:0%
oh and then make sure you use the
appropriate<00:56:25.520><c> format</c><00:56:25.920><c> specifier</c><00:56:26.720><c> for</c><00:56:26.960><c> ins</c>

00:56:29.030 --> 00:56:29.040 align:start position:0%
appropriate format specifier for ins
 

00:56:29.040 --> 00:56:33.030 align:start position:0%
appropriate format specifier for ins
3.14<00:56:30.000><c> rounded</c><00:56:30.640><c> is</c><00:56:30.880><c> 3.</c>

00:56:33.030 --> 00:56:33.040 align:start position:0%
3.14 rounded is 3.
 

00:56:33.040 --> 00:56:35.430 align:start position:0%
3.14 rounded is 3.
now<00:56:33.200><c> by</c><00:56:33.440><c> using</c><00:56:33.760><c> the</c><00:56:34.079><c> seal</c><00:56:34.640><c> short</c><00:56:34.880><c> for</c><00:56:35.119><c> ceiling</c>

00:56:35.430 --> 00:56:35.440 align:start position:0%
now by using the seal short for ceiling
 

00:56:35.440 --> 00:56:39.789 align:start position:0%
now by using the seal short for ceiling
function<00:56:35.839><c> we</c><00:56:36.000><c> can</c><00:56:36.160><c> always</c><00:56:36.559><c> round</c><00:56:36.880><c> a</c><00:56:36.960><c> number</c><00:56:37.359><c> up</c>

00:56:39.789 --> 00:56:39.799 align:start position:0%
 
 

00:56:39.799 --> 00:56:43.589 align:start position:0%
 
3.14<00:56:40.880><c> rounded</c><00:56:41.359><c> up</c><00:56:41.680><c> is</c><00:56:42.000><c> 4.</c>

00:56:43.589 --> 00:56:43.599 align:start position:0%
3.14 rounded up is 4.
 

00:56:43.599 --> 00:56:46.069 align:start position:0%
3.14 rounded up is 4.
likewise<00:56:44.400><c> there's</c><00:56:44.799><c> a</c><00:56:44.960><c> floor</c><00:56:45.359><c> function</c><00:56:45.839><c> where</c>

00:56:46.069 --> 00:56:46.079 align:start position:0%
likewise there's a floor function where
 

00:56:46.079 --> 00:56:48.910 align:start position:0%
likewise there's a floor function where
we<00:56:46.240><c> will</c><00:56:46.559><c> always</c><00:56:47.040><c> round</c><00:56:47.599><c> down</c>

00:56:48.910 --> 00:56:48.920 align:start position:0%
we will always round down
 

00:56:48.920 --> 00:56:52.230 align:start position:0%
we will always round down
3.99<00:56:50.079><c> rounded</c><00:56:50.480><c> down</c>

00:56:52.230 --> 00:56:52.240 align:start position:0%
3.99 rounded down
 

00:56:52.240 --> 00:56:54.069 align:start position:0%
3.99 rounded down
is

00:56:54.069 --> 00:56:54.079 align:start position:0%
is
 

00:56:54.079 --> 00:56:57.109 align:start position:0%
is
3.<00:56:54.960><c> we</c><00:56:55.119><c> can</c><00:56:55.359><c> find</c><00:56:55.760><c> the</c><00:56:56.000><c> absolute</c><00:56:56.559><c> value</c><00:56:56.960><c> of</c><00:56:57.040><c> a</c>

00:56:57.109 --> 00:56:57.119 align:start position:0%
3. we can find the absolute value of a
 

00:56:57.119 --> 00:56:59.510 align:start position:0%
3. we can find the absolute value of a
number<00:56:57.599><c> that's</c><00:56:57.839><c> how</c><00:56:58.079><c> far</c><00:56:58.480><c> a</c><00:56:58.720><c> number</c><00:56:59.040><c> is</c><00:56:59.280><c> away</c>

00:56:59.510 --> 00:56:59.520 align:start position:0%
number that's how far a number is away
 

00:56:59.520 --> 00:57:00.630 align:start position:0%
number that's how far a number is away
from<00:56:59.760><c> zero</c>

00:57:00.630 --> 00:57:00.640 align:start position:0%
from zero
 

00:57:00.640 --> 00:57:02.549 align:start position:0%
from zero
so<00:57:00.880><c> it</c><00:57:00.960><c> will</c><00:57:01.200><c> take</c><00:57:01.440><c> any</c><00:57:01.599><c> negative</c><00:57:02.000><c> numbers</c><00:57:02.400><c> and</c>

00:57:02.549 --> 00:57:02.559 align:start position:0%
so it will take any negative numbers and
 

00:57:02.559 --> 00:57:05.349 align:start position:0%
so it will take any negative numbers and
make<00:57:02.720><c> them</c><00:57:02.960><c> positive</c><00:57:03.920><c> the</c><00:57:04.079><c> absolute</c><00:57:04.640><c> value</c><00:57:05.119><c> of</c>

00:57:05.349 --> 00:57:05.359 align:start position:0%
make them positive the absolute value of
 

00:57:05.359 --> 00:57:08.630 align:start position:0%
make them positive the absolute value of
negative<00:57:05.760><c> 100</c>

00:57:08.630 --> 00:57:08.640 align:start position:0%
 
 

00:57:08.640 --> 00:57:11.190 align:start position:0%
 
and<00:57:08.720><c> that</c><00:57:08.880><c> would</c><00:57:09.040><c> be</c><00:57:09.359><c> positive</c><00:57:10.000><c> 100</c><00:57:10.880><c> if</c><00:57:11.040><c> you're</c>

00:57:11.190 --> 00:57:11.200 align:start position:0%
and that would be positive 100 if you're
 

00:57:11.200 --> 00:57:13.990 align:start position:0%
and that would be positive 100 if you're
familiar<00:57:11.680><c> with</c><00:57:11.920><c> logarithms</c><00:57:12.799><c> we</c><00:57:12.960><c> can</c><00:57:13.200><c> find</c><00:57:13.680><c> the</c>

00:57:13.990 --> 00:57:14.000 align:start position:0%
familiar with logarithms we can find the
 

00:57:14.000 --> 00:57:16.789 align:start position:0%
familiar with logarithms we can find the
logarithm<00:57:14.480><c> of</c><00:57:14.640><c> a</c><00:57:14.720><c> number</c>

00:57:16.789 --> 00:57:16.799 align:start position:0%
logarithm of a number
 

00:57:16.799 --> 00:57:18.150 align:start position:0%
logarithm of a number
log<00:57:17.280><c> 3</c>

00:57:18.150 --> 00:57:18.160 align:start position:0%
log 3
 

00:57:18.160 --> 00:57:19.190 align:start position:0%
log 3
is

00:57:19.190 --> 00:57:19.200 align:start position:0%
is
 

00:57:19.200 --> 00:57:21.750 align:start position:0%
is
1.098612

00:57:21.750 --> 00:57:21.760 align:start position:0%
1.098612
 

00:57:21.760 --> 00:57:23.510 align:start position:0%
1.098612
and<00:57:21.920><c> if</c><00:57:22.000><c> you</c><00:57:22.160><c> know</c><00:57:22.319><c> some</c><00:57:22.480><c> trigonometry</c>

00:57:23.510 --> 00:57:23.520 align:start position:0%
and if you know some trigonometry
 

00:57:23.520 --> 00:57:27.430 align:start position:0%
and if you know some trigonometry
there's<00:57:24.000><c> various</c><00:57:24.400><c> functions</c><00:57:24.960><c> for</c><00:57:25.359><c> sine</c>

00:57:27.430 --> 00:57:27.440 align:start position:0%
there's various functions for sine
 

00:57:27.440 --> 00:57:29.190 align:start position:0%
there's various functions for sine
cosine

00:57:29.190 --> 00:57:29.200 align:start position:0%
cosine
 

00:57:29.200 --> 00:57:31.589 align:start position:0%
cosine
and<00:57:29.599><c> tangent</c>

00:57:31.589 --> 00:57:31.599 align:start position:0%
and tangent
 

00:57:31.599 --> 00:57:35.829 align:start position:0%
and tangent
so<00:57:31.760><c> what's</c><00:57:32.000><c> the</c><00:57:32.240><c> tangent</c><00:57:32.720><c> of</c><00:57:33.040><c> 45</c>

00:57:35.829 --> 00:57:35.839 align:start position:0%
 
 

00:57:35.839 --> 00:57:38.829 align:start position:0%
 
that<00:57:36.079><c> is</c><00:57:36.240><c> supposedly</c><00:57:36.880><c> this</c><00:57:37.119><c> number</c>

00:57:38.829 --> 00:57:38.839 align:start position:0%
that is supposedly this number
 

00:57:38.839 --> 00:57:41.589 align:start position:0%
that is supposedly this number
1.619775<00:57:39.920><c> so</c><00:57:40.160><c> yeah</c><00:57:40.400><c> everybody</c><00:57:40.880><c> those</c><00:57:41.280><c> are</c><00:57:41.440><c> a</c>

00:57:41.589 --> 00:57:41.599 align:start position:0%
1.619775 so yeah everybody those are a
 

00:57:41.599 --> 00:57:43.750 align:start position:0%
1.619775 so yeah everybody those are a
few<00:57:42.000><c> math</c><00:57:42.319><c> functions</c><00:57:42.960><c> that</c><00:57:43.119><c> you</c><00:57:43.359><c> might</c><00:57:43.599><c> be</c>

00:57:43.750 --> 00:57:43.760 align:start position:0%
few math functions that you might be
 

00:57:43.760 --> 00:57:46.230 align:start position:0%
few math functions that you might be
interested<00:57:44.240><c> in</c><00:57:44.640><c> to</c><00:57:44.880><c> use</c><00:57:45.119><c> these</c><00:57:45.440><c> just</c><00:57:45.760><c> include</c>

00:57:46.230 --> 00:57:46.240 align:start position:0%
interested in to use these just include
 

00:57:46.240 --> 00:57:49.430 align:start position:0%
interested in to use these just include
this<00:57:46.480><c> header</c><00:57:46.720><c> file</c><00:57:47.119><c> at</c><00:57:47.280><c> the</c><00:57:47.440><c> top</c><00:57:48.160><c> math.h</c><00:57:49.280><c> if</c>

00:57:49.430 --> 00:57:49.440 align:start position:0%
this header file at the top math.h if
 

00:57:49.440 --> 00:57:50.870 align:start position:0%
this header file at the top math.h if
you<00:57:49.520><c> found</c><00:57:49.760><c> this</c><00:57:49.839><c> video</c><00:57:50.079><c> helpful</c><00:57:50.480><c> please</c><00:57:50.720><c> be</c>

00:57:50.870 --> 00:57:50.880 align:start position:0%
you found this video helpful please be
 

00:57:50.880 --> 00:57:52.870 align:start position:0%
you found this video helpful please be
sure<00:57:51.200><c> to</c><00:57:51.520><c> smash</c><00:57:51.920><c> that</c><00:57:52.079><c> like</c><00:57:52.240><c> button</c><00:57:52.640><c> leave</c><00:57:52.799><c> a</c>

00:57:52.870 --> 00:57:52.880 align:start position:0%
sure to smash that like button leave a
 

00:57:52.880 --> 00:57:54.950 align:start position:0%
sure to smash that like button leave a
random<00:57:53.200><c> comment</c><00:57:53.520><c> down</c><00:57:53.680><c> below</c><00:57:54.160><c> and</c><00:57:54.480><c> subscribe</c>

00:57:54.950 --> 00:57:54.960 align:start position:0%
random comment down below and subscribe
 

00:57:54.960 --> 00:57:59.109 align:start position:0%
random comment down below and subscribe
if<00:57:55.119><c> you'd</c><00:57:55.280><c> like</c><00:57:55.440><c> to</c><00:57:55.520><c> become</c><00:57:55.839><c> a</c><00:57:55.920><c> fellow</c><00:57:56.240><c> bro</c>

00:57:59.109 --> 00:57:59.119 align:start position:0%
 
 

00:57:59.119 --> 00:58:01.430 align:start position:0%
 
hey<00:57:59.359><c> everyone</c><00:57:59.920><c> here's</c><00:58:00.319><c> a</c><00:58:00.559><c> quick</c><00:58:00.880><c> program</c><00:58:01.359><c> that</c>

00:58:01.430 --> 00:58:01.440 align:start position:0%
hey everyone here's a quick program that
 

00:58:01.440 --> 00:58:02.950 align:start position:0%
hey everyone here's a quick program that
we<00:58:01.599><c> can</c><00:58:01.680><c> make</c><00:58:02.000><c> to</c><00:58:02.240><c> calculate</c><00:58:02.799><c> the</c>

00:58:02.950 --> 00:58:02.960 align:start position:0%
we can make to calculate the
 

00:58:02.960 --> 00:58:04.710 align:start position:0%
we can make to calculate the
circumference<00:58:03.599><c> of</c><00:58:03.680><c> a</c><00:58:03.760><c> circle</c><00:58:04.240><c> i</c><00:58:04.319><c> thought</c><00:58:04.480><c> this</c>

00:58:04.710 --> 00:58:04.720 align:start position:0%
circumference of a circle i thought this
 

00:58:04.720 --> 00:58:06.390 align:start position:0%
circumference of a circle i thought this
would<00:58:04.799><c> be</c><00:58:04.960><c> good</c><00:58:05.200><c> practice</c><00:58:05.599><c> for</c><00:58:05.839><c> us</c><00:58:06.079><c> now</c><00:58:06.240><c> that</c>

00:58:06.390 --> 00:58:06.400 align:start position:0%
would be good practice for us now that
 

00:58:06.400 --> 00:58:08.470 align:start position:0%
would be good practice for us now that
we<00:58:06.480><c> know</c><00:58:06.640><c> how</c><00:58:06.880><c> user</c><00:58:07.280><c> input</c><00:58:07.520><c> works</c><00:58:08.240><c> let's</c>

00:58:08.470 --> 00:58:08.480 align:start position:0%
we know how user input works let's
 

00:58:08.480 --> 00:58:10.150 align:start position:0%
we know how user input works let's
declare<00:58:08.960><c> all</c><00:58:09.119><c> of</c><00:58:09.200><c> the</c><00:58:09.359><c> variables</c><00:58:09.839><c> that</c><00:58:10.000><c> we'll</c>

00:58:10.150 --> 00:58:10.160 align:start position:0%
declare all of the variables that we'll
 

00:58:10.160 --> 00:58:12.789 align:start position:0%
declare all of the variables that we'll
need<00:58:10.960><c> i'm</c><00:58:11.119><c> going</c><00:58:11.359><c> to</c><00:58:11.440><c> create</c><00:58:11.839><c> a</c><00:58:12.079><c> constant</c>

00:58:12.789 --> 00:58:12.799 align:start position:0%
need i'm going to create a constant
 

00:58:12.799 --> 00:58:14.710 align:start position:0%
need i'm going to create a constant
variable<00:58:13.280><c> named</c><00:58:13.760><c> pi</c><00:58:14.079><c> and</c><00:58:14.160><c> it's</c><00:58:14.319><c> going</c><00:58:14.480><c> to</c><00:58:14.559><c> be</c>

00:58:14.710 --> 00:58:14.720 align:start position:0%
variable named pi and it's going to be
 

00:58:14.720 --> 00:58:16.950 align:start position:0%
variable named pi and it's going to be
of<00:58:14.799><c> the</c><00:58:14.880><c> double</c><00:58:15.200><c> data</c><00:58:15.520><c> type</c><00:58:16.079><c> pi</c><00:58:16.480><c> equals</c>

00:58:16.950 --> 00:58:16.960 align:start position:0%
of the double data type pi equals
 

00:58:16.960 --> 00:58:19.910 align:start position:0%
of the double data type pi equals
3.14159

00:58:19.910 --> 00:58:19.920 align:start position:0%
3.14159
 

00:58:19.920 --> 00:58:21.109 align:start position:0%
3.14159
the<00:58:20.079><c> reason</c><00:58:20.400><c> that</c><00:58:20.559><c> i'm</c><00:58:20.640><c> making</c><00:58:20.880><c> this</c><00:58:21.040><c> a</c>

00:58:21.109 --> 00:58:21.119 align:start position:0%
the reason that i'm making this a
 

00:58:21.119 --> 00:58:23.030 align:start position:0%
the reason that i'm making this a
constant<00:58:21.760><c> is</c><00:58:21.920><c> that</c><00:58:22.160><c> i</c><00:58:22.240><c> don't</c><00:58:22.400><c> want</c><00:58:22.640><c> anybody</c>

00:58:23.030 --> 00:58:23.040 align:start position:0%
constant is that i don't want anybody
 

00:58:23.040 --> 00:58:25.190 align:start position:0%
constant is that i don't want anybody
else<00:58:23.280><c> to</c><00:58:23.440><c> be</c><00:58:23.599><c> able</c><00:58:23.839><c> to</c><00:58:24.160><c> change</c><00:58:24.559><c> the</c><00:58:24.720><c> value</c><00:58:25.040><c> of</c>

00:58:25.190 --> 00:58:25.200 align:start position:0%
else to be able to change the value of
 

00:58:25.200 --> 00:58:28.150 align:start position:0%
else to be able to change the value of
pi<00:58:25.839><c> and</c><00:58:26.160><c> let's</c><00:58:26.480><c> declare</c><00:58:26.960><c> but</c><00:58:27.119><c> not</c><00:58:27.359><c> assign</c><00:58:28.000><c> a</c>

00:58:28.150 --> 00:58:28.160 align:start position:0%
pi and let's declare but not assign a
 

00:58:28.160 --> 00:58:29.910 align:start position:0%
pi and let's declare but not assign a
radius<00:58:28.640><c> quite</c><00:58:28.799><c> yet</c><00:58:29.119><c> we'll</c><00:58:29.280><c> have</c><00:58:29.440><c> the</c><00:58:29.599><c> user</c>

00:58:29.910 --> 00:58:29.920 align:start position:0%
radius quite yet we'll have the user
 

00:58:29.920 --> 00:58:31.430 align:start position:0%
radius quite yet we'll have the user
type<00:58:30.079><c> that</c><00:58:30.319><c> in</c>

00:58:31.430 --> 00:58:31.440 align:start position:0%
type that in
 

00:58:31.440 --> 00:58:34.069 align:start position:0%
type that in
and<00:58:32.079><c> double</c><00:58:32.559><c> circumference</c>

00:58:34.069 --> 00:58:34.079 align:start position:0%
and double circumference
 

00:58:34.079 --> 00:58:36.390 align:start position:0%
and double circumference
this<00:58:34.319><c> will</c><00:58:34.480><c> be</c><00:58:34.720><c> calculated</c><00:58:35.359><c> and</c><00:58:35.599><c> displayed</c><00:58:36.240><c> so</c>

00:58:36.390 --> 00:58:36.400 align:start position:0%
this will be calculated and displayed so
 

00:58:36.400 --> 00:58:38.549 align:start position:0%
this will be calculated and displayed so
we<00:58:36.559><c> will</c><00:58:36.720><c> need</c><00:58:36.880><c> to</c><00:58:37.119><c> prompt</c><00:58:37.440><c> the</c><00:58:37.599><c> user</c><00:58:38.000><c> to</c><00:58:38.240><c> enter</c>

00:58:38.549 --> 00:58:38.559 align:start position:0%
we will need to prompt the user to enter
 

00:58:38.559 --> 00:58:41.510 align:start position:0%
we will need to prompt the user to enter
in<00:58:38.799><c> a</c><00:58:38.960><c> radius</c><00:58:39.760><c> i'll</c><00:58:39.920><c> proceed</c><00:58:40.559><c> this</c><00:58:40.799><c> with</c><00:58:41.040><c> a</c><00:58:41.200><c> new</c>

00:58:41.510 --> 00:58:41.520 align:start position:0%
in a radius i'll proceed this with a new
 

00:58:41.520 --> 00:58:42.950 align:start position:0%
in a radius i'll proceed this with a new
line

00:58:42.950 --> 00:58:42.960 align:start position:0%
line
 

00:58:42.960 --> 00:58:44.069 align:start position:0%
line
enter

00:58:44.069 --> 00:58:44.079 align:start position:0%
enter
 

00:58:44.079 --> 00:58:45.349 align:start position:0%
enter
radius

00:58:45.349 --> 00:58:45.359 align:start position:0%
radius
 

00:58:45.359 --> 00:58:48.870 align:start position:0%
radius
of<00:58:45.839><c> a</c><00:58:46.319><c> circle</c><00:58:47.040><c> and</c><00:58:47.200><c> then</c><00:58:47.359><c> i</c><00:58:47.520><c> will</c><00:58:47.760><c> use</c><00:58:48.079><c> scanf</c><00:58:48.640><c> to</c>

00:58:48.870 --> 00:58:48.880 align:start position:0%
of a circle and then i will use scanf to
 

00:58:48.880 --> 00:58:51.510 align:start position:0%
of a circle and then i will use scanf to
accept<00:58:49.280><c> some</c><00:58:49.520><c> user</c><00:58:49.839><c> input</c><00:58:50.480><c> we</c><00:58:50.640><c> need</c><00:58:50.880><c> to</c><00:58:51.040><c> list</c>

00:58:51.510 --> 00:58:51.520 align:start position:0%
accept some user input we need to list
 

00:58:51.520 --> 00:58:54.789 align:start position:0%
accept some user input we need to list
the<00:58:51.839><c> format</c><00:58:52.240><c> specifier</c><00:58:53.040><c> of</c><00:58:53.200><c> doubles</c><00:58:53.839><c> which</c><00:58:54.160><c> is</c>

00:58:54.789 --> 00:58:54.799 align:start position:0%
the format specifier of doubles which is
 

00:58:54.799 --> 00:58:57.910 align:start position:0%
the format specifier of doubles which is
lf<00:58:55.599><c> comma</c><00:58:56.319><c> address</c><00:58:56.720><c> of</c><00:58:56.880><c> operator</c>

00:58:57.910 --> 00:58:57.920 align:start position:0%
lf comma address of operator
 

00:58:57.920 --> 00:59:00.069 align:start position:0%
lf comma address of operator
radius

00:59:00.069 --> 00:59:00.079 align:start position:0%
radius
 

00:59:00.079 --> 00:59:03.990 align:start position:0%
radius
then<00:59:00.240><c> the</c><00:59:00.400><c> formula</c><00:59:00.960><c> for</c><00:59:01.119><c> radius</c><00:59:02.079><c> is</c><00:59:02.640><c> 2</c><00:59:03.359><c> times</c>

00:59:03.990 --> 00:59:04.000 align:start position:0%
then the formula for radius is 2 times
 

00:59:04.000 --> 00:59:07.829 align:start position:0%
then the formula for radius is 2 times
pi<00:59:04.720><c> times</c><00:59:05.440><c> radius</c><00:59:06.400><c> and</c><00:59:06.559><c> then</c><00:59:06.720><c> we</c><00:59:06.880><c> will</c><00:59:07.119><c> display</c>

00:59:07.829 --> 00:59:07.839 align:start position:0%
pi times radius and then we will display
 

00:59:07.839 --> 00:59:10.950 align:start position:0%
pi times radius and then we will display
our<00:59:08.079><c> circumference</c><00:59:08.880><c> using</c><00:59:09.280><c> printf</c>

00:59:10.950 --> 00:59:10.960 align:start position:0%
our circumference using printf
 

00:59:10.960 --> 00:59:12.630 align:start position:0%
our circumference using printf
circumference

00:59:12.630 --> 00:59:12.640 align:start position:0%
circumference
 

00:59:12.640 --> 00:59:14.710 align:start position:0%
circumference
then<00:59:12.880><c> we</c><00:59:12.960><c> need</c><00:59:13.200><c> a</c><00:59:13.359><c> format</c><00:59:13.760><c> specifier</c><00:59:14.559><c> we're</c>

00:59:14.710 --> 00:59:14.720 align:start position:0%
then we need a format specifier we're
 

00:59:14.720 --> 00:59:16.870 align:start position:0%
then we need a format specifier we're
displaying<00:59:15.280><c> a</c><00:59:15.520><c> double</c><00:59:16.079><c> so</c><00:59:16.319><c> the</c><00:59:16.480><c> format</c>

00:59:16.870 --> 00:59:16.880 align:start position:0%
displaying a double so the format
 

00:59:16.880 --> 00:59:19.430 align:start position:0%
displaying a double so the format
specifier<00:59:17.680><c> is</c><00:59:17.920><c> lf</c>

00:59:19.430 --> 00:59:19.440 align:start position:0%
specifier is lf
 

00:59:19.440 --> 00:59:21.670 align:start position:0%
specifier is lf
comma<00:59:20.240><c> circumference</c>

00:59:21.670 --> 00:59:21.680 align:start position:0%
comma circumference
 

00:59:21.680 --> 00:59:24.150 align:start position:0%
comma circumference
and<00:59:22.000><c> let's</c><00:59:22.240><c> run</c><00:59:22.480><c> it</c>

00:59:24.150 --> 00:59:24.160 align:start position:0%
and let's run it
 

00:59:24.160 --> 00:59:28.069 align:start position:0%
and let's run it
enter<00:59:24.880><c> well</c><00:59:25.440><c> the</c><00:59:25.680><c> radius</c><00:59:26.400><c> of</c><00:59:26.559><c> a</c><00:59:26.640><c> circle</c>

00:59:28.069 --> 00:59:28.079 align:start position:0%
enter well the radius of a circle
 

00:59:28.079 --> 00:59:30.950 align:start position:0%
enter well the radius of a circle
uh<00:59:28.319><c> let's</c><00:59:28.559><c> say</c><00:59:28.799><c> that</c><00:59:29.040><c> our</c><00:59:29.200><c> radius</c><00:59:29.920><c> is</c><00:59:30.319><c> 10</c><00:59:30.640><c> maybe</c>

00:59:30.950 --> 00:59:30.960 align:start position:0%
uh let's say that our radius is 10 maybe
 

00:59:30.960 --> 00:59:33.670 align:start position:0%
uh let's say that our radius is 10 maybe
this<00:59:31.280><c> is</c><00:59:31.520><c> 10</c><00:59:32.160><c> i</c><00:59:32.319><c> don't</c><00:59:32.400><c> know</c><00:59:32.720><c> meters</c>

00:59:33.670 --> 00:59:33.680 align:start position:0%
this is 10 i don't know meters
 

00:59:33.680 --> 00:59:35.870 align:start position:0%
this is 10 i don't know meters
all<00:59:33.839><c> right</c><00:59:34.160><c> our</c><00:59:34.319><c> circumference</c><00:59:35.040><c> is</c>

00:59:35.870 --> 00:59:35.880 align:start position:0%
all right our circumference is
 

00:59:35.880 --> 00:59:38.549 align:start position:0%
all right our circumference is
62.83<00:59:36.880><c> meters</c><00:59:37.599><c> now</c><00:59:37.760><c> why</c><00:59:37.920><c> not</c><00:59:38.079><c> take</c><00:59:38.240><c> this</c><00:59:38.480><c> a</c>

00:59:38.549 --> 00:59:38.559 align:start position:0%
62.83 meters now why not take this a
 

00:59:38.559 --> 00:59:40.630 align:start position:0%
62.83 meters now why not take this a
step<00:59:38.720><c> further</c><00:59:39.200><c> let's</c><00:59:39.440><c> also</c><00:59:39.760><c> calculate</c><00:59:40.400><c> the</c>

00:59:40.630 --> 00:59:40.640 align:start position:0%
step further let's also calculate the
 

00:59:40.640 --> 00:59:42.470 align:start position:0%
step further let's also calculate the
area<00:59:40.880><c> of</c><00:59:41.040><c> the</c><00:59:41.119><c> circle</c><00:59:41.680><c> i</c><00:59:41.760><c> wasn't</c><00:59:42.079><c> planning</c><00:59:42.400><c> on</c>

00:59:42.470 --> 00:59:42.480 align:start position:0%
area of the circle i wasn't planning on
 

00:59:42.480 --> 00:59:43.829 align:start position:0%
area of the circle i wasn't planning on
taking<00:59:42.799><c> it</c><00:59:42.880><c> this</c><00:59:43.040><c> far</c><00:59:43.280><c> but</c><00:59:43.359><c> hey</c><00:59:43.599><c> let's</c>

00:59:43.829 --> 00:59:43.839 align:start position:0%
taking it this far but hey let's
 

00:59:43.839 --> 00:59:46.230 align:start position:0%
taking it this far but hey let's
calculate<00:59:44.319><c> that</c><00:59:44.480><c> as</c><00:59:44.559><c> well</c><00:59:44.720><c> for</c><00:59:44.880><c> practice</c><00:59:46.079><c> so</c>

00:59:46.230 --> 00:59:46.240 align:start position:0%
calculate that as well for practice so
 

00:59:46.240 --> 00:59:48.870 align:start position:0%
calculate that as well for practice so
let's<00:59:46.480><c> declare</c><00:59:47.119><c> a</c><00:59:47.520><c> double</c><00:59:48.000><c> variable</c><00:59:48.559><c> named</c>

00:59:48.870 --> 00:59:48.880 align:start position:0%
let's declare a double variable named
 

00:59:48.880 --> 00:59:50.150 align:start position:0%
let's declare a double variable named
area

00:59:50.150 --> 00:59:50.160 align:start position:0%
area
 

00:59:50.160 --> 00:59:52.710 align:start position:0%
area
and<00:59:50.319><c> we</c><00:59:50.559><c> will</c><00:59:50.720><c> calculate</c><00:59:51.280><c> what</c><00:59:51.599><c> area</c><00:59:51.920><c> is</c><00:59:52.559><c> the</c>

00:59:52.710 --> 00:59:52.720 align:start position:0%
and we will calculate what area is the
 

00:59:52.720 --> 00:59:55.670 align:start position:0%
and we will calculate what area is the
formula<00:59:53.280><c> for</c><00:59:53.440><c> the</c><00:59:53.599><c> area</c><00:59:53.839><c> of</c><00:59:53.920><c> the</c><00:59:54.079><c> circle</c><00:59:54.799><c> is</c>

00:59:55.670 --> 00:59:55.680 align:start position:0%
formula for the area of the circle is
 

00:59:55.680 --> 00:59:57.829 align:start position:0%
formula for the area of the circle is
pi<00:59:56.079><c> times</c><00:59:56.480><c> radius</c><00:59:56.960><c> squared</c>

00:59:57.829 --> 00:59:57.839 align:start position:0%
pi times radius squared
 

00:59:57.839 --> 01:00:02.390 align:start position:0%
pi times radius squared
pi<00:59:58.319><c> times</c><00:59:58.839><c> radius</c><00:59:59.920><c> times</c><01:00:00.559><c> radius</c>

01:00:02.390 --> 01:00:02.400 align:start position:0%
pi times radius times radius
 

01:00:02.400 --> 01:00:06.549 align:start position:0%
pi times radius times radius
then<01:00:02.720><c> let's</c><01:00:02.960><c> display</c><01:00:03.440><c> the</c><01:00:03.680><c> area</c>

01:00:06.549 --> 01:00:06.559 align:start position:0%
 
 

01:00:06.559 --> 01:00:08.309 align:start position:0%
 
so<01:00:06.960><c> area</c>

01:00:08.309 --> 01:00:08.319 align:start position:0%
so area
 

01:00:08.319 --> 01:00:10.950 align:start position:0%
so area
we're<01:00:08.559><c> using</c><01:00:08.960><c> the</c><01:00:09.200><c> double</c><01:00:09.599><c> format</c><01:00:09.920><c> specifier</c>

01:00:10.950 --> 01:00:10.960 align:start position:0%
we're using the double format specifier
 

01:00:10.960 --> 01:00:13.190 align:start position:0%
we're using the double format specifier
and<01:00:11.359><c> area</c><01:00:12.000><c> then</c><01:00:12.319><c> let's</c><01:00:12.559><c> add</c><01:00:12.720><c> some</c><01:00:12.880><c> new</c><01:00:13.040><c> line</c>

01:00:13.190 --> 01:00:13.200 align:start position:0%
and area then let's add some new line
 

01:00:13.200 --> 01:00:16.789 align:start position:0%
and area then let's add some new line
characters<01:00:13.760><c> to</c><01:00:14.079><c> separate</c><01:00:14.480><c> everything</c>

01:00:16.789 --> 01:00:16.799 align:start position:0%
characters to separate everything
 

01:00:16.799 --> 01:00:19.670 align:start position:0%
characters to separate everything
enter<01:00:17.359><c> the</c><01:00:17.599><c> radius</c><01:00:18.000><c> of</c><01:00:18.079><c> a</c><01:00:18.160><c> circle</c><01:00:19.119><c> let's</c><01:00:19.359><c> say</c>

01:00:19.670 --> 01:00:19.680 align:start position:0%
enter the radius of a circle let's say
 

01:00:19.680 --> 01:00:21.190 align:start position:0%
enter the radius of a circle let's say
10<01:00:19.920><c> meters</c>

01:00:21.190 --> 01:00:21.200 align:start position:0%
10 meters
 

01:00:21.200 --> 01:00:23.230 align:start position:0%
10 meters
the<01:00:21.440><c> circumference</c><01:00:22.319><c> is</c>

01:00:23.230 --> 01:00:23.240 align:start position:0%
the circumference is
 

01:00:23.240 --> 01:00:28.789 align:start position:0%
the circumference is
62.83<01:00:24.319><c> meters</c><01:00:25.200><c> and</c><01:00:25.359><c> the</c><01:00:25.599><c> area</c><01:00:26.079><c> is</c><01:00:26.559><c> 314</c>

01:00:28.789 --> 01:00:28.799 align:start position:0%
62.83 meters and the area is 314
 

01:00:28.799 --> 01:00:30.950 align:start position:0%
62.83 meters and the area is 314
meters<01:00:29.359><c> all</c><01:00:29.520><c> right</c><01:00:29.760><c> everybody</c><01:00:30.240><c> that</c><01:00:30.480><c> is</c><01:00:30.720><c> a</c>

01:00:30.950 --> 01:00:30.960 align:start position:0%
meters all right everybody that is a
 

01:00:30.960 --> 01:00:32.950 align:start position:0%
meters all right everybody that is a
small<01:00:31.359><c> program</c><01:00:31.839><c> to</c><01:00:32.079><c> calculate</c><01:00:32.720><c> the</c>

01:00:32.950 --> 01:00:32.960 align:start position:0%
small program to calculate the
 

01:00:32.960 --> 01:00:34.789 align:start position:0%
small program to calculate the
circumference<01:00:33.520><c> of</c><01:00:33.680><c> a</c><01:00:33.760><c> circle</c><01:00:34.400><c> and</c><01:00:34.559><c> i</c><01:00:34.640><c> guess</c>

01:00:34.789 --> 01:00:34.799 align:start position:0%
circumference of a circle and i guess
 

01:00:34.799 --> 01:00:37.109 align:start position:0%
circumference of a circle and i guess
the<01:00:34.960><c> area</c><01:00:35.280><c> as</c><01:00:35.440><c> well</c><01:00:35.680><c> just</c><01:00:35.839><c> because</c><01:00:36.319><c> well</c><01:00:36.880><c> why</c>

01:00:37.109 --> 01:00:37.119 align:start position:0%
the area as well just because well why
 

01:00:37.119 --> 01:00:38.870 align:start position:0%
the area as well just because well why
not<01:00:37.520><c> so</c><01:00:37.839><c> yeah</c><01:00:38.079><c> if</c><01:00:38.160><c> you</c><01:00:38.240><c> found</c><01:00:38.480><c> this</c><01:00:38.640><c> video</c>

01:00:38.870 --> 01:00:38.880 align:start position:0%
not so yeah if you found this video
 

01:00:38.880 --> 01:00:40.870 align:start position:0%
not so yeah if you found this video
helpful<01:00:39.280><c> please</c><01:00:39.520><c> be</c><01:00:39.760><c> sure</c><01:00:40.000><c> to</c><01:00:40.319><c> smash</c><01:00:40.720><c> that</c>

01:00:40.870 --> 01:00:40.880 align:start position:0%
helpful please be sure to smash that
 

01:00:40.880 --> 01:00:42.630 align:start position:0%
helpful please be sure to smash that
like<01:00:41.119><c> button</c><01:00:41.599><c> leave</c><01:00:41.760><c> a</c><01:00:41.839><c> random</c><01:00:42.160><c> comment</c><01:00:42.400><c> down</c>

01:00:42.630 --> 01:00:42.640 align:start position:0%
like button leave a random comment down
 

01:00:42.640 --> 01:00:44.470 align:start position:0%
like button leave a random comment down
below<01:00:43.119><c> and</c><01:00:43.359><c> subscribe</c><01:00:43.920><c> if</c><01:00:44.000><c> you'd</c><01:00:44.160><c> like</c><01:00:44.319><c> to</c>

01:00:44.470 --> 01:00:44.480 align:start position:0%
below and subscribe if you'd like to
 

01:00:44.480 --> 01:00:48.710 align:start position:0%
below and subscribe if you'd like to
become<01:00:44.720><c> a</c><01:00:44.799><c> fellow</c><01:00:45.119><c> bro</c>

01:00:48.710 --> 01:00:48.720 align:start position:0%
 
 

01:00:48.720 --> 01:00:50.789 align:start position:0%
 
alright<01:00:49.280><c> welcome</c><01:00:49.520><c> back</c><01:00:49.760><c> everybody</c><01:00:50.400><c> in</c><01:00:50.559><c> this</c>

01:00:50.789 --> 01:00:50.799 align:start position:0%
alright welcome back everybody in this
 

01:00:50.799 --> 01:00:52.069 align:start position:0%
alright welcome back everybody in this
video<01:00:51.040><c> we're</c><01:00:51.200><c> going</c><01:00:51.359><c> to</c><01:00:51.520><c> write</c><01:00:51.680><c> a</c><01:00:51.760><c> small</c>

01:00:52.069 --> 01:00:52.079 align:start position:0%
video we're going to write a small
 

01:00:52.079 --> 01:00:54.390 align:start position:0%
video we're going to write a small
practice<01:00:52.480><c> program</c><01:00:52.880><c> to</c><01:00:53.040><c> find</c><01:00:53.440><c> the</c><01:00:53.599><c> hypotenuse</c>

01:00:54.390 --> 01:00:54.400 align:start position:0%
practice program to find the hypotenuse
 

01:00:54.400 --> 01:00:56.309 align:start position:0%
practice program to find the hypotenuse
of<01:00:54.559><c> a</c><01:00:54.640><c> right</c><01:00:54.880><c> triangle</c><01:00:55.520><c> we'll</c><01:00:55.680><c> need</c><01:00:55.920><c> the</c><01:00:56.000><c> help</c>

01:00:56.309 --> 01:00:56.319 align:start position:0%
of a right triangle we'll need the help
 

01:00:56.319 --> 01:00:58.710 align:start position:0%
of a right triangle we'll need the help
of<01:00:56.559><c> our</c><01:00:56.799><c> math.h</c><01:00:57.520><c> header</c><01:00:57.839><c> file</c><01:00:58.240><c> because</c><01:00:58.559><c> we'll</c>

01:00:58.710 --> 01:00:58.720 align:start position:0%
of our math.h header file because we'll
 

01:00:58.720 --> 01:01:00.390 align:start position:0%
of our math.h header file because we'll
need<01:00:58.960><c> access</c><01:00:59.359><c> to</c><01:00:59.520><c> some</c><01:00:59.680><c> useful</c><01:01:00.160><c> math</c>

01:01:00.390 --> 01:01:00.400 align:start position:0%
need access to some useful math
 

01:01:00.400 --> 01:01:03.030 align:start position:0%
need access to some useful math
functions<01:01:01.280><c> more</c><01:01:01.520><c> specifically</c><01:01:02.480><c> the</c><01:01:02.720><c> square</c>

01:01:03.030 --> 01:01:03.040 align:start position:0%
functions more specifically the square
 

01:01:03.040 --> 01:01:04.870 align:start position:0%
functions more specifically the square
root<01:01:03.280><c> function</c><01:01:03.839><c> let's</c><01:01:04.079><c> declare</c><01:01:04.559><c> all</c><01:01:04.640><c> of</c><01:01:04.799><c> the</c>

01:01:04.870 --> 01:01:04.880 align:start position:0%
root function let's declare all of the
 

01:01:04.880 --> 01:01:06.630 align:start position:0%
root function let's declare all of the
variables<01:01:05.359><c> that</c><01:01:05.520><c> we'll</c><01:01:05.680><c> need</c><01:01:06.000><c> we'll</c><01:01:06.240><c> need</c>

01:01:06.630 --> 01:01:06.640 align:start position:0%
variables that we'll need we'll need
 

01:01:06.640 --> 01:01:09.270 align:start position:0%
variables that we'll need we'll need
sides<01:01:07.119><c> a</c><01:01:07.520><c> b</c><01:01:07.920><c> and</c><01:01:08.079><c> c</c><01:01:08.480><c> and</c><01:01:08.559><c> these</c><01:01:08.799><c> will</c><01:01:08.960><c> be</c><01:01:09.119><c> of</c><01:01:09.200><c> the</c>

01:01:09.270 --> 01:01:09.280 align:start position:0%
sides a b and c and these will be of the
 

01:01:09.280 --> 01:01:10.710 align:start position:0%
sides a b and c and these will be of the
double<01:01:09.520><c> data</c><01:01:09.920><c> type</c>

01:01:10.710 --> 01:01:10.720 align:start position:0%
double data type
 

01:01:10.720 --> 01:01:11.510 align:start position:0%
double data type
a

01:01:11.510 --> 01:01:11.520 align:start position:0%
a
 

01:01:11.520 --> 01:01:12.470 align:start position:0%
a
b

01:01:12.470 --> 01:01:12.480 align:start position:0%
b
 

01:01:12.480 --> 01:01:13.430 align:start position:0%
b
c

01:01:13.430 --> 01:01:13.440 align:start position:0%
c
 

01:01:13.440 --> 01:01:16.230 align:start position:0%
c
we'll<01:01:13.680><c> ask</c><01:01:13.920><c> the</c><01:01:14.079><c> user</c><01:01:14.400><c> to</c><01:01:14.640><c> enter</c><01:01:15.040><c> in</c><01:01:15.359><c> sides</c><01:01:15.760><c> a</c>

01:01:16.230 --> 01:01:16.240 align:start position:0%
we'll ask the user to enter in sides a
 

01:01:16.240 --> 01:01:17.430 align:start position:0%
we'll ask the user to enter in sides a
and<01:01:16.559><c> b</c>

01:01:17.430 --> 01:01:17.440 align:start position:0%
and b
 

01:01:17.440 --> 01:01:19.190 align:start position:0%
and b
print<01:01:17.839><c> f</c>

01:01:19.190 --> 01:01:19.200 align:start position:0%
print f
 

01:01:19.200 --> 01:01:20.470 align:start position:0%
print f
enter

01:01:20.470 --> 01:01:20.480 align:start position:0%
enter
 

01:01:20.480 --> 01:01:21.670 align:start position:0%
enter
side

01:01:21.670 --> 01:01:21.680 align:start position:0%
side
 

01:01:21.680 --> 01:01:25.430 align:start position:0%
side
a<01:01:22.319><c> and</c><01:01:22.480><c> then</c><01:01:22.640><c> we</c><01:01:22.799><c> will</c><01:01:23.040><c> use</c><01:01:23.359><c> scanf</c>

01:01:25.430 --> 01:01:25.440 align:start position:0%
a and then we will use scanf
 

01:01:25.440 --> 01:01:28.710 align:start position:0%
a and then we will use scanf
so<01:01:25.680><c> the</c><01:01:25.839><c> format</c><01:01:26.240><c> specifier</c><01:01:27.119><c> for</c><01:01:27.440><c> a</c><01:01:27.680><c> double</c>

01:01:28.710 --> 01:01:28.720 align:start position:0%
so the format specifier for a double
 

01:01:28.720 --> 01:01:31.750 align:start position:0%
so the format specifier for a double
is<01:01:29.359><c> l</c><01:01:29.920><c> f</c><01:01:30.160><c> then</c><01:01:30.400><c> i</c><01:01:30.480><c> would</c><01:01:30.640><c> like</c><01:01:30.799><c> to</c><01:01:30.960><c> insert</c><01:01:31.440><c> a</c>

01:01:31.750 --> 01:01:31.760 align:start position:0%
is l f then i would like to insert a
 

01:01:31.760 --> 01:01:34.870 align:start position:0%
is l f then i would like to insert a
value<01:01:32.240><c> within</c><01:01:32.799><c> a</c><01:01:33.440><c> so</c><01:01:33.599><c> i</c><01:01:33.760><c> need</c><01:01:34.000><c> to</c><01:01:34.160><c> use</c><01:01:34.640><c> the</c>

01:01:34.870 --> 01:01:34.880 align:start position:0%
value within a so i need to use the
 

01:01:34.880 --> 01:01:37.829 align:start position:0%
value within a so i need to use the
address<01:01:35.280><c> of</c><01:01:35.440><c> operator</c><01:01:36.000><c> then</c><01:01:36.240><c> our</c><01:01:36.319><c> variable</c><01:01:36.880><c> a</c>

01:01:37.829 --> 01:01:37.839 align:start position:0%
address of operator then our variable a
 

01:01:37.839 --> 01:01:41.109 align:start position:0%
address of operator then our variable a
okay<01:01:38.160><c> let's</c><01:01:38.400><c> do</c><01:01:38.559><c> the</c><01:01:38.640><c> same</c><01:01:38.880><c> thing</c><01:01:39.119><c> for</c><01:01:39.359><c> side</c><01:01:39.680><c> b</c>

01:01:41.109 --> 01:01:41.119 align:start position:0%
okay let's do the same thing for side b
 

01:01:41.119 --> 01:01:44.230 align:start position:0%
okay let's do the same thing for side b
enter<01:01:41.839><c> side</c><01:01:42.480><c> b</c><01:01:42.960><c> and</c><01:01:43.119><c> store</c><01:01:43.359><c> the</c><01:01:43.520><c> user</c><01:01:43.839><c> input</c>

01:01:44.230 --> 01:01:44.240 align:start position:0%
enter side b and store the user input
 

01:01:44.240 --> 01:01:47.430 align:start position:0%
enter side b and store the user input
within<01:01:44.960><c> variable</c><01:01:45.680><c> b</c><01:01:46.319><c> the</c><01:01:46.480><c> formula</c><01:01:46.960><c> to</c><01:01:47.119><c> find</c>

01:01:47.430 --> 01:01:47.440 align:start position:0%
within variable b the formula to find
 

01:01:47.440 --> 01:01:49.750 align:start position:0%
within variable b the formula to find
the<01:01:47.520><c> hypotenuse</c><01:01:48.240><c> of</c><01:01:48.400><c> a</c><01:01:48.480><c> right</c><01:01:48.720><c> triangle</c><01:01:49.440><c> is</c>

01:01:49.750 --> 01:01:49.760 align:start position:0%
the hypotenuse of a right triangle is
 

01:01:49.760 --> 01:01:51.990 align:start position:0%
the hypotenuse of a right triangle is
the<01:01:50.000><c> square</c><01:01:50.319><c> root</c><01:01:50.720><c> of</c><01:01:50.960><c> a</c><01:01:51.119><c> squared</c><01:01:51.520><c> plus</c><01:01:51.760><c> b</c>

01:01:51.990 --> 01:01:52.000 align:start position:0%
the square root of a squared plus b
 

01:01:52.000 --> 01:01:53.030 align:start position:0%
the square root of a squared plus b
squared

01:01:53.030 --> 01:01:53.040 align:start position:0%
squared
 

01:01:53.040 --> 01:01:54.630 align:start position:0%
squared
so<01:01:53.200><c> we</c><01:01:53.359><c> will</c><01:01:53.599><c> set</c><01:01:53.839><c> c</c>

01:01:54.630 --> 01:01:54.640 align:start position:0%
so we will set c
 

01:01:54.640 --> 01:01:57.430 align:start position:0%
so we will set c
equal<01:01:55.359><c> to</c><01:01:55.520><c> the</c><01:01:55.680><c> square</c><01:01:56.000><c> root</c><01:01:56.240><c> function</c>

01:01:57.430 --> 01:01:57.440 align:start position:0%
equal to the square root function
 

01:01:57.440 --> 01:02:00.630 align:start position:0%
equal to the square root function
and<01:01:57.599><c> within</c><01:01:57.920><c> the</c><01:01:58.000><c> parentheses</c><01:01:59.119><c> we</c><01:01:59.359><c> will</c><01:01:59.520><c> say</c><01:02:00.079><c> a</c>

01:02:00.630 --> 01:02:00.640 align:start position:0%
and within the parentheses we will say a
 

01:02:00.640 --> 01:02:01.990 align:start position:0%
and within the parentheses we will say a
times<01:02:01.039><c> a</c>

01:02:01.990 --> 01:02:02.000 align:start position:0%
times a
 

01:02:02.000 --> 01:02:05.750 align:start position:0%
times a
plus<01:02:02.799><c> b</c><01:02:03.440><c> times</c><01:02:03.760><c> b</c>

01:02:05.750 --> 01:02:05.760 align:start position:0%
plus b times b
 

01:02:05.760 --> 01:02:10.710 align:start position:0%
plus b times b
and<01:02:05.920><c> then</c><01:02:06.160><c> we</c><01:02:06.319><c> will</c><01:02:06.480><c> display</c><01:02:06.960><c> c</c>

01:02:10.710 --> 01:02:10.720 align:start position:0%
 
 

01:02:10.720 --> 01:02:11.829 align:start position:0%
 
side

01:02:11.829 --> 01:02:11.839 align:start position:0%
side
 

01:02:11.839 --> 01:02:12.870 align:start position:0%
side
c

01:02:12.870 --> 01:02:12.880 align:start position:0%
c
 

01:02:12.880 --> 01:02:15.190 align:start position:0%
c
and<01:02:13.039><c> the</c><01:02:13.119><c> format</c><01:02:13.599><c> specifier</c><01:02:14.160><c> for</c><01:02:14.400><c> a</c><01:02:14.480><c> double</c><01:02:14.880><c> is</c>

01:02:15.190 --> 01:02:15.200 align:start position:0%
and the format specifier for a double is
 

01:02:15.200 --> 01:02:19.109 align:start position:0%
and the format specifier for a double is
l<01:02:15.520><c> f</c><01:02:16.079><c> and</c><01:02:16.319><c> we</c><01:02:16.480><c> are</c><01:02:16.640><c> displaying</c><01:02:17.599><c> c</c><01:02:18.319><c> and</c><01:02:18.720><c> well</c>

01:02:19.109 --> 01:02:19.119 align:start position:0%
l f and we are displaying c and well
 

01:02:19.119 --> 01:02:21.190 align:start position:0%
l f and we are displaying c and well
let's<01:02:19.359><c> try</c><01:02:19.680><c> it</c>

01:02:21.190 --> 01:02:21.200 align:start position:0%
let's try it
 

01:02:21.200 --> 01:02:24.470 align:start position:0%
let's try it
so<01:02:21.520><c> side</c><01:02:21.839><c> a</c><01:02:22.240><c> let's</c><01:02:22.480><c> say</c><01:02:22.799><c> is</c><01:02:23.039><c> three</c><01:02:23.760><c> side</c><01:02:24.079><c> b</c><01:02:24.319><c> is</c>

01:02:24.470 --> 01:02:24.480 align:start position:0%
so side a let's say is three side b is
 

01:02:24.480 --> 01:02:25.270 align:start position:0%
so side a let's say is three side b is
four

01:02:25.270 --> 01:02:25.280 align:start position:0%
four
 

01:02:25.280 --> 01:02:28.710 align:start position:0%
four
that<01:02:25.520><c> means</c><01:02:26.000><c> side</c><01:02:26.400><c> c</c><01:02:26.880><c> is</c><01:02:27.200><c> five</c><01:02:28.000><c> so</c><01:02:28.400><c> yeah</c><01:02:28.559><c> i</c>

01:02:28.710 --> 01:02:28.720 align:start position:0%
that means side c is five so yeah i
 

01:02:28.720 --> 01:02:29.990 align:start position:0%
that means side c is five so yeah i
thought<01:02:28.880><c> that</c><01:02:29.039><c> would</c><01:02:29.200><c> be</c><01:02:29.280><c> a</c><01:02:29.440><c> good</c><01:02:29.599><c> practice</c>

01:02:29.990 --> 01:02:30.000 align:start position:0%
thought that would be a good practice
 

01:02:30.000 --> 01:02:31.990 align:start position:0%
thought that would be a good practice
program<01:02:30.400><c> for</c><01:02:30.559><c> us</c><01:02:30.720><c> to</c><01:02:30.799><c> get</c><01:02:30.960><c> used</c><01:02:31.280><c> to</c><01:02:31.520><c> accepting</c>

01:02:31.990 --> 01:02:32.000 align:start position:0%
program for us to get used to accepting
 

01:02:32.000 --> 01:02:34.309 align:start position:0%
program for us to get used to accepting
user<01:02:32.400><c> input</c><01:02:33.119><c> if</c><01:02:33.359><c> this</c><01:02:33.520><c> video</c><01:02:33.760><c> helped</c><01:02:34.000><c> you</c><01:02:34.160><c> out</c>

01:02:34.309 --> 01:02:34.319 align:start position:0%
user input if this video helped you out
 

01:02:34.319 --> 01:02:36.230 align:start position:0%
user input if this video helped you out
help<01:02:34.480><c> me</c><01:02:34.640><c> out</c><01:02:34.880><c> by</c><01:02:35.119><c> smashing</c><01:02:35.520><c> that</c><01:02:35.680><c> like</c><01:02:35.839><c> button</c>

01:02:36.230 --> 01:02:36.240 align:start position:0%
help me out by smashing that like button
 

01:02:36.240 --> 01:02:38.069 align:start position:0%
help me out by smashing that like button
leave<01:02:36.400><c> a</c><01:02:36.480><c> random</c><01:02:36.799><c> comment</c><01:02:37.119><c> down</c><01:02:37.280><c> below</c><01:02:37.760><c> and</c>

01:02:38.069 --> 01:02:38.079 align:start position:0%
leave a random comment down below and
 

01:02:38.079 --> 01:02:39.510 align:start position:0%
leave a random comment down below and
subscribe<01:02:38.640><c> if</c><01:02:38.720><c> you'd</c><01:02:38.880><c> like</c><01:02:39.039><c> to</c><01:02:39.119><c> become</c><01:02:39.359><c> a</c>

01:02:39.510 --> 01:02:39.520 align:start position:0%
subscribe if you'd like to become a
 

01:02:39.520 --> 01:02:42.950 align:start position:0%
subscribe if you'd like to become a
fellow<01:02:39.839><c> bro</c>

01:02:42.950 --> 01:02:42.960 align:start position:0%
 
 

01:02:42.960 --> 01:02:45.029 align:start position:0%
 
hey<01:02:43.359><c> let's</c><01:02:43.599><c> talk</c><01:02:43.760><c> about</c><01:02:44.079><c> if</c><01:02:44.240><c> statements</c><01:02:44.880><c> if</c>

01:02:45.029 --> 01:02:45.039 align:start position:0%
hey let's talk about if statements if
 

01:02:45.039 --> 01:02:47.510 align:start position:0%
hey let's talk about if statements if
statements<01:02:45.599><c> are</c><01:02:45.760><c> used</c><01:02:46.079><c> to</c><01:02:46.319><c> add</c><01:02:46.720><c> some</c><01:02:47.039><c> choices</c>

01:02:47.510 --> 01:02:47.520 align:start position:0%
statements are used to add some choices
 

01:02:47.520 --> 01:02:49.670 align:start position:0%
statements are used to add some choices
to<01:02:47.680><c> a</c><01:02:47.920><c> program</c><01:02:48.720><c> let's</c><01:02:48.960><c> take</c><01:02:49.200><c> the</c><01:02:49.359><c> small</c>

01:02:49.670 --> 01:02:49.680 align:start position:0%
to a program let's take the small
 

01:02:49.680 --> 01:02:52.069 align:start position:0%
to a program let's take the small
program<01:02:50.160><c> for</c><01:02:50.319><c> example</c><01:02:50.880><c> we</c><01:02:51.039><c> have</c><01:02:51.359><c> a</c><01:02:51.520><c> variable</c>

01:02:52.069 --> 01:02:52.079 align:start position:0%
program for example we have a variable
 

01:02:52.079 --> 01:02:54.309 align:start position:0%
program for example we have a variable
edge<01:02:52.400><c> and</c><01:02:52.480><c> we'll</c><01:02:52.720><c> ask</c><01:02:52.880><c> a</c><01:02:53.039><c> user</c><01:02:53.440><c> to</c><01:02:53.680><c> enter</c><01:02:54.079><c> in</c>

01:02:54.309 --> 01:02:54.319 align:start position:0%
edge and we'll ask a user to enter in
 

01:02:54.319 --> 01:02:56.309 align:start position:0%
edge and we'll ask a user to enter in
their<01:02:54.559><c> edge</c><01:02:55.039><c> what</c><01:02:55.200><c> if</c><01:02:55.359><c> i</c><01:02:55.440><c> would</c><01:02:55.599><c> like</c><01:02:55.839><c> to</c><01:02:56.079><c> check</c>

01:02:56.309 --> 01:02:56.319 align:start position:0%
their edge what if i would like to check
 

01:02:56.319 --> 01:02:58.150 align:start position:0%
their edge what if i would like to check
their<01:02:56.480><c> edge</c><01:02:56.720><c> maybe</c><01:02:57.039><c> they're</c><01:02:57.280><c> signing</c><01:02:57.599><c> up</c><01:02:57.839><c> for</c>

01:02:58.150 --> 01:02:58.160 align:start position:0%
their edge maybe they're signing up for
 

01:02:58.160 --> 01:03:00.309 align:start position:0%
their edge maybe they're signing up for
a<01:02:58.240><c> credit</c><01:02:58.480><c> card</c><01:02:58.720><c> or</c><01:02:58.880><c> something</c><01:02:59.599><c> so</c><01:02:59.839><c> to</c><01:03:00.000><c> check</c>

01:03:00.309 --> 01:03:00.319 align:start position:0%
a credit card or something so to check
 

01:03:00.319 --> 01:03:02.630 align:start position:0%
a credit card or something so to check
some<01:03:00.480><c> value</c><01:03:00.960><c> we</c><01:03:01.119><c> can</c><01:03:01.200><c> write</c><01:03:01.359><c> an</c><01:03:01.520><c> if</c><01:03:01.760><c> statement</c>

01:03:02.630 --> 01:03:02.640 align:start position:0%
some value we can write an if statement
 

01:03:02.640 --> 01:03:05.029 align:start position:0%
some value we can write an if statement
if<01:03:03.280><c> parentheses</c><01:03:04.160><c> then</c><01:03:04.400><c> a</c><01:03:04.480><c> set</c><01:03:04.640><c> of</c><01:03:04.720><c> curly</c>

01:03:05.029 --> 01:03:05.039 align:start position:0%
if parentheses then a set of curly
 

01:03:05.039 --> 01:03:08.549 align:start position:0%
if parentheses then a set of curly
braces<01:03:05.920><c> if</c><01:03:06.400><c> some</c><01:03:06.640><c> condition</c><01:03:07.359><c> that</c><01:03:07.599><c> we</c><01:03:07.760><c> specify</c>

01:03:08.549 --> 01:03:08.559 align:start position:0%
braces if some condition that we specify
 

01:03:08.559 --> 01:03:11.109 align:start position:0%
braces if some condition that we specify
is<01:03:08.799><c> true</c><01:03:09.440><c> we</c><01:03:09.599><c> will</c><01:03:09.839><c> execute</c><01:03:10.480><c> some</c><01:03:10.720><c> block</c><01:03:10.960><c> of</c>

01:03:11.109 --> 01:03:11.119 align:start position:0%
is true we will execute some block of
 

01:03:11.119 --> 01:03:13.510 align:start position:0%
is true we will execute some block of
code<01:03:11.520><c> some</c><01:03:11.839><c> subsection</c><01:03:12.400><c> of</c><01:03:12.559><c> code</c><01:03:13.039><c> what</c><01:03:13.280><c> sort</c>

01:03:13.510 --> 01:03:13.520 align:start position:0%
code some subsection of code what sort
 

01:03:13.520 --> 01:03:15.670 align:start position:0%
code some subsection of code what sort
of<01:03:13.599><c> condition</c><01:03:14.160><c> should</c><01:03:14.400><c> we</c><01:03:14.640><c> write</c><01:03:15.119><c> let's</c><01:03:15.440><c> check</c>

01:03:15.670 --> 01:03:15.680 align:start position:0%
of condition should we write let's check
 

01:03:15.680 --> 01:03:18.710 align:start position:0%
of condition should we write let's check
to<01:03:15.839><c> see</c><01:03:16.160><c> if</c><01:03:16.559><c> age</c><01:03:17.039><c> is</c><01:03:17.359><c> greater</c><01:03:17.680><c> than</c><01:03:18.000><c> or</c><01:03:18.240><c> equal</c>

01:03:18.710 --> 01:03:18.720 align:start position:0%
to see if age is greater than or equal
 

01:03:18.720 --> 01:03:21.029 align:start position:0%
to see if age is greater than or equal
to<01:03:19.039><c> 18.</c><01:03:19.760><c> so</c><01:03:20.000><c> there's</c><01:03:20.240><c> different</c><01:03:20.480><c> comparison</c>

01:03:21.029 --> 01:03:21.039 align:start position:0%
to 18. so there's different comparison
 

01:03:21.039 --> 01:03:23.190 align:start position:0%
to 18. so there's different comparison
operators<01:03:21.599><c> there's</c><01:03:22.079><c> greater</c><01:03:22.319><c> than</c><01:03:22.559><c> or</c><01:03:22.799><c> equal</c>

01:03:23.190 --> 01:03:23.200 align:start position:0%
operators there's greater than or equal
 

01:03:23.200 --> 01:03:23.990 align:start position:0%
operators there's greater than or equal
to

01:03:23.990 --> 01:03:24.000 align:start position:0%
to
 

01:03:24.000 --> 01:03:26.230 align:start position:0%
to
greater<01:03:24.400><c> than</c><01:03:24.880><c> less</c><01:03:25.200><c> than</c><01:03:25.599><c> less</c><01:03:25.839><c> than</c><01:03:26.079><c> or</c>

01:03:26.230 --> 01:03:26.240 align:start position:0%
greater than less than less than or
 

01:03:26.240 --> 01:03:27.430 align:start position:0%
greater than less than less than or
equal<01:03:26.559><c> to</c>

01:03:27.430 --> 01:03:27.440 align:start position:0%
equal to
 

01:03:27.440 --> 01:03:29.670 align:start position:0%
equal to
or<01:03:27.680><c> you</c><01:03:27.839><c> could</c><01:03:28.000><c> check</c><01:03:28.240><c> to</c><01:03:28.400><c> see</c><01:03:28.720><c> if</c><01:03:28.960><c> two</c><01:03:29.280><c> values</c>

01:03:29.670 --> 01:03:29.680 align:start position:0%
or you could check to see if two values
 

01:03:29.680 --> 01:03:32.549 align:start position:0%
or you could check to see if two values
are<01:03:29.839><c> equal</c><01:03:30.160><c> by</c><01:03:30.400><c> using</c><01:03:30.960><c> double</c><01:03:31.359><c> equal</c><01:03:31.760><c> signs</c>

01:03:32.549 --> 01:03:32.559 align:start position:0%
are equal by using double equal signs
 

01:03:32.559 --> 01:03:34.870 align:start position:0%
are equal by using double equal signs
this<01:03:32.799><c> is</c><01:03:32.960><c> the</c><01:03:33.119><c> comparison</c><01:03:33.680><c> operator</c><01:03:34.559><c> if</c><01:03:34.720><c> you</c>

01:03:34.870 --> 01:03:34.880 align:start position:0%
this is the comparison operator if you
 

01:03:34.880 --> 01:03:37.029 align:start position:0%
this is the comparison operator if you
use<01:03:35.200><c> just</c><01:03:35.520><c> one</c><01:03:35.920><c> this</c><01:03:36.160><c> is</c><01:03:36.319><c> the</c><01:03:36.559><c> assignment</c>

01:03:37.029 --> 01:03:37.039 align:start position:0%
use just one this is the assignment
 

01:03:37.039 --> 01:03:38.950 align:start position:0%
use just one this is the assignment
operator<01:03:37.680><c> and</c><01:03:37.760><c> this</c><01:03:37.920><c> would</c><01:03:38.079><c> be</c><01:03:38.240><c> the</c><01:03:38.319><c> same</c><01:03:38.640><c> as</c>

01:03:38.950 --> 01:03:38.960 align:start position:0%
operator and this would be the same as
 

01:03:38.960 --> 01:03:41.670 align:start position:0%
operator and this would be the same as
assigning<01:03:39.599><c> age</c><01:03:40.000><c> equal</c><01:03:40.319><c> to</c><01:03:40.480><c> 18</c><01:03:41.039><c> so</c><01:03:41.200><c> if</c><01:03:41.359><c> you</c><01:03:41.440><c> need</c>

01:03:41.670 --> 01:03:41.680 align:start position:0%
assigning age equal to 18 so if you need
 

01:03:41.680 --> 01:03:44.630 align:start position:0%
assigning age equal to 18 so if you need
to<01:03:41.920><c> compare</c><01:03:42.480><c> if</c><01:03:42.720><c> two</c><01:03:42.960><c> values</c><01:03:43.440><c> are</c><01:03:43.599><c> equal</c><01:03:44.319><c> use</c>

01:03:44.630 --> 01:03:44.640 align:start position:0%
to compare if two values are equal use
 

01:03:44.640 --> 01:03:46.950 align:start position:0%
to compare if two values are equal use
the<01:03:44.799><c> comparison</c><01:03:45.359><c> operator</c><01:03:45.839><c> which</c><01:03:46.160><c> is</c><01:03:46.559><c> double</c>

01:03:46.950 --> 01:03:46.960 align:start position:0%
the comparison operator which is double
 

01:03:46.960 --> 01:03:49.109 align:start position:0%
the comparison operator which is double
equal<01:03:47.359><c> signs</c><01:03:48.000><c> but</c><01:03:48.160><c> what</c><01:03:48.319><c> i</c><01:03:48.480><c> would</c><01:03:48.559><c> like</c><01:03:48.720><c> to</c><01:03:48.880><c> do</c>

01:03:49.109 --> 01:03:49.119 align:start position:0%
equal signs but what i would like to do
 

01:03:49.119 --> 01:03:51.430 align:start position:0%
equal signs but what i would like to do
is<01:03:49.359><c> check</c><01:03:49.520><c> to</c><01:03:49.760><c> see</c><01:03:50.000><c> if</c><01:03:50.240><c> age</c><01:03:50.640><c> is</c><01:03:50.880><c> greater</c><01:03:51.200><c> than</c>

01:03:51.430 --> 01:03:51.440 align:start position:0%
is check to see if age is greater than
 

01:03:51.440 --> 01:03:54.309 align:start position:0%
is check to see if age is greater than
or<01:03:51.680><c> equal</c><01:03:51.920><c> to</c><01:03:52.160><c> 18.</c><01:03:52.880><c> if</c><01:03:53.359><c> this</c><01:03:53.599><c> condition</c>

01:03:54.309 --> 01:03:54.319 align:start position:0%
or equal to 18. if this condition
 

01:03:54.319 --> 01:03:56.950 align:start position:0%
or equal to 18. if this condition
evaluates<01:03:55.039><c> to</c><01:03:55.119><c> be</c><01:03:55.280><c> true</c><01:03:56.079><c> we</c><01:03:56.240><c> will</c><01:03:56.400><c> have</c><01:03:56.720><c> our</c>

01:03:56.950 --> 01:03:56.960 align:start position:0%
evaluates to be true we will have our
 

01:03:56.960 --> 01:03:58.630 align:start position:0%
evaluates to be true we will have our
program<01:03:57.440><c> do</c><01:03:57.599><c> something</c>

01:03:58.630 --> 01:03:58.640 align:start position:0%
program do something
 

01:03:58.640 --> 01:04:01.190 align:start position:0%
program do something
so<01:03:58.880><c> let's</c><01:03:59.119><c> print</c><01:03:59.359><c> a</c><01:03:59.440><c> message</c>

01:04:01.190 --> 01:04:01.200 align:start position:0%
so let's print a message
 

01:04:01.200 --> 01:04:03.029 align:start position:0%
so let's print a message
since<01:04:01.440><c> we're</c><01:04:01.680><c> signing</c><01:04:01.920><c> up</c><01:04:02.000><c> for</c><01:04:02.160><c> a</c><01:04:02.319><c> credit</c><01:04:02.559><c> card</c>

01:04:03.029 --> 01:04:03.039 align:start position:0%
since we're signing up for a credit card
 

01:04:03.039 --> 01:04:07.750 align:start position:0%
since we're signing up for a credit card
let's<01:04:03.280><c> say</c><01:04:03.839><c> you</c><01:04:04.559><c> are</c><01:04:05.200><c> now</c><01:04:05.839><c> signed</c><01:04:06.480><c> up</c>

01:04:07.750 --> 01:04:07.760 align:start position:0%
let's say you are now signed up
 

01:04:07.760 --> 01:04:09.349 align:start position:0%
let's say you are now signed up
and<01:04:08.000><c> let's</c><01:04:08.240><c> run</c><01:04:08.480><c> it</c>

01:04:09.349 --> 01:04:09.359 align:start position:0%
and let's run it
 

01:04:09.359 --> 01:04:11.910 align:start position:0%
and let's run it
end<01:04:09.599><c> to</c><01:04:09.760><c> your</c><01:04:10.000><c> age</c><01:04:10.480><c> let's</c><01:04:10.720><c> say</c><01:04:10.960><c> that</c><01:04:11.119><c> i'm</c><01:04:11.359><c> 21</c><01:04:11.839><c> i</c>

01:04:11.910 --> 01:04:11.920 align:start position:0%
end to your age let's say that i'm 21 i
 

01:04:11.920 --> 01:04:14.470 align:start position:0%
end to your age let's say that i'm 21 i
hit<01:04:12.160><c> enter</c><01:04:12.720><c> boom</c><01:04:12.960><c> you</c><01:04:13.119><c> are</c><01:04:13.280><c> now</c><01:04:13.520><c> signed</c><01:04:13.839><c> up</c><01:04:14.240><c> but</c>

01:04:14.470 --> 01:04:14.480 align:start position:0%
hit enter boom you are now signed up but
 

01:04:14.480 --> 01:04:16.789 align:start position:0%
hit enter boom you are now signed up but
what<01:04:14.720><c> if</c><01:04:14.799><c> this</c><01:04:14.960><c> condition</c><01:04:15.520><c> is</c><01:04:15.760><c> false</c><01:04:16.559><c> let's</c>

01:04:16.789 --> 01:04:16.799 align:start position:0%
what if this condition is false let's
 

01:04:16.799 --> 01:04:18.549 align:start position:0%
what if this condition is false let's
say<01:04:17.119><c> that</c><01:04:17.359><c> i'm</c><01:04:17.599><c> 12</c><01:04:17.839><c> years</c><01:04:18.079><c> old</c><01:04:18.319><c> and</c><01:04:18.400><c> i'm</c>

01:04:18.549 --> 01:04:18.559 align:start position:0%
say that i'm 12 years old and i'm
 

01:04:18.559 --> 01:04:20.390 align:start position:0%
say that i'm 12 years old and i'm
attempting<01:04:18.960><c> to</c><01:04:19.119><c> sign</c><01:04:19.280><c> up</c><01:04:19.359><c> for</c><01:04:19.520><c> a</c><01:04:19.599><c> credit</c><01:04:19.839><c> card</c>

01:04:20.390 --> 01:04:20.400 align:start position:0%
attempting to sign up for a credit card
 

01:04:20.400 --> 01:04:22.789 align:start position:0%
attempting to sign up for a credit card
well<01:04:20.640><c> we</c><01:04:20.880><c> skip</c><01:04:21.280><c> this</c><01:04:21.599><c> if</c><01:04:21.760><c> statement</c><01:04:22.319><c> if</c><01:04:22.640><c> this</c>

01:04:22.789 --> 01:04:22.799 align:start position:0%
well we skip this if statement if this
 

01:04:22.799 --> 01:04:25.510 align:start position:0%
well we skip this if statement if this
condition<01:04:23.520><c> evaluates</c><01:04:24.160><c> to</c><01:04:24.319><c> be</c><01:04:24.480><c> false</c><01:04:25.119><c> we</c><01:04:25.280><c> will</c>

01:04:25.510 --> 01:04:25.520 align:start position:0%
condition evaluates to be false we will
 

01:04:25.520 --> 01:04:28.150 align:start position:0%
condition evaluates to be false we will
skip<01:04:26.079><c> this</c><01:04:26.319><c> block</c><01:04:26.640><c> of</c><01:04:26.799><c> code</c><01:04:27.359><c> and</c><01:04:27.520><c> continue</c><01:04:28.000><c> on</c>

01:04:28.150 --> 01:04:28.160 align:start position:0%
skip this block of code and continue on
 

01:04:28.160 --> 01:04:30.789 align:start position:0%
skip this block of code and continue on
with<01:04:28.319><c> the</c><01:04:28.400><c> rest</c><01:04:28.640><c> of</c><01:04:28.720><c> the</c><01:04:28.799><c> program</c><01:04:29.680><c> ignoring</c><01:04:30.240><c> it</c>

01:04:30.789 --> 01:04:30.799 align:start position:0%
with the rest of the program ignoring it
 

01:04:30.799 --> 01:04:33.109 align:start position:0%
with the rest of the program ignoring it
or<01:04:31.280><c> we</c><01:04:31.520><c> could</c><01:04:31.760><c> do</c><01:04:32.000><c> something</c><01:04:32.400><c> else</c><01:04:32.640><c> by</c><01:04:32.880><c> using</c>

01:04:33.109 --> 01:04:33.119 align:start position:0%
or we could do something else by using
 

01:04:33.119 --> 01:04:35.510 align:start position:0%
or we could do something else by using
an<01:04:33.280><c> else</c><01:04:33.520><c> statement</c><01:04:34.319><c> if</c><01:04:34.720><c> this</c><01:04:34.880><c> condition</c><01:04:35.359><c> is</c>

01:04:35.510 --> 01:04:35.520 align:start position:0%
an else statement if this condition is
 

01:04:35.520 --> 01:04:38.470 align:start position:0%
an else statement if this condition is
false<01:04:36.000><c> we</c><01:04:36.160><c> will</c><01:04:36.400><c> skip</c><01:04:37.039><c> this</c><01:04:37.280><c> subset</c><01:04:37.680><c> of</c><01:04:37.760><c> code</c>

01:04:38.470 --> 01:04:38.480 align:start position:0%
false we will skip this subset of code
 

01:04:38.480 --> 01:04:41.029 align:start position:0%
false we will skip this subset of code
and<01:04:38.640><c> instead</c><01:04:39.119><c> perform</c><01:04:39.520><c> this</c><01:04:40.319><c> let's</c><01:04:40.559><c> print</c><01:04:40.880><c> a</c>

01:04:41.029 --> 01:04:41.039 align:start position:0%
and instead perform this let's print a
 

01:04:41.039 --> 01:04:43.670 align:start position:0%
and instead perform this let's print a
different<01:04:41.359><c> message</c><01:04:41.680><c> instead</c>

01:04:43.670 --> 01:04:43.680 align:start position:0%
different message instead
 

01:04:43.680 --> 01:04:48.150 align:start position:0%
different message instead
you<01:04:44.240><c> are</c><01:04:44.720><c> too</c><01:04:45.280><c> young</c><01:04:45.920><c> to</c><01:04:46.480><c> sign</c><01:04:46.960><c> up</c>

01:04:48.150 --> 01:04:48.160 align:start position:0%
you are too young to sign up
 

01:04:48.160 --> 01:04:50.789 align:start position:0%
you are too young to sign up
and<01:04:48.480><c> let's</c><01:04:48.720><c> try</c><01:04:48.960><c> that</c><01:04:49.119><c> again</c>

01:04:50.789 --> 01:04:50.799 align:start position:0%
and let's try that again
 

01:04:50.799 --> 01:04:53.270 align:start position:0%
and let's try that again
and<01:04:50.960><c> to</c><01:04:51.119><c> your</c><01:04:51.280><c> edge</c><01:04:51.760><c> i</c><01:04:52.000><c> am</c><01:04:52.240><c> 12.</c>

01:04:53.270 --> 01:04:53.280 align:start position:0%
and to your edge i am 12.
 

01:04:53.280 --> 01:04:55.589 align:start position:0%
and to your edge i am 12.
you<01:04:53.520><c> are</c><01:04:53.760><c> too</c><01:04:54.000><c> young</c><01:04:54.240><c> to</c><01:04:54.400><c> sign</c><01:04:54.720><c> up</c><01:04:55.119><c> you</c><01:04:55.280><c> can</c>

01:04:55.589 --> 01:04:55.599 align:start position:0%
you are too young to sign up you can
 

01:04:55.599 --> 01:04:57.670 align:start position:0%
you are too young to sign up you can
check<01:04:55.920><c> more</c><01:04:56.079><c> than</c><01:04:56.319><c> one</c><01:04:56.559><c> condition</c><01:04:57.200><c> before</c>

01:04:57.670 --> 01:04:57.680 align:start position:0%
check more than one condition before
 

01:04:57.680 --> 01:04:59.510 align:start position:0%
check more than one condition before
reaching<01:04:58.000><c> your</c><01:04:58.160><c> else</c><01:04:58.400><c> statement</c><01:04:58.880><c> by</c><01:04:59.039><c> using</c>

01:04:59.510 --> 01:04:59.520 align:start position:0%
reaching your else statement by using
 

01:04:59.520 --> 01:05:02.069 align:start position:0%
reaching your else statement by using
else<01:04:59.920><c> if</c><01:05:00.160><c> blocks</c><01:05:00.720><c> and</c><01:05:00.880><c> that</c><01:05:01.039><c> is</c><01:05:01.200><c> by</c><01:05:01.359><c> using</c><01:05:01.680><c> else</c>

01:05:02.069 --> 01:05:02.079 align:start position:0%
else if blocks and that is by using else
 

01:05:02.079 --> 01:05:04.069 align:start position:0%
else if blocks and that is by using else
if<01:05:02.240><c> statements</c><01:05:02.960><c> we</c><01:05:03.119><c> can</c><01:05:03.359><c> check</c><01:05:03.680><c> another</c>

01:05:04.069 --> 01:05:04.079 align:start position:0%
if statements we can check another
 

01:05:04.079 --> 01:05:05.990 align:start position:0%
if statements we can check another
statement<01:05:04.559><c> before</c><01:05:04.960><c> reaching</c><01:05:05.440><c> our</c><01:05:05.760><c> else</c>

01:05:05.990 --> 01:05:06.000 align:start position:0%
statement before reaching our else
 

01:05:06.000 --> 01:05:07.109 align:start position:0%
statement before reaching our else
statement

01:05:07.109 --> 01:05:07.119 align:start position:0%
statement
 

01:05:07.119 --> 01:05:10.069 align:start position:0%
statement
so<01:05:07.280><c> let's</c><01:05:07.599><c> check</c><01:05:07.760><c> to</c><01:05:07.920><c> see</c><01:05:08.240><c> if</c><01:05:08.480><c> age</c><01:05:09.039><c> is</c><01:05:09.680><c> less</c>

01:05:10.069 --> 01:05:10.079 align:start position:0%
so let's check to see if age is less
 

01:05:10.079 --> 01:05:12.630 align:start position:0%
so let's check to see if age is less
than<01:05:10.640><c> zero</c><01:05:11.440><c> so</c><01:05:11.599><c> obviously</c><01:05:12.160><c> somebody's</c>

01:05:12.630 --> 01:05:12.640 align:start position:0%
than zero so obviously somebody's
 

01:05:12.640 --> 01:05:14.230 align:start position:0%
than zero so obviously somebody's
messing<01:05:12.880><c> with</c><01:05:13.039><c> this</c><01:05:13.200><c> program</c><01:05:13.599><c> then</c><01:05:13.920><c> because</c>

01:05:14.230 --> 01:05:14.240 align:start position:0%
messing with this program then because
 

01:05:14.240 --> 01:05:16.630 align:start position:0%
messing with this program then because
you<01:05:14.319><c> can't</c><01:05:14.559><c> be</c><01:05:14.880><c> under</c><01:05:15.200><c> zero</c><01:05:15.599><c> years</c><01:05:15.839><c> old</c><01:05:16.079><c> right</c>

01:05:16.630 --> 01:05:16.640 align:start position:0%
you can't be under zero years old right
 

01:05:16.640 --> 01:05:19.190 align:start position:0%
you can't be under zero years old right
you<01:05:17.359><c> haven't</c><01:05:18.240><c> been</c>

01:05:19.190 --> 01:05:19.200 align:start position:0%
you haven't been
 

01:05:19.200 --> 01:05:20.549 align:start position:0%
you haven't been
born<01:05:19.680><c> yet</c>

01:05:20.549 --> 01:05:20.559 align:start position:0%
born yet
 

01:05:20.559 --> 01:05:22.630 align:start position:0%
born yet
so<01:05:20.799><c> after</c><01:05:21.119><c> running</c><01:05:21.359><c> this</c><01:05:21.599><c> program</c><01:05:22.079><c> if</c><01:05:22.240><c> i</c><01:05:22.400><c> say</c>

01:05:22.630 --> 01:05:22.640 align:start position:0%
so after running this program if i say
 

01:05:22.640 --> 01:05:24.630 align:start position:0%
so after running this program if i say
that<01:05:22.880><c> i'm</c><01:05:23.440><c> negative</c>

01:05:24.630 --> 01:05:24.640 align:start position:0%
that i'm negative
 

01:05:24.640 --> 01:05:26.150 align:start position:0%
that i'm negative
six

01:05:26.150 --> 01:05:26.160 align:start position:0%
six
 

01:05:26.160 --> 01:05:28.230 align:start position:0%
six
you<01:05:26.400><c> haven't</c><01:05:26.720><c> been</c><01:05:26.960><c> born</c><01:05:27.200><c> yet</c><01:05:27.599><c> so</c><01:05:27.839><c> we</c><01:05:28.000><c> will</c>

01:05:28.230 --> 01:05:28.240 align:start position:0%
you haven't been born yet so we will
 

01:05:28.240 --> 01:05:30.470 align:start position:0%
you haven't been born yet so we will
check<01:05:28.720><c> our</c><01:05:28.960><c> if</c><01:05:29.119><c> statement</c><01:05:29.599><c> first</c><01:05:30.160><c> if</c><01:05:30.319><c> this</c>

01:05:30.470 --> 01:05:30.480 align:start position:0%
check our if statement first if this
 

01:05:30.480 --> 01:05:32.870 align:start position:0%
check our if statement first if this
condition<01:05:30.960><c> is</c><01:05:31.119><c> false</c><01:05:31.839><c> we</c><01:05:32.000><c> will</c><01:05:32.160><c> move</c><01:05:32.480><c> down</c><01:05:32.720><c> to</c>

01:05:32.870 --> 01:05:32.880 align:start position:0%
condition is false we will move down to
 

01:05:32.880 --> 01:05:35.029 align:start position:0%
condition is false we will move down to
the<01:05:32.960><c> next</c><01:05:33.200><c> block</c><01:05:33.839><c> and</c><01:05:33.920><c> then</c><01:05:34.240><c> check</c><01:05:34.559><c> this</c><01:05:34.799><c> else</c>

01:05:35.029 --> 01:05:35.039 align:start position:0%
the next block and then check this else
 

01:05:35.039 --> 01:05:37.270 align:start position:0%
the next block and then check this else
if<01:05:35.200><c> condition</c><01:05:35.920><c> if</c><01:05:36.160><c> all</c><01:05:36.319><c> above</c><01:05:36.640><c> statements</c>

01:05:37.270 --> 01:05:37.280 align:start position:0%
if condition if all above statements
 

01:05:37.280 --> 01:05:39.589 align:start position:0%
if condition if all above statements
evaluate<01:05:37.920><c> to</c><01:05:38.000><c> be</c><01:05:38.160><c> false</c><01:05:38.720><c> we</c><01:05:38.880><c> will</c><01:05:39.119><c> execute</c>

01:05:39.589 --> 01:05:39.599 align:start position:0%
evaluate to be false we will execute
 

01:05:39.599 --> 01:05:41.750 align:start position:0%
evaluate to be false we will execute
this<01:05:39.839><c> else</c><01:05:40.160><c> block</c><01:05:40.559><c> as</c><01:05:40.720><c> a</c><01:05:40.799><c> last</c><01:05:41.119><c> resort</c><01:05:41.440><c> so</c><01:05:41.599><c> to</c>

01:05:41.750 --> 01:05:41.760 align:start position:0%
this else block as a last resort so to
 

01:05:41.760 --> 01:05:43.910 align:start position:0%
this else block as a last resort so to
say<01:05:42.240><c> and</c><01:05:42.480><c> with</c><01:05:42.640><c> these</c><01:05:42.880><c> else</c><01:05:43.200><c> if</c><01:05:43.359><c> blocks</c><01:05:43.760><c> you</c>

01:05:43.910 --> 01:05:43.920 align:start position:0%
say and with these else if blocks you
 

01:05:43.920 --> 01:05:45.270 align:start position:0%
say and with these else if blocks you
can<01:05:44.079><c> add</c><01:05:44.240><c> more</c><01:05:44.400><c> than</c><01:05:44.559><c> one</c><01:05:44.880><c> let's</c><01:05:45.119><c> check</c>

01:05:45.270 --> 01:05:45.280 align:start position:0%
can add more than one let's check
 

01:05:45.280 --> 01:05:46.630 align:start position:0%
can add more than one let's check
something<01:05:45.599><c> else</c>

01:05:46.630 --> 01:05:46.640 align:start position:0%
something else
 

01:05:46.640 --> 01:05:49.109 align:start position:0%
something else
just<01:05:46.799><c> to</c><01:05:46.960><c> demonstrate</c>

01:05:49.109 --> 01:05:49.119 align:start position:0%
just to demonstrate
 

01:05:49.119 --> 01:05:50.789 align:start position:0%
just to demonstrate
else<01:05:49.599><c> if</c>

01:05:50.789 --> 01:05:50.799 align:start position:0%
else if
 

01:05:50.799 --> 01:05:54.789 align:start position:0%
else if
what<01:05:50.960><c> about</c><01:05:51.359><c> age</c><01:05:51.760><c> is</c><01:05:52.079><c> equal</c><01:05:52.799><c> to</c><01:05:53.520><c> zero</c>

01:05:54.789 --> 01:05:54.799 align:start position:0%
what about age is equal to zero
 

01:05:54.799 --> 01:05:57.589 align:start position:0%
what about age is equal to zero
and<01:05:55.119><c> we</c><01:05:55.280><c> will</c><01:05:55.520><c> print</c>

01:05:57.589 --> 01:05:57.599 align:start position:0%
and we will print
 

01:05:57.599 --> 01:06:00.870 align:start position:0%
and we will print
you<01:05:58.160><c> can't</c><01:05:59.119><c> sign</c><01:05:59.760><c> up</c>

01:06:00.870 --> 01:06:00.880 align:start position:0%
you can't sign up
 

01:06:00.880 --> 01:06:05.670 align:start position:0%
you can't sign up
you<01:06:01.440><c> were</c><01:06:02.079><c> just</c><01:06:02.559><c> born</c>

01:06:05.670 --> 01:06:05.680 align:start position:0%
 
 

01:06:05.680 --> 01:06:08.549 align:start position:0%
 
and<01:06:05.920><c> to</c><01:06:06.000><c> your</c><01:06:06.240><c> age</c><01:06:06.480><c> i</c><01:06:06.799><c> am</c><01:06:07.039><c> zero</c><01:06:07.440><c> years</c><01:06:07.760><c> old</c>

01:06:08.549 --> 01:06:08.559 align:start position:0%
and to your age i am zero years old
 

01:06:08.559 --> 01:06:10.789 align:start position:0%
and to your age i am zero years old
you<01:06:08.720><c> can't</c><01:06:09.039><c> sign</c><01:06:09.280><c> up</c><01:06:09.520><c> you</c><01:06:09.680><c> were</c><01:06:09.839><c> just</c><01:06:10.079><c> born</c><01:06:10.640><c> if</c>

01:06:10.789 --> 01:06:10.799 align:start position:0%
you can't sign up you were just born if
 

01:06:10.799 --> 01:06:12.789 align:start position:0%
you can't sign up you were just born if
one<01:06:10.960><c> of</c><01:06:11.039><c> these</c><01:06:11.200><c> conditions</c><01:06:11.920><c> evaluates</c><01:06:12.559><c> to</c><01:06:12.640><c> be</c>

01:06:12.789 --> 01:06:12.799 align:start position:0%
one of these conditions evaluates to be
 

01:06:12.799 --> 01:06:14.150 align:start position:0%
one of these conditions evaluates to be
true<01:06:13.119><c> we</c><01:06:13.280><c> will</c><01:06:13.440><c> skip</c><01:06:13.760><c> all</c><01:06:13.920><c> of</c><01:06:14.000><c> these</c>

01:06:14.150 --> 01:06:14.160 align:start position:0%
true we will skip all of these
 

01:06:14.160 --> 01:06:16.309 align:start position:0%
true we will skip all of these
statements<01:06:14.640><c> that</c><01:06:14.799><c> come</c><01:06:15.119><c> after</c><01:06:15.760><c> then</c><01:06:15.920><c> with</c><01:06:16.160><c> our</c>

01:06:16.309 --> 01:06:16.319 align:start position:0%
statements that come after then with our
 

01:06:16.319 --> 01:06:18.230 align:start position:0%
statements that come after then with our
else<01:06:16.640><c> block</c><01:06:16.960><c> if</c><01:06:17.200><c> all</c><01:06:17.359><c> above</c><01:06:17.680><c> statements</c>

01:06:18.230 --> 01:06:18.240 align:start position:0%
else block if all above statements
 

01:06:18.240 --> 01:06:20.630 align:start position:0%
else block if all above statements
evaluate<01:06:18.799><c> to</c><01:06:18.880><c> be</c><01:06:19.119><c> false</c><01:06:19.760><c> we</c><01:06:19.920><c> definitely</c>

01:06:20.630 --> 01:06:20.640 align:start position:0%
evaluate to be false we definitely
 

01:06:20.640 --> 01:06:22.630 align:start position:0%
evaluate to be false we definitely
execute<01:06:21.119><c> whatever's</c><01:06:21.520><c> within</c><01:06:21.839><c> here</c>

01:06:22.630 --> 01:06:22.640 align:start position:0%
execute whatever's within here
 

01:06:22.640 --> 01:06:25.029 align:start position:0%
execute whatever's within here
so<01:06:22.880><c> yeah</c><01:06:23.119><c> those</c><01:06:23.520><c> are</c><01:06:23.760><c> if</c><01:06:23.920><c> statements</c><01:06:24.480><c> they</c><01:06:24.720><c> add</c>

01:06:25.029 --> 01:06:25.039 align:start position:0%
so yeah those are if statements they add
 

01:06:25.039 --> 01:06:27.109 align:start position:0%
so yeah those are if statements they add
some<01:06:25.280><c> choice</c><01:06:25.680><c> to</c><01:06:25.839><c> a</c><01:06:25.920><c> program</c><01:06:26.640><c> you</c><01:06:26.799><c> can</c><01:06:26.960><c> check</c>

01:06:27.109 --> 01:06:27.119 align:start position:0%
some choice to a program you can check
 

01:06:27.119 --> 01:06:29.589 align:start position:0%
some choice to a program you can check
to<01:06:27.280><c> see</c><01:06:27.599><c> if</c><01:06:27.839><c> some</c><01:06:28.079><c> condition</c><01:06:28.559><c> is</c><01:06:28.640><c> true</c><01:06:29.119><c> if</c><01:06:29.280><c> not</c>

01:06:29.589 --> 01:06:29.599 align:start position:0%
to see if some condition is true if not
 

01:06:29.599 --> 01:06:31.270 align:start position:0%
to see if some condition is true if not
you<01:06:29.680><c> can</c><01:06:29.839><c> check</c><01:06:30.079><c> something</c><01:06:30.400><c> else</c><01:06:30.720><c> using</c><01:06:31.039><c> else</c>

01:06:31.270 --> 01:06:31.280 align:start position:0%
you can check something else using else
 

01:06:31.280 --> 01:06:33.349 align:start position:0%
you can check something else using else
if<01:06:31.440><c> statements</c><01:06:32.160><c> you</c><01:06:32.319><c> can</c><01:06:32.480><c> perform</c><01:06:32.880><c> whatever</c>

01:06:33.349 --> 01:06:33.359 align:start position:0%
if statements you can perform whatever
 

01:06:33.359 --> 01:06:34.870 align:start position:0%
if statements you can perform whatever
is<01:06:33.440><c> within</c><01:06:33.760><c> an</c><01:06:33.920><c> else</c><01:06:34.160><c> block</c><01:06:34.480><c> and</c><01:06:34.640><c> that's</c>

01:06:34.870 --> 01:06:34.880 align:start position:0%
is within an else block and that's
 

01:06:34.880 --> 01:06:37.349 align:start position:0%
is within an else block and that's
optional<01:06:35.680><c> so</c><01:06:35.839><c> yeah</c><01:06:36.160><c> those</c><01:06:36.400><c> are</c><01:06:36.640><c> if</c><01:06:36.880><c> statements</c>

01:06:37.349 --> 01:06:37.359 align:start position:0%
optional so yeah those are if statements
 

01:06:37.359 --> 01:06:39.349 align:start position:0%
optional so yeah those are if statements
and<01:06:37.599><c> see</c><01:06:38.079><c> if</c><01:06:38.240><c> you</c><01:06:38.319><c> found</c><01:06:38.559><c> this</c><01:06:38.640><c> video</c><01:06:38.880><c> helpful</c>

01:06:39.349 --> 01:06:39.359 align:start position:0%
and see if you found this video helpful
 

01:06:39.359 --> 01:06:41.029 align:start position:0%
and see if you found this video helpful
please<01:06:39.520><c> be</c><01:06:39.760><c> sure</c><01:06:40.000><c> to</c><01:06:40.160><c> help</c><01:06:40.400><c> me</c><01:06:40.559><c> out</c><01:06:40.720><c> by</c>

01:06:41.029 --> 01:06:41.039 align:start position:0%
please be sure to help me out by
 

01:06:41.039 --> 01:06:42.789 align:start position:0%
please be sure to help me out by
smashing<01:06:41.440><c> that</c><01:06:41.599><c> like</c><01:06:41.839><c> button</c><01:06:42.160><c> leave</c><01:06:42.400><c> a</c><01:06:42.480><c> random</c>

01:06:42.789 --> 01:06:42.799 align:start position:0%
smashing that like button leave a random
 

01:06:42.799 --> 01:06:44.549 align:start position:0%
smashing that like button leave a random
comment<01:06:43.039><c> down</c><01:06:43.280><c> below</c><01:06:43.760><c> and</c><01:06:44.000><c> subscribe</c><01:06:44.480><c> if</c>

01:06:44.549 --> 01:06:44.559 align:start position:0%
comment down below and subscribe if
 

01:06:44.559 --> 01:06:48.390 align:start position:0%
comment down below and subscribe if
you'd<01:06:44.720><c> like</c><01:06:44.880><c> to</c><01:06:44.960><c> become</c><01:06:45.280><c> a</c><01:06:45.359><c> fellow</c><01:06:45.599><c> bro</c>

01:06:48.390 --> 01:06:48.400 align:start position:0%
 
 

01:06:48.400 --> 01:06:51.270 align:start position:0%
 
all<01:06:48.640><c> right</c><01:06:49.039><c> welcome</c><01:06:49.359><c> back</c><01:06:49.599><c> people</c><01:06:50.160><c> switches</c><01:06:51.039><c> a</c>

01:06:51.270 --> 01:06:51.280 align:start position:0%
all right welcome back people switches a
 

01:06:51.280 --> 01:06:53.990 align:start position:0%
all right welcome back people switches a
switch<01:06:51.839><c> is</c><01:06:52.079><c> a</c><01:06:52.400><c> more</c><01:06:52.640><c> efficient</c><01:06:53.119><c> alternative</c>

01:06:53.990 --> 01:06:54.000 align:start position:0%
switch is a more efficient alternative
 

01:06:54.000 --> 01:06:56.390 align:start position:0%
switch is a more efficient alternative
to<01:06:54.160><c> using</c><01:06:54.720><c> many</c><01:06:55.039><c> else</c><01:06:55.359><c> if</c><01:06:55.520><c> statements</c><01:06:56.160><c> it</c>

01:06:56.390 --> 01:06:56.400 align:start position:0%
to using many else if statements it
 

01:06:56.400 --> 01:06:58.950 align:start position:0%
to using many else if statements it
allows<01:06:56.720><c> a</c><01:06:56.799><c> value</c><01:06:57.200><c> to</c><01:06:57.359><c> be</c><01:06:57.520><c> tested</c><01:06:58.079><c> for</c><01:06:58.240><c> equality</c>

01:06:58.950 --> 01:06:58.960 align:start position:0%
allows a value to be tested for equality
 

01:06:58.960 --> 01:07:01.510 align:start position:0%
allows a value to be tested for equality
against<01:06:59.440><c> many</c><01:06:59.760><c> cases</c><01:07:00.480><c> here's</c><01:07:00.799><c> an</c><01:07:00.960><c> example</c><01:07:01.440><c> of</c>

01:07:01.510 --> 01:07:01.520 align:start position:0%
against many cases here's an example of
 

01:07:01.520 --> 01:07:03.430 align:start position:0%
against many cases here's an example of
where<01:07:01.839><c> a</c><01:07:02.000><c> switch</c><01:07:02.319><c> would</c><01:07:02.480><c> be</c><01:07:02.640><c> useful</c><01:07:03.119><c> i</c><01:07:03.200><c> have</c><01:07:03.359><c> a</c>

01:07:03.430 --> 01:07:03.440 align:start position:0%
where a switch would be useful i have a
 

01:07:03.440 --> 01:07:05.750 align:start position:0%
where a switch would be useful i have a
small<01:07:03.680><c> program</c><01:07:04.400><c> we</c><01:07:04.559><c> will</c><01:07:04.799><c> tell</c><01:07:04.960><c> a</c><01:07:05.119><c> user</c><01:07:05.599><c> to</c>

01:07:05.750 --> 01:07:05.760 align:start position:0%
small program we will tell a user to
 

01:07:05.760 --> 01:07:08.230 align:start position:0%
small program we will tell a user to
enter<01:07:06.079><c> in</c><01:07:06.319><c> a</c><01:07:06.559><c> letter</c><01:07:06.799><c> grade</c><01:07:07.520><c> and</c><01:07:07.760><c> depending</c><01:07:08.160><c> on</c>

01:07:08.230 --> 01:07:08.240 align:start position:0%
enter in a letter grade and depending on
 

01:07:08.240 --> 01:07:10.069 align:start position:0%
enter in a letter grade and depending on
their<01:07:08.400><c> grade</c><01:07:08.799><c> we</c><01:07:08.960><c> will</c><01:07:09.119><c> print</c><01:07:09.520><c> a</c><01:07:09.680><c> custom</c>

01:07:10.069 --> 01:07:10.079 align:start position:0%
their grade we will print a custom
 

01:07:10.079 --> 01:07:11.029 align:start position:0%
their grade we will print a custom
message

01:07:11.029 --> 01:07:11.039 align:start position:0%
message
 

01:07:11.039 --> 01:07:13.750 align:start position:0%
message
if<01:07:11.200><c> grade</c><01:07:11.599><c> equals</c><01:07:12.000><c> a</c><01:07:12.240><c> will</c><01:07:12.400><c> print</c><01:07:12.799><c> perfect</c>

01:07:13.750 --> 01:07:13.760 align:start position:0%
if grade equals a will print perfect
 

01:07:13.760 --> 01:07:16.230 align:start position:0%
if grade equals a will print perfect
else<01:07:14.160><c> if</c><01:07:14.559><c> grade</c><01:07:14.880><c> equals</c><01:07:15.280><c> b</c><01:07:15.680><c> will</c><01:07:15.920><c> print</c><01:07:16.160><c> a</c>

01:07:16.230 --> 01:07:16.240 align:start position:0%
else if grade equals b will print a
 

01:07:16.240 --> 01:07:18.789 align:start position:0%
else if grade equals b will print a
different<01:07:16.480><c> message</c><01:07:17.200><c> so</c><01:07:17.520><c> on</c><01:07:17.680><c> and</c><01:07:17.839><c> so</c><01:07:18.079><c> forth</c><01:07:18.559><c> so</c>

01:07:18.789 --> 01:07:18.799 align:start position:0%
different message so on and so forth so
 

01:07:18.799 --> 01:07:21.109 align:start position:0%
different message so on and so forth so
it's<01:07:18.960><c> considered</c><01:07:19.599><c> bad</c><01:07:19.920><c> practice</c><01:07:20.559><c> to</c><01:07:20.720><c> use</c><01:07:21.039><c> a</c>

01:07:21.109 --> 01:07:21.119 align:start position:0%
it's considered bad practice to use a
 

01:07:21.119 --> 01:07:23.270 align:start position:0%
it's considered bad practice to use a
lot<01:07:21.280><c> of</c><01:07:21.440><c> else</c><01:07:21.839><c> if</c><01:07:22.000><c> statements</c><01:07:22.720><c> a</c><01:07:22.960><c> better</c>

01:07:23.270 --> 01:07:23.280 align:start position:0%
lot of else if statements a better
 

01:07:23.280 --> 01:07:25.910 align:start position:0%
lot of else if statements a better
alternative<01:07:24.160><c> is</c><01:07:24.319><c> to</c><01:07:24.480><c> use</c><01:07:24.799><c> a</c><01:07:24.960><c> switch</c><01:07:25.680><c> here's</c>

01:07:25.910 --> 01:07:25.920 align:start position:0%
alternative is to use a switch here's
 

01:07:25.920 --> 01:07:29.190 align:start position:0%
alternative is to use a switch here's
how<01:07:26.079><c> we</c><01:07:26.160><c> can</c><01:07:26.319><c> create</c><01:07:26.839><c> one</c><01:07:27.920><c> type</c><01:07:28.559><c> switch</c>

01:07:29.190 --> 01:07:29.200 align:start position:0%
how we can create one type switch
 

01:07:29.200 --> 01:07:30.470 align:start position:0%
how we can create one type switch
parentheses

01:07:30.470 --> 01:07:30.480 align:start position:0%
parentheses
 

01:07:30.480 --> 01:07:33.109 align:start position:0%
parentheses
curly<01:07:30.799><c> braces</c><01:07:31.760><c> whatever</c><01:07:32.240><c> value</c><01:07:32.799><c> you</c><01:07:32.960><c> would</c>

01:07:33.109 --> 01:07:33.119 align:start position:0%
curly braces whatever value you would
 

01:07:33.119 --> 01:07:35.430 align:start position:0%
curly braces whatever value you would
like<01:07:33.359><c> to</c><01:07:33.599><c> examine</c><01:07:34.240><c> for</c><01:07:34.480><c> equality</c><01:07:35.200><c> placed</c>

01:07:35.430 --> 01:07:35.440 align:start position:0%
like to examine for equality placed
 

01:07:35.440 --> 01:07:37.829 align:start position:0%
like to examine for equality placed
within<01:07:36.000><c> the</c><01:07:36.240><c> parentheses</c><01:07:37.200><c> i</c><01:07:37.280><c> would</c><01:07:37.440><c> like</c><01:07:37.599><c> to</c>

01:07:37.829 --> 01:07:37.839 align:start position:0%
within the parentheses i would like to
 

01:07:37.839 --> 01:07:40.069 align:start position:0%
within the parentheses i would like to
examine<01:07:38.559><c> my</c><01:07:38.880><c> grade</c><01:07:39.359><c> and</c><01:07:39.520><c> now</c><01:07:39.680><c> we</c><01:07:39.839><c> need</c><01:07:40.000><c> to</c>

01:07:40.069 --> 01:07:40.079 align:start position:0%
examine my grade and now we need to
 

01:07:40.079 --> 01:07:42.069 align:start position:0%
examine my grade and now we need to
write<01:07:40.319><c> some</c><01:07:40.559><c> cases</c>

01:07:42.069 --> 01:07:42.079 align:start position:0%
write some cases
 

01:07:42.079 --> 01:07:42.950 align:start position:0%
write some cases
case

01:07:42.950 --> 01:07:42.960 align:start position:0%
case
 

01:07:42.960 --> 01:07:44.870 align:start position:0%
case
and<01:07:43.119><c> then</c><01:07:43.440><c> some</c><01:07:43.680><c> value</c><01:07:44.160><c> you</c><01:07:44.240><c> would</c><01:07:44.400><c> like</c><01:07:44.640><c> to</c>

01:07:44.870 --> 01:07:44.880 align:start position:0%
and then some value you would like to
 

01:07:44.880 --> 01:07:46.549 align:start position:0%
and then some value you would like to
test<01:07:45.119><c> for</c><01:07:45.359><c> equality</c>

01:07:46.549 --> 01:07:46.559 align:start position:0%
test for equality
 

01:07:46.559 --> 01:07:48.630 align:start position:0%
test for equality
so<01:07:46.799><c> i</c><01:07:46.960><c> am</c><01:07:47.119><c> comparing</c><01:07:47.680><c> characters</c><01:07:48.319><c> i</c><01:07:48.480><c> will</c>

01:07:48.630 --> 01:07:48.640 align:start position:0%
so i am comparing characters i will
 

01:07:48.640 --> 01:07:50.390 align:start position:0%
so i am comparing characters i will
write<01:07:48.960><c> the</c><01:07:49.119><c> character</c><01:07:49.680><c> a</c>

01:07:50.390 --> 01:07:50.400 align:start position:0%
write the character a
 

01:07:50.400 --> 01:07:51.510 align:start position:0%
write the character a
colon

01:07:51.510 --> 01:07:51.520 align:start position:0%
colon
 

01:07:51.520 --> 01:07:53.510 align:start position:0%
colon
then<01:07:51.760><c> if</c><01:07:51.920><c> these</c><01:07:52.240><c> values</c><01:07:52.640><c> match</c><01:07:53.039><c> we</c><01:07:53.280><c> will</c>

01:07:53.510 --> 01:07:53.520 align:start position:0%
then if these values match we will
 

01:07:53.520 --> 01:07:55.589 align:start position:0%
then if these values match we will
execute<01:07:54.079><c> some</c><01:07:54.319><c> subset</c><01:07:54.720><c> of</c><01:07:54.799><c> code</c><01:07:55.119><c> kind</c><01:07:55.359><c> of</c><01:07:55.440><c> like</c>

01:07:55.589 --> 01:07:55.599 align:start position:0%
execute some subset of code kind of like
 

01:07:55.599 --> 01:07:57.670 align:start position:0%
execute some subset of code kind of like
an<01:07:55.680><c> if</c><01:07:55.839><c> statement</c>

01:07:57.670 --> 01:07:57.680 align:start position:0%
an if statement
 

01:07:57.680 --> 01:08:00.789 align:start position:0%
an if statement
let's<01:07:58.000><c> print</c>

01:08:00.789 --> 01:08:00.799 align:start position:0%
 
 

01:08:00.799 --> 01:08:03.510 align:start position:0%
 
perfect

01:08:03.510 --> 01:08:03.520 align:start position:0%
 
 

01:08:03.520 --> 01:08:06.309 align:start position:0%
 
and<01:08:03.680><c> then</c><01:08:03.920><c> add</c><01:08:04.240><c> a</c><01:08:04.480><c> break</c><01:08:04.799><c> afterwards</c>

01:08:06.309 --> 01:08:06.319 align:start position:0%
and then add a break afterwards
 

01:08:06.319 --> 01:08:10.470 align:start position:0%
and then add a break afterwards
then<01:08:06.480><c> you</c><01:08:06.640><c> can</c><01:08:06.799><c> add</c><01:08:06.960><c> another</c><01:08:07.280><c> case</c>

01:08:10.470 --> 01:08:10.480 align:start position:0%
 
 

01:08:10.480 --> 01:08:13.349 align:start position:0%
 
so<01:08:10.880><c> case</c><01:08:11.280><c> b</c>

01:08:13.349 --> 01:08:13.359 align:start position:0%
so case b
 

01:08:13.359 --> 01:08:17.430 align:start position:0%
so case b
you<01:08:13.839><c> did</c><01:08:14.319><c> good</c>

01:08:17.430 --> 01:08:17.440 align:start position:0%
 
 

01:08:17.440 --> 01:08:19.590 align:start position:0%
 
casey

01:08:19.590 --> 01:08:19.600 align:start position:0%
casey
 

01:08:19.600 --> 01:08:20.950 align:start position:0%
casey
you<01:08:20.000><c> did</c>

01:08:20.950 --> 01:08:20.960 align:start position:0%
you did
 

01:08:20.960 --> 01:08:23.430 align:start position:0%
you did
okay

01:08:23.430 --> 01:08:23.440 align:start position:0%
 
 

01:08:23.440 --> 01:08:25.510 align:start position:0%
 
case<01:08:23.920><c> d</c>

01:08:25.510 --> 01:08:25.520 align:start position:0%
case d
 

01:08:25.520 --> 01:08:31.430 align:start position:0%
case d
at<01:08:25.839><c> least</c><01:08:26.319><c> it's</c><01:08:26.560><c> not</c><01:08:26.799><c> an</c><01:08:26.960><c> f</c>

01:08:31.430 --> 01:08:31.440 align:start position:0%
 
 

01:08:31.440 --> 01:08:33.669 align:start position:0%
 
case<01:08:32.000><c> f</c>

01:08:33.669 --> 01:08:33.679 align:start position:0%
case f
 

01:08:33.679 --> 01:08:36.149 align:start position:0%
case f
you<01:08:34.000><c> failed</c>

01:08:36.149 --> 01:08:36.159 align:start position:0%
you failed
 

01:08:36.159 --> 01:08:38.070 align:start position:0%
you failed
now<01:08:36.319><c> you</c><01:08:36.480><c> can</c><01:08:36.719><c> add</c><01:08:36.880><c> a</c><01:08:36.960><c> default</c><01:08:37.440><c> case</c><01:08:37.839><c> this</c>

01:08:38.070 --> 01:08:38.080 align:start position:0%
now you can add a default case this
 

01:08:38.080 --> 01:08:40.390 align:start position:0%
now you can add a default case this
functions<01:08:38.719><c> like</c><01:08:38.960><c> an</c><01:08:39.120><c> else</c><01:08:39.279><c> statement</c><01:08:39.839><c> if</c><01:08:40.080><c> no</c>

01:08:40.390 --> 01:08:40.400 align:start position:0%
functions like an else statement if no
 

01:08:40.400 --> 01:08:42.789 align:start position:0%
functions like an else statement if no
other<01:08:40.719><c> cases</c><01:08:41.199><c> match</c><01:08:41.920><c> we</c><01:08:42.080><c> will</c><01:08:42.400><c> execute</c>

01:08:42.789 --> 01:08:42.799 align:start position:0%
other cases match we will execute
 

01:08:42.799 --> 01:08:45.910 align:start position:0%
other cases match we will execute
whatever's<01:08:43.199><c> within</c><01:08:43.600><c> our</c><01:08:43.759><c> default</c><01:08:44.159><c> case</c>

01:08:45.910 --> 01:08:45.920 align:start position:0%
whatever's within our default case
 

01:08:45.920 --> 01:08:48.149 align:start position:0%
whatever's within our default case
so<01:08:46.239><c> that</c><01:08:46.480><c> means</c><01:08:46.799><c> there</c><01:08:47.040><c> are</c><01:08:47.279><c> no</c><01:08:47.759><c> matching</c>

01:08:48.149 --> 01:08:48.159 align:start position:0%
so that means there are no matching
 

01:08:48.159 --> 01:08:49.430 align:start position:0%
so that means there are no matching
letter<01:08:48.480><c> grades</c>

01:08:49.430 --> 01:08:49.440 align:start position:0%
letter grades
 

01:08:49.440 --> 01:08:50.789 align:start position:0%
letter grades
so<01:08:49.679><c> let's</c><01:08:49.920><c> print</c>

01:08:50.789 --> 01:08:50.799 align:start position:0%
so let's print
 

01:08:50.799 --> 01:08:55.349 align:start position:0%
so let's print
please<01:08:51.520><c> enter</c><01:08:52.239><c> only</c><01:08:52.960><c> valid</c><01:08:53.920><c> grades</c>

01:08:55.349 --> 01:08:55.359 align:start position:0%
please enter only valid grades
 

01:08:55.359 --> 01:08:57.669 align:start position:0%
please enter only valid grades
and<01:08:55.679><c> let's</c><01:08:56.000><c> test</c><01:08:56.319><c> it</c>

01:08:57.669 --> 01:08:57.679 align:start position:0%
and let's test it
 

01:08:57.679 --> 01:09:00.550 align:start position:0%
and let's test it
enter<01:08:58.000><c> a</c><01:08:58.080><c> letter</c><01:08:58.400><c> grade</c><01:08:58.960><c> a</c>

01:09:00.550 --> 01:09:00.560 align:start position:0%
enter a letter grade a
 

01:09:00.560 --> 01:09:02.309 align:start position:0%
enter a letter grade a
this<01:09:00.719><c> will</c><01:09:00.960><c> print</c><01:09:01.279><c> perfect</c><01:09:01.839><c> whatever's</c>

01:09:02.309 --> 01:09:02.319 align:start position:0%
this will print perfect whatever's
 

01:09:02.319 --> 01:09:04.550 align:start position:0%
this will print perfect whatever's
within<01:09:02.799><c> our</c><01:09:02.960><c> matching</c><01:09:03.359><c> case</c>

01:09:04.550 --> 01:09:04.560 align:start position:0%
within our matching case
 

01:09:04.560 --> 01:09:06.789 align:start position:0%
within our matching case
let's<01:09:04.799><c> try</c><01:09:04.960><c> it</c><01:09:05.120><c> again</c>

01:09:06.789 --> 01:09:06.799 align:start position:0%
let's try it again
 

01:09:06.799 --> 01:09:10.309 align:start position:0%
let's try it again
b<01:09:07.279><c> you</c><01:09:07.440><c> did</c><01:09:07.679><c> good</c>

01:09:10.309 --> 01:09:10.319 align:start position:0%
 
 

01:09:10.319 --> 01:09:14.229 align:start position:0%
 
see<01:09:10.719><c> you</c><01:09:10.880><c> did</c><01:09:11.120><c> okay</c>

01:09:14.229 --> 01:09:14.239 align:start position:0%
 
 

01:09:14.239 --> 01:09:19.510 align:start position:0%
 
d<01:09:14.799><c> at</c><01:09:15.040><c> least</c><01:09:15.359><c> it's</c><01:09:15.520><c> not</c><01:09:15.759><c> enough</c>

01:09:19.510 --> 01:09:19.520 align:start position:0%
 
 

01:09:19.520 --> 01:09:21.669 align:start position:0%
 
f<01:09:20.239><c> you</c><01:09:20.480><c> failed</c>

01:09:21.669 --> 01:09:21.679 align:start position:0%
f you failed
 

01:09:21.679 --> 01:09:23.829 align:start position:0%
f you failed
and<01:09:21.920><c> if</c><01:09:22.080><c> there</c><01:09:22.239><c> are</c><01:09:22.400><c> no</c><01:09:22.640><c> matching</c><01:09:23.040><c> cases</c><01:09:23.679><c> we</c>

01:09:23.829 --> 01:09:23.839 align:start position:0%
and if there are no matching cases we
 

01:09:23.839 --> 01:09:26.229 align:start position:0%
and if there are no matching cases we
will<01:09:24.080><c> execute</c><01:09:24.640><c> our</c><01:09:24.799><c> default</c><01:09:25.120><c> case</c><01:09:25.839><c> uh</c><01:09:26.000><c> how</c>

01:09:26.229 --> 01:09:26.239 align:start position:0%
will execute our default case uh how
 

01:09:26.239 --> 01:09:28.709 align:start position:0%
will execute our default case uh how
about<01:09:26.560><c> w</c><01:09:27.279><c> for</c><01:09:27.600><c> win</c>

01:09:28.709 --> 01:09:28.719 align:start position:0%
about w for win
 

01:09:28.719 --> 01:09:31.269 align:start position:0%
about w for win
please<01:09:29.120><c> enter</c><01:09:29.520><c> only</c><01:09:29.839><c> valid</c><01:09:30.319><c> grades</c><01:09:31.120><c> the</c>

01:09:31.269 --> 01:09:31.279 align:start position:0%
please enter only valid grades the
 

01:09:31.279 --> 01:09:33.189 align:start position:0%
please enter only valid grades the
reason<01:09:31.679><c> that</c><01:09:31.839><c> we</c><01:09:32.000><c> add</c><01:09:32.319><c> breaks</c><01:09:32.719><c> after</c><01:09:32.960><c> each</c>

01:09:33.189 --> 01:09:33.199 align:start position:0%
reason that we add breaks after each
 

01:09:33.199 --> 01:09:35.030 align:start position:0%
reason that we add breaks after each
case<01:09:33.679><c> is</c><01:09:33.759><c> so</c><01:09:34.000><c> we</c><01:09:34.080><c> can</c><01:09:34.319><c> break</c><01:09:34.640><c> out</c><01:09:34.799><c> of</c><01:09:34.960><c> our</c>

01:09:35.030 --> 01:09:35.040 align:start position:0%
case is so we can break out of our
 

01:09:35.040 --> 01:09:37.110 align:start position:0%
case is so we can break out of our
switch<01:09:35.440><c> and</c><01:09:35.600><c> exit</c><01:09:36.400><c> let</c><01:09:36.560><c> me</c><01:09:36.719><c> show</c><01:09:36.880><c> you</c><01:09:36.960><c> what</c>

01:09:37.110 --> 01:09:37.120 align:start position:0%
switch and exit let me show you what
 

01:09:37.120 --> 01:09:38.789 align:start position:0%
switch and exit let me show you what
this<01:09:37.279><c> looks</c><01:09:37.520><c> like</c><01:09:37.839><c> if</c><01:09:37.920><c> we</c><01:09:38.000><c> do</c><01:09:38.159><c> not</c><01:09:38.400><c> have</c><01:09:38.560><c> any</c>

01:09:38.789 --> 01:09:38.799 align:start position:0%
this looks like if we do not have any
 

01:09:38.799 --> 01:09:41.910 align:start position:0%
this looks like if we do not have any
breaks

01:09:41.910 --> 01:09:41.920 align:start position:0%
 
 

01:09:41.920 --> 01:09:44.070 align:start position:0%
 
now<01:09:42.159><c> let's</c><01:09:42.400><c> say</c><01:09:42.560><c> that</c><01:09:42.719><c> we</c><01:09:42.960><c> have</c><01:09:43.199><c> a</c><01:09:43.520><c> c</c><01:09:43.759><c> letter</c>

01:09:44.070 --> 01:09:44.080 align:start position:0%
now let's say that we have a c letter
 

01:09:44.080 --> 01:09:45.189 align:start position:0%
now let's say that we have a c letter
grade

01:09:45.189 --> 01:09:45.199 align:start position:0%
grade
 

01:09:45.199 --> 01:09:47.430 align:start position:0%
grade
you<01:09:45.440><c> did</c><01:09:45.679><c> okay</c><01:09:46.319><c> at</c><01:09:46.400><c> least</c><01:09:46.640><c> it's</c><01:09:46.799><c> not</c><01:09:47.040><c> enough</c>

01:09:47.430 --> 01:09:47.440 align:start position:0%
you did okay at least it's not enough
 

01:09:47.440 --> 01:09:49.669 align:start position:0%
you did okay at least it's not enough
you<01:09:47.679><c> failed</c><01:09:48.239><c> please</c><01:09:48.640><c> enter</c><01:09:49.040><c> only</c><01:09:49.279><c> valid</c>

01:09:49.669 --> 01:09:49.679 align:start position:0%
you failed please enter only valid
 

01:09:49.679 --> 01:09:50.709 align:start position:0%
you failed please enter only valid
grades

01:09:50.709 --> 01:09:50.719 align:start position:0%
grades
 

01:09:50.719 --> 01:09:52.789 align:start position:0%
grades
so<01:09:50.880><c> the</c><01:09:51.040><c> reason</c><01:09:51.359><c> that</c><01:09:51.520><c> we</c><01:09:51.600><c> have</c><01:09:51.759><c> breaks</c><01:09:52.400><c> is</c><01:09:52.560><c> to</c>

01:09:52.789 --> 01:09:52.799 align:start position:0%
so the reason that we have breaks is to
 

01:09:52.799 --> 01:09:54.790 align:start position:0%
so the reason that we have breaks is to
exit<01:09:53.199><c> out</c><01:09:53.279><c> of</c><01:09:53.440><c> our</c><01:09:53.520><c> switch</c><01:09:54.320><c> if</c><01:09:54.480><c> we</c><01:09:54.560><c> have</c><01:09:54.719><c> a</c>

01:09:54.790 --> 01:09:54.800 align:start position:0%
exit out of our switch if we have a
 

01:09:54.800 --> 01:09:57.110 align:start position:0%
exit out of our switch if we have a
matching<01:09:55.199><c> case</c><01:09:55.600><c> and</c><01:09:55.760><c> there</c><01:09:56.000><c> are</c><01:09:56.159><c> no</c><01:09:56.400><c> breaks</c><01:09:56.960><c> we</c>

01:09:57.110 --> 01:09:57.120 align:start position:0%
matching case and there are no breaks we
 

01:09:57.120 --> 01:09:59.270 align:start position:0%
matching case and there are no breaks we
will<01:09:57.360><c> continue</c><01:09:57.840><c> executing</c><01:09:58.480><c> each</c><01:09:58.800><c> case</c><01:09:59.120><c> that</c>

01:09:59.270 --> 01:09:59.280 align:start position:0%
will continue executing each case that
 

01:09:59.280 --> 01:10:01.430 align:start position:0%
will continue executing each case that
comes<01:09:59.600><c> after</c><01:10:00.320><c> so</c><01:10:00.560><c> it</c><01:10:00.719><c> is</c><01:10:00.880><c> important</c><01:10:01.199><c> to</c><01:10:01.280><c> have</c>

01:10:01.430 --> 01:10:01.440 align:start position:0%
comes after so it is important to have
 

01:10:01.440 --> 01:10:03.430 align:start position:0%
comes after so it is important to have
those<01:10:01.760><c> breaks</c><01:10:02.159><c> if</c><01:10:02.239><c> you</c><01:10:02.400><c> want</c><01:10:02.640><c> to</c><01:10:02.800><c> exit</c><01:10:03.199><c> out</c><01:10:03.360><c> of</c>

01:10:03.430 --> 01:10:03.440 align:start position:0%
those breaks if you want to exit out of
 

01:10:03.440 --> 01:10:05.430 align:start position:0%
those breaks if you want to exit out of
your<01:10:03.600><c> switch</c><01:10:04.159><c> well</c><01:10:04.480><c> yeah</c><01:10:04.719><c> that's</c><01:10:04.960><c> a</c><01:10:05.040><c> switch</c>

01:10:05.430 --> 01:10:05.440 align:start position:0%
your switch well yeah that's a switch
 

01:10:05.440 --> 01:10:07.430 align:start position:0%
your switch well yeah that's a switch
everybody<01:10:06.000><c> it's</c><01:10:06.239><c> a</c><01:10:06.640><c> more</c><01:10:06.960><c> efficient</c>

01:10:07.430 --> 01:10:07.440 align:start position:0%
everybody it's a more efficient
 

01:10:07.440 --> 01:10:09.830 align:start position:0%
everybody it's a more efficient
alternative<01:10:08.400><c> to</c><01:10:08.640><c> using</c><01:10:09.040><c> many</c><01:10:09.360><c> else</c><01:10:09.679><c> if</c>

01:10:09.830 --> 01:10:09.840 align:start position:0%
alternative to using many else if
 

01:10:09.840 --> 01:10:11.990 align:start position:0%
alternative to using many else if
statements<01:10:10.560><c> using</c><01:10:10.880><c> a</c><01:10:10.960><c> few</c><01:10:11.120><c> elsif</c><01:10:11.600><c> statements</c>

01:10:11.990 --> 01:10:12.000 align:start position:0%
statements using a few elsif statements
 

01:10:12.000 --> 01:10:13.830 align:start position:0%
statements using a few elsif statements
is<01:10:12.159><c> okay</c><01:10:12.719><c> but</c><01:10:12.880><c> it's</c><01:10:13.040><c> considered</c><01:10:13.600><c> poor</c>

01:10:13.830 --> 01:10:13.840 align:start position:0%
is okay but it's considered poor
 

01:10:13.840 --> 01:10:16.390 align:start position:0%
is okay but it's considered poor
practice<01:10:14.400><c> to</c><01:10:14.560><c> use</c><01:10:14.800><c> a</c><01:10:15.040><c> lot</c><01:10:15.199><c> of</c><01:10:15.360><c> them</c><01:10:15.920><c> so</c><01:10:16.159><c> yeah</c>

01:10:16.390 --> 01:10:16.400 align:start position:0%
practice to use a lot of them so yeah
 

01:10:16.400 --> 01:10:18.709 align:start position:0%
practice to use a lot of them so yeah
those<01:10:16.640><c> are</c><01:10:16.800><c> switches</c><01:10:17.840><c> if</c><01:10:18.000><c> this</c><01:10:18.239><c> video</c><01:10:18.480><c> helped</c>

01:10:18.709 --> 01:10:18.719 align:start position:0%
those are switches if this video helped
 

01:10:18.719 --> 01:10:20.630 align:start position:0%
those are switches if this video helped
you<01:10:18.880><c> out</c><01:10:19.120><c> you</c><01:10:19.199><c> can</c><01:10:19.360><c> help</c><01:10:19.600><c> me</c><01:10:19.760><c> out</c><01:10:19.920><c> by</c><01:10:20.239><c> smashing</c>

01:10:20.630 --> 01:10:20.640 align:start position:0%
you out you can help me out by smashing
 

01:10:20.640 --> 01:10:22.149 align:start position:0%
you out you can help me out by smashing
that<01:10:20.719><c> like</c><01:10:20.960><c> button</c><01:10:21.360><c> leave</c><01:10:21.520><c> a</c><01:10:21.600><c> random</c><01:10:21.920><c> comment</c>

01:10:22.149 --> 01:10:22.159 align:start position:0%
that like button leave a random comment
 

01:10:22.159 --> 01:10:23.990 align:start position:0%
that like button leave a random comment
down<01:10:22.320><c> below</c><01:10:22.800><c> and</c><01:10:23.040><c> subscribe</c><01:10:23.600><c> if</c><01:10:23.679><c> you'd</c><01:10:23.840><c> like</c>

01:10:23.990 --> 01:10:24.000 align:start position:0%
down below and subscribe if you'd like
 

01:10:24.000 --> 01:10:25.669 align:start position:0%
down below and subscribe if you'd like
to<01:10:24.080><c> become</c><01:10:24.320><c> a</c><01:10:24.480><c> fellow</c><01:10:24.800><c> bro</c>

01:10:25.669 --> 01:10:25.679 align:start position:0%
to become a fellow bro
 

01:10:25.679 --> 01:10:27.830 align:start position:0%
to become a fellow bro
hey<01:10:26.080><c> uh</c><01:10:26.239><c> everybody</c><01:10:26.880><c> it's</c><01:10:27.280><c> bro</c><01:10:27.520><c> hope</c><01:10:27.679><c> you're</c>

01:10:27.830 --> 01:10:27.840 align:start position:0%
hey uh everybody it's bro hope you're
 

01:10:27.840 --> 01:10:29.590 align:start position:0%
hey uh everybody it's bro hope you're
doing<01:10:28.159><c> well</c><01:10:28.560><c> and</c><01:10:28.719><c> in</c><01:10:28.880><c> this</c><01:10:29.040><c> video</c><01:10:29.280><c> we're</c><01:10:29.440><c> going</c>

01:10:29.590 --> 01:10:29.600 align:start position:0%
doing well and in this video we're going
 

01:10:29.600 --> 01:10:31.669 align:start position:0%
doing well and in this video we're going
to<01:10:29.679><c> create</c><01:10:30.000><c> a</c><01:10:30.239><c> small</c><01:10:30.560><c> program</c><01:10:31.120><c> where</c><01:10:31.280><c> the</c><01:10:31.440><c> user</c>

01:10:31.669 --> 01:10:31.679 align:start position:0%
to create a small program where the user
 

01:10:31.679 --> 01:10:33.350 align:start position:0%
to create a small program where the user
will<01:10:31.920><c> type</c><01:10:32.159><c> in</c><01:10:32.239><c> a</c><01:10:32.320><c> temperature</c><01:10:32.960><c> and</c><01:10:33.040><c> we</c><01:10:33.199><c> can</c>

01:10:33.350 --> 01:10:33.360 align:start position:0%
will type in a temperature and we can
 

01:10:33.360 --> 01:10:35.189 align:start position:0%
will type in a temperature and we can
convert<01:10:33.760><c> that</c><01:10:33.920><c> temperature</c><01:10:34.480><c> from</c><01:10:34.719><c> fahrenheit</c>

01:10:35.189 --> 01:10:35.199 align:start position:0%
convert that temperature from fahrenheit
 

01:10:35.199 --> 01:10:38.310 align:start position:0%
convert that temperature from fahrenheit
to<01:10:35.360><c> celsius</c><01:10:36.080><c> or</c><01:10:36.320><c> celsius</c><01:10:36.880><c> to</c><01:10:37.040><c> fahrenheit</c><01:10:37.840><c> so</c>

01:10:38.310 --> 01:10:38.320 align:start position:0%
to celsius or celsius to fahrenheit so
 

01:10:38.320 --> 01:10:42.390 align:start position:0%
to celsius or celsius to fahrenheit so
sit<01:10:38.560><c> back</c><01:10:38.880><c> relax</c><01:10:39.520><c> and</c><01:10:39.679><c> enjoy</c><01:10:39.920><c> the</c><01:10:40.080><c> show</c>

01:10:42.390 --> 01:10:42.400 align:start position:0%
 
 

01:10:42.400 --> 01:10:44.470 align:start position:0%
 
now<01:10:42.640><c> before</c><01:10:42.960><c> we</c><01:10:43.120><c> begin</c><01:10:43.520><c> this</c><01:10:43.679><c> video</c><01:10:44.080><c> make</c><01:10:44.320><c> sure</c>

01:10:44.470 --> 01:10:44.480 align:start position:0%
now before we begin this video make sure
 

01:10:44.480 --> 01:10:46.709 align:start position:0%
now before we begin this video make sure
that<01:10:44.719><c> you</c><01:10:44.960><c> include</c><01:10:45.520><c> these</c><01:10:45.840><c> two</c><01:10:46.159><c> imports</c><01:10:46.640><c> at</c>

01:10:46.709 --> 01:10:46.719 align:start position:0%
that you include these two imports at
 

01:10:46.719 --> 01:10:48.390 align:start position:0%
that you include these two imports at
the<01:10:46.880><c> top</c><01:10:47.199><c> we'll</c><01:10:47.360><c> be</c><01:10:47.520><c> working</c><01:10:47.840><c> with</c><01:10:48.080><c> string</c>

01:10:48.390 --> 01:10:48.400 align:start position:0%
the top we'll be working with string
 

01:10:48.400 --> 01:10:50.310 align:start position:0%
the top we'll be working with string
functions<01:10:49.040><c> and</c><01:10:49.199><c> many</c><01:10:49.440><c> of</c><01:10:49.520><c> them</c><01:10:49.760><c> can</c><01:10:49.920><c> be</c><01:10:50.000><c> found</c>

01:10:50.310 --> 01:10:50.320 align:start position:0%
functions and many of them can be found
 

01:10:50.320 --> 01:10:53.910 align:start position:0%
functions and many of them can be found
within<01:10:50.880><c> this</c><01:10:51.120><c> import</c><01:10:52.000><c> see</c><01:10:52.400><c> type</c><01:10:52.800><c> dot</c><01:10:53.199><c> h</c><01:10:53.679><c> so</c>

01:10:53.910 --> 01:10:53.920 align:start position:0%
within this import see type dot h so
 

01:10:53.920 --> 01:10:55.430 align:start position:0%
within this import see type dot h so
let's<01:10:54.159><c> declare</c><01:10:54.560><c> the</c><01:10:54.719><c> variables</c><01:10:55.120><c> that</c><01:10:55.280><c> we'll</c>

01:10:55.430 --> 01:10:55.440 align:start position:0%
let's declare the variables that we'll
 

01:10:55.440 --> 01:10:56.630 align:start position:0%
let's declare the variables that we'll
need

01:10:56.630 --> 01:10:56.640 align:start position:0%
need
 

01:10:56.640 --> 01:11:00.229 align:start position:0%
need
char<01:10:57.199><c> unit</c><01:10:58.320><c> unit</c><01:10:58.640><c> will</c><01:10:58.800><c> be</c><01:10:59.120><c> either</c><01:10:59.520><c> c</c><01:11:00.000><c> for</c>

01:11:00.229 --> 01:11:00.239 align:start position:0%
char unit unit will be either c for
 

01:11:00.239 --> 01:11:03.910 align:start position:0%
char unit unit will be either c for
celsius<01:11:00.880><c> or</c><01:11:01.120><c> f</c><01:11:01.360><c> for</c><01:11:01.600><c> fahrenheit</c><01:11:02.640><c> and</c><01:11:03.120><c> float</c>

01:11:03.910 --> 01:11:03.920 align:start position:0%
celsius or f for fahrenheit and float
 

01:11:03.920 --> 01:11:06.149 align:start position:0%
celsius or f for fahrenheit and float
temp<01:11:04.320><c> short</c><01:11:04.640><c> for</c><01:11:04.800><c> temperature</c>

01:11:06.149 --> 01:11:06.159 align:start position:0%
temp short for temperature
 

01:11:06.159 --> 01:11:08.229 align:start position:0%
temp short for temperature
let's<01:11:06.480><c> prompt</c><01:11:06.800><c> the</c><01:11:06.960><c> user</c><01:11:07.360><c> to</c><01:11:07.520><c> enter</c><01:11:07.840><c> in</c><01:11:08.000><c> some</c>

01:11:08.229 --> 01:11:08.239 align:start position:0%
let's prompt the user to enter in some
 

01:11:08.239 --> 01:11:10.830 align:start position:0%
let's prompt the user to enter in some
user<01:11:08.560><c> input</c>

01:11:10.830 --> 01:11:10.840 align:start position:0%
user input
 

01:11:10.840 --> 01:11:14.070 align:start position:0%
user input
printf<01:11:12.320><c> is</c><01:11:12.960><c> the</c>

01:11:14.070 --> 01:11:14.080 align:start position:0%
printf is the
 

01:11:14.080 --> 01:11:16.630 align:start position:0%
printf is the
temperature

01:11:16.630 --> 01:11:16.640 align:start position:0%
temperature
 

01:11:16.640 --> 01:11:17.990 align:start position:0%
temperature
in

01:11:17.990 --> 01:11:18.000 align:start position:0%
in
 

01:11:18.000 --> 01:11:19.510 align:start position:0%
in
f

01:11:19.510 --> 01:11:19.520 align:start position:0%
f
 

01:11:19.520 --> 01:11:21.110 align:start position:0%
f
or

01:11:21.110 --> 01:11:21.120 align:start position:0%
or
 

01:11:21.120 --> 01:11:23.910 align:start position:0%
or
c

01:11:23.910 --> 01:11:23.920 align:start position:0%
 
 

01:11:23.920 --> 01:11:26.870 align:start position:0%
 
and<01:11:24.080><c> then</c><01:11:24.320><c> we</c><01:11:24.480><c> will</c><01:11:24.640><c> accept</c><01:11:25.120><c> some</c><01:11:25.360><c> user</c><01:11:25.600><c> input</c>

01:11:26.870 --> 01:11:26.880 align:start position:0%
and then we will accept some user input
 

01:11:26.880 --> 01:11:29.830 align:start position:0%
and then we will accept some user input
so<01:11:27.120><c> we</c><01:11:27.280><c> will</c><01:11:27.440><c> be</c><01:11:27.679><c> accepting</c><01:11:28.400><c> a</c><01:11:28.640><c> character</c><01:11:29.600><c> so</c>

01:11:29.830 --> 01:11:29.840 align:start position:0%
so we will be accepting a character so
 

01:11:29.840 --> 01:11:32.149 align:start position:0%
so we will be accepting a character so
use<01:11:30.159><c> the</c><01:11:30.320><c> appropriate</c><01:11:30.880><c> format</c><01:11:31.280><c> specifier</c><01:11:31.920><c> for</c>

01:11:32.149 --> 01:11:32.159 align:start position:0%
use the appropriate format specifier for
 

01:11:32.159 --> 01:11:33.350 align:start position:0%
use the appropriate format specifier for
characters

01:11:33.350 --> 01:11:33.360 align:start position:0%
characters
 

01:11:33.360 --> 01:11:35.750 align:start position:0%
characters
and<01:11:33.600><c> we</c><01:11:33.760><c> will</c><01:11:33.920><c> use</c><01:11:34.239><c> the</c><01:11:34.560><c> address</c><01:11:35.040><c> of</c><01:11:35.280><c> operator</c>

01:11:35.750 --> 01:11:35.760 align:start position:0%
and we will use the address of operator
 

01:11:35.760 --> 01:11:37.669 align:start position:0%
and we will use the address of operator
which<01:11:36.000><c> is</c><01:11:36.159><c> an</c><01:11:36.320><c> ampersand</c>

01:11:37.669 --> 01:11:37.679 align:start position:0%
which is an ampersand
 

01:11:37.679 --> 01:11:38.870 align:start position:0%
which is an ampersand
unit

01:11:38.870 --> 01:11:38.880 align:start position:0%
unit
 

01:11:38.880 --> 01:11:40.870 align:start position:0%
unit
and<01:11:39.040><c> then</c><01:11:39.199><c> let's</c><01:11:39.440><c> use</c><01:11:39.679><c> an</c><01:11:39.840><c> if</c><01:11:40.080><c> statement</c><01:11:40.719><c> to</c>

01:11:40.870 --> 01:11:40.880 align:start position:0%
and then let's use an if statement to
 

01:11:40.880 --> 01:11:42.310 align:start position:0%
and then let's use an if statement to
check<01:11:41.120><c> to</c><01:11:41.280><c> see</c>

01:11:42.310 --> 01:11:42.320 align:start position:0%
check to see
 

01:11:42.320 --> 01:11:43.510 align:start position:0%
check to see
if<01:11:42.640><c> unit</c>

01:11:43.510 --> 01:11:43.520 align:start position:0%
if unit
 

01:11:43.520 --> 01:11:47.990 align:start position:0%
if unit
is<01:11:43.760><c> equal</c><01:11:44.159><c> to</c><01:11:44.800><c> the</c><01:11:44.960><c> character</c><01:11:45.679><c> c</c>

01:11:47.990 --> 01:11:48.000 align:start position:0%
 
 

01:11:48.000 --> 01:11:51.910 align:start position:0%
 
else<01:11:48.640><c> if</c>

01:11:51.910 --> 01:11:51.920 align:start position:0%
 
 

01:11:51.920 --> 01:11:55.110 align:start position:0%
 
unit<01:11:52.800><c> is</c><01:11:53.040><c> equal</c><01:11:53.440><c> to</c><01:11:53.920><c> f</c>

01:11:55.110 --> 01:11:55.120 align:start position:0%
unit is equal to f
 

01:11:55.120 --> 01:11:57.270 align:start position:0%
unit is equal to f
we<01:11:55.280><c> will</c><01:11:55.440><c> use</c><01:11:55.679><c> the</c><01:11:55.840><c> formula</c><01:11:56.640><c> to</c><01:11:56.800><c> convert</c>

01:11:57.270 --> 01:11:57.280 align:start position:0%
we will use the formula to convert
 

01:11:57.280 --> 01:12:00.070 align:start position:0%
we will use the formula to convert
fahrenheit<01:11:57.760><c> to</c><01:11:57.920><c> celsius</c><01:11:58.880><c> if</c><01:11:59.120><c> it's</c><01:11:59.280><c> c</c><01:11:59.679><c> celsius</c>

01:12:00.070 --> 01:12:00.080 align:start position:0%
fahrenheit to celsius if it's c celsius
 

01:12:00.080 --> 01:12:02.390 align:start position:0%
fahrenheit to celsius if it's c celsius
to<01:12:00.239><c> fahrenheit</c><01:12:01.360><c> and</c><01:12:01.600><c> we</c><01:12:01.760><c> should</c><01:12:01.920><c> probably</c><01:12:02.159><c> add</c>

01:12:02.390 --> 01:12:02.400 align:start position:0%
to fahrenheit and we should probably add
 

01:12:02.400 --> 01:12:04.470 align:start position:0%
to fahrenheit and we should probably add
an<01:12:02.560><c> else</c><01:12:02.800><c> statement</c><01:12:03.120><c> as</c><01:12:03.199><c> well</c>

01:12:04.470 --> 01:12:04.480 align:start position:0%
an else statement as well
 

01:12:04.480 --> 01:12:06.830 align:start position:0%
an else statement as well
okay<01:12:04.719><c> let's</c><01:12:04.960><c> actually</c><01:12:05.280><c> test</c><01:12:05.600><c> these</c><01:12:05.840><c> right</c>

01:12:06.830 --> 01:12:06.840 align:start position:0%
okay let's actually test these right
 

01:12:06.840 --> 01:12:09.830 align:start position:0%
okay let's actually test these right
now<01:12:07.920><c> okay</c><01:12:08.560><c> this</c><01:12:08.800><c> will</c><01:12:08.960><c> only</c><01:12:09.120><c> be</c><01:12:09.280><c> temporary</c><01:12:09.760><c> i'm</c>

01:12:09.830 --> 01:12:09.840 align:start position:0%
now okay this will only be temporary i'm
 

01:12:09.840 --> 01:12:11.669 align:start position:0%
now okay this will only be temporary i'm
going<01:12:10.000><c> to</c><01:12:10.080><c> print</c><01:12:10.320><c> a</c><01:12:10.400><c> message</c>

01:12:11.669 --> 01:12:11.679 align:start position:0%
going to print a message
 

01:12:11.679 --> 01:12:15.350 align:start position:0%
going to print a message
the<01:12:12.159><c> temp</c><01:12:12.719><c> is</c><01:12:13.199><c> currently</c>

01:12:15.350 --> 01:12:15.360 align:start position:0%
the temp is currently
 

01:12:15.360 --> 01:12:19.110 align:start position:0%
the temp is currently
in<01:12:15.840><c> celsius</c>

01:12:19.110 --> 01:12:19.120 align:start position:0%
 
 

01:12:19.120 --> 01:12:20.870 align:start position:0%
 
and<01:12:19.360><c> with</c><01:12:19.520><c> fahrenheit</c><01:12:20.080><c> the</c><01:12:20.159><c> temperature</c><01:12:20.719><c> is</c>

01:12:20.870 --> 01:12:20.880 align:start position:0%
and with fahrenheit the temperature is
 

01:12:20.880 --> 01:12:23.189 align:start position:0%
and with fahrenheit the temperature is
currently<01:12:21.440><c> in</c><01:12:21.760><c> fahrenheit</c>

01:12:23.189 --> 01:12:23.199 align:start position:0%
currently in fahrenheit
 

01:12:23.199 --> 01:12:26.149 align:start position:0%
currently in fahrenheit
so<01:12:23.360><c> if</c><01:12:23.520><c> the</c><01:12:23.600><c> user</c><01:12:23.920><c> did</c><01:12:24.080><c> not</c><01:12:24.239><c> type</c><01:12:24.560><c> in</c><01:12:24.880><c> c</c><01:12:25.360><c> or</c><01:12:25.679><c> f</c>

01:12:26.149 --> 01:12:26.159 align:start position:0%
so if the user did not type in c or f
 

01:12:26.159 --> 01:12:28.550 align:start position:0%
so if the user did not type in c or f
well<01:12:26.320><c> then</c><01:12:26.560><c> what</c><01:12:26.800><c> the</c><01:12:26.880><c> heck</c><01:12:27.040><c> did</c><01:12:27.280><c> they</c><01:12:27.440><c> type</c><01:12:27.760><c> in</c>

01:12:28.550 --> 01:12:28.560 align:start position:0%
well then what the heck did they type in
 

01:12:28.560 --> 01:12:30.630 align:start position:0%
well then what the heck did they type in
so<01:12:28.719><c> within</c><01:12:29.040><c> our</c><01:12:29.120><c> else</c><01:12:29.360><c> statement</c><01:12:30.159><c> let's</c><01:12:30.400><c> yell</c>

01:12:30.630 --> 01:12:30.640 align:start position:0%
so within our else statement let's yell
 

01:12:30.640 --> 01:12:32.550 align:start position:0%
so within our else statement let's yell
at<01:12:30.800><c> the</c><01:12:30.880><c> user</c><01:12:31.280><c> let's</c><01:12:31.440><c> say</c><01:12:31.760><c> that</c><01:12:32.080><c> whatever</c><01:12:32.400><c> they</c>

01:12:32.550 --> 01:12:32.560 align:start position:0%
at the user let's say that whatever they
 

01:12:32.560 --> 01:12:36.470 align:start position:0%
at the user let's say that whatever they
entered<01:12:32.880><c> in</c><01:12:33.040><c> is</c><01:12:33.199><c> not</c><01:12:33.440><c> valid</c><01:12:33.840><c> input</c>

01:12:36.470 --> 01:12:36.480 align:start position:0%
entered in is not valid input
 

01:12:36.480 --> 01:12:39.110 align:start position:0%
entered in is not valid input
so<01:12:36.960><c> format</c><01:12:37.360><c> specifier</c><01:12:38.159><c> c</c>

01:12:39.110 --> 01:12:39.120 align:start position:0%
so format specifier c
 

01:12:39.120 --> 01:12:44.950 align:start position:0%
so format specifier c
is<01:12:39.760><c> not</c><01:12:40.239><c> a</c><01:12:40.800><c> valid</c><01:12:41.760><c> unit</c><01:12:42.560><c> of</c><01:12:42.880><c> measurement</c>

01:12:44.950 --> 01:12:44.960 align:start position:0%
is not a valid unit of measurement
 

01:12:44.960 --> 01:12:46.390 align:start position:0%
is not a valid unit of measurement
and<01:12:45.120><c> then</c><01:12:45.280><c> we</c><01:12:45.440><c> will</c><01:12:45.600><c> display</c><01:12:46.000><c> whatever</c><01:12:46.320><c> the</c>

01:12:46.390 --> 01:12:46.400 align:start position:0%
and then we will display whatever the
 

01:12:46.400 --> 01:12:49.350 align:start position:0%
and then we will display whatever the
user<01:12:46.800><c> typed</c><01:12:47.120><c> into</c><01:12:47.600><c> our</c><01:12:47.920><c> unit</c><01:12:48.320><c> variable</c>

01:12:49.350 --> 01:12:49.360 align:start position:0%
user typed into our unit variable
 

01:12:49.360 --> 01:12:51.990 align:start position:0%
user typed into our unit variable
so<01:12:49.520><c> let's</c><01:12:49.760><c> test</c><01:12:50.080><c> this</c><01:12:50.800><c> is</c><01:12:50.960><c> the</c><01:12:51.120><c> temperature</c><01:12:51.760><c> in</c>

01:12:51.990 --> 01:12:52.000 align:start position:0%
so let's test this is the temperature in
 

01:12:52.000 --> 01:12:53.669 align:start position:0%
so let's test this is the temperature in
f<01:12:52.320><c> or</c><01:12:52.560><c> c</c>

01:12:53.669 --> 01:12:53.679 align:start position:0%
f or c
 

01:12:53.679 --> 01:12:54.870 align:start position:0%
f or c
so<01:12:54.080><c> f</c>

01:12:54.870 --> 01:12:54.880 align:start position:0%
so f
 

01:12:54.880 --> 01:12:57.510 align:start position:0%
so f
the<01:12:55.120><c> temp</c><01:12:55.440><c> is</c><01:12:55.520><c> currently</c><01:12:56.080><c> in</c><01:12:56.400><c> f</c>

01:12:57.510 --> 01:12:57.520 align:start position:0%
the temp is currently in f
 

01:12:57.520 --> 01:12:59.189 align:start position:0%
the temp is currently in f
let's<01:12:57.760><c> try</c><01:12:57.920><c> it</c><01:12:58.080><c> again</c>

01:12:59.189 --> 01:12:59.199 align:start position:0%
let's try it again
 

01:12:59.199 --> 01:13:02.470 align:start position:0%
let's try it again
is<01:12:59.440><c> the</c><01:12:59.520><c> temperature</c><01:13:00.159><c> in</c><01:13:00.400><c> f</c><01:13:00.640><c> or</c><01:13:00.880><c> c</c><01:13:01.440><c> see</c>

01:13:02.470 --> 01:13:02.480 align:start position:0%
is the temperature in f or c see
 

01:13:02.480 --> 01:13:04.870 align:start position:0%
is the temperature in f or c see
the<01:13:02.640><c> temp</c><01:13:02.960><c> is</c><01:13:03.040><c> currently</c><01:13:03.440><c> in</c><01:13:03.600><c> c</c>

01:13:04.870 --> 01:13:04.880 align:start position:0%
the temp is currently in c
 

01:13:04.880 --> 01:13:07.590 align:start position:0%
the temp is currently in c
okay<01:13:05.199><c> this</c><01:13:05.440><c> time</c><01:13:05.920><c> we</c><01:13:06.080><c> will</c><01:13:06.320><c> not</c><01:13:06.480><c> type</c><01:13:06.800><c> in</c><01:13:06.960><c> f4c</c>

01:13:07.590 --> 01:13:07.600 align:start position:0%
okay this time we will not type in f4c
 

01:13:07.600 --> 01:13:09.750 align:start position:0%
okay this time we will not type in f4c
how<01:13:07.840><c> about</c><01:13:08.080><c> the</c><01:13:08.159><c> word</c><01:13:08.480><c> pizza</c><01:13:09.360><c> this</c><01:13:09.600><c> only</c>

01:13:09.750 --> 01:13:09.760 align:start position:0%
how about the word pizza this only
 

01:13:09.760 --> 01:13:11.510 align:start position:0%
how about the word pizza this only
accepts<01:13:10.159><c> the</c><01:13:10.239><c> first</c><01:13:10.560><c> character</c>

01:13:11.510 --> 01:13:11.520 align:start position:0%
accepts the first character
 

01:13:11.520 --> 01:13:14.310 align:start position:0%
accepts the first character
p<01:13:11.840><c> is</c><01:13:12.000><c> not</c><01:13:12.239><c> a</c><01:13:12.400><c> valid</c><01:13:12.800><c> unit</c><01:13:13.040><c> of</c><01:13:13.120><c> measurement</c>

01:13:14.310 --> 01:13:14.320 align:start position:0%
p is not a valid unit of measurement
 

01:13:14.320 --> 01:13:16.310 align:start position:0%
p is not a valid unit of measurement
here's<01:13:14.719><c> one</c><01:13:14.960><c> situation</c><01:13:15.520><c> that</c><01:13:15.679><c> we</c><01:13:15.840><c> may</c><01:13:16.080><c> run</c>

01:13:16.310 --> 01:13:16.320 align:start position:0%
here's one situation that we may run
 

01:13:16.320 --> 01:13:19.750 align:start position:0%
here's one situation that we may run
into<01:13:17.040><c> c</c><01:13:17.360><c> programs</c><01:13:18.000><c> are</c><01:13:18.159><c> case</c><01:13:18.480><c> sensitive</c><01:13:19.360><c> if</c><01:13:19.600><c> i</c>

01:13:19.750 --> 01:13:19.760 align:start position:0%
into c programs are case sensitive if i
 

01:13:19.760 --> 01:13:22.950 align:start position:0%
into c programs are case sensitive if i
type<01:13:20.080><c> in</c><01:13:20.400><c> lowercase</c><01:13:21.120><c> f</c><01:13:21.360><c> or</c><01:13:21.520><c> lowercase</c><01:13:22.080><c> c</c><01:13:22.719><c> well</c>

01:13:22.950 --> 01:13:22.960 align:start position:0%
type in lowercase f or lowercase c well
 

01:13:22.960 --> 01:13:24.950 align:start position:0%
type in lowercase f or lowercase c well
technically<01:13:23.600><c> neither</c><01:13:23.920><c> of</c><01:13:24.000><c> these</c><01:13:24.320><c> conditions</c>

01:13:24.950 --> 01:13:24.960 align:start position:0%
technically neither of these conditions
 

01:13:24.960 --> 01:13:27.110 align:start position:0%
technically neither of these conditions
would<01:13:25.120><c> be</c><01:13:25.360><c> true</c><01:13:25.760><c> for</c><01:13:26.000><c> example</c><01:13:26.480><c> if</c><01:13:26.640><c> i</c><01:13:26.800><c> type</c>

01:13:27.110 --> 01:13:27.120 align:start position:0%
would be true for example if i type
 

01:13:27.120 --> 01:13:28.630 align:start position:0%
would be true for example if i type
lowercase<01:13:27.679><c> t</c>

01:13:28.630 --> 01:13:28.640 align:start position:0%
lowercase t
 

01:13:28.640 --> 01:13:31.430 align:start position:0%
lowercase t
c<01:13:28.960><c> is</c><01:13:29.120><c> not</c><01:13:29.360><c> a</c><01:13:29.520><c> valid</c><01:13:29.920><c> unit</c><01:13:30.239><c> of</c><01:13:30.320><c> measurement</c><01:13:31.280><c> to</c>

01:13:31.430 --> 01:13:31.440 align:start position:0%
c is not a valid unit of measurement to
 

01:13:31.440 --> 01:13:33.669 align:start position:0%
c is not a valid unit of measurement to
avoid<01:13:31.760><c> that</c><01:13:32.000><c> problem</c><01:13:32.480><c> i</c><01:13:32.640><c> can</c><01:13:32.800><c> take</c><01:13:33.120><c> my</c><01:13:33.360><c> user</c>

01:13:33.669 --> 01:13:33.679 align:start position:0%
avoid that problem i can take my user
 

01:13:33.679 --> 01:13:36.950 align:start position:0%
avoid that problem i can take my user
input<01:13:34.400><c> and</c><01:13:34.640><c> use</c><01:13:34.960><c> the</c><01:13:35.440><c> two</c><01:13:35.840><c> upper</c><01:13:36.239><c> function</c><01:13:36.800><c> to</c>

01:13:36.950 --> 01:13:36.960 align:start position:0%
input and use the two upper function to
 

01:13:36.960 --> 01:13:39.270 align:start position:0%
input and use the two upper function to
make<01:13:37.199><c> it</c><01:13:37.440><c> uppercase</c><01:13:38.320><c> or</c><01:13:38.560><c> you</c><01:13:38.640><c> could</c><01:13:38.880><c> set</c><01:13:39.120><c> these</c>

01:13:39.270 --> 01:13:39.280 align:start position:0%
make it uppercase or you could set these
 

01:13:39.280 --> 01:13:41.270 align:start position:0%
make it uppercase or you could set these
conditions<01:13:39.920><c> to</c><01:13:40.159><c> check</c><01:13:40.480><c> for</c><01:13:40.800><c> lowercase</c>

01:13:41.270 --> 01:13:41.280 align:start position:0%
conditions to check for lowercase
 

01:13:41.280 --> 01:13:43.830 align:start position:0%
conditions to check for lowercase
characters<01:13:41.760><c> instead</c><01:13:42.480><c> and</c><01:13:42.640><c> use</c><01:13:42.880><c> the</c><01:13:43.199><c> two</c><01:13:43.520><c> lower</c>

01:13:43.830 --> 01:13:43.840 align:start position:0%
characters instead and use the two lower
 

01:13:43.840 --> 01:13:45.030 align:start position:0%
characters instead and use the two lower
function

01:13:45.030 --> 01:13:45.040 align:start position:0%
function
 

01:13:45.040 --> 01:13:47.030 align:start position:0%
function
so<01:13:45.199><c> let's</c><01:13:45.440><c> take</c><01:13:45.679><c> our</c><01:13:45.920><c> unit</c><01:13:46.159><c> variable</c><01:13:46.719><c> and</c><01:13:46.880><c> i'm</c>

01:13:47.030 --> 01:13:47.040 align:start position:0%
so let's take our unit variable and i'm
 

01:13:47.040 --> 01:13:50.630 align:start position:0%
so let's take our unit variable and i'm
going<01:13:47.280><c> to</c><01:13:47.440><c> reassign</c><01:13:48.080><c> it</c><01:13:48.560><c> after</c><01:13:48.960><c> using</c><01:13:49.360><c> the</c><01:13:49.760><c> to</c>

01:13:50.630 --> 01:13:50.640 align:start position:0%
going to reassign it after using the to
 

01:13:50.640 --> 01:13:53.510 align:start position:0%
going to reassign it after using the to
upper<01:13:50.960><c> function</c><01:13:51.760><c> and</c><01:13:51.840><c> then</c><01:13:52.080><c> pass</c><01:13:52.480><c> in</c><01:13:52.719><c> our</c><01:13:52.880><c> unit</c>

01:13:53.510 --> 01:13:53.520 align:start position:0%
upper function and then pass in our unit
 

01:13:53.520 --> 01:13:56.149 align:start position:0%
upper function and then pass in our unit
to<01:13:53.679><c> make</c><01:13:53.920><c> it</c><01:13:54.080><c> uppercase</c><01:13:55.120><c> and</c><01:13:55.280><c> now</c><01:13:55.520><c> if</c><01:13:55.760><c> i</c><01:13:55.840><c> type</c>

01:13:56.149 --> 01:13:56.159 align:start position:0%
to make it uppercase and now if i type
 

01:13:56.159 --> 01:13:59.270 align:start position:0%
to make it uppercase and now if i type
in<01:13:56.640><c> lowercase</c><01:13:57.199><c> c</c><01:13:57.600><c> or</c><01:13:57.760><c> lowercase</c><01:13:58.400><c> f</c>

01:13:59.270 --> 01:13:59.280 align:start position:0%
in lowercase c or lowercase f
 

01:13:59.280 --> 01:14:02.310 align:start position:0%
in lowercase c or lowercase f
this<01:13:59.520><c> user</c><01:13:59.920><c> input</c><01:14:00.320><c> will</c><01:14:00.560><c> be</c><01:14:00.880><c> made</c><01:14:01.280><c> uppercase</c>

01:14:02.310 --> 01:14:02.320 align:start position:0%
this user input will be made uppercase
 

01:14:02.320 --> 01:14:04.630 align:start position:0%
this user input will be made uppercase
the<01:14:02.560><c> temp</c><01:14:02.960><c> is</c><01:14:03.199><c> currently</c><01:14:03.600><c> in</c><01:14:03.760><c> c</c>

01:14:04.630 --> 01:14:04.640 align:start position:0%
the temp is currently in c
 

01:14:04.640 --> 01:14:06.470 align:start position:0%
the temp is currently in c
so<01:14:04.880><c> this</c><01:14:05.040><c> is</c><01:14:05.199><c> optional</c><01:14:05.679><c> but</c><01:14:06.000><c> i</c><01:14:06.080><c> thought</c><01:14:06.320><c> it'd</c>

01:14:06.470 --> 01:14:06.480 align:start position:0%
so this is optional but i thought it'd
 

01:14:06.480 --> 01:14:08.630 align:start position:0%
so this is optional but i thought it'd
be<01:14:06.640><c> a</c><01:14:06.719><c> good</c><01:14:06.880><c> thing</c><01:14:07.040><c> to</c><01:14:07.199><c> add</c><01:14:07.360><c> to</c><01:14:07.520><c> this</c><01:14:07.679><c> program</c>

01:14:08.630 --> 01:14:08.640 align:start position:0%
be a good thing to add to this program
 

01:14:08.640 --> 01:14:11.430 align:start position:0%
be a good thing to add to this program
now<01:14:08.880><c> what</c><01:14:09.040><c> we'll</c><01:14:09.199><c> work</c><01:14:09.440><c> on</c><01:14:09.679><c> next</c><01:14:10.320><c> depending</c><01:14:11.040><c> on</c>

01:14:11.430 --> 01:14:11.440 align:start position:0%
now what we'll work on next depending on
 

01:14:11.440 --> 01:14:13.669 align:start position:0%
now what we'll work on next depending on
the<01:14:11.600><c> unit</c><01:14:12.000><c> there's</c><01:14:12.239><c> going</c><01:14:12.400><c> to</c><01:14:12.560><c> be</c><01:14:12.800><c> a</c><01:14:13.040><c> different</c>

01:14:13.669 --> 01:14:13.679 align:start position:0%
the unit there's going to be a different
 

01:14:13.679 --> 01:14:16.229 align:start position:0%
the unit there's going to be a different
formula<01:14:14.320><c> a</c><01:14:14.480><c> different</c><01:14:14.880><c> calculation</c>

01:14:16.229 --> 01:14:16.239 align:start position:0%
formula a different calculation
 

01:14:16.239 --> 01:14:18.390 align:start position:0%
formula a different calculation
now<01:14:16.400><c> we</c><01:14:16.560><c> will</c><01:14:16.719><c> need</c><01:14:16.960><c> the</c><01:14:17.120><c> user</c><01:14:17.520><c> to</c><01:14:17.760><c> enter</c><01:14:18.159><c> in</c>

01:14:18.390 --> 01:14:18.400 align:start position:0%
now we will need the user to enter in
 

01:14:18.400 --> 01:14:20.870 align:start position:0%
now we will need the user to enter in
the<01:14:18.560><c> current</c><01:14:18.880><c> temperature</c><01:14:19.920><c> so</c><01:14:20.080><c> let's</c><01:14:20.320><c> begin</c>

01:14:20.870 --> 01:14:20.880 align:start position:0%
the current temperature so let's begin
 

01:14:20.880 --> 01:14:23.270 align:start position:0%
the current temperature so let's begin
with<01:14:21.199><c> our</c><01:14:21.440><c> if</c><01:14:21.600><c> statement</c><01:14:22.080><c> if</c><01:14:22.320><c> unit</c><01:14:22.719><c> is</c><01:14:22.960><c> equal</c>

01:14:23.270 --> 01:14:23.280 align:start position:0%
with our if statement if unit is equal
 

01:14:23.280 --> 01:14:26.149 align:start position:0%
with our if statement if unit is equal
to<01:14:23.600><c> c</c><01:14:24.000><c> celsius</c>

01:14:26.149 --> 01:14:26.159 align:start position:0%
to c celsius
 

01:14:26.159 --> 01:14:28.790 align:start position:0%
to c celsius
enter<01:14:27.040><c> the</c><01:14:27.920><c> temp</c>

01:14:28.790 --> 01:14:28.800 align:start position:0%
enter the temp
 

01:14:28.800 --> 01:14:32.630 align:start position:0%
enter the temp
in<01:14:29.360><c> celsius</c>

01:14:32.630 --> 01:14:32.640 align:start position:0%
 
 

01:14:32.640 --> 01:14:34.630 align:start position:0%
 
this<01:14:32.880><c> time</c><01:14:33.120><c> we</c><01:14:33.280><c> are</c><01:14:33.520><c> accepting</c><01:14:34.080><c> a</c><01:14:34.239><c> floating</c>

01:14:34.630 --> 01:14:34.640 align:start position:0%
this time we are accepting a floating
 

01:14:34.640 --> 01:14:35.750 align:start position:0%
this time we are accepting a floating
point<01:14:34.880><c> number</c>

01:14:35.750 --> 01:14:35.760 align:start position:0%
point number
 

01:14:35.760 --> 01:14:39.430 align:start position:0%
point number
we<01:14:35.920><c> will</c><01:14:36.159><c> use</c><01:14:36.800><c> scanf</c><01:14:37.920><c> the</c><01:14:38.159><c> format</c><01:14:38.560><c> specifier</c>

01:14:39.430 --> 01:14:39.440 align:start position:0%
we will use scanf the format specifier
 

01:14:39.440 --> 01:14:40.830 align:start position:0%
we will use scanf the format specifier
for<01:14:39.600><c> floating</c><01:14:40.000><c> point</c>

01:14:40.830 --> 01:14:40.840 align:start position:0%
for floating point
 

01:14:40.840 --> 01:14:44.070 align:start position:0%
for floating point
numbers<01:14:42.239><c> address</c><01:14:42.640><c> of</c><01:14:42.800><c> operator</c>

01:14:44.070 --> 01:14:44.080 align:start position:0%
numbers address of operator
 

01:14:44.080 --> 01:14:45.189 align:start position:0%
numbers address of operator
temp

01:14:45.189 --> 01:14:45.199 align:start position:0%
temp
 

01:14:45.199 --> 01:14:47.350 align:start position:0%
temp
and<01:14:45.360><c> then</c><01:14:45.600><c> we</c><01:14:45.760><c> need</c><01:14:46.000><c> to</c><01:14:46.239><c> calculate</c><01:14:46.880><c> the</c><01:14:47.120><c> new</c>

01:14:47.350 --> 01:14:47.360 align:start position:0%
and then we need to calculate the new
 

01:14:47.360 --> 01:14:49.270 align:start position:0%
and then we need to calculate the new
temperature<01:14:47.920><c> after</c><01:14:48.239><c> it's</c><01:14:48.400><c> converted</c><01:14:49.040><c> from</c>

01:14:49.270 --> 01:14:49.280 align:start position:0%
temperature after it's converted from
 

01:14:49.280 --> 01:14:51.510 align:start position:0%
temperature after it's converted from
celsius<01:14:49.920><c> to</c><01:14:50.159><c> fahrenheit</c><01:14:50.880><c> and</c><01:14:51.120><c> we</c><01:14:51.280><c> will</c>

01:14:51.510 --> 01:14:51.520 align:start position:0%
celsius to fahrenheit and we will
 

01:14:51.520 --> 01:14:54.630 align:start position:0%
celsius to fahrenheit and we will
reassign<01:14:52.080><c> it</c><01:14:52.239><c> into</c><01:14:52.640><c> the</c><01:14:52.800><c> same</c><01:14:53.199><c> variable</c><01:14:53.760><c> temp</c>

01:14:54.630 --> 01:14:54.640 align:start position:0%
reassign it into the same variable temp
 

01:14:54.640 --> 01:14:57.590 align:start position:0%
reassign it into the same variable temp
temp<01:14:55.199><c> equals</c><01:14:56.000><c> and</c><01:14:56.159><c> here's</c><01:14:56.400><c> the</c><01:14:56.480><c> formula</c>

01:14:57.590 --> 01:14:57.600 align:start position:0%
temp equals and here's the formula
 

01:14:57.600 --> 01:14:58.470 align:start position:0%
temp equals and here's the formula
temp

01:14:58.470 --> 01:14:58.480 align:start position:0%
temp
 

01:14:58.480 --> 01:14:59.590 align:start position:0%
temp
times

01:14:59.590 --> 01:14:59.600 align:start position:0%
times
 

01:14:59.600 --> 01:15:02.470 align:start position:0%
times
9<01:15:00.239><c> divided</c><01:15:00.719><c> by</c><01:15:01.040><c> 5</c>

01:15:02.470 --> 01:15:02.480 align:start position:0%
9 divided by 5
 

01:15:02.480 --> 01:15:05.750 align:start position:0%
9 divided by 5
plus<01:15:03.199><c> 32</c>

01:15:05.750 --> 01:15:05.760 align:start position:0%
 
 

01:15:05.760 --> 01:15:09.510 align:start position:0%
 
and<01:15:05.920><c> then</c><01:15:06.080><c> let's</c><01:15:06.320><c> print</c><01:15:06.480><c> the</c><01:15:06.640><c> temperature</c>

01:15:09.510 --> 01:15:09.520 align:start position:0%
 
 

01:15:09.520 --> 01:15:11.910 align:start position:0%
 
printf

01:15:11.910 --> 01:15:11.920 align:start position:0%
printf
 

01:15:11.920 --> 01:15:13.350 align:start position:0%
printf
the

01:15:13.350 --> 01:15:13.360 align:start position:0%
the
 

01:15:13.360 --> 01:15:15.110 align:start position:0%
the
temp

01:15:15.110 --> 01:15:15.120 align:start position:0%
temp
 

01:15:15.120 --> 01:15:16.709 align:start position:0%
temp
in

01:15:16.709 --> 01:15:16.719 align:start position:0%
in
 

01:15:16.719 --> 01:15:18.790 align:start position:0%
in
fahrenheit

01:15:18.790 --> 01:15:18.800 align:start position:0%
fahrenheit
 

01:15:18.800 --> 01:15:21.110 align:start position:0%
fahrenheit
is

01:15:21.110 --> 01:15:21.120 align:start position:0%
is
 

01:15:21.120 --> 01:15:23.910 align:start position:0%
is
and<01:15:21.280><c> i'm</c><01:15:21.440><c> going</c><01:15:21.679><c> to</c><01:15:21.760><c> use</c><01:15:22.000><c> a</c><01:15:22.239><c> format</c><01:15:22.840><c> specifier</c>

01:15:23.910 --> 01:15:23.920 align:start position:0%
and i'm going to use a format specifier
 

01:15:23.920 --> 01:15:26.310 align:start position:0%
and i'm going to use a format specifier
percent<01:15:24.480><c> f</c><01:15:25.199><c> but</c><01:15:25.440><c> i</c><01:15:25.520><c> would</c><01:15:25.679><c> only</c><01:15:25.920><c> like</c><01:15:26.080><c> to</c>

01:15:26.310 --> 01:15:26.320 align:start position:0%
percent f but i would only like to
 

01:15:26.320 --> 01:15:29.189 align:start position:0%
percent f but i would only like to
display<01:15:26.880><c> one</c><01:15:27.120><c> digit</c><01:15:27.520><c> after</c><01:15:27.679><c> the</c><01:15:27.840><c> decimal</c><01:15:28.800><c> so</c><01:15:29.040><c> i</c>

01:15:29.189 --> 01:15:29.199 align:start position:0%
display one digit after the decimal so i
 

01:15:29.199 --> 01:15:31.669 align:start position:0%
display one digit after the decimal so i
will<01:15:29.360><c> add</c><01:15:29.920><c> dot</c><01:15:30.239><c> one</c>

01:15:31.669 --> 01:15:31.679 align:start position:0%
will add dot one
 

01:15:31.679 --> 01:15:34.390 align:start position:0%
will add dot one
and<01:15:31.840><c> then</c><01:15:32.080><c> we</c><01:15:32.320><c> will</c><01:15:32.560><c> insert</c><01:15:33.280><c> our</c><01:15:33.520><c> temperature</c>

01:15:34.390 --> 01:15:34.400 align:start position:0%
and then we will insert our temperature
 

01:15:34.400 --> 01:15:37.110 align:start position:0%
and then we will insert our temperature
temp<01:15:35.120><c> okay</c><01:15:35.520><c> let's</c><01:15:35.679><c> try</c><01:15:35.920><c> this</c><01:15:36.640><c> enter</c><01:15:36.960><c> the</c>

01:15:37.110 --> 01:15:37.120 align:start position:0%
temp okay let's try this enter the
 

01:15:37.120 --> 01:15:39.590 align:start position:0%
temp okay let's try this enter the
temperature<01:15:37.679><c> in</c><01:15:37.920><c> f</c><01:15:38.239><c> or</c><01:15:38.480><c> c</c><01:15:38.800><c> currently</c><01:15:39.199><c> we</c><01:15:39.360><c> only</c>

01:15:39.590 --> 01:15:39.600 align:start position:0%
temperature in f or c currently we only
 

01:15:39.600 --> 01:15:42.630 align:start position:0%
temperature in f or c currently we only
have<01:15:40.000><c> the</c><01:15:40.239><c> celsius</c><01:15:40.719><c> portion</c><01:15:41.120><c> set</c><01:15:41.360><c> up</c>

01:15:42.630 --> 01:15:42.640 align:start position:0%
have the celsius portion set up
 

01:15:42.640 --> 01:15:44.470 align:start position:0%
have the celsius portion set up
so<01:15:43.120><c> see</c>

01:15:44.470 --> 01:15:44.480 align:start position:0%
so see
 

01:15:44.480 --> 01:15:47.030 align:start position:0%
so see
enter<01:15:44.880><c> the</c><01:15:45.120><c> temp</c><01:15:45.440><c> in</c><01:15:45.679><c> celsius</c>

01:15:47.030 --> 01:15:47.040 align:start position:0%
enter the temp in celsius
 

01:15:47.040 --> 01:15:50.709 align:start position:0%
enter the temp in celsius
how<01:15:47.280><c> about</c><01:15:47.760><c> zero</c><01:15:48.080><c> degrees</c><01:15:48.480><c> celsius</c>

01:15:50.709 --> 01:15:50.719 align:start position:0%
how about zero degrees celsius
 

01:15:50.719 --> 01:15:54.630 align:start position:0%
how about zero degrees celsius
the<01:15:51.040><c> temp</c><01:15:51.360><c> in</c><01:15:51.520><c> fahrenheit</c><01:15:52.239><c> is</c><01:15:52.719><c> 32.0</c><01:15:54.159><c> okay</c><01:15:54.480><c> so</c>

01:15:54.630 --> 01:15:54.640 align:start position:0%
the temp in fahrenheit is 32.0 okay so
 

01:15:54.640 --> 01:15:56.229 align:start position:0%
the temp in fahrenheit is 32.0 okay so
we<01:15:54.800><c> know</c><01:15:54.960><c> that</c><01:15:55.120><c> it's</c><01:15:55.280><c> working</c>

01:15:56.229 --> 01:15:56.239 align:start position:0%
we know that it's working
 

01:15:56.239 --> 01:15:58.630 align:start position:0%
we know that it's working
let's<01:15:56.560><c> fill</c><01:15:56.800><c> out</c><01:15:57.040><c> our</c><01:15:57.280><c> else</c><01:15:57.600><c> if</c><01:15:57.760><c> statement</c>

01:15:58.630 --> 01:15:58.640 align:start position:0%
let's fill out our else if statement
 

01:15:58.640 --> 01:16:01.669 align:start position:0%
let's fill out our else if statement
else<01:15:59.040><c> if</c><01:15:59.360><c> unit</c><01:15:59.760><c> is</c><01:16:00.000><c> equal</c><01:16:00.320><c> to</c><01:16:00.640><c> f</c>

01:16:01.669 --> 01:16:01.679 align:start position:0%
else if unit is equal to f
 

01:16:01.679 --> 01:16:05.030 align:start position:0%
else if unit is equal to f
and<01:16:01.920><c> let's</c><01:16:02.239><c> copy</c><01:16:02.560><c> some</c><01:16:02.719><c> of</c><01:16:02.800><c> this</c>

01:16:05.030 --> 01:16:05.040 align:start position:0%
and let's copy some of this
 

01:16:05.040 --> 01:16:07.270 align:start position:0%
and let's copy some of this
enter<01:16:05.440><c> the</c><01:16:05.600><c> temp</c><01:16:06.239><c> in</c>

01:16:07.270 --> 01:16:07.280 align:start position:0%
enter the temp in
 

01:16:07.280 --> 01:16:08.709 align:start position:0%
enter the temp in
fahrenheit

01:16:08.709 --> 01:16:08.719 align:start position:0%
fahrenheit
 

01:16:08.719 --> 01:16:10.630 align:start position:0%
fahrenheit
we<01:16:08.960><c> will</c><01:16:09.199><c> reassign</c><01:16:09.920><c> our</c><01:16:10.159><c> temperature</c>

01:16:10.630 --> 01:16:10.640 align:start position:0%
we will reassign our temperature
 

01:16:10.640 --> 01:16:12.229 align:start position:0%
we will reassign our temperature
variable

01:16:12.229 --> 01:16:12.239 align:start position:0%
variable
 

01:16:12.239 --> 01:16:14.070 align:start position:0%
variable
temp<01:16:12.800><c> equals</c>

01:16:14.070 --> 01:16:14.080 align:start position:0%
temp equals
 

01:16:14.080 --> 01:16:16.070 align:start position:0%
temp equals
and<01:16:14.159><c> here's</c><01:16:14.400><c> the</c><01:16:14.480><c> formula</c>

01:16:16.070 --> 01:16:16.080 align:start position:0%
and here's the formula
 

01:16:16.080 --> 01:16:19.669 align:start position:0%
and here's the formula
temp<01:16:16.719><c> minus</c><01:16:17.520><c> 32</c>

01:16:19.669 --> 01:16:19.679 align:start position:0%
temp minus 32
 

01:16:19.679 --> 01:16:21.590 align:start position:0%
temp minus 32
times<01:16:20.239><c> 5</c>

01:16:21.590 --> 01:16:21.600 align:start position:0%
times 5
 

01:16:21.600 --> 01:16:26.180 align:start position:0%
times 5
and<01:16:21.840><c> we</c><01:16:22.000><c> will</c><01:16:22.159><c> divide</c><01:16:22.719><c> all</c><01:16:22.880><c> of</c><01:16:22.960><c> this</c><01:16:23.280><c> by</c><01:16:23.600><c> 9.</c>

01:16:26.180 --> 01:16:26.190 align:start position:0%
 
 

01:16:26.190 --> 01:16:28.229 align:start position:0%
 
[Music]

01:16:28.229 --> 01:16:28.239 align:start position:0%
[Music]
 

01:16:28.239 --> 01:16:30.310 align:start position:0%
[Music]
then<01:16:28.480><c> let's</c><01:16:28.719><c> display</c><01:16:29.199><c> the</c><01:16:29.280><c> temperature</c><01:16:30.000><c> in</c>

01:16:30.310 --> 01:16:30.320 align:start position:0%
then let's display the temperature in
 

01:16:30.320 --> 01:16:33.350 align:start position:0%
then let's display the temperature in
celsius

01:16:33.350 --> 01:16:33.360 align:start position:0%
 
 

01:16:33.360 --> 01:16:35.030 align:start position:0%
 
the<01:16:33.679><c> temp</c>

01:16:35.030 --> 01:16:35.040 align:start position:0%
the temp
 

01:16:35.040 --> 01:16:37.510 align:start position:0%
the temp
in<01:16:35.520><c> celsius</c><01:16:36.640><c> is</c>

01:16:37.510 --> 01:16:37.520 align:start position:0%
in celsius is
 

01:16:37.520 --> 01:16:40.310 align:start position:0%
in celsius is
our<01:16:37.760><c> format</c><01:16:38.159><c> specifier</c><01:16:39.280><c> then</c><01:16:39.679><c> the</c><01:16:39.920><c> temp</c>

01:16:40.310 --> 01:16:40.320 align:start position:0%
our format specifier then the temp
 

01:16:40.320 --> 01:16:43.430 align:start position:0%
our format specifier then the temp
variable<01:16:41.280><c> is</c><01:16:41.520><c> the</c><01:16:41.600><c> temperature</c><01:16:42.239><c> in</c><01:16:42.560><c> f</c><01:16:42.880><c> or</c><01:16:43.040><c> c</c>

01:16:43.430 --> 01:16:43.440 align:start position:0%
variable is the temperature in f or c
 

01:16:43.440 --> 01:16:46.070 align:start position:0%
variable is the temperature in f or c
this<01:16:43.679><c> time</c><01:16:43.920><c> it</c><01:16:44.080><c> is</c><01:16:44.239><c> in</c><01:16:44.480><c> fahrenheit</c>

01:16:46.070 --> 01:16:46.080 align:start position:0%
this time it is in fahrenheit
 

01:16:46.080 --> 01:16:49.430 align:start position:0%
this time it is in fahrenheit
enter<01:16:46.320><c> the</c><01:16:46.480><c> temp</c><01:16:46.800><c> in</c><01:16:47.040><c> fahrenheit</c><01:16:48.320><c> so</c><01:16:48.880><c> 32</c>

01:16:49.430 --> 01:16:49.440 align:start position:0%
enter the temp in fahrenheit so 32
 

01:16:49.440 --> 01:16:51.669 align:start position:0%
enter the temp in fahrenheit so 32
degrees<01:16:49.840><c> in</c><01:16:50.000><c> fahrenheit</c><01:16:50.800><c> should</c><01:16:51.120><c> translate</c>

01:16:51.669 --> 01:16:51.679 align:start position:0%
degrees in fahrenheit should translate
 

01:16:51.679 --> 01:16:53.990 align:start position:0%
degrees in fahrenheit should translate
to<01:16:51.920><c> zero</c><01:16:52.239><c> degrees</c><01:16:52.560><c> celsius</c>

01:16:53.990 --> 01:16:54.000 align:start position:0%
to zero degrees celsius
 

01:16:54.000 --> 01:16:55.430 align:start position:0%
to zero degrees celsius
which<01:16:54.320><c> it</c><01:16:54.480><c> is</c>

01:16:55.430 --> 01:16:55.440 align:start position:0%
which it is
 

01:16:55.440 --> 01:16:57.110 align:start position:0%
which it is
so<01:16:55.760><c> yeah</c><01:16:56.000><c> everybody</c><01:16:56.400><c> i</c><01:16:56.560><c> thought</c><01:16:56.800><c> that</c><01:16:56.960><c> would</c>

01:16:57.110 --> 01:16:57.120 align:start position:0%
so yeah everybody i thought that would
 

01:16:57.120 --> 01:16:59.350 align:start position:0%
so yeah everybody i thought that would
be<01:16:57.360><c> a</c><01:16:57.520><c> useful</c><01:16:58.000><c> practice</c><01:16:58.400><c> program</c><01:16:58.800><c> for</c><01:16:59.040><c> us</c><01:16:59.199><c> to</c>

01:16:59.350 --> 01:16:59.360 align:start position:0%
be a useful practice program for us to
 

01:16:59.360 --> 01:17:01.590 align:start position:0%
be a useful practice program for us to
get<01:16:59.520><c> used</c><01:16:59.679><c> to</c><01:16:59.920><c> accepting</c><01:17:00.320><c> user</c><01:17:00.719><c> input</c>

01:17:01.590 --> 01:17:01.600 align:start position:0%
get used to accepting user input
 

01:17:01.600 --> 01:17:03.270 align:start position:0%
get used to accepting user input
i'll<01:17:01.840><c> post</c><01:17:02.159><c> all</c><01:17:02.320><c> of</c><01:17:02.400><c> this</c><01:17:02.640><c> code</c><01:17:02.880><c> from</c><01:17:03.120><c> this</c>

01:17:03.270 --> 01:17:03.280 align:start position:0%
i'll post all of this code from this
 

01:17:03.280 --> 01:17:04.870 align:start position:0%
i'll post all of this code from this
program<01:17:03.760><c> in</c><01:17:03.840><c> the</c><01:17:04.000><c> comments</c><01:17:04.400><c> section</c><01:17:04.719><c> down</c>

01:17:04.870 --> 01:17:04.880 align:start position:0%
program in the comments section down
 

01:17:04.880 --> 01:17:06.870 align:start position:0%
program in the comments section down
below<01:17:05.280><c> if</c><01:17:05.360><c> you</c><01:17:05.520><c> would</c><01:17:05.600><c> like</c><01:17:05.840><c> a</c><01:17:05.920><c> copy</c>

01:17:06.870 --> 01:17:06.880 align:start position:0%
below if you would like a copy
 

01:17:06.880 --> 01:17:08.550 align:start position:0%
below if you would like a copy
so<01:17:07.120><c> if</c><01:17:07.199><c> you</c><01:17:07.280><c> found</c><01:17:07.520><c> this</c><01:17:07.679><c> video</c><01:17:07.920><c> helpful</c><01:17:08.400><c> you</c>

01:17:08.550 --> 01:17:08.560 align:start position:0%
so if you found this video helpful you
 

01:17:08.560 --> 01:17:10.310 align:start position:0%
so if you found this video helpful you
can<01:17:08.640><c> help</c><01:17:08.880><c> me</c><01:17:09.040><c> out</c><01:17:09.280><c> by</c><01:17:09.520><c> smashing</c><01:17:09.920><c> that</c><01:17:10.080><c> like</c>

01:17:10.310 --> 01:17:10.320 align:start position:0%
can help me out by smashing that like
 

01:17:10.320 --> 01:17:12.149 align:start position:0%
can help me out by smashing that like
button<01:17:10.719><c> leave</c><01:17:10.960><c> random</c><01:17:11.280><c> comments</c><01:17:11.520><c> down</c><01:17:11.760><c> below</c>

01:17:12.149 --> 01:17:12.159 align:start position:0%
button leave random comments down below
 

01:17:12.159 --> 01:17:13.830 align:start position:0%
button leave random comments down below
and<01:17:12.480><c> subscribe</c><01:17:12.960><c> if</c><01:17:13.040><c> you'd</c><01:17:13.199><c> like</c><01:17:13.360><c> to</c><01:17:13.440><c> become</c><01:17:13.760><c> a</c>

01:17:13.830 --> 01:17:13.840 align:start position:0%
and subscribe if you'd like to become a
 

01:17:13.840 --> 01:17:17.430 align:start position:0%
and subscribe if you'd like to become a
fellow<01:17:14.159><c> bro</c>

01:17:17.430 --> 01:17:17.440 align:start position:0%
 
 

01:17:17.440 --> 01:17:19.430 align:start position:0%
 
hey<01:17:17.679><c> yeah</c><01:17:18.080><c> what's</c><01:17:18.400><c> going</c><01:17:18.560><c> on</c><01:17:18.800><c> everybody</c><01:17:19.280><c> i</c>

01:17:19.430 --> 01:17:19.440 align:start position:0%
hey yeah what's going on everybody i
 

01:17:19.440 --> 01:17:21.430 align:start position:0%
hey yeah what's going on everybody i
thought<01:17:19.600><c> in</c><01:17:19.840><c> this</c><01:17:20.000><c> video</c><01:17:20.320><c> we</c><01:17:20.480><c> could</c><01:17:20.719><c> create</c><01:17:21.120><c> a</c>

01:17:21.430 --> 01:17:21.440 align:start position:0%
thought in this video we could create a
 

01:17:21.440 --> 01:17:23.910 align:start position:0%
thought in this video we could create a
simple<01:17:21.920><c> calculator</c><01:17:22.560><c> program</c><01:17:23.120><c> in</c><01:17:23.360><c> c</c><01:17:23.600><c> for</c>

01:17:23.910 --> 01:17:23.920 align:start position:0%
simple calculator program in c for
 

01:17:23.920 --> 01:17:26.229 align:start position:0%
simple calculator program in c for
practice<01:17:24.719><c> let's</c><01:17:24.960><c> begin</c><01:17:25.280><c> by</c><01:17:25.440><c> declaring</c><01:17:26.000><c> all</c><01:17:26.159><c> of</c>

01:17:26.229 --> 01:17:26.239 align:start position:0%
practice let's begin by declaring all of
 

01:17:26.239 --> 01:17:28.149 align:start position:0%
practice let's begin by declaring all of
the<01:17:26.400><c> different</c><01:17:26.640><c> variables</c><01:17:27.120><c> that</c><01:17:27.280><c> we'll</c><01:17:27.520><c> need</c>

01:17:28.149 --> 01:17:28.159 align:start position:0%
the different variables that we'll need
 

01:17:28.159 --> 01:17:30.149 align:start position:0%
the different variables that we'll need
we'll<01:17:28.320><c> need</c><01:17:28.560><c> a</c><01:17:28.800><c> character</c><01:17:29.360><c> to</c><01:17:29.520><c> store</c><01:17:29.920><c> an</c>

01:17:30.149 --> 01:17:30.159 align:start position:0%
we'll need a character to store an
 

01:17:30.159 --> 01:17:32.390 align:start position:0%
we'll need a character to store an
operator

01:17:32.390 --> 01:17:32.400 align:start position:0%
operator
 

01:17:32.400 --> 01:17:35.189 align:start position:0%
operator
so<01:17:32.640><c> are</c><01:17:32.800><c> we</c><01:17:32.960><c> going</c><01:17:33.280><c> to</c><01:17:33.600><c> add</c><01:17:34.000><c> subtract</c><01:17:34.640><c> multiply</c>

01:17:35.189 --> 01:17:35.199 align:start position:0%
so are we going to add subtract multiply
 

01:17:35.199 --> 01:17:36.630 align:start position:0%
so are we going to add subtract multiply
or<01:17:35.360><c> divide</c>

01:17:36.630 --> 01:17:36.640 align:start position:0%
or divide
 

01:17:36.640 --> 01:17:39.830 align:start position:0%
or divide
we'll<01:17:36.880><c> need</c><01:17:37.360><c> double</c><01:17:38.080><c> num1</c>

01:17:39.830 --> 01:17:39.840 align:start position:0%
we'll need double num1
 

01:17:39.840 --> 01:17:42.390 align:start position:0%
we'll need double num1
double<01:17:40.640><c> num2</c>

01:17:42.390 --> 01:17:42.400 align:start position:0%
double num2
 

01:17:42.400 --> 01:17:47.110 align:start position:0%
double num2
and<01:17:42.960><c> double</c><01:17:44.000><c> result</c>

01:17:47.110 --> 01:17:47.120 align:start position:0%
 
 

01:17:47.120 --> 01:17:48.790 align:start position:0%
 
let's<01:17:47.440><c> ask</c><01:17:47.679><c> the</c><01:17:47.760><c> user</c><01:17:48.159><c> what</c><01:17:48.400><c> type</c><01:17:48.640><c> of</c>

01:17:48.790 --> 01:17:48.800 align:start position:0%
let's ask the user what type of
 

01:17:48.800 --> 01:17:52.390 align:start position:0%
let's ask the user what type of
operation<01:17:49.280><c> they</c><01:17:49.440><c> would</c><01:17:49.600><c> like</c><01:17:49.760><c> to</c><01:17:49.920><c> use</c>

01:17:52.390 --> 01:17:52.400 align:start position:0%
 
 

01:17:52.400 --> 01:17:56.550 align:start position:0%
 
enter<01:17:53.040><c> an</c><01:17:53.520><c> operator</c>

01:17:56.550 --> 01:17:56.560 align:start position:0%
 
 

01:17:56.560 --> 01:17:59.510 align:start position:0%
 
so<01:17:56.719><c> we</c><01:17:56.880><c> can</c><01:17:57.120><c> use</c><01:17:57.440><c> addition</c><01:17:58.239><c> subtraction</c>

01:17:59.510 --> 01:17:59.520 align:start position:0%
so we can use addition subtraction
 

01:17:59.520 --> 01:18:02.310 align:start position:0%
so we can use addition subtraction
multiplication<01:18:00.640><c> or</c><01:18:00.800><c> division</c>

01:18:02.310 --> 01:18:02.320 align:start position:0%
multiplication or division
 

01:18:02.320 --> 01:18:05.270 align:start position:0%
multiplication or division
and<01:18:02.560><c> we</c><01:18:02.719><c> will</c><01:18:02.960><c> use</c><01:18:03.360><c> scanf</c><01:18:04.239><c> to</c><01:18:04.560><c> accept</c><01:18:05.040><c> some</c>

01:18:05.270 --> 01:18:05.280 align:start position:0%
and we will use scanf to accept some
 

01:18:05.280 --> 01:18:07.510 align:start position:0%
and we will use scanf to accept some
user<01:18:05.600><c> input</c><01:18:06.320><c> if</c><01:18:06.480><c> we're</c><01:18:06.800><c> accepting</c><01:18:07.360><c> a</c>

01:18:07.510 --> 01:18:07.520 align:start position:0%
user input if we're accepting a
 

01:18:07.520 --> 01:18:10.790 align:start position:0%
user input if we're accepting a
character<01:18:08.080><c> the</c><01:18:08.239><c> format</c><01:18:08.640><c> specifier</c><01:18:09.520><c> is</c><01:18:09.760><c> c</c>

01:18:10.790 --> 01:18:10.800 align:start position:0%
character the format specifier is c
 

01:18:10.800 --> 01:18:13.430 align:start position:0%
character the format specifier is c
and<01:18:10.960><c> we</c><01:18:11.199><c> will</c><01:18:11.360><c> use</c><01:18:11.679><c> the</c><01:18:12.000><c> address</c><01:18:12.400><c> of</c><01:18:12.640><c> operator</c>

01:18:13.430 --> 01:18:13.440 align:start position:0%
and we will use the address of operator
 

01:18:13.440 --> 01:18:15.189 align:start position:0%
and we will use the address of operator
the<01:18:13.600><c> name</c><01:18:13.920><c> of</c><01:18:14.000><c> our</c><01:18:14.159><c> variable</c><01:18:14.719><c> we</c><01:18:14.800><c> would</c><01:18:14.960><c> like</c>

01:18:15.189 --> 01:18:15.199 align:start position:0%
the name of our variable we would like
 

01:18:15.199 --> 01:18:18.149 align:start position:0%
the name of our variable we would like
to<01:18:15.360><c> store</c><01:18:15.760><c> some</c><01:18:15.920><c> user</c><01:18:16.400><c> input</c><01:18:16.880><c> into</c>

01:18:18.149 --> 01:18:18.159 align:start position:0%
to store some user input into
 

01:18:18.159 --> 01:18:21.350 align:start position:0%
to store some user input into
then<01:18:18.400><c> let's</c><01:18:18.640><c> accept</c><01:18:19.360><c> num1</c>

01:18:21.350 --> 01:18:21.360 align:start position:0%
then let's accept num1
 

01:18:21.360 --> 01:18:22.390 align:start position:0%
then let's accept num1
enter

01:18:22.390 --> 01:18:22.400 align:start position:0%
enter
 

01:18:22.400 --> 01:18:25.510 align:start position:0%
enter
number<01:18:23.120><c> one</c>

01:18:25.510 --> 01:18:25.520 align:start position:0%
 
 

01:18:25.520 --> 01:18:27.110 align:start position:0%
 
then<01:18:25.840><c> scanf</c>

01:18:27.110 --> 01:18:27.120 align:start position:0%
then scanf
 

01:18:27.120 --> 01:18:30.310 align:start position:0%
then scanf
the<01:18:27.280><c> format</c><01:18:27.679><c> specifier</c><01:18:28.480><c> for</c><01:18:28.800><c> a</c><01:18:29.040><c> double</c>

01:18:30.310 --> 01:18:30.320 align:start position:0%
the format specifier for a double
 

01:18:30.320 --> 01:18:33.669 align:start position:0%
the format specifier for a double
is<01:18:30.719><c> lf</c>

01:18:33.669 --> 01:18:33.679 align:start position:0%
 
 

01:18:33.679 --> 01:18:35.430 align:start position:0%
 
num1

01:18:35.430 --> 01:18:35.440 align:start position:0%
num1
 

01:18:35.440 --> 01:18:38.830 align:start position:0%
num1
okay<01:18:36.080><c> do</c><01:18:36.320><c> the</c><01:18:36.400><c> same</c><01:18:36.719><c> thing</c><01:18:36.960><c> with</c><01:18:37.360><c> number</c>

01:18:38.830 --> 01:18:38.840 align:start position:0%
okay do the same thing with number
 

01:18:38.840 --> 01:18:43.590 align:start position:0%
okay do the same thing with number
two<01:18:40.000><c> replace</c><01:18:40.640><c> one</c><01:18:41.120><c> with</c><01:18:41.520><c> two</c>

01:18:43.590 --> 01:18:43.600 align:start position:0%
two replace one with two
 

01:18:43.600 --> 01:18:46.229 align:start position:0%
two replace one with two
then<01:18:43.840><c> to</c><01:18:44.080><c> examine</c><01:18:44.800><c> our</c><01:18:45.040><c> operator</c><01:18:45.600><c> let's</c><01:18:45.840><c> use</c><01:18:46.080><c> a</c>

01:18:46.229 --> 01:18:46.239 align:start position:0%
then to examine our operator let's use a
 

01:18:46.239 --> 01:18:47.990 align:start position:0%
then to examine our operator let's use a
switch

01:18:47.990 --> 01:18:48.000 align:start position:0%
switch
 

01:18:48.000 --> 01:18:49.430 align:start position:0%
switch
switch

01:18:49.430 --> 01:18:49.440 align:start position:0%
switch
 

01:18:49.440 --> 01:18:52.229 align:start position:0%
switch
and<01:18:49.679><c> we</c><01:18:49.920><c> will</c><01:18:50.080><c> examine</c><01:18:50.800><c> our</c><01:18:51.040><c> operator</c><01:18:51.760><c> for</c><01:18:52.000><c> any</c>

01:18:52.229 --> 01:18:52.239 align:start position:0%
and we will examine our operator for any
 

01:18:52.239 --> 01:18:54.709 align:start position:0%
and we will examine our operator for any
matching<01:18:52.640><c> cases</c><01:18:53.520><c> let's</c><01:18:53.840><c> add</c><01:18:54.000><c> a</c><01:18:54.080><c> default</c><01:18:54.480><c> case</c>

01:18:54.709 --> 01:18:54.719 align:start position:0%
matching cases let's add a default case
 

01:18:54.719 --> 01:18:56.790 align:start position:0%
matching cases let's add a default case
because<01:18:55.040><c> i</c><01:18:55.120><c> might</c><01:18:55.360><c> forget</c><01:18:55.600><c> to</c><01:18:55.760><c> add</c><01:18:55.920><c> this</c><01:18:56.080><c> later</c>

01:18:56.790 --> 01:18:56.800 align:start position:0%
because i might forget to add this later
 

01:18:56.800 --> 01:18:59.189 align:start position:0%
because i might forget to add this later
so<01:18:57.040><c> if</c><01:18:57.280><c> a</c><01:18:57.440><c> user</c><01:18:57.840><c> does</c><01:18:58.080><c> not</c><01:18:58.320><c> enter</c><01:18:58.640><c> in</c><01:18:58.880><c> anything</c>

01:18:59.189 --> 01:18:59.199 align:start position:0%
so if a user does not enter in anything
 

01:18:59.199 --> 01:19:01.350 align:start position:0%
so if a user does not enter in anything
that<01:18:59.360><c> has</c><01:18:59.600><c> a</c><01:18:59.679><c> matching</c><01:19:00.159><c> case</c><01:19:00.880><c> one</c><01:19:01.040><c> of</c><01:19:01.120><c> these</c>

01:19:01.350 --> 01:19:01.360 align:start position:0%
that has a matching case one of these
 

01:19:01.360 --> 01:19:02.630 align:start position:0%
that has a matching case one of these
four<01:19:01.600><c> symbols</c>

01:19:02.630 --> 01:19:02.640 align:start position:0%
four symbols
 

01:19:02.640 --> 01:19:04.709 align:start position:0%
four symbols
let's<01:19:02.880><c> print</c><01:19:03.199><c> a</c><01:19:03.280><c> message</c>

01:19:04.709 --> 01:19:04.719 align:start position:0%
let's print a message
 

01:19:04.719 --> 01:19:11.189 align:start position:0%
let's print a message
let's<01:19:04.960><c> say</c><01:19:05.360><c> that</c><01:19:05.600><c> our</c><01:19:05.920><c> operator</c><01:19:06.719><c> is</c><01:19:07.520><c> not</c><01:19:08.239><c> valid</c>

01:19:11.189 --> 01:19:11.199 align:start position:0%
 
 

01:19:11.199 --> 01:19:15.110 align:start position:0%
 
our<01:19:11.360><c> first</c><01:19:11.679><c> case</c><01:19:11.920><c> will</c><01:19:12.080><c> be</c><01:19:12.320><c> edition</c><01:19:13.199><c> so</c><01:19:13.600><c> case</c>

01:19:15.110 --> 01:19:15.120 align:start position:0%
our first case will be edition so case
 

01:19:15.120 --> 01:19:17.590 align:start position:0%
our first case will be edition so case
addition

01:19:17.590 --> 01:19:17.600 align:start position:0%
addition
 

01:19:17.600 --> 01:19:18.709 align:start position:0%
addition
result

01:19:18.709 --> 01:19:18.719 align:start position:0%
result
 

01:19:18.719 --> 01:19:23.270 align:start position:0%
result
equals<01:19:19.520><c> num1</c><01:19:20.400><c> plus</c><01:19:20.960><c> num2</c><01:19:22.239><c> and</c><01:19:22.560><c> let's</c><01:19:22.800><c> display</c>

01:19:23.270 --> 01:19:23.280 align:start position:0%
equals num1 plus num2 and let's display
 

01:19:23.280 --> 01:19:26.630 align:start position:0%
equals num1 plus num2 and let's display
our<01:19:23.440><c> result</c>

01:19:26.630 --> 01:19:26.640 align:start position:0%
 
 

01:19:26.640 --> 01:19:31.030 align:start position:0%
 
result

01:19:31.030 --> 01:19:31.040 align:start position:0%
 
 

01:19:31.040 --> 01:19:33.510 align:start position:0%
 
and<01:19:31.280><c> the</c><01:19:31.360><c> format</c><01:19:31.760><c> specifier</c><01:19:32.400><c> for</c><01:19:32.560><c> a</c><01:19:32.719><c> double</c><01:19:33.199><c> is</c>

01:19:33.510 --> 01:19:33.520 align:start position:0%
and the format specifier for a double is
 

01:19:33.520 --> 01:19:36.550 align:start position:0%
and the format specifier for a double is
lf

01:19:36.550 --> 01:19:36.560 align:start position:0%
 
 

01:19:36.560 --> 01:19:38.390 align:start position:0%
 
and<01:19:36.719><c> then</c><01:19:36.960><c> at</c><01:19:37.040><c> the</c><01:19:37.199><c> end</c><01:19:37.360><c> of</c><01:19:37.440><c> your</c><01:19:37.679><c> case</c><01:19:38.080><c> you</c>

01:19:38.390 --> 01:19:38.400 align:start position:0%
and then at the end of your case you
 

01:19:38.400 --> 01:19:41.189 align:start position:0%
and then at the end of your case you
should<01:19:38.719><c> break</c><01:19:39.280><c> to</c><01:19:39.600><c> break</c><01:19:39.840><c> out</c><01:19:40.000><c> of</c><01:19:40.080><c> the</c><01:19:40.159><c> switch</c>

01:19:41.189 --> 01:19:41.199 align:start position:0%
should break to break out of the switch
 

01:19:41.199 --> 01:19:42.870 align:start position:0%
should break to break out of the switch
then<01:19:41.440><c> we</c><01:19:41.600><c> can</c><01:19:41.760><c> copy</c><01:19:42.080><c> this</c>

01:19:42.870 --> 01:19:42.880 align:start position:0%
then we can copy this
 

01:19:42.880 --> 01:19:43.990 align:start position:0%
then we can copy this
paste<01:19:43.280><c> it</c>

01:19:43.990 --> 01:19:44.000 align:start position:0%
paste it
 

01:19:44.000 --> 01:19:47.430 align:start position:0%
paste it
and<01:19:44.159><c> then</c><01:19:44.400><c> change</c><01:19:44.880><c> any</c><01:19:45.280><c> plus</c><01:19:45.760><c> to</c><01:19:46.159><c> minus</c>

01:19:47.430 --> 01:19:47.440 align:start position:0%
and then change any plus to minus
 

01:19:47.440 --> 01:19:48.790 align:start position:0%
and then change any plus to minus
then<01:19:47.600><c> do</c><01:19:47.760><c> the</c><01:19:47.920><c> same</c><01:19:48.159><c> thing</c><01:19:48.480><c> with</c>

01:19:48.790 --> 01:19:48.800 align:start position:0%
then do the same thing with
 

01:19:48.800 --> 01:19:52.310 align:start position:0%
then do the same thing with
multiplication

01:19:52.310 --> 01:19:52.320 align:start position:0%
 
 

01:19:52.320 --> 01:19:55.910 align:start position:0%
 
and<01:19:52.640><c> lastly</c><01:19:53.120><c> division</c>

01:19:55.910 --> 01:19:55.920 align:start position:0%
 
 

01:19:55.920 --> 01:19:58.790 align:start position:0%
 
and<01:19:56.320><c> that</c><01:19:56.480><c> is</c><01:19:56.640><c> it</c><01:19:57.199><c> so</c><01:19:57.440><c> let's</c><01:19:57.679><c> try</c><01:19:57.920><c> this</c>

01:19:58.790 --> 01:19:58.800 align:start position:0%
and that is it so let's try this
 

01:19:58.800 --> 01:20:01.669 align:start position:0%
and that is it so let's try this
enter<01:19:59.120><c> an</c><01:19:59.280><c> operator</c><01:19:59.920><c> i</c><01:20:00.080><c> would</c><01:20:00.239><c> like</c><01:20:00.480><c> to</c><01:20:00.719><c> add</c>

01:20:01.669 --> 01:20:01.679 align:start position:0%
enter an operator i would like to add
 

01:20:01.679 --> 01:20:04.990 align:start position:0%
enter an operator i would like to add
enter<01:20:02.080><c> number</c><01:20:02.400><c> one</c><01:20:02.719><c> 4.20</c><01:20:04.080><c> plus</c>

01:20:04.990 --> 01:20:05.000 align:start position:0%
enter number one 4.20 plus
 

01:20:05.000 --> 01:20:06.870 align:start position:0%
enter number one 4.20 plus
3.14

01:20:06.870 --> 01:20:06.880 align:start position:0%
3.14
 

01:20:06.880 --> 01:20:08.030 align:start position:0%
3.14
that<01:20:07.280><c> is</c>

01:20:08.030 --> 01:20:08.040 align:start position:0%
that is
 

01:20:08.040 --> 01:20:10.709 align:start position:0%
that is
7.34<01:20:09.440><c> and</c><01:20:09.600><c> you</c><01:20:09.679><c> can</c><01:20:09.920><c> limit</c><01:20:10.159><c> the</c><01:20:10.320><c> amount</c><01:20:10.560><c> of</c>

01:20:10.709 --> 01:20:10.719 align:start position:0%
7.34 and you can limit the amount of
 

01:20:10.719 --> 01:20:12.310 align:start position:0%
7.34 and you can limit the amount of
digits<01:20:11.120><c> after</c><01:20:11.360><c> the</c><01:20:11.520><c> decimal</c><01:20:11.920><c> that</c><01:20:12.159><c> is</c>

01:20:12.310 --> 01:20:12.320 align:start position:0%
digits after the decimal that is
 

01:20:12.320 --> 01:20:14.149 align:start position:0%
digits after the decimal that is
displayed<01:20:12.880><c> if</c><01:20:12.960><c> you</c><01:20:13.120><c> would</c><01:20:13.360><c> like</c><01:20:13.600><c> to</c><01:20:13.760><c> adjust</c>

01:20:14.149 --> 01:20:14.159 align:start position:0%
displayed if you would like to adjust
 

01:20:14.159 --> 01:20:16.470 align:start position:0%
displayed if you would like to adjust
that<01:20:14.800><c> with</c><01:20:15.040><c> the</c><01:20:15.199><c> format</c><01:20:15.600><c> specifier</c><01:20:16.239><c> with</c>

01:20:16.470 --> 01:20:16.480 align:start position:0%
that with the format specifier with
 

01:20:16.480 --> 01:20:19.030 align:start position:0%
that with the format specifier with
result<01:20:17.360><c> type</c><01:20:17.840><c> dot</c><01:20:18.400><c> than</c><01:20:18.560><c> the</c><01:20:18.719><c> amount</c><01:20:18.960><c> of</c>

01:20:19.030 --> 01:20:19.040 align:start position:0%
result type dot than the amount of
 

01:20:19.040 --> 01:20:20.870 align:start position:0%
result type dot than the amount of
digits<01:20:19.440><c> you</c><01:20:19.520><c> would</c><01:20:19.600><c> like</c><01:20:19.760><c> to</c><01:20:19.920><c> display</c><01:20:20.639><c> so</c><01:20:20.800><c> i'm</c>

01:20:20.870 --> 01:20:20.880 align:start position:0%
digits you would like to display so i'm
 

01:20:20.880 --> 01:20:22.310 align:start position:0%
digits you would like to display so i'm
just<01:20:21.040><c> going</c><01:20:21.199><c> to</c><01:20:21.440><c> go</c><01:20:21.600><c> ahead</c><01:20:21.760><c> and</c><01:20:21.920><c> change</c><01:20:22.159><c> that</c>

01:20:22.310 --> 01:20:22.320 align:start position:0%
just going to go ahead and change that
 

01:20:22.320 --> 01:20:25.189 align:start position:0%
just going to go ahead and change that
real<01:20:22.560><c> quick</c>

01:20:25.189 --> 01:20:25.199 align:start position:0%
 
 

01:20:25.199 --> 01:20:27.990 align:start position:0%
 
okay<01:20:25.600><c> so</c><01:20:26.080><c> by</c><01:20:26.239><c> adding</c><01:20:26.719><c> 0.2</c><01:20:27.199><c> to</c><01:20:27.360><c> our</c><01:20:27.520><c> format</c>

01:20:27.990 --> 01:20:28.000 align:start position:0%
okay so by adding 0.2 to our format
 

01:20:28.000 --> 01:20:30.790 align:start position:0%
okay so by adding 0.2 to our format
specifier<01:20:29.199><c> this</c><01:20:29.360><c> will</c><01:20:29.679><c> only</c><01:20:29.920><c> display</c><01:20:30.400><c> it</c><01:20:30.560><c> two</c>

01:20:30.790 --> 01:20:30.800 align:start position:0%
specifier this will only display it two
 

01:20:30.800 --> 01:20:32.629 align:start position:0%
specifier this will only display it two
digits<01:20:31.280><c> after</c><01:20:31.520><c> the</c><01:20:31.679><c> decimal</c><01:20:32.239><c> but</c><01:20:32.400><c> you</c><01:20:32.560><c> can</c>

01:20:32.629 --> 01:20:32.639 align:start position:0%
digits after the decimal but you can
 

01:20:32.639 --> 01:20:34.870 align:start position:0%
digits after the decimal but you can
keep<01:20:32.880><c> it</c><01:20:32.960><c> the</c><01:20:33.120><c> original</c><01:20:33.520><c> way</c><01:20:33.760><c> if</c><01:20:33.840><c> you'd</c><01:20:34.000><c> like</c>

01:20:34.870 --> 01:20:34.880 align:start position:0%
keep it the original way if you'd like
 

01:20:34.880 --> 01:20:39.229 align:start position:0%
keep it the original way if you'd like
okay<01:20:35.280><c> let's</c><01:20:35.520><c> subtract</c><01:20:36.320><c> so</c><01:20:36.880><c> minus</c>

01:20:39.229 --> 01:20:39.239 align:start position:0%
okay let's subtract so minus
 

01:20:39.239 --> 01:20:43.270 align:start position:0%
okay let's subtract so minus
4.20<01:20:40.639><c> minus</c><01:20:41.440><c> 3.14</c>

01:20:43.270 --> 01:20:43.280 align:start position:0%
4.20 minus 3.14
 

01:20:43.280 --> 01:20:44.830 align:start position:0%
4.20 minus 3.14
is

01:20:44.830 --> 01:20:44.840 align:start position:0%
is
 

01:20:44.840 --> 01:20:48.310 align:start position:0%
is
1.06<01:20:46.239><c> okay</c><01:20:46.639><c> multiplication</c>

01:20:48.310 --> 01:20:48.320 align:start position:0%
1.06 okay multiplication
 

01:20:48.320 --> 01:20:52.070 align:start position:0%
1.06 okay multiplication
3.14<01:20:49.760><c> times</c><01:20:50.520><c> 4.20</c>

01:20:52.070 --> 01:20:52.080 align:start position:0%
3.14 times 4.20
 

01:20:52.080 --> 01:20:55.030 align:start position:0%
3.14 times 4.20
is<01:20:52.480><c> 13.19</c>

01:20:55.030 --> 01:20:55.040 align:start position:0%
is 13.19
 

01:20:55.040 --> 01:20:57.189 align:start position:0%
is 13.19
and<01:20:55.360><c> lastly</c><01:20:55.840><c> division</c>

01:20:57.189 --> 01:20:57.199 align:start position:0%
and lastly division
 

01:20:57.199 --> 01:20:58.709 align:start position:0%
and lastly division
3.14

01:20:58.709 --> 01:20:58.719 align:start position:0%
3.14
 

01:20:58.719 --> 01:21:01.430 align:start position:0%
3.14
divided<01:20:59.280><c> by</c><01:20:59.800><c> 4.20</c>

01:21:01.430 --> 01:21:01.440 align:start position:0%
divided by 4.20
 

01:21:01.440 --> 01:21:02.189 align:start position:0%
divided by 4.20
is

01:21:02.189 --> 01:21:02.199 align:start position:0%
is
 

01:21:02.199 --> 01:21:03.750 align:start position:0%
is
0.75

01:21:03.750 --> 01:21:03.760 align:start position:0%
0.75
 

01:21:03.760 --> 01:21:06.070 align:start position:0%
0.75
and<01:21:04.000><c> we</c><01:21:04.159><c> do</c><01:21:04.400><c> have</c><01:21:04.719><c> a</c><01:21:04.800><c> default</c><01:21:05.280><c> case</c><01:21:05.679><c> if</c><01:21:05.840><c> there</c>

01:21:06.070 --> 01:21:06.080 align:start position:0%
and we do have a default case if there
 

01:21:06.080 --> 01:21:08.149 align:start position:0%
and we do have a default case if there
are<01:21:06.320><c> no</c><01:21:06.560><c> matching</c><01:21:07.040><c> cases</c>

01:21:08.149 --> 01:21:08.159 align:start position:0%
are no matching cases
 

01:21:08.159 --> 01:21:10.070 align:start position:0%
are no matching cases
let's<01:21:08.400><c> type</c><01:21:08.639><c> in</c><01:21:08.800><c> a</c><01:21:08.880><c> character</c><01:21:09.360><c> besides</c><01:21:09.840><c> one</c><01:21:10.000><c> of</c>

01:21:10.070 --> 01:21:10.080 align:start position:0%
let's type in a character besides one of
 

01:21:10.080 --> 01:21:12.709 align:start position:0%
let's type in a character besides one of
these<01:21:10.320><c> four</c><01:21:10.560><c> symbols</c><01:21:11.520><c> how</c><01:21:11.760><c> about</c>

01:21:12.709 --> 01:21:12.719 align:start position:0%
these four symbols how about
 

01:21:12.719 --> 01:21:14.709 align:start position:0%
these four symbols how about
i<01:21:12.800><c> don't</c><01:21:12.960><c> know</c><01:21:13.280><c> a</c><01:21:13.360><c> dollar</c><01:21:13.679><c> sign</c>

01:21:14.709 --> 01:21:14.719 align:start position:0%
i don't know a dollar sign
 

01:21:14.719 --> 01:21:16.550 align:start position:0%
i don't know a dollar sign
unfortunately<01:21:15.520><c> we</c><01:21:15.679><c> still</c><01:21:15.920><c> need</c><01:21:16.080><c> to</c><01:21:16.239><c> enter</c>

01:21:16.550 --> 01:21:16.560 align:start position:0%
unfortunately we still need to enter
 

01:21:16.560 --> 01:21:19.669 align:start position:0%
unfortunately we still need to enter
into<01:21:16.960><c> numbers</c><01:21:17.920><c> and</c><01:21:18.080><c> then</c><01:21:18.239><c> this</c><01:21:18.480><c> states</c><01:21:19.360><c> our</c>

01:21:19.669 --> 01:21:19.679 align:start position:0%
into numbers and then this states our
 

01:21:19.679 --> 01:21:22.149 align:start position:0%
into numbers and then this states our
operator<01:21:20.400><c> is</c><01:21:20.719><c> not</c><01:21:20.960><c> valid</c>

01:21:22.149 --> 01:21:22.159 align:start position:0%
operator is not valid
 

01:21:22.159 --> 01:21:25.189 align:start position:0%
operator is not valid
so<01:21:22.400><c> yeah</c><01:21:22.719><c> everybody</c><01:21:23.199><c> that</c><01:21:23.520><c> is</c><01:21:23.840><c> a</c><01:21:24.239><c> very</c><01:21:24.719><c> simple</c>

01:21:25.189 --> 01:21:25.199 align:start position:0%
so yeah everybody that is a very simple
 

01:21:25.199 --> 01:21:27.350 align:start position:0%
so yeah everybody that is a very simple
calculator<01:21:25.840><c> program</c><01:21:26.400><c> in</c><01:21:26.639><c> c</c>

01:21:27.350 --> 01:21:27.360 align:start position:0%
calculator program in c
 

01:21:27.360 --> 01:21:29.110 align:start position:0%
calculator program in c
if<01:21:27.520><c> you</c><01:21:27.600><c> would</c><01:21:27.760><c> like</c><01:21:28.080><c> a</c><01:21:28.320><c> copy</c><01:21:28.639><c> of</c><01:21:28.800><c> all</c><01:21:28.880><c> this</c>

01:21:29.110 --> 01:21:29.120 align:start position:0%
if you would like a copy of all this
 

01:21:29.120 --> 01:21:31.350 align:start position:0%
if you would like a copy of all this
code<01:21:29.440><c> i'll</c><01:21:29.679><c> post</c><01:21:30.000><c> a</c><01:21:30.159><c> copy</c><01:21:30.639><c> in</c><01:21:30.719><c> the</c><01:21:30.880><c> comment</c>

01:21:31.350 --> 01:21:31.360 align:start position:0%
code i'll post a copy in the comment
 

01:21:31.360 --> 01:21:33.830 align:start position:0%
code i'll post a copy in the comment
section<01:21:31.760><c> down</c><01:21:31.920><c> below</c><01:21:32.719><c> so</c><01:21:32.960><c> this</c><01:21:33.120><c> calculator</c>

01:21:33.830 --> 01:21:33.840 align:start position:0%
section down below so this calculator
 

01:21:33.840 --> 01:21:36.390 align:start position:0%
section down below so this calculator
can<01:21:34.239><c> add</c><01:21:34.639><c> subtract</c><01:21:35.199><c> multiply</c><01:21:35.760><c> and</c><01:21:35.920><c> divide</c>

01:21:36.390 --> 01:21:36.400 align:start position:0%
can add subtract multiply and divide
 

01:21:36.400 --> 01:21:38.950 align:start position:0%
can add subtract multiply and divide
there<01:21:36.639><c> are</c><01:21:36.800><c> four</c><01:21:37.199><c> cases</c><01:21:38.000><c> but</c><01:21:38.239><c> you</c><01:21:38.320><c> can</c><01:21:38.560><c> expand</c>

01:21:38.950 --> 01:21:38.960 align:start position:0%
there are four cases but you can expand
 

01:21:38.960 --> 01:21:41.189 align:start position:0%
there are four cases but you can expand
upon<01:21:39.280><c> this</c><01:21:39.520><c> if</c><01:21:39.679><c> you'd</c><01:21:39.920><c> like</c><01:21:40.639><c> so</c><01:21:40.960><c> yeah</c>

01:21:41.189 --> 01:21:41.199 align:start position:0%
upon this if you'd like so yeah
 

01:21:41.199 --> 01:21:43.590 align:start position:0%
upon this if you'd like so yeah
everybody<01:21:41.679><c> that</c><01:21:42.000><c> was</c><01:21:42.400><c> a</c><01:21:42.719><c> very</c><01:21:43.199><c> simple</c>

01:21:43.590 --> 01:21:43.600 align:start position:0%
everybody that was a very simple
 

01:21:43.600 --> 01:21:48.870 align:start position:0%
everybody that was a very simple
calculator<01:21:44.239><c> program</c><01:21:44.880><c> in</c><01:21:45.199><c> c</c>

01:21:48.870 --> 01:21:48.880 align:start position:0%
 
 

01:21:48.880 --> 01:21:51.430 align:start position:0%
 
hey<01:21:49.120><c> yeah</c><01:21:49.440><c> what's</c><01:21:49.679><c> going</c><01:21:49.920><c> on</c><01:21:50.159><c> people</c><01:21:50.880><c> logical</c>

01:21:51.430 --> 01:21:51.440 align:start position:0%
hey yeah what's going on people logical
 

01:21:51.440 --> 01:21:53.910 align:start position:0%
hey yeah what's going on people logical
operators<01:21:52.400><c> there</c><01:21:52.719><c> are</c><01:21:53.120><c> three</c><01:21:53.440><c> logical</c>

01:21:53.910 --> 01:21:53.920 align:start position:0%
operators there are three logical
 

01:21:53.920 --> 01:21:56.310 align:start position:0%
operators there are three logical
operators<01:21:54.480><c> we</c><01:21:54.639><c> will</c><01:21:54.800><c> discuss</c><01:21:55.360><c> in</c><01:21:55.440><c> the</c><01:21:55.600><c> series</c>

01:21:56.310 --> 01:21:56.320 align:start position:0%
operators we will discuss in the series
 

01:21:56.320 --> 01:21:57.990 align:start position:0%
operators we will discuss in the series
and<01:21:57.120><c> or</c>

01:21:57.990 --> 01:21:58.000 align:start position:0%
and or
 

01:21:58.000 --> 01:22:00.470 align:start position:0%
and or
and<01:21:58.400><c> not</c><01:21:59.040><c> but</c><01:21:59.280><c> in</c><01:21:59.360><c> this</c><01:21:59.600><c> video</c><01:21:59.920><c> we're</c><01:22:00.159><c> going</c><01:22:00.320><c> to</c>

01:22:00.470 --> 01:22:00.480 align:start position:0%
and not but in this video we're going to
 

01:22:00.480 --> 01:22:03.669 align:start position:0%
and not but in this video we're going to
focus<01:22:00.960><c> on</c><01:22:01.360><c> and</c><01:22:01.679><c> first</c><01:22:02.400><c> the</c><01:22:02.800><c> and</c><01:22:03.120><c> logical</c>

01:22:03.669 --> 01:22:03.679 align:start position:0%
focus on and first the and logical
 

01:22:03.679 --> 01:22:06.070 align:start position:0%
focus on and first the and logical
operator<01:22:04.239><c> which</c><01:22:04.480><c> is</c><01:22:04.719><c> represented</c><01:22:05.440><c> by</c><01:22:05.760><c> two</c>

01:22:06.070 --> 01:22:06.080 align:start position:0%
operator which is represented by two
 

01:22:06.080 --> 01:22:09.270 align:start position:0%
operator which is represented by two
ampersands<01:22:07.280><c> checks</c><01:22:07.600><c> to</c><01:22:07.760><c> see</c><01:22:08.080><c> if</c><01:22:08.480><c> two</c><01:22:08.880><c> or</c><01:22:09.040><c> more</c>

01:22:09.270 --> 01:22:09.280 align:start position:0%
ampersands checks to see if two or more
 

01:22:09.280 --> 01:22:11.430 align:start position:0%
ampersands checks to see if two or more
conditions<01:22:10.000><c> are</c><01:22:10.239><c> true</c><01:22:10.639><c> here's</c><01:22:10.880><c> an</c><01:22:11.040><c> example</c>

01:22:11.430 --> 01:22:11.440 align:start position:0%
conditions are true here's an example
 

01:22:11.440 --> 01:22:12.870 align:start position:0%
conditions are true here's an example
we're<01:22:11.600><c> going</c><01:22:11.760><c> to</c><01:22:11.920><c> create</c><01:22:12.080><c> a</c><01:22:12.239><c> program</c><01:22:12.719><c> that</c>

01:22:12.870 --> 01:22:12.880 align:start position:0%
we're going to create a program that
 

01:22:12.880 --> 01:22:15.030 align:start position:0%
we're going to create a program that
will<01:22:13.040><c> check</c><01:22:13.280><c> to</c><01:22:13.440><c> see</c><01:22:13.679><c> if</c><01:22:14.000><c> a</c><01:22:14.159><c> given</c><01:22:14.480><c> temperature</c>

01:22:15.030 --> 01:22:15.040 align:start position:0%
will check to see if a given temperature
 

01:22:15.040 --> 01:22:17.350 align:start position:0%
will check to see if a given temperature
falls<01:22:15.280><c> within</c><01:22:15.679><c> a</c><01:22:15.760><c> range</c><01:22:16.560><c> so</c><01:22:16.719><c> let's</c><01:22:16.960><c> say</c><01:22:17.199><c> we</c>

01:22:17.350 --> 01:22:17.360 align:start position:0%
falls within a range so let's say we
 

01:22:17.360 --> 01:22:19.910 align:start position:0%
falls within a range so let's say we
have<01:22:17.679><c> a</c><01:22:17.920><c> floating</c><01:22:18.320><c> point</c><01:22:18.560><c> number</c><01:22:19.040><c> named</c><01:22:19.520><c> temp</c>

01:22:19.910 --> 01:22:19.920 align:start position:0%
have a floating point number named temp
 

01:22:19.920 --> 01:22:21.830 align:start position:0%
have a floating point number named temp
temp<01:22:20.239><c> short</c><01:22:20.480><c> for</c><01:22:20.639><c> temperature</c><01:22:21.280><c> and</c><01:22:21.440><c> this</c><01:22:21.600><c> will</c>

01:22:21.830 --> 01:22:21.840 align:start position:0%
temp short for temperature and this will
 

01:22:21.840 --> 01:22:24.149 align:start position:0%
temp short for temperature and this will
equal<01:22:22.239><c> some</c><01:22:22.480><c> number</c><01:22:22.960><c> in</c><01:22:23.199><c> celsius</c><01:22:23.760><c> let's</c><01:22:23.920><c> say</c>

01:22:24.149 --> 01:22:24.159 align:start position:0%
equal some number in celsius let's say
 

01:22:24.159 --> 01:22:26.390 align:start position:0%
equal some number in celsius let's say
25<01:22:24.639><c> to</c><01:22:24.719><c> begin</c><01:22:24.960><c> with</c><01:22:25.600><c> so</c><01:22:25.840><c> using</c><01:22:26.080><c> an</c><01:22:26.239><c> if</c>

01:22:26.390 --> 01:22:26.400 align:start position:0%
25 to begin with so using an if
 

01:22:26.400 --> 01:22:29.270 align:start position:0%
25 to begin with so using an if
statement<01:22:27.040><c> let's</c><01:22:27.280><c> check</c><01:22:27.520><c> to</c><01:22:27.679><c> see</c><01:22:28.000><c> if</c><01:22:28.400><c> temp</c>

01:22:29.270 --> 01:22:29.280 align:start position:0%
statement let's check to see if temp
 

01:22:29.280 --> 01:22:32.629 align:start position:0%
statement let's check to see if temp
is<01:22:29.600><c> greater</c><01:22:29.920><c> than</c><01:22:30.239><c> or</c><01:22:30.480><c> equal</c><01:22:31.040><c> to</c><01:22:31.440><c> zero</c>

01:22:32.629 --> 01:22:32.639 align:start position:0%
is greater than or equal to zero
 

01:22:32.639 --> 01:22:34.390 align:start position:0%
is greater than or equal to zero
if<01:22:32.880><c> that</c><01:22:33.120><c> is</c><01:22:33.280><c> true</c><01:22:33.679><c> then</c><01:22:33.840><c> we</c><01:22:34.000><c> will</c><01:22:34.159><c> print</c>

01:22:34.390 --> 01:22:34.400 align:start position:0%
if that is true then we will print
 

01:22:34.400 --> 01:22:36.870 align:start position:0%
if that is true then we will print
something

01:22:36.870 --> 01:22:36.880 align:start position:0%
something
 

01:22:36.880 --> 01:22:39.590 align:start position:0%
something
the<01:22:37.120><c> weather</c><01:22:37.600><c> is</c><01:22:37.760><c> good</c>

01:22:39.590 --> 01:22:39.600 align:start position:0%
the weather is good
 

01:22:39.600 --> 01:22:41.590 align:start position:0%
the weather is good
else

01:22:41.590 --> 01:22:41.600 align:start position:0%
else
 

01:22:41.600 --> 01:22:43.510 align:start position:0%
else
the<01:22:41.840><c> weather</c><01:22:42.400><c> is</c>

01:22:43.510 --> 01:22:43.520 align:start position:0%
the weather is
 

01:22:43.520 --> 01:22:47.430 align:start position:0%
the weather is
bad<01:22:44.400><c> okay</c><01:22:44.800><c> so</c><01:22:45.360><c> temp</c><01:22:45.760><c> is</c><01:22:46.000><c> 25</c><01:22:46.800><c> therefore</c><01:22:47.280><c> the</c>

01:22:47.430 --> 01:22:47.440 align:start position:0%
bad okay so temp is 25 therefore the
 

01:22:47.440 --> 01:22:49.430 align:start position:0%
bad okay so temp is 25 therefore the
weather<01:22:47.840><c> is</c><01:22:48.000><c> good</c>

01:22:49.430 --> 01:22:49.440 align:start position:0%
weather is good
 

01:22:49.440 --> 01:22:50.950 align:start position:0%
weather is good
okay<01:22:49.679><c> what</c><01:22:49.920><c> if</c><01:22:50.080><c> our</c><01:22:50.239><c> temperature</c><01:22:50.800><c> is</c>

01:22:50.950 --> 01:22:50.960 align:start position:0%
okay what if our temperature is
 

01:22:50.960 --> 01:22:53.510 align:start position:0%
okay what if our temperature is
something<01:22:51.360><c> extreme</c><01:22:52.000><c> like</c><01:22:52.480><c> 1000</c><01:22:53.199><c> degrees</c>

01:22:53.510 --> 01:22:53.520 align:start position:0%
something extreme like 1000 degrees
 

01:22:53.520 --> 01:22:56.310 align:start position:0%
something extreme like 1000 degrees
celsius<01:22:54.560><c> so</c><01:22:54.880><c> technically</c><01:22:55.600><c> this</c><01:22:55.840><c> condition</c>

01:22:56.310 --> 01:22:56.320 align:start position:0%
celsius so technically this condition
 

01:22:56.320 --> 01:22:58.629 align:start position:0%
celsius so technically this condition
would<01:22:56.560><c> still</c><01:22:56.800><c> be</c><01:22:57.040><c> true</c><01:22:57.600><c> the</c><01:22:57.760><c> weather</c><01:22:58.320><c> is</c>

01:22:58.629 --> 01:22:58.639 align:start position:0%
would still be true the weather is
 

01:22:58.639 --> 01:23:00.149 align:start position:0%
would still be true the weather is
actually<01:22:59.040><c> not</c><01:22:59.280><c> good</c><01:22:59.600><c> it's</c><01:22:59.760><c> fairly</c>

01:23:00.149 --> 01:23:00.159 align:start position:0%
actually not good it's fairly
 

01:23:00.159 --> 01:23:02.629 align:start position:0%
actually not good it's fairly
catastrophic<01:23:01.280><c> so</c><01:23:01.520><c> let's</c><01:23:01.760><c> check</c><01:23:01.920><c> to</c><01:23:02.080><c> see</c><01:23:02.400><c> if</c>

01:23:02.629 --> 01:23:02.639 align:start position:0%
catastrophic so let's check to see if
 

01:23:02.639 --> 01:23:05.189 align:start position:0%
catastrophic so let's check to see if
another<01:23:03.040><c> condition</c><01:23:03.679><c> is</c><01:23:03.840><c> also</c><01:23:04.159><c> true</c><01:23:04.719><c> by</c><01:23:04.880><c> using</c>

01:23:05.189 --> 01:23:05.199 align:start position:0%
another condition is also true by using
 

01:23:05.199 --> 01:23:07.910 align:start position:0%
another condition is also true by using
the<01:23:05.520><c> and</c><01:23:05.840><c> logical</c><01:23:06.320><c> operator</c><01:23:07.360><c> we're</c><01:23:07.600><c> checking</c>

01:23:07.910 --> 01:23:07.920 align:start position:0%
the and logical operator we're checking
 

01:23:07.920 --> 01:23:10.470 align:start position:0%
the and logical operator we're checking
to<01:23:08.080><c> see</c><01:23:08.400><c> if</c><01:23:08.639><c> temp</c><01:23:09.040><c> is</c><01:23:09.280><c> greater</c><01:23:09.600><c> than</c><01:23:09.920><c> or</c><01:23:10.159><c> equal</c>

01:23:10.470 --> 01:23:10.480 align:start position:0%
to see if temp is greater than or equal
 

01:23:10.480 --> 01:23:13.669 align:start position:0%
to see if temp is greater than or equal
to<01:23:10.719><c> 0</c><01:23:11.440><c> and</c><01:23:11.840><c> some</c><01:23:12.080><c> other</c><01:23:12.239><c> condition</c><01:23:12.880><c> such</c><01:23:13.199><c> as</c>

01:23:13.669 --> 01:23:13.679 align:start position:0%
to 0 and some other condition such as
 

01:23:13.679 --> 01:23:14.629 align:start position:0%
to 0 and some other condition such as
temp

01:23:14.629 --> 01:23:14.639 align:start position:0%
temp
 

01:23:14.639 --> 01:23:17.990 align:start position:0%
temp
is<01:23:14.960><c> less</c><01:23:15.199><c> than</c><01:23:15.520><c> or</c><01:23:15.840><c> equal</c><01:23:16.320><c> to</c><01:23:16.639><c> 30.</c>

01:23:17.990 --> 01:23:18.000 align:start position:0%
is less than or equal to 30.
 

01:23:18.000 --> 01:23:21.590 align:start position:0%
is less than or equal to 30.
so<01:23:18.239><c> if</c><01:23:18.480><c> temp</c><01:23:18.960><c> is</c><01:23:19.199><c> at</c><01:23:19.520><c> 1000</c>

01:23:21.590 --> 01:23:21.600 align:start position:0%
so if temp is at 1000
 

01:23:21.600 --> 01:23:24.470 align:start position:0%
so if temp is at 1000
then<01:23:21.920><c> the</c><01:23:22.080><c> weather</c><01:23:22.480><c> is</c><01:23:22.639><c> bad</c><01:23:23.440><c> this</c><01:23:23.679><c> condition</c>

01:23:24.470 --> 01:23:24.480 align:start position:0%
then the weather is bad this condition
 

01:23:24.480 --> 01:23:27.510 align:start position:0%
then the weather is bad this condition
is<01:23:24.719><c> true</c><01:23:25.440><c> but</c><01:23:25.760><c> this</c><01:23:25.920><c> one</c><01:23:26.159><c> is</c><01:23:26.320><c> false</c><01:23:26.960><c> using</c><01:23:27.280><c> the</c>

01:23:27.510 --> 01:23:27.520 align:start position:0%
is true but this one is false using the
 

01:23:27.520 --> 01:23:30.229 align:start position:0%
is true but this one is false using the
and<01:23:27.840><c> logical</c><01:23:28.320><c> operator</c><01:23:29.199><c> both</c><01:23:29.520><c> conditions</c>

01:23:30.229 --> 01:23:30.239 align:start position:0%
and logical operator both conditions
 

01:23:30.239 --> 01:23:32.390 align:start position:0%
and logical operator both conditions
must<01:23:30.480><c> be</c><01:23:30.639><c> true</c><01:23:31.040><c> in</c><01:23:31.120><c> order</c><01:23:31.440><c> to</c><01:23:31.679><c> execute</c><01:23:32.159><c> this</c>

01:23:32.390 --> 01:23:32.400 align:start position:0%
must be true in order to execute this
 

01:23:32.400 --> 01:23:35.750 align:start position:0%
must be true in order to execute this
statement<01:23:33.360><c> now</c><01:23:33.600><c> if</c><01:23:33.760><c> our</c><01:23:34.000><c> temperature</c><01:23:34.560><c> was</c><01:23:35.199><c> 25</c>

01:23:35.750 --> 01:23:35.760 align:start position:0%
statement now if our temperature was 25
 

01:23:35.760 --> 01:23:38.470 align:start position:0%
statement now if our temperature was 25
degrees<01:23:36.639><c> well</c><01:23:36.880><c> then</c><01:23:37.280><c> both</c><01:23:37.600><c> conditions</c><01:23:38.239><c> are</c>

01:23:38.470 --> 01:23:38.480 align:start position:0%
degrees well then both conditions are
 

01:23:38.480 --> 01:23:41.270 align:start position:0%
degrees well then both conditions are
true<01:23:39.120><c> and</c><01:23:39.360><c> we</c><01:23:39.520><c> will</c><01:23:39.760><c> execute</c><01:23:40.320><c> this</c><01:23:40.560><c> statement</c>

01:23:41.270 --> 01:23:41.280 align:start position:0%
true and we will execute this statement
 

01:23:41.280 --> 01:23:42.950 align:start position:0%
true and we will execute this statement
the<01:23:41.440><c> weather</c><01:23:41.760><c> is</c><01:23:42.000><c> good</c>

01:23:42.950 --> 01:23:42.960 align:start position:0%
the weather is good
 

01:23:42.960 --> 01:23:44.790 align:start position:0%
the weather is good
now<01:23:43.199><c> you</c><01:23:43.280><c> can</c><01:23:43.520><c> add</c><01:23:43.679><c> more</c><01:23:43.840><c> than</c><01:23:44.000><c> one</c><01:23:44.239><c> condition</c>

01:23:44.790 --> 01:23:44.800 align:start position:0%
now you can add more than one condition
 

01:23:44.800 --> 01:23:46.950 align:start position:0%
now you can add more than one condition
let's<01:23:45.040><c> throw</c><01:23:45.360><c> in</c><01:23:45.520><c> another</c><01:23:45.920><c> variable</c><01:23:46.800><c> let's</c>

01:23:46.950 --> 01:23:46.960 align:start position:0%
let's throw in another variable let's
 

01:23:46.960 --> 01:23:48.790 align:start position:0%
let's throw in another variable let's
say<01:23:47.120><c> that</c><01:23:47.280><c> we</c><01:23:47.440><c> have</c><01:23:47.600><c> a</c><01:23:47.840><c> boolean</c><01:23:48.320><c> variable</c>

01:23:48.790 --> 01:23:48.800 align:start position:0%
say that we have a boolean variable
 

01:23:48.800 --> 01:23:51.189 align:start position:0%
say that we have a boolean variable
named<01:23:49.199><c> sunny</c><01:23:50.080><c> let's</c><01:23:50.239><c> say</c><01:23:50.480><c> that</c><01:23:50.560><c> it's</c><01:23:50.800><c> cloudy</c>

01:23:51.189 --> 01:23:51.199 align:start position:0%
named sunny let's say that it's cloudy
 

01:23:51.199 --> 01:23:53.189 align:start position:0%
named sunny let's say that it's cloudy
outside<01:23:52.000><c> now</c><01:23:52.239><c> if</c><01:23:52.400><c> we're</c><01:23:52.560><c> working</c><01:23:52.960><c> with</c>

01:23:53.189 --> 01:23:53.199 align:start position:0%
outside now if we're working with
 

01:23:53.199 --> 01:23:55.350 align:start position:0%
outside now if we're working with
booleans<01:23:53.840><c> include</c><01:23:54.320><c> this</c><01:23:54.480><c> header</c><01:23:54.800><c> file</c><01:23:55.120><c> at</c><01:23:55.199><c> the</c>

01:23:55.350 --> 01:23:55.360 align:start position:0%
booleans include this header file at the
 

01:23:55.360 --> 01:23:57.590 align:start position:0%
booleans include this header file at the
top<01:23:56.080><c> stdbool.h</c>

01:23:57.590 --> 01:23:57.600 align:start position:0%
top stdbool.h
 

01:23:57.600 --> 01:24:00.070 align:start position:0%
top stdbool.h
then<01:23:57.920><c> let's</c><01:23:58.159><c> add</c><01:23:58.480><c> another</c><01:23:58.800><c> condition</c>

01:24:00.070 --> 01:24:00.080 align:start position:0%
then let's add another condition
 

01:24:00.080 --> 01:24:02.950 align:start position:0%
then let's add another condition
and<01:24:00.639><c> let's</c><01:24:00.880><c> check</c><01:24:01.040><c> to</c><01:24:01.199><c> see</c><01:24:01.440><c> if</c><01:24:01.920><c> sunny</c>

01:24:02.950 --> 01:24:02.960 align:start position:0%
and let's check to see if sunny
 

01:24:02.960 --> 01:24:05.990 align:start position:0%
and let's check to see if sunny
is<01:24:03.199><c> equal</c><01:24:03.679><c> to</c><01:24:04.080><c> true</c><01:24:04.800><c> if</c><01:24:04.960><c> you're</c><01:24:05.199><c> checking</c><01:24:05.760><c> the</c>

01:24:05.990 --> 01:24:06.000 align:start position:0%
is equal to true if you're checking the
 

01:24:06.000 --> 01:24:08.550 align:start position:0%
is equal to true if you're checking the
value<01:24:06.560><c> of</c><01:24:06.719><c> a</c><01:24:06.960><c> boolean</c><01:24:07.440><c> variable</c><01:24:08.159><c> you</c><01:24:08.320><c> don't</c>

01:24:08.550 --> 01:24:08.560 align:start position:0%
value of a boolean variable you don't
 

01:24:08.560 --> 01:24:11.189 align:start position:0%
value of a boolean variable you don't
necessarily<01:24:09.199><c> have</c><01:24:09.440><c> to</c><01:24:09.600><c> type</c><01:24:09.920><c> out</c><01:24:10.320><c> equals</c><01:24:10.800><c> true</c>

01:24:11.189 --> 01:24:11.199 align:start position:0%
necessarily have to type out equals true
 

01:24:11.199 --> 01:24:12.390 align:start position:0%
necessarily have to type out equals true
you<01:24:11.360><c> can</c><01:24:11.600><c> say</c>

01:24:12.390 --> 01:24:12.400 align:start position:0%
you can say
 

01:24:12.400 --> 01:24:14.709 align:start position:0%
you can say
sunny<01:24:12.880><c> is</c><01:24:13.040><c> equal</c><01:24:13.280><c> to</c><01:24:13.520><c> one</c><01:24:14.080><c> or</c><01:24:14.239><c> you</c><01:24:14.400><c> can</c><01:24:14.560><c> just</c>

01:24:14.709 --> 01:24:14.719 align:start position:0%
sunny is equal to one or you can just
 

01:24:14.719 --> 01:24:17.270 align:start position:0%
sunny is equal to one or you can just
say<01:24:14.960><c> sunny</c><01:24:15.600><c> because</c><01:24:16.159><c> this</c><01:24:16.400><c> would</c><01:24:16.639><c> contain</c>

01:24:17.270 --> 01:24:17.280 align:start position:0%
say sunny because this would contain
 

01:24:17.280 --> 01:24:19.669 align:start position:0%
say sunny because this would contain
true<01:24:17.600><c> or</c><01:24:17.840><c> false</c><01:24:18.639><c> so</c><01:24:18.880><c> this</c><01:24:19.120><c> time</c><01:24:19.360><c> we</c><01:24:19.520><c> are</c>

01:24:19.669 --> 01:24:19.679 align:start position:0%
true or false so this time we are
 

01:24:19.679 --> 01:24:22.149 align:start position:0%
true or false so this time we are
checking<01:24:20.000><c> to</c><01:24:20.159><c> see</c><01:24:20.400><c> if</c><01:24:20.719><c> temp</c><01:24:21.280><c> is</c><01:24:21.600><c> greater</c><01:24:21.920><c> than</c>

01:24:22.149 --> 01:24:22.159 align:start position:0%
checking to see if temp is greater than
 

01:24:22.159 --> 01:24:23.830 align:start position:0%
checking to see if temp is greater than
or<01:24:22.400><c> equal</c><01:24:22.639><c> to</c><01:24:22.800><c> zero</c>

01:24:23.830 --> 01:24:23.840 align:start position:0%
or equal to zero
 

01:24:23.840 --> 01:24:27.750 align:start position:0%
or equal to zero
and<01:24:24.480><c> temp</c><01:24:24.960><c> is</c><01:24:25.199><c> less</c><01:24:25.440><c> than</c><01:24:25.760><c> or</c><01:24:26.000><c> equal</c><01:24:26.320><c> to</c><01:24:26.480><c> 30</c><01:24:27.360><c> and</c>

01:24:27.750 --> 01:24:27.760 align:start position:0%
and temp is less than or equal to 30 and
 

01:24:27.760 --> 01:24:30.870 align:start position:0%
and temp is less than or equal to 30 and
sunny<01:24:28.239><c> is</c><01:24:28.480><c> true</c><01:24:29.199><c> the</c><01:24:29.360><c> temp</c><01:24:29.600><c> is</c><01:24:29.679><c> 25</c><01:24:30.320><c> but</c><01:24:30.560><c> sunny</c>

01:24:30.870 --> 01:24:30.880 align:start position:0%
sunny is true the temp is 25 but sunny
 

01:24:30.880 --> 01:24:33.590 align:start position:0%
sunny is true the temp is 25 but sunny
equals<01:24:31.199><c> false</c><01:24:31.920><c> therefore</c><01:24:32.480><c> we</c><01:24:32.639><c> do</c><01:24:32.800><c> not</c><01:24:33.120><c> execute</c>

01:24:33.590 --> 01:24:33.600 align:start position:0%
equals false therefore we do not execute
 

01:24:33.600 --> 01:24:34.790 align:start position:0%
equals false therefore we do not execute
this<01:24:33.840><c> statement</c>

01:24:34.790 --> 01:24:34.800 align:start position:0%
this statement
 

01:24:34.800 --> 01:24:37.350 align:start position:0%
this statement
these<01:24:35.040><c> first</c><01:24:35.360><c> two</c><01:24:35.520><c> conditions</c><01:24:36.320><c> are</c><01:24:36.560><c> true</c><01:24:37.199><c> but</c>

01:24:37.350 --> 01:24:37.360 align:start position:0%
these first two conditions are true but
 

01:24:37.360 --> 01:24:39.590 align:start position:0%
these first two conditions are true but
this<01:24:37.520><c> one</c><01:24:37.760><c> is</c><01:24:37.920><c> false</c><01:24:38.560><c> and</c><01:24:38.800><c> using</c><01:24:39.040><c> the</c><01:24:39.360><c> and</c>

01:24:39.590 --> 01:24:39.600 align:start position:0%
this one is false and using the and
 

01:24:39.600 --> 01:24:42.629 align:start position:0%
this one is false and using the and
logical<01:24:40.159><c> operator</c><01:24:40.960><c> all</c><01:24:41.440><c> conditions</c><01:24:42.159><c> must</c><01:24:42.400><c> be</c>

01:24:42.629 --> 01:24:42.639 align:start position:0%
logical operator all conditions must be
 

01:24:42.639 --> 01:24:43.590 align:start position:0%
logical operator all conditions must be
true

01:24:43.590 --> 01:24:43.600 align:start position:0%
true
 

01:24:43.600 --> 01:24:45.990 align:start position:0%
true
now<01:24:43.840><c> if</c><01:24:44.000><c> i</c><01:24:44.159><c> set</c><01:24:44.400><c> this</c><01:24:44.639><c> to</c><01:24:44.800><c> be</c><01:24:45.040><c> true</c>

01:24:45.990 --> 01:24:46.000 align:start position:0%
now if i set this to be true
 

01:24:46.000 --> 01:24:48.629 align:start position:0%
now if i set this to be true
well<01:24:46.239><c> then</c><01:24:46.800><c> all</c><01:24:47.360><c> three</c><01:24:47.679><c> of</c><01:24:47.760><c> these</c><01:24:48.000><c> conditions</c>

01:24:48.629 --> 01:24:48.639 align:start position:0%
well then all three of these conditions
 

01:24:48.639 --> 01:24:50.790 align:start position:0%
well then all three of these conditions
are<01:24:48.800><c> true</c><01:24:49.440><c> and</c><01:24:49.600><c> we</c><01:24:49.760><c> will</c><01:24:50.000><c> execute</c><01:24:50.560><c> this</c>

01:24:50.790 --> 01:24:50.800 align:start position:0%
are true and we will execute this
 

01:24:50.800 --> 01:24:53.350 align:start position:0%
are true and we will execute this
statement<01:24:51.600><c> the</c><01:24:51.679><c> weather</c><01:24:52.080><c> is</c><01:24:52.239><c> good</c><01:24:52.880><c> so</c><01:24:53.120><c> yeah</c>

01:24:53.350 --> 01:24:53.360 align:start position:0%
statement the weather is good so yeah
 

01:24:53.360 --> 01:24:56.149 align:start position:0%
statement the weather is good so yeah
that<01:24:53.600><c> is</c><01:24:53.760><c> the</c><01:24:54.080><c> and</c><01:24:54.400><c> logical</c><01:24:54.880><c> operator</c><01:24:55.760><c> it</c><01:24:56.000><c> is</c>

01:24:56.149 --> 01:24:56.159 align:start position:0%
that is the and logical operator it is
 

01:24:56.159 --> 01:24:58.870 align:start position:0%
that is the and logical operator it is
represented<01:24:56.880><c> by</c><01:24:57.120><c> two</c><01:24:57.360><c> ampersands</c><01:24:58.400><c> it</c><01:24:58.560><c> checks</c>

01:24:58.870 --> 01:24:58.880 align:start position:0%
represented by two ampersands it checks
 

01:24:58.880 --> 01:25:01.430 align:start position:0%
represented by two ampersands it checks
to<01:24:59.040><c> see</c><01:24:59.280><c> if</c><01:24:59.679><c> two</c><01:25:00.000><c> or</c><01:25:00.239><c> more</c><01:25:00.480><c> conditions</c><01:25:01.199><c> are</c>

01:25:01.430 --> 01:25:01.440 align:start position:0%
to see if two or more conditions are
 

01:25:01.440 --> 01:25:04.070 align:start position:0%
to see if two or more conditions are
true<01:25:02.159><c> and</c><01:25:02.400><c> one</c><01:25:02.639><c> example</c><01:25:03.040><c> we</c><01:25:03.199><c> used</c><01:25:03.600><c> is</c><01:25:03.679><c> to</c><01:25:03.920><c> check</c>

01:25:04.070 --> 01:25:04.080 align:start position:0%
true and one example we used is to check
 

01:25:04.080 --> 01:25:06.149 align:start position:0%
true and one example we used is to check
to<01:25:04.239><c> see</c><01:25:04.480><c> if</c><01:25:04.800><c> our</c><01:25:04.960><c> temperature</c><01:25:05.520><c> falls</c><01:25:05.760><c> within</c><01:25:06.080><c> a</c>

01:25:06.149 --> 01:25:06.159 align:start position:0%
to see if our temperature falls within a
 

01:25:06.159 --> 01:25:08.790 align:start position:0%
to see if our temperature falls within a
certain<01:25:06.480><c> range</c><01:25:07.199><c> so</c><01:25:07.440><c> yeah</c><01:25:07.679><c> that</c><01:25:07.920><c> is</c><01:25:08.159><c> the</c><01:25:08.480><c> and</c>

01:25:08.790 --> 01:25:08.800 align:start position:0%
certain range so yeah that is the and
 

01:25:08.800 --> 01:25:10.790 align:start position:0%
certain range so yeah that is the and
logical<01:25:09.280><c> operator</c><01:25:09.840><c> in</c><01:25:10.000><c> the</c><01:25:10.080><c> next</c><01:25:10.320><c> video</c><01:25:10.639><c> we</c>

01:25:10.790 --> 01:25:10.800 align:start position:0%
logical operator in the next video we
 

01:25:10.800 --> 01:25:13.910 align:start position:0%
logical operator in the next video we
will<01:25:10.960><c> discuss</c><01:25:11.520><c> the</c><01:25:11.840><c> or</c><01:25:12.239><c> logical</c><01:25:12.719><c> operator</c><01:25:13.679><c> so</c>

01:25:13.910 --> 01:25:13.920 align:start position:0%
will discuss the or logical operator so
 

01:25:13.920 --> 01:25:15.430 align:start position:0%
will discuss the or logical operator so
if<01:25:14.159><c> this</c><01:25:14.400><c> video</c><01:25:14.639><c> helped</c><01:25:14.880><c> you</c><01:25:15.040><c> out</c><01:25:15.199><c> you</c><01:25:15.280><c> can</c>

01:25:15.430 --> 01:25:15.440 align:start position:0%
if this video helped you out you can
 

01:25:15.440 --> 01:25:17.350 align:start position:0%
if this video helped you out you can
help<01:25:15.679><c> me</c><01:25:15.840><c> out</c><01:25:16.000><c> by</c><01:25:16.320><c> smashing</c><01:25:16.639><c> that</c><01:25:16.800><c> like</c><01:25:16.960><c> button</c>

01:25:17.350 --> 01:25:17.360 align:start position:0%
help me out by smashing that like button
 

01:25:17.360 --> 01:25:18.950 align:start position:0%
help me out by smashing that like button
leave<01:25:17.520><c> a</c><01:25:17.520><c> random</c><01:25:17.840><c> comment</c><01:25:18.159><c> down</c><01:25:18.320><c> below</c><01:25:18.719><c> and</c>

01:25:18.950 --> 01:25:18.960 align:start position:0%
leave a random comment down below and
 

01:25:18.960 --> 01:25:20.310 align:start position:0%
leave a random comment down below and
subscribe<01:25:19.440><c> if</c><01:25:19.600><c> you'd</c><01:25:19.679><c> like</c><01:25:19.840><c> to</c><01:25:20.000><c> become</c><01:25:20.239><c> a</c>

01:25:20.310 --> 01:25:20.320 align:start position:0%
subscribe if you'd like to become a
 

01:25:20.320 --> 01:25:24.149 align:start position:0%
subscribe if you'd like to become a
fellow<01:25:20.639><c> bro</c>

01:25:24.149 --> 01:25:24.159 align:start position:0%
 
 

01:25:24.159 --> 01:25:26.950 align:start position:0%
 
hey<01:25:24.639><c> again</c><01:25:25.199><c> it's</c><01:25:25.440><c> me</c><01:25:25.920><c> so</c><01:25:26.320><c> we're</c><01:25:26.560><c> gonna</c><01:25:26.719><c> talk</c>

01:25:26.950 --> 01:25:26.960 align:start position:0%
hey again it's me so we're gonna talk
 

01:25:26.960 --> 01:25:30.149 align:start position:0%
hey again it's me so we're gonna talk
about<01:25:27.440><c> the</c><01:25:27.840><c> or</c><01:25:28.239><c> logical</c><01:25:28.800><c> operator</c><01:25:29.600><c> the</c><01:25:29.920><c> or</c>

01:25:30.149 --> 01:25:30.159 align:start position:0%
about the or logical operator the or
 

01:25:30.159 --> 01:25:32.709 align:start position:0%
about the or logical operator the or
logical<01:25:30.639><c> operator</c><01:25:31.280><c> which</c><01:25:31.520><c> is</c><01:25:31.679><c> represented</c><01:25:32.400><c> by</c>

01:25:32.709 --> 01:25:32.719 align:start position:0%
logical operator which is represented by
 

01:25:32.719 --> 01:25:35.669 align:start position:0%
logical operator which is represented by
two<01:25:32.960><c> vertical</c><01:25:33.440><c> bars</c><01:25:34.000><c> checks</c><01:25:34.480><c> if</c><01:25:34.719><c> at</c><01:25:34.960><c> least</c><01:25:35.440><c> one</c>

01:25:35.669 --> 01:25:35.679 align:start position:0%
two vertical bars checks if at least one
 

01:25:35.679 --> 01:25:38.149 align:start position:0%
two vertical bars checks if at least one
condition<01:25:36.400><c> is</c><01:25:36.719><c> true</c><01:25:37.120><c> let's</c><01:25:37.360><c> take</c><01:25:37.679><c> the</c><01:25:37.840><c> small</c>

01:25:38.149 --> 01:25:38.159 align:start position:0%
condition is true let's take the small
 

01:25:38.159 --> 01:25:39.990 align:start position:0%
condition is true let's take the small
program<01:25:38.639><c> for</c><01:25:38.800><c> example</c><01:25:39.199><c> it's</c><01:25:39.360><c> kind</c><01:25:39.520><c> of</c><01:25:39.600><c> similar</c>

01:25:39.990 --> 01:25:40.000 align:start position:0%
program for example it's kind of similar
 

01:25:40.000 --> 01:25:42.709 align:start position:0%
program for example it's kind of similar
to<01:25:40.159><c> the</c><01:25:40.400><c> last</c><01:25:40.719><c> video</c><01:25:41.440><c> so</c><01:25:41.600><c> we</c><01:25:41.760><c> have</c><01:25:42.000><c> a</c><01:25:42.159><c> variable</c>

01:25:42.709 --> 01:25:42.719 align:start position:0%
to the last video so we have a variable
 

01:25:42.719 --> 01:25:44.550 align:start position:0%
to the last video so we have a variable
named<01:25:43.040><c> temperature</c><01:25:43.520><c> for</c><01:25:43.679><c> temperature</c><01:25:44.400><c> we</c>

01:25:44.550 --> 01:25:44.560 align:start position:0%
named temperature for temperature we
 

01:25:44.560 --> 01:25:47.430 align:start position:0%
named temperature for temperature we
will<01:25:44.719><c> first</c><01:25:45.199><c> check</c><01:25:45.520><c> if</c><01:25:45.840><c> temp</c><01:25:46.239><c> is</c><01:25:46.560><c> less</c><01:25:46.880><c> than</c><01:25:47.199><c> or</c>

01:25:47.430 --> 01:25:47.440 align:start position:0%
will first check if temp is less than or
 

01:25:47.440 --> 01:25:49.910 align:start position:0%
will first check if temp is less than or
equal<01:25:47.760><c> to</c><01:25:47.920><c> zero</c><01:25:48.639><c> if</c><01:25:48.800><c> that's</c><01:25:49.120><c> true</c><01:25:49.520><c> we</c><01:25:49.760><c> will</c>

01:25:49.910 --> 01:25:49.920 align:start position:0%
equal to zero if that's true we will
 

01:25:49.920 --> 01:25:51.910 align:start position:0%
equal to zero if that's true we will
print<01:25:50.400><c> the</c><01:25:50.560><c> weather</c><01:25:50.880><c> is</c><01:25:51.040><c> bad</c>

01:25:51.910 --> 01:25:51.920 align:start position:0%
print the weather is bad
 

01:25:51.920 --> 01:25:54.470 align:start position:0%
print the weather is bad
else<01:25:52.239><c> if</c><01:25:52.560><c> temp</c><01:25:53.040><c> is</c><01:25:53.280><c> greater</c><01:25:53.600><c> than</c><01:25:53.840><c> or</c><01:25:54.080><c> equal</c><01:25:54.320><c> to</c>

01:25:54.470 --> 01:25:54.480 align:start position:0%
else if temp is greater than or equal to
 

01:25:54.480 --> 01:25:57.510 align:start position:0%
else if temp is greater than or equal to
30<01:25:55.280><c> the</c><01:25:55.440><c> weather</c><01:25:55.760><c> is</c><01:25:55.920><c> bad</c><01:25:56.560><c> else</c><01:25:57.040><c> the</c><01:25:57.199><c> weather</c>

01:25:57.510 --> 01:25:57.520 align:start position:0%
30 the weather is bad else the weather
 

01:25:57.520 --> 01:25:59.590 align:start position:0%
30 the weather is bad else the weather
is<01:25:57.679><c> good</c><01:25:58.159><c> so</c><01:25:58.400><c> you</c><01:25:58.560><c> know</c><01:25:58.719><c> this</c><01:25:58.960><c> program</c><01:25:59.360><c> does</c>

01:25:59.590 --> 01:25:59.600 align:start position:0%
is good so you know this program does
 

01:25:59.600 --> 01:26:02.310 align:start position:0%
is good so you know this program does
work<01:26:00.159><c> the</c><01:26:00.320><c> weather</c><01:26:00.719><c> is</c><01:26:00.800><c> good</c><01:26:01.440><c> but</c><01:26:01.760><c> another</c><01:26:02.159><c> way</c>

01:26:02.310 --> 01:26:02.320 align:start position:0%
work the weather is good but another way
 

01:26:02.320 --> 01:26:04.310 align:start position:0%
work the weather is good but another way
of<01:26:02.400><c> writing</c><01:26:02.719><c> this</c><01:26:02.960><c> is</c><01:26:03.120><c> that</c><01:26:03.360><c> we</c><01:26:03.520><c> can</c><01:26:03.679><c> use</c><01:26:04.080><c> the</c>

01:26:04.310 --> 01:26:04.320 align:start position:0%
of writing this is that we can use the
 

01:26:04.320 --> 01:26:06.550 align:start position:0%
of writing this is that we can use the
or<01:26:04.719><c> logical</c><01:26:05.199><c> operator</c><01:26:05.679><c> and</c><01:26:05.840><c> we</c><01:26:05.920><c> can</c><01:26:06.159><c> check</c><01:26:06.400><c> to</c>

01:26:06.550 --> 01:26:06.560 align:start position:0%
or logical operator and we can check to
 

01:26:06.560 --> 01:26:09.910 align:start position:0%
or logical operator and we can check to
see<01:26:07.199><c> if</c><01:26:07.520><c> at</c><01:26:07.679><c> least</c><01:26:08.159><c> one</c><01:26:08.639><c> of</c><01:26:08.960><c> two</c><01:26:09.440><c> or</c><01:26:09.679><c> more</c>

01:26:09.910 --> 01:26:09.920 align:start position:0%
see if at least one of two or more
 

01:26:09.920 --> 01:26:12.709 align:start position:0%
see if at least one of two or more
conditions<01:26:10.719><c> is</c><01:26:10.880><c> true</c><01:26:11.600><c> so</c><01:26:11.760><c> let's</c><01:26:12.159><c> take</c><01:26:12.480><c> this</c>

01:26:12.709 --> 01:26:12.719 align:start position:0%
conditions is true so let's take this
 

01:26:12.719 --> 01:26:13.750 align:start position:0%
conditions is true so let's take this
condition

01:26:13.750 --> 01:26:13.760 align:start position:0%
condition
 

01:26:13.760 --> 01:26:16.229 align:start position:0%
condition
get<01:26:13.920><c> rid</c><01:26:14.080><c> of</c><01:26:14.159><c> this</c><01:26:14.400><c> else</c><01:26:14.800><c> if</c><01:26:14.960><c> statement</c>

01:26:16.229 --> 01:26:16.239 align:start position:0%
get rid of this else if statement
 

01:26:16.239 --> 01:26:18.709 align:start position:0%
get rid of this else if statement
so<01:26:16.400><c> we</c><01:26:16.560><c> will</c><01:26:16.719><c> check</c><01:26:16.960><c> to</c><01:26:17.120><c> see</c><01:26:17.440><c> if</c><01:26:17.760><c> temp</c><01:26:18.159><c> is</c><01:26:18.400><c> less</c>

01:26:18.709 --> 01:26:18.719 align:start position:0%
so we will check to see if temp is less
 

01:26:18.719 --> 01:26:20.870 align:start position:0%
so we will check to see if temp is less
than<01:26:19.040><c> or</c><01:26:19.280><c> equal</c><01:26:19.600><c> to</c><01:26:19.760><c> zero</c>

01:26:20.870 --> 01:26:20.880 align:start position:0%
than or equal to zero
 

01:26:20.880 --> 01:26:24.709 align:start position:0%
than or equal to zero
or<01:26:21.840><c> temp</c><01:26:22.320><c> is</c><01:26:22.560><c> greater</c><01:26:22.880><c> than</c><01:26:23.199><c> or</c><01:26:23.360><c> equal</c><01:26:23.760><c> to</c><01:26:23.920><c> 30.</c>

01:26:24.709 --> 01:26:24.719 align:start position:0%
or temp is greater than or equal to 30.
 

01:26:24.719 --> 01:26:27.910 align:start position:0%
or temp is greater than or equal to 30.
so<01:26:24.960><c> if</c><01:26:25.120><c> our</c><01:26:25.280><c> temperature</c><01:26:25.920><c> is</c><01:26:26.320><c> negative</c><01:26:27.280><c> 1000</c>

01:26:27.910 --> 01:26:27.920 align:start position:0%
so if our temperature is negative 1000
 

01:26:27.920 --> 01:26:31.189 align:start position:0%
so if our temperature is negative 1000
degrees<01:26:28.239><c> celsius</c><01:26:29.360><c> then</c><01:26:29.679><c> the</c><01:26:29.840><c> weather</c><01:26:30.239><c> is</c><01:26:30.400><c> bad</c>

01:26:31.189 --> 01:26:31.199 align:start position:0%
degrees celsius then the weather is bad
 

01:26:31.199 --> 01:26:33.990 align:start position:0%
degrees celsius then the weather is bad
this<01:26:31.440><c> is</c><01:26:31.679><c> true</c><01:26:32.320><c> but</c><01:26:32.560><c> this</c><01:26:32.800><c> is</c><01:26:32.960><c> false</c><01:26:33.520><c> and</c><01:26:33.760><c> using</c>

01:26:33.990 --> 01:26:34.000 align:start position:0%
this is true but this is false and using
 

01:26:34.000 --> 01:26:35.830 align:start position:0%
this is true but this is false and using
the<01:26:34.239><c> or</c><01:26:34.480><c> logical</c>

01:26:35.830 --> 01:26:35.840 align:start position:0%
the or logical
 

01:26:35.840 --> 01:26:38.149 align:start position:0%
the or logical
only<01:26:36.320><c> one</c><01:26:36.560><c> of</c><01:26:36.639><c> these</c><01:26:36.880><c> conditions</c><01:26:37.600><c> needs</c><01:26:37.840><c> to</c><01:26:38.000><c> be</c>

01:26:38.149 --> 01:26:38.159 align:start position:0%
only one of these conditions needs to be
 

01:26:38.159 --> 01:26:40.149 align:start position:0%
only one of these conditions needs to be
true<01:26:38.719><c> if</c><01:26:38.880><c> both</c><01:26:39.120><c> are</c><01:26:39.280><c> true</c><01:26:39.520><c> that's</c><01:26:39.760><c> fine</c><01:26:40.000><c> as</c>

01:26:40.149 --> 01:26:40.159 align:start position:0%
true if both are true that's fine as
 

01:26:40.159 --> 01:26:42.310 align:start position:0%
true if both are true that's fine as
well<01:26:40.639><c> or</c><01:26:41.040><c> our</c><01:26:41.280><c> temperature</c><01:26:41.840><c> could</c><01:26:42.000><c> be</c>

01:26:42.310 --> 01:26:42.320 align:start position:0%
well or our temperature could be
 

01:26:42.320 --> 01:26:44.790 align:start position:0%
well or our temperature could be
positive<01:26:42.880><c> 1000</c><01:26:43.520><c> degrees</c><01:26:43.760><c> celsius</c><01:26:44.639><c> the</c>

01:26:44.790 --> 01:26:44.800 align:start position:0%
positive 1000 degrees celsius the
 

01:26:44.800 --> 01:26:47.430 align:start position:0%
positive 1000 degrees celsius the
weather<01:26:45.120><c> is</c><01:26:45.280><c> also</c><01:26:45.600><c> bad</c><01:26:46.159><c> this</c><01:26:46.400><c> is</c><01:26:46.560><c> false</c><01:26:47.199><c> and</c>

01:26:47.430 --> 01:26:47.440 align:start position:0%
weather is also bad this is false and
 

01:26:47.440 --> 01:26:49.270 align:start position:0%
weather is also bad this is false and
this<01:26:47.600><c> is</c><01:26:47.840><c> true</c><01:26:48.400><c> and</c><01:26:48.560><c> only</c><01:26:48.880><c> one</c><01:26:49.040><c> of</c><01:26:49.120><c> these</c>

01:26:49.270 --> 01:26:49.280 align:start position:0%
this is true and only one of these
 

01:26:49.280 --> 01:26:51.990 align:start position:0%
this is true and only one of these
conditions<01:26:50.000><c> needs</c><01:26:50.239><c> to</c><01:26:50.320><c> be</c><01:26:50.480><c> true</c><01:26:51.280><c> but</c><01:26:51.520><c> if</c><01:26:51.760><c> our</c>

01:26:51.990 --> 01:26:52.000 align:start position:0%
conditions needs to be true but if our
 

01:26:52.000 --> 01:26:55.110 align:start position:0%
conditions needs to be true but if our
temperature<01:26:52.560><c> is</c><01:26:52.800><c> 25</c><01:26:53.760><c> well</c><01:26:54.320><c> neither</c><01:26:54.719><c> of</c><01:26:54.880><c> these</c>

01:26:55.110 --> 01:26:55.120 align:start position:0%
temperature is 25 well neither of these
 

01:26:55.120 --> 01:26:57.590 align:start position:0%
temperature is 25 well neither of these
conditions<01:26:55.679><c> are</c><01:26:55.840><c> true</c><01:26:56.560><c> at</c><01:26:56.800><c> least</c><01:26:57.360><c> one</c>

01:26:57.590 --> 01:26:57.600 align:start position:0%
conditions are true at least one
 

01:26:57.600 --> 01:26:59.830 align:start position:0%
conditions are true at least one
condition<01:26:58.239><c> needs</c><01:26:58.560><c> to</c><01:26:58.639><c> be</c><01:26:58.800><c> true</c><01:26:59.120><c> in</c><01:26:59.280><c> order</c><01:26:59.520><c> to</c>

01:26:59.830 --> 01:26:59.840 align:start position:0%
condition needs to be true in order to
 

01:26:59.840 --> 01:27:02.310 align:start position:0%
condition needs to be true in order to
execute<01:27:00.320><c> the</c><01:27:00.480><c> statement</c><01:27:01.360><c> so</c><01:27:01.600><c> yeah</c><01:27:01.840><c> that</c><01:27:02.080><c> is</c>

01:27:02.310 --> 01:27:02.320 align:start position:0%
execute the statement so yeah that is
 

01:27:02.320 --> 01:27:05.110 align:start position:0%
execute the statement so yeah that is
the<01:27:02.639><c> or</c><01:27:02.960><c> logical</c><01:27:03.440><c> operator</c><01:27:04.080><c> it</c><01:27:04.239><c> checks</c><01:27:04.560><c> to</c><01:27:04.719><c> see</c>

01:27:05.110 --> 01:27:05.120 align:start position:0%
the or logical operator it checks to see
 

01:27:05.120 --> 01:27:08.149 align:start position:0%
the or logical operator it checks to see
if<01:27:05.679><c> at</c><01:27:05.920><c> least</c><01:27:06.400><c> one</c><01:27:06.639><c> condition</c><01:27:07.199><c> is</c><01:27:07.360><c> true</c><01:27:08.000><c> and</c>

01:27:08.149 --> 01:27:08.159 align:start position:0%
if at least one condition is true and
 

01:27:08.159 --> 01:27:10.149 align:start position:0%
if at least one condition is true and
you<01:27:08.320><c> can</c><01:27:08.560><c> check</c><01:27:08.880><c> more</c><01:27:09.040><c> than</c><01:27:09.199><c> one</c><01:27:09.360><c> condition</c><01:27:09.920><c> by</c>

01:27:10.149 --> 01:27:10.159 align:start position:0%
you can check more than one condition by
 

01:27:10.159 --> 01:27:12.390 align:start position:0%
you can check more than one condition by
adding<01:27:10.480><c> another</c><01:27:10.960><c> set</c><01:27:11.199><c> of</c><01:27:11.360><c> vertical</c><01:27:11.760><c> bars</c><01:27:12.159><c> for</c>

01:27:12.390 --> 01:27:12.400 align:start position:0%
adding another set of vertical bars for
 

01:27:12.400 --> 01:27:14.470 align:start position:0%
adding another set of vertical bars for
the<01:27:12.639><c> ore</c><01:27:12.960><c> operator</c><01:27:13.679><c> so</c><01:27:13.920><c> if</c><01:27:14.000><c> you</c><01:27:14.080><c> found</c><01:27:14.320><c> this</c>

01:27:14.470 --> 01:27:14.480 align:start position:0%
the ore operator so if you found this
 

01:27:14.480 --> 01:27:16.229 align:start position:0%
the ore operator so if you found this
video<01:27:14.639><c> helpful</c><01:27:14.960><c> please</c><01:27:15.280><c> be</c><01:27:15.440><c> sure</c><01:27:15.679><c> to</c><01:27:15.840><c> help</c><01:27:16.080><c> me</c>

01:27:16.229 --> 01:27:16.239 align:start position:0%
video helpful please be sure to help me
 

01:27:16.239 --> 01:27:17.830 align:start position:0%
video helpful please be sure to help me
out<01:27:16.400><c> by</c><01:27:16.639><c> smashing</c><01:27:17.040><c> that</c><01:27:17.120><c> like</c><01:27:17.360><c> button</c><01:27:17.679><c> leave</c>

01:27:17.830 --> 01:27:17.840 align:start position:0%
out by smashing that like button leave
 

01:27:17.840 --> 01:27:19.350 align:start position:0%
out by smashing that like button leave
her<01:27:17.920><c> in</c><01:27:18.080><c> a</c><01:27:18.159><c> comment</c><01:27:18.400><c> down</c><01:27:18.639><c> below</c><01:27:19.040><c> and</c>

01:27:19.350 --> 01:27:19.360 align:start position:0%
her in a comment down below and
 

01:27:19.360 --> 01:27:20.629 align:start position:0%
her in a comment down below and
subscribe<01:27:19.840><c> if</c><01:27:19.920><c> you'd</c><01:27:20.080><c> like</c><01:27:20.239><c> to</c><01:27:20.320><c> become</c><01:27:20.560><c> a</c>

01:27:20.629 --> 01:27:20.639 align:start position:0%
subscribe if you'd like to become a
 

01:27:20.639 --> 01:27:24.229 align:start position:0%
subscribe if you'd like to become a
fellow<01:27:20.960><c> bro</c>

01:27:24.229 --> 01:27:24.239 align:start position:0%
 
 

01:27:24.239 --> 01:27:26.870 align:start position:0%
 
hey<01:27:24.400><c> yeah</c><01:27:24.800><c> let's</c><01:27:25.040><c> discuss</c><01:27:25.600><c> the</c><01:27:26.080><c> notch</c><01:27:26.400><c> logical</c>

01:27:26.870 --> 01:27:26.880 align:start position:0%
hey yeah let's discuss the notch logical
 

01:27:26.880 --> 01:27:28.629 align:start position:0%
hey yeah let's discuss the notch logical
operator<01:27:27.360><c> which</c><01:27:27.600><c> is</c><01:27:27.679><c> represented</c><01:27:28.320><c> by</c><01:27:28.480><c> an</c>

01:27:28.629 --> 01:27:28.639 align:start position:0%
operator which is represented by an
 

01:27:28.639 --> 01:27:30.790 align:start position:0%
operator which is represented by an
exclamation<01:27:29.360><c> point</c><01:27:29.840><c> its</c><01:27:30.080><c> purpose</c><01:27:30.480><c> is</c><01:27:30.639><c> to</c>

01:27:30.790 --> 01:27:30.800 align:start position:0%
exclamation point its purpose is to
 

01:27:30.800 --> 01:27:32.709 align:start position:0%
exclamation point its purpose is to
reverse<01:27:31.199><c> the</c><01:27:31.360><c> state</c><01:27:31.679><c> of</c><01:27:31.760><c> a</c><01:27:31.840><c> condition</c><01:27:32.480><c> let's</c>

01:27:32.709 --> 01:27:32.719 align:start position:0%
reverse the state of a condition let's
 

01:27:32.719 --> 01:27:34.470 align:start position:0%
reverse the state of a condition let's
write<01:27:32.880><c> a</c><01:27:32.960><c> small</c><01:27:33.199><c> program</c><01:27:33.679><c> let's</c><01:27:33.840><c> say</c><01:27:34.080><c> that</c><01:27:34.320><c> we</c>

01:27:34.470 --> 01:27:34.480 align:start position:0%
write a small program let's say that we
 

01:27:34.480 --> 01:27:36.950 align:start position:0%
write a small program let's say that we
have<01:27:34.639><c> a</c><01:27:34.800><c> boolean</c><01:27:35.280><c> variable</c><01:27:35.840><c> named</c><01:27:36.239><c> sunny</c><01:27:36.800><c> and</c>

01:27:36.950 --> 01:27:36.960 align:start position:0%
have a boolean variable named sunny and
 

01:27:36.960 --> 01:27:39.189 align:start position:0%
have a boolean variable named sunny and
this<01:27:37.120><c> will</c><01:27:37.280><c> be</c><01:27:37.520><c> either</c><01:27:38.000><c> true</c><01:27:38.320><c> or</c><01:27:38.560><c> false</c><01:27:38.960><c> let's</c>

01:27:39.189 --> 01:27:39.199 align:start position:0%
this will be either true or false let's
 

01:27:39.199 --> 01:27:41.030 align:start position:0%
this will be either true or false let's
say<01:27:39.360><c> it's</c><01:27:39.520><c> true</c><01:27:39.679><c> to</c><01:27:39.840><c> begin</c><01:27:40.080><c> with</c><01:27:40.480><c> so</c><01:27:40.639><c> to</c><01:27:40.800><c> work</c>

01:27:41.030 --> 01:27:41.040 align:start position:0%
say it's true to begin with so to work
 

01:27:41.040 --> 01:27:42.790 align:start position:0%
say it's true to begin with so to work
with<01:27:41.199><c> boolean</c><01:27:41.600><c> variables</c><01:27:42.239><c> include</c><01:27:42.639><c> this</c>

01:27:42.790 --> 01:27:42.800 align:start position:0%
with boolean variables include this
 

01:27:42.800 --> 01:27:45.030 align:start position:0%
with boolean variables include this
header<01:27:43.040><c> file</c><01:27:43.440><c> at</c><01:27:43.520><c> the</c><01:27:43.679><c> top</c><01:27:44.159><c> and</c><01:27:44.400><c> we</c><01:27:44.560><c> will</c><01:27:44.719><c> write</c>

01:27:45.030 --> 01:27:45.040 align:start position:0%
header file at the top and we will write
 

01:27:45.040 --> 01:27:46.709 align:start position:0%
header file at the top and we will write
an<01:27:45.199><c> if-else</c><01:27:45.679><c> statement</c><01:27:46.000><c> to</c><01:27:46.159><c> check</c><01:27:46.320><c> to</c><01:27:46.480><c> see</c><01:27:46.560><c> if</c>

01:27:46.709 --> 01:27:46.719 align:start position:0%
an if-else statement to check to see if
 

01:27:46.719 --> 01:27:48.790 align:start position:0%
an if-else statement to check to see if
it's<01:27:46.880><c> sunny</c><01:27:47.199><c> outside</c><01:27:47.760><c> and</c><01:27:48.000><c> print</c><01:27:48.320><c> a</c><01:27:48.480><c> custom</c>

01:27:48.790 --> 01:27:48.800 align:start position:0%
it's sunny outside and print a custom
 

01:27:48.800 --> 01:27:50.229 align:start position:0%
it's sunny outside and print a custom
message

01:27:50.229 --> 01:27:50.239 align:start position:0%
message
 

01:27:50.239 --> 01:27:52.229 align:start position:0%
message
so<01:27:50.560><c> if</c><01:27:51.280><c> sunny</c>

01:27:52.229 --> 01:27:52.239 align:start position:0%
so if sunny
 

01:27:52.239 --> 01:27:53.830 align:start position:0%
so if sunny
is<01:27:52.480><c> equal</c><01:27:52.719><c> to</c><01:27:52.880><c> true</c>

01:27:53.830 --> 01:27:53.840 align:start position:0%
is equal to true
 

01:27:53.840 --> 01:27:57.830 align:start position:0%
is equal to true
then<01:27:54.000><c> we</c><01:27:54.159><c> will</c><01:27:54.400><c> print</c>

01:27:57.830 --> 01:27:57.840 align:start position:0%
 
 

01:27:57.840 --> 01:28:00.790 align:start position:0%
 
it's<01:27:58.159><c> sunny</c><01:27:58.480><c> outside</c><01:27:59.360><c> else</c><01:28:00.239><c> it</c><01:28:00.400><c> must</c><01:28:00.639><c> be</c>

01:28:00.790 --> 01:28:00.800 align:start position:0%
it's sunny outside else it must be
 

01:28:00.800 --> 01:28:02.709 align:start position:0%
it's sunny outside else it must be
cloudy<01:28:01.280><c> outside</c>

01:28:02.709 --> 01:28:02.719 align:start position:0%
cloudy outside
 

01:28:02.719 --> 01:28:05.270 align:start position:0%
cloudy outside
so<01:28:02.960><c> this</c><01:28:03.120><c> does</c><01:28:03.360><c> work</c><01:28:03.920><c> it's</c><01:28:04.159><c> sunny</c><01:28:04.480><c> outside</c>

01:28:05.270 --> 01:28:05.280 align:start position:0%
so this does work it's sunny outside
 

01:28:05.280 --> 01:28:06.870 align:start position:0%
so this does work it's sunny outside
another<01:28:05.600><c> way</c><01:28:05.760><c> of</c><01:28:05.840><c> writing</c><01:28:06.080><c> this</c><01:28:06.400><c> is</c><01:28:06.560><c> that</c><01:28:06.719><c> we</c>

01:28:06.870 --> 01:28:06.880 align:start position:0%
another way of writing this is that we
 

01:28:06.880 --> 01:28:09.430 align:start position:0%
another way of writing this is that we
could<01:28:07.120><c> say</c><01:28:07.600><c> sunny</c><01:28:08.000><c> is</c><01:28:08.080><c> equal</c><01:28:08.320><c> to</c><01:28:08.480><c> one</c><01:28:08.800><c> because</c>

01:28:09.430 --> 01:28:09.440 align:start position:0%
could say sunny is equal to one because
 

01:28:09.440 --> 01:28:11.750 align:start position:0%
could say sunny is equal to one because
true<01:28:09.760><c> represents</c><01:28:10.320><c> one</c><01:28:10.880><c> false</c><01:28:11.280><c> represents</c>

01:28:11.750 --> 01:28:11.760 align:start position:0%
true represents one false represents
 

01:28:11.760 --> 01:28:14.390 align:start position:0%
true represents one false represents
zero<01:28:12.480><c> this</c><01:28:12.639><c> would</c><01:28:12.800><c> also</c><01:28:13.120><c> work</c><01:28:13.840><c> or</c><01:28:14.080><c> you</c><01:28:14.159><c> could</c>

01:28:14.390 --> 01:28:14.400 align:start position:0%
zero this would also work or you could
 

01:28:14.400 --> 01:28:17.830 align:start position:0%
zero this would also work or you could
just<01:28:14.560><c> say</c><01:28:15.120><c> sunny</c><01:28:15.920><c> this</c><01:28:16.159><c> would</c><01:28:16.320><c> work</c><01:28:16.560><c> as</c><01:28:16.719><c> well</c>

01:28:17.830 --> 01:28:17.840 align:start position:0%
just say sunny this would work as well
 

01:28:17.840 --> 01:28:20.310 align:start position:0%
just say sunny this would work as well
so<01:28:18.080><c> by</c><01:28:18.239><c> using</c><01:28:18.560><c> the</c><01:28:18.800><c> not</c><01:28:19.199><c> logical</c><01:28:19.679><c> operator</c>

01:28:20.310 --> 01:28:20.320 align:start position:0%
so by using the not logical operator
 

01:28:20.320 --> 01:28:22.550 align:start position:0%
so by using the not logical operator
this<01:28:20.480><c> will</c><01:28:20.719><c> reverse</c><01:28:21.199><c> the</c><01:28:21.360><c> state</c><01:28:21.679><c> of</c><01:28:21.760><c> condition</c>

01:28:22.550 --> 01:28:22.560 align:start position:0%
this will reverse the state of condition
 

01:28:22.560 --> 01:28:24.870 align:start position:0%
this will reverse the state of condition
by<01:28:22.719><c> using</c><01:28:22.960><c> the</c><01:28:23.199><c> not</c><01:28:23.520><c> logical</c><01:28:24.000><c> operator</c><01:28:24.719><c> we're</c>

01:28:24.870 --> 01:28:24.880 align:start position:0%
by using the not logical operator we're
 

01:28:24.880 --> 01:28:27.590 align:start position:0%
by using the not logical operator we're
checking<01:28:25.199><c> to</c><01:28:25.360><c> see</c><01:28:25.600><c> if</c><01:28:25.760><c> something</c><01:28:26.239><c> is</c><01:28:26.639><c> not</c><01:28:26.880><c> true</c>

01:28:27.590 --> 01:28:27.600 align:start position:0%
checking to see if something is not true
 

01:28:27.600 --> 01:28:29.669 align:start position:0%
checking to see if something is not true
so<01:28:27.840><c> if</c><01:28:27.920><c> i</c><01:28:28.080><c> try</c><01:28:28.239><c> this</c><01:28:28.480><c> again</c>

01:28:29.669 --> 01:28:29.679 align:start position:0%
so if i try this again
 

01:28:29.679 --> 01:28:32.390 align:start position:0%
so if i try this again
this<01:28:29.920><c> program</c><01:28:30.400><c> states</c><01:28:30.880><c> it's</c><01:28:31.040><c> cloudy</c><01:28:31.440><c> outside</c>

01:28:32.390 --> 01:28:32.400 align:start position:0%
this program states it's cloudy outside
 

01:28:32.400 --> 01:28:34.229 align:start position:0%
this program states it's cloudy outside
so<01:28:32.639><c> i</c><01:28:32.719><c> think</c><01:28:32.880><c> it</c><01:28:32.960><c> would</c><01:28:33.040><c> be</c><01:28:33.199><c> better</c><01:28:33.600><c> if</c><01:28:33.760><c> we</c><01:28:34.000><c> were</c>

01:28:34.229 --> 01:28:34.239 align:start position:0%
so i think it would be better if we were
 

01:28:34.239 --> 01:28:37.590 align:start position:0%
so i think it would be better if we were
to<01:28:34.480><c> switch</c><01:28:34.960><c> these</c><01:28:35.199><c> print</c><01:28:35.440><c> statements</c><01:28:35.840><c> around</c>

01:28:37.590 --> 01:28:37.600 align:start position:0%
to switch these print statements around
 

01:28:37.600 --> 01:28:39.990 align:start position:0%
to switch these print statements around
now<01:28:37.840><c> what</c><01:28:38.000><c> we're</c><01:28:38.159><c> checking</c><01:28:38.719><c> is</c><01:28:39.120><c> if</c><01:28:39.360><c> it's</c><01:28:39.760><c> not</c>

01:28:39.990 --> 01:28:40.000 align:start position:0%
now what we're checking is if it's not
 

01:28:40.000 --> 01:28:42.149 align:start position:0%
now what we're checking is if it's not
sunny<01:28:40.560><c> if</c><01:28:40.719><c> it's</c><01:28:40.880><c> not</c><01:28:41.120><c> sunny</c><01:28:41.600><c> then</c><01:28:41.840><c> we</c><01:28:42.000><c> will</c>

01:28:42.149 --> 01:28:42.159 align:start position:0%
sunny if it's not sunny then we will
 

01:28:42.159 --> 01:28:44.470 align:start position:0%
sunny if it's not sunny then we will
print<01:28:42.639><c> it's</c><01:28:42.880><c> cloudy</c><01:28:43.360><c> outside</c>

01:28:44.470 --> 01:28:44.480 align:start position:0%
print it's cloudy outside
 

01:28:44.480 --> 01:28:46.790 align:start position:0%
print it's cloudy outside
else<01:28:45.199><c> it's</c><01:28:45.440><c> sunny</c><01:28:45.760><c> outside</c>

01:28:46.790 --> 01:28:46.800 align:start position:0%
else it's sunny outside
 

01:28:46.800 --> 01:28:49.110 align:start position:0%
else it's sunny outside
it<01:28:47.040><c> is</c><01:28:47.120><c> sunny</c><01:28:47.440><c> outside</c><01:28:48.080><c> and</c><01:28:48.239><c> if</c><01:28:48.400><c> i</c><01:28:48.560><c> change</c><01:28:48.880><c> this</c>

01:28:49.110 --> 01:28:49.120 align:start position:0%
it is sunny outside and if i change this
 

01:28:49.120 --> 01:28:51.110 align:start position:0%
it is sunny outside and if i change this
to<01:28:49.199><c> be</c><01:28:49.440><c> false</c>

01:28:51.110 --> 01:28:51.120 align:start position:0%
to be false
 

01:28:51.120 --> 01:28:52.149 align:start position:0%
to be false
well<01:28:51.360><c> then</c>

01:28:52.149 --> 01:28:52.159 align:start position:0%
well then
 

01:28:52.159 --> 01:28:54.629 align:start position:0%
well then
it's<01:28:52.400><c> cloudy</c><01:28:52.880><c> outside</c><01:28:53.600><c> so</c><01:28:53.760><c> yeah</c><01:28:54.000><c> that's</c><01:28:54.320><c> the</c>

01:28:54.629 --> 01:28:54.639 align:start position:0%
it's cloudy outside so yeah that's the
 

01:28:54.639 --> 01:28:56.470 align:start position:0%
it's cloudy outside so yeah that's the
not<01:28:54.960><c> logical</c><01:28:55.440><c> operator</c><01:28:56.000><c> you</c><01:28:56.080><c> can</c><01:28:56.239><c> just</c>

01:28:56.470 --> 01:28:56.480 align:start position:0%
not logical operator you can just
 

01:28:56.480 --> 01:28:58.629 align:start position:0%
not logical operator you can just
precede<01:28:57.040><c> a</c><01:28:57.199><c> condition</c><01:28:57.760><c> or</c><01:28:58.000><c> a</c><01:28:58.239><c> boolean</c>

01:28:58.629 --> 01:28:58.639 align:start position:0%
precede a condition or a boolean
 

01:28:58.639 --> 01:29:01.510 align:start position:0%
precede a condition or a boolean
variable<01:28:59.440><c> with</c><01:28:59.760><c> the</c><01:29:00.000><c> not</c><01:29:00.320><c> logical</c><01:29:00.800><c> operator</c>

01:29:01.510 --> 01:29:01.520 align:start position:0%
variable with the not logical operator
 

01:29:01.520 --> 01:29:03.350 align:start position:0%
variable with the not logical operator
and<01:29:01.679><c> that</c><01:29:01.840><c> gives</c><01:29:02.080><c> you</c><01:29:02.239><c> a</c><01:29:02.400><c> few</c><01:29:02.639><c> more</c><01:29:02.880><c> options</c><01:29:03.280><c> in</c>

01:29:03.350 --> 01:29:03.360 align:start position:0%
and that gives you a few more options in
 

01:29:03.360 --> 01:29:05.590 align:start position:0%
and that gives you a few more options in
the<01:29:03.440><c> way</c><01:29:03.679><c> in</c><01:29:03.760><c> which</c><01:29:04.000><c> you</c><01:29:04.080><c> can</c><01:29:04.239><c> write</c><01:29:04.480><c> a</c><01:29:04.639><c> program</c>

01:29:05.590 --> 01:29:05.600 align:start position:0%
the way in which you can write a program
 

01:29:05.600 --> 01:29:08.470 align:start position:0%
the way in which you can write a program
so<01:29:05.840><c> yeah</c><01:29:06.080><c> that</c><01:29:06.320><c> is</c><01:29:06.480><c> the</c><01:29:06.800><c> not</c><01:29:07.199><c> logical</c><01:29:07.679><c> operator</c>

01:29:08.470 --> 01:29:08.480 align:start position:0%
so yeah that is the not logical operator
 

01:29:08.480 --> 01:29:10.149 align:start position:0%
so yeah that is the not logical operator
if<01:29:08.719><c> you</c><01:29:08.880><c> found</c><01:29:09.120><c> this</c><01:29:09.280><c> video</c><01:29:09.520><c> helpful</c><01:29:09.840><c> you</c><01:29:10.000><c> can</c>

01:29:10.149 --> 01:29:10.159 align:start position:0%
if you found this video helpful you can
 

01:29:10.159 --> 01:29:12.070 align:start position:0%
if you found this video helpful you can
help<01:29:10.320><c> me</c><01:29:10.480><c> out</c><01:29:10.639><c> by</c><01:29:10.960><c> smashing</c><01:29:11.360><c> that</c><01:29:11.520><c> like</c><01:29:11.679><c> button</c>

01:29:12.070 --> 01:29:12.080 align:start position:0%
help me out by smashing that like button
 

01:29:12.080 --> 01:29:13.669 align:start position:0%
help me out by smashing that like button
leave<01:29:12.320><c> random</c><01:29:12.560><c> comments</c><01:29:12.880><c> down</c><01:29:13.040><c> below</c><01:29:13.440><c> and</c>

01:29:13.669 --> 01:29:13.679 align:start position:0%
leave random comments down below and
 

01:29:13.679 --> 01:29:15.030 align:start position:0%
leave random comments down below and
subscribe<01:29:14.159><c> if</c><01:29:14.239><c> you'd</c><01:29:14.400><c> like</c><01:29:14.560><c> to</c><01:29:14.639><c> become</c><01:29:14.880><c> a</c>

01:29:15.030 --> 01:29:15.040 align:start position:0%
subscribe if you'd like to become a
 

01:29:15.040 --> 01:29:18.629 align:start position:0%
subscribe if you'd like to become a
fellow<01:29:15.360><c> bro</c>

01:29:18.629 --> 01:29:18.639 align:start position:0%
 
 

01:29:18.639 --> 01:29:20.390 align:start position:0%
 
hey<01:29:18.880><c> yeah</c><01:29:19.199><c> what's</c><01:29:19.440><c> going</c><01:29:19.600><c> on</c><01:29:19.920><c> let's</c><01:29:20.159><c> talk</c>

01:29:20.390 --> 01:29:20.400 align:start position:0%
hey yeah what's going on let's talk
 

01:29:20.400 --> 01:29:23.189 align:start position:0%
hey yeah what's going on let's talk
about<01:29:20.639><c> functions</c><01:29:21.360><c> a</c><01:29:21.600><c> function</c><01:29:22.239><c> is</c><01:29:22.560><c> a</c><01:29:22.800><c> small</c>

01:29:23.189 --> 01:29:23.199 align:start position:0%
about functions a function is a small
 

01:29:23.199 --> 01:29:25.189 align:start position:0%
about functions a function is a small
section<01:29:23.600><c> of</c><01:29:23.679><c> code</c><01:29:24.239><c> that</c><01:29:24.480><c> is</c><01:29:24.639><c> executed</c>

01:29:25.189 --> 01:29:25.199 align:start position:0%
section of code that is executed
 

01:29:25.199 --> 01:29:27.669 align:start position:0%
section of code that is executed
whenever<01:29:25.600><c> we</c><01:29:25.840><c> call</c><01:29:26.159><c> it</c><01:29:26.560><c> also</c><01:29:26.960><c> known</c><01:29:27.280><c> as</c>

01:29:27.669 --> 01:29:27.679 align:start position:0%
whenever we call it also known as
 

01:29:27.679 --> 01:29:30.390 align:start position:0%
whenever we call it also known as
invoking<01:29:28.239><c> a</c><01:29:28.320><c> function</c><01:29:29.040><c> when</c><01:29:29.280><c> we</c><01:29:29.440><c> compile</c><01:29:30.159><c> and</c>

01:29:30.390 --> 01:29:30.400 align:start position:0%
invoking a function when we compile and
 

01:29:30.400 --> 01:29:33.510 align:start position:0%
invoking a function when we compile and
run<01:29:30.719><c> a</c><01:29:30.960><c> c</c><01:29:31.280><c> program</c><01:29:31.920><c> we</c><01:29:32.159><c> begin</c><01:29:32.560><c> with</c><01:29:32.800><c> invoking</c>

01:29:33.510 --> 01:29:33.520 align:start position:0%
run a c program we begin with invoking
 

01:29:33.520 --> 01:29:36.229 align:start position:0%
run a c program we begin with invoking
the<01:29:33.679><c> main</c><01:29:34.000><c> function</c><01:29:34.719><c> so</c><01:29:34.960><c> here's</c><01:29:35.280><c> our</c><01:29:35.440><c> task</c><01:29:36.080><c> we</c>

01:29:36.229 --> 01:29:36.239 align:start position:0%
the main function so here's our task we
 

01:29:36.239 --> 01:29:38.550 align:start position:0%
the main function so here's our task we
need<01:29:36.400><c> to</c><01:29:36.560><c> sing</c><01:29:37.040><c> three</c><01:29:37.360><c> verses</c><01:29:38.000><c> of</c><01:29:38.239><c> happy</c>

01:29:38.550 --> 01:29:38.560 align:start position:0%
need to sing three verses of happy
 

01:29:38.560 --> 01:29:41.270 align:start position:0%
need to sing three verses of happy
birthday<01:29:39.199><c> for</c><01:29:39.360><c> some</c><01:29:39.600><c> reason</c><01:29:40.320><c> if</c><01:29:40.480><c> we</c><01:29:40.719><c> are</c><01:29:40.960><c> only</c>

01:29:41.270 --> 01:29:41.280 align:start position:0%
birthday for some reason if we are only
 

01:29:41.280 --> 01:29:43.270 align:start position:0%
birthday for some reason if we are only
using<01:29:41.600><c> the</c><01:29:41.760><c> main</c><01:29:42.000><c> function</c><01:29:42.560><c> we</c><01:29:42.800><c> could</c><01:29:43.040><c> write</c>

01:29:43.270 --> 01:29:43.280 align:start position:0%
using the main function we could write
 

01:29:43.280 --> 01:29:49.750 align:start position:0%
using the main function we could write
it<01:29:43.360><c> like</c><01:29:43.600><c> this</c>

01:29:49.750 --> 01:29:49.760 align:start position:0%
 
 

01:29:49.760 --> 01:29:51.910 align:start position:0%
 
this<01:29:50.080><c> will</c><01:29:50.239><c> be</c><01:29:50.480><c> the</c><01:29:50.639><c> first</c><01:29:51.120><c> verse</c><01:29:51.440><c> of</c><01:29:51.600><c> happy</c>

01:29:51.910 --> 01:29:51.920 align:start position:0%
this will be the first verse of happy
 

01:29:51.920 --> 01:29:54.390 align:start position:0%
this will be the first verse of happy
birthday<01:29:52.800><c> and</c><01:29:53.040><c> if</c><01:29:53.199><c> i</c><01:29:53.280><c> need</c><01:29:53.440><c> to</c><01:29:53.600><c> sing</c><01:29:54.159><c> three</c>

01:29:54.390 --> 01:29:54.400 align:start position:0%
birthday and if i need to sing three
 

01:29:54.400 --> 01:29:57.350 align:start position:0%
birthday and if i need to sing three
verses<01:29:55.040><c> i</c><01:29:55.199><c> could</c><01:29:55.600><c> just</c><01:29:55.840><c> copy</c><01:29:56.239><c> and</c><01:29:56.480><c> paste</c><01:29:57.120><c> this</c>

01:29:57.350 --> 01:29:57.360 align:start position:0%
verses i could just copy and paste this
 

01:29:57.360 --> 01:29:58.790 align:start position:0%
verses i could just copy and paste this
one<01:29:57.679><c> section</c>

01:29:58.790 --> 01:29:58.800 align:start position:0%
one section
 

01:29:58.800 --> 01:30:00.950 align:start position:0%
one section
and<01:29:58.880><c> then</c><01:29:59.120><c> paste</c><01:29:59.440><c> it</c><01:29:59.679><c> two</c><01:29:59.920><c> additional</c><01:30:00.320><c> times</c>

01:30:00.950 --> 01:30:00.960 align:start position:0%
and then paste it two additional times
 

01:30:00.960 --> 01:30:02.390 align:start position:0%
and then paste it two additional times
then<01:30:01.199><c> i'm</c><01:30:01.280><c> just</c><01:30:01.360><c> going</c><01:30:01.520><c> to</c><01:30:01.600><c> add</c><01:30:01.840><c> a</c><01:30:02.000><c> new</c><01:30:02.159><c> line</c>

01:30:02.390 --> 01:30:02.400 align:start position:0%
then i'm just going to add a new line
 

01:30:02.400 --> 01:30:04.070 align:start position:0%
then i'm just going to add a new line
character<01:30:02.800><c> at</c><01:30:02.880><c> the</c><01:30:03.040><c> end</c>

01:30:04.070 --> 01:30:04.080 align:start position:0%
character at the end
 

01:30:04.080 --> 01:30:05.910 align:start position:0%
character at the end
technically<01:30:04.639><c> this</c><01:30:04.880><c> would</c><01:30:05.120><c> work</c><01:30:05.520><c> but</c><01:30:05.679><c> it's</c>

01:30:05.910 --> 01:30:05.920 align:start position:0%
technically this would work but it's
 

01:30:05.920 --> 01:30:08.390 align:start position:0%
technically this would work but it's
considered<01:30:06.560><c> poor</c><01:30:06.800><c> practice</c><01:30:07.440><c> to</c><01:30:07.600><c> repeat</c><01:30:08.080><c> code</c>

01:30:08.390 --> 01:30:08.400 align:start position:0%
considered poor practice to repeat code
 

01:30:08.400 --> 01:30:10.149 align:start position:0%
considered poor practice to repeat code
more<01:30:08.560><c> than</c><01:30:08.719><c> once</c><01:30:08.960><c> if</c><01:30:09.120><c> you</c><01:30:09.280><c> don't</c><01:30:09.440><c> have</c><01:30:09.679><c> to</c>

01:30:10.149 --> 01:30:10.159 align:start position:0%
more than once if you don't have to
 

01:30:10.159 --> 01:30:11.830 align:start position:0%
more than once if you don't have to
wouldn't<01:30:10.480><c> it</c><01:30:10.560><c> be</c><01:30:10.800><c> better</c><01:30:11.120><c> if</c><01:30:11.280><c> we</c><01:30:11.440><c> write</c><01:30:11.679><c> this</c>

01:30:11.830 --> 01:30:11.840 align:start position:0%
wouldn't it be better if we write this
 

01:30:11.840 --> 01:30:14.390 align:start position:0%
wouldn't it be better if we write this
code<01:30:12.159><c> once</c><01:30:12.560><c> and</c><01:30:12.639><c> then</c><01:30:12.960><c> simply</c><01:30:13.360><c> reuse</c><01:30:13.840><c> it</c><01:30:14.159><c> well</c>

01:30:14.390 --> 01:30:14.400 align:start position:0%
code once and then simply reuse it well
 

01:30:14.400 --> 01:30:16.550 align:start position:0%
code once and then simply reuse it well
we<01:30:14.480><c> can</c><01:30:14.800><c> by</c><01:30:14.960><c> using</c><01:30:15.199><c> a</c><01:30:15.360><c> function</c><01:30:16.080><c> so</c><01:30:16.320><c> let's</c>

01:30:16.550 --> 01:30:16.560 align:start position:0%
we can by using a function so let's
 

01:30:16.560 --> 01:30:18.550 align:start position:0%
we can by using a function so let's
delete<01:30:16.960><c> two</c><01:30:17.199><c> of</c><01:30:17.280><c> these</c><01:30:17.520><c> verses</c>

01:30:18.550 --> 01:30:18.560 align:start position:0%
delete two of these verses
 

01:30:18.560 --> 01:30:20.950 align:start position:0%
delete two of these verses
and<01:30:18.719><c> we</c><01:30:18.880><c> will</c><01:30:19.040><c> create</c><01:30:19.440><c> a</c><01:30:19.520><c> new</c><01:30:19.840><c> function</c><01:30:20.719><c> so</c>

01:30:20.950 --> 01:30:20.960 align:start position:0%
and we will create a new function so
 

01:30:20.960 --> 01:30:22.870 align:start position:0%
and we will create a new function so
outside<01:30:21.360><c> of</c><01:30:21.440><c> the</c><01:30:21.520><c> main</c><01:30:21.840><c> function</c><01:30:22.639><c> let's</c>

01:30:22.870 --> 01:30:22.880 align:start position:0%
outside of the main function let's
 

01:30:22.880 --> 01:30:25.189 align:start position:0%
outside of the main function let's
declare<01:30:23.360><c> a</c><01:30:23.520><c> new</c><01:30:23.760><c> function</c><01:30:24.480><c> so</c><01:30:24.639><c> for</c><01:30:24.800><c> now</c><01:30:24.960><c> we're</c>

01:30:25.189 --> 01:30:25.199 align:start position:0%
declare a new function so for now we're
 

01:30:25.199 --> 01:30:27.590 align:start position:0%
declare a new function so for now we're
going<01:30:25.360><c> to</c><01:30:25.520><c> type</c><01:30:25.920><c> void</c><01:30:26.560><c> and</c><01:30:26.719><c> then</c><01:30:27.040><c> a</c><01:30:27.120><c> unique</c>

01:30:27.590 --> 01:30:27.600 align:start position:0%
going to type void and then a unique
 

01:30:27.600 --> 01:30:29.189 align:start position:0%
going to type void and then a unique
name<01:30:27.840><c> for</c><01:30:28.000><c> this</c><01:30:28.159><c> function</c><01:30:28.639><c> let's</c><01:30:28.880><c> say</c><01:30:29.040><c> that</c>

01:30:29.189 --> 01:30:29.199 align:start position:0%
name for this function let's say that
 

01:30:29.199 --> 01:30:31.590 align:start position:0%
name for this function let's say that
it's<01:30:29.440><c> the</c><01:30:29.679><c> birthday</c><01:30:30.080><c> function</c><01:30:30.880><c> followed</c><01:30:31.199><c> by</c><01:30:31.440><c> a</c>

01:30:31.590 --> 01:30:31.600 align:start position:0%
it's the birthday function followed by a
 

01:30:31.600 --> 01:30:33.750 align:start position:0%
it's the birthday function followed by a
set<01:30:31.760><c> of</c><01:30:31.840><c> parentheses</c><01:30:32.880><c> and</c><01:30:32.960><c> then</c><01:30:33.199><c> a</c><01:30:33.440><c> set</c><01:30:33.600><c> of</c>

01:30:33.750 --> 01:30:33.760 align:start position:0%
set of parentheses and then a set of
 

01:30:33.760 --> 01:30:36.310 align:start position:0%
set of parentheses and then a set of
curly<01:30:34.080><c> braces</c><01:30:34.960><c> so</c><01:30:35.199><c> i'm</c><01:30:35.360><c> going</c><01:30:35.600><c> to</c><01:30:35.760><c> take</c><01:30:36.080><c> any</c>

01:30:36.310 --> 01:30:36.320 align:start position:0%
curly braces so i'm going to take any
 

01:30:36.320 --> 01:30:38.550 align:start position:0%
curly braces so i'm going to take any
code<01:30:36.639><c> i</c><01:30:36.719><c> would</c><01:30:36.800><c> like</c><01:30:36.960><c> to</c><01:30:37.120><c> repeat</c><01:30:37.920><c> and</c><01:30:38.159><c> place</c><01:30:38.480><c> it</c>

01:30:38.550 --> 01:30:38.560 align:start position:0%
code i would like to repeat and place it
 

01:30:38.560 --> 01:30:41.189 align:start position:0%
code i would like to repeat and place it
within<01:30:39.120><c> this</c><01:30:39.280><c> new</c><01:30:39.520><c> birthday</c><01:30:40.000><c> function</c><01:30:40.880><c> and</c><01:30:41.040><c> if</c>

01:30:41.189 --> 01:30:41.199 align:start position:0%
within this new birthday function and if
 

01:30:41.199 --> 01:30:43.510 align:start position:0%
within this new birthday function and if
i<01:30:41.360><c> need</c><01:30:41.600><c> to</c><01:30:41.920><c> invoke</c><01:30:42.320><c> this</c><01:30:42.560><c> function</c><01:30:43.199><c> all</c><01:30:43.360><c> i</c>

01:30:43.510 --> 01:30:43.520 align:start position:0%
i need to invoke this function all i
 

01:30:43.520 --> 01:30:45.110 align:start position:0%
i need to invoke this function all i
have<01:30:43.600><c> to</c><01:30:43.679><c> do</c><01:30:43.920><c> is</c><01:30:44.159><c> type</c><01:30:44.560><c> the</c><01:30:44.719><c> name</c><01:30:44.880><c> of</c><01:30:45.040><c> the</c>

01:30:45.110 --> 01:30:45.120 align:start position:0%
have to do is type the name of the
 

01:30:45.120 --> 01:30:47.110 align:start position:0%
have to do is type the name of the
function<01:30:45.840><c> followed</c><01:30:46.239><c> by</c><01:30:46.400><c> a</c><01:30:46.639><c> set</c><01:30:46.960><c> of</c>

01:30:47.110 --> 01:30:47.120 align:start position:0%
function followed by a set of
 

01:30:47.120 --> 01:30:48.870 align:start position:0%
function followed by a set of
parentheses<01:30:48.159><c> i</c><01:30:48.320><c> like</c><01:30:48.480><c> to</c><01:30:48.560><c> think</c><01:30:48.719><c> of</c><01:30:48.800><c> the</c>

01:30:48.870 --> 01:30:48.880 align:start position:0%
parentheses i like to think of the
 

01:30:48.880 --> 01:30:51.110 align:start position:0%
parentheses i like to think of the
parentheses<01:30:49.679><c> as</c><01:30:50.000><c> a</c><01:30:50.159><c> pair</c><01:30:50.400><c> of</c><01:30:50.480><c> telephones</c>

01:30:51.110 --> 01:30:51.120 align:start position:0%
parentheses as a pair of telephones
 

01:30:51.120 --> 01:30:53.030 align:start position:0%
parentheses as a pair of telephones
talking<01:30:51.360><c> to</c><01:30:51.520><c> each</c><01:30:51.679><c> other</c><01:30:52.159><c> that's</c><01:30:52.480><c> one</c><01:30:52.639><c> trick</c><01:30:52.960><c> i</c>

01:30:53.030 --> 01:30:53.040 align:start position:0%
talking to each other that's one trick i
 

01:30:53.040 --> 01:30:54.629 align:start position:0%
talking to each other that's one trick i
used<01:30:53.280><c> to</c><01:30:53.360><c> remember</c><01:30:53.760><c> that's</c><01:30:54.000><c> how</c><01:30:54.159><c> to</c><01:30:54.320><c> call</c><01:30:54.560><c> a</c>

01:30:54.629 --> 01:30:54.639 align:start position:0%
used to remember that's how to call a
 

01:30:54.639 --> 01:30:56.790 align:start position:0%
used to remember that's how to call a
function<01:30:55.280><c> so</c><01:30:55.600><c> follow</c><01:30:56.000><c> the</c><01:30:56.159><c> function</c><01:30:56.560><c> name</c>

01:30:56.790 --> 01:30:56.800 align:start position:0%
function so follow the function name
 

01:30:56.800 --> 01:30:58.790 align:start position:0%
function so follow the function name
with<01:30:57.040><c> the</c><01:30:57.120><c> set</c><01:30:57.280><c> of</c><01:30:57.360><c> parentheses</c><01:30:58.239><c> and</c><01:30:58.400><c> when</c><01:30:58.639><c> i</c>

01:30:58.790 --> 01:30:58.800 align:start position:0%
with the set of parentheses and when i
 

01:30:58.800 --> 01:31:00.790 align:start position:0%
with the set of parentheses and when i
invoke<01:30:59.199><c> this</c><01:30:59.440><c> function</c><01:30:59.840><c> once</c><01:31:00.400><c> we</c><01:31:00.560><c> will</c>

01:31:00.790 --> 01:31:00.800 align:start position:0%
invoke this function once we will
 

01:31:00.800 --> 01:31:03.350 align:start position:0%
invoke this function once we will
execute<01:31:01.360><c> any</c><01:31:01.600><c> code</c><01:31:02.000><c> within</c><01:31:02.480><c> this</c><01:31:02.639><c> function</c>

01:31:03.350 --> 01:31:03.360 align:start position:0%
execute any code within this function
 

01:31:03.360 --> 01:31:05.910 align:start position:0%
execute any code within this function
once<01:31:03.920><c> if</c><01:31:04.080><c> i</c><01:31:04.159><c> need</c><01:31:04.400><c> to</c><01:31:04.480><c> repeat</c><01:31:05.040><c> this</c><01:31:05.199><c> code</c><01:31:05.679><c> three</c>

01:31:05.910 --> 01:31:05.920 align:start position:0%
once if i need to repeat this code three
 

01:31:05.920 --> 01:31:07.669 align:start position:0%
once if i need to repeat this code three
times<01:31:06.400><c> i</c><01:31:06.480><c> will</c><01:31:06.719><c> just</c><01:31:06.960><c> have</c><01:31:07.120><c> to</c><01:31:07.280><c> call</c><01:31:07.520><c> this</c>

01:31:07.669 --> 01:31:07.679 align:start position:0%
times i will just have to call this
 

01:31:07.679 --> 01:31:10.390 align:start position:0%
times i will just have to call this
function<01:31:08.159><c> three</c><01:31:08.400><c> times</c>

01:31:10.390 --> 01:31:10.400 align:start position:0%
function three times
 

01:31:10.400 --> 01:31:12.390 align:start position:0%
function three times
we<01:31:10.560><c> are</c><01:31:10.719><c> calling</c><01:31:11.120><c> our</c><01:31:11.360><c> birthday</c><01:31:11.840><c> function</c>

01:31:12.390 --> 01:31:12.400 align:start position:0%
we are calling our birthday function
 

01:31:12.400 --> 01:31:14.149 align:start position:0%
we are calling our birthday function
three<01:31:12.719><c> times</c>

01:31:14.149 --> 01:31:14.159 align:start position:0%
three times
 

01:31:14.159 --> 01:31:15.990 align:start position:0%
three times
and<01:31:14.239><c> there</c><01:31:14.400><c> we</c><01:31:14.560><c> go</c><01:31:14.800><c> we</c><01:31:14.960><c> have</c><01:31:15.280><c> invoked</c><01:31:15.760><c> this</c>

01:31:15.990 --> 01:31:16.000 align:start position:0%
and there we go we have invoked this
 

01:31:16.000 --> 01:31:17.830 align:start position:0%
and there we go we have invoked this
birthday<01:31:16.400><c> function</c><01:31:16.880><c> three</c><01:31:17.199><c> times</c><01:31:17.600><c> and</c><01:31:17.679><c> we</c>

01:31:17.830 --> 01:31:17.840 align:start position:0%
birthday function three times and we
 

01:31:17.840 --> 01:31:19.750 align:start position:0%
birthday function three times and we
have<01:31:18.000><c> accomplished</c><01:31:18.560><c> our</c><01:31:18.800><c> goal</c><01:31:19.120><c> of</c><01:31:19.280><c> singing</c>

01:31:19.750 --> 01:31:19.760 align:start position:0%
have accomplished our goal of singing
 

01:31:19.760 --> 01:31:21.750 align:start position:0%
have accomplished our goal of singing
three<01:31:20.000><c> verses</c><01:31:20.400><c> of</c><01:31:20.480><c> happy</c><01:31:20.800><c> birthday</c><01:31:21.600><c> so</c>

01:31:21.750 --> 01:31:21.760 align:start position:0%
three verses of happy birthday so
 

01:31:21.760 --> 01:31:23.910 align:start position:0%
three verses of happy birthday so
basically<01:31:22.239><c> that's</c><01:31:22.560><c> all</c><01:31:22.800><c> what</c><01:31:22.960><c> a</c><01:31:23.040><c> function</c><01:31:23.520><c> is</c>

01:31:23.910 --> 01:31:23.920 align:start position:0%
basically that's all what a function is
 

01:31:23.920 --> 01:31:26.310 align:start position:0%
basically that's all what a function is
it's<01:31:24.320><c> some</c><01:31:24.719><c> subsection</c><01:31:25.360><c> of</c><01:31:25.520><c> code</c><01:31:25.920><c> that</c><01:31:26.159><c> is</c>

01:31:26.310 --> 01:31:26.320 align:start position:0%
it's some subsection of code that is
 

01:31:26.320 --> 01:31:28.390 align:start position:0%
it's some subsection of code that is
executed<01:31:26.960><c> whenever</c><01:31:27.280><c> you</c><01:31:27.440><c> invoke</c><01:31:27.840><c> it</c><01:31:28.080><c> also</c>

01:31:28.390 --> 01:31:28.400 align:start position:0%
executed whenever you invoke it also
 

01:31:28.400 --> 01:31:30.629 align:start position:0%
executed whenever you invoke it also
known<01:31:28.639><c> as</c><01:31:28.880><c> calling</c><01:31:29.199><c> a</c><01:31:29.360><c> function</c><01:31:29.840><c> a</c><01:31:30.080><c> benefit</c><01:31:30.480><c> to</c>

01:31:30.629 --> 01:31:30.639 align:start position:0%
known as calling a function a benefit to
 

01:31:30.639 --> 01:31:32.550 align:start position:0%
known as calling a function a benefit to
using<01:31:31.040><c> functions</c><01:31:31.679><c> is</c><01:31:31.920><c> that</c><01:31:32.159><c> if</c><01:31:32.239><c> you</c><01:31:32.400><c> think</c>

01:31:32.550 --> 01:31:32.560 align:start position:0%
using functions is that if you think
 

01:31:32.560 --> 01:31:34.310 align:start position:0%
using functions is that if you think
you're<01:31:32.800><c> going</c><01:31:32.960><c> to</c><01:31:33.120><c> use</c><01:31:33.360><c> some</c><01:31:33.600><c> code</c><01:31:33.920><c> more</c><01:31:34.080><c> than</c>

01:31:34.310 --> 01:31:34.320 align:start position:0%
you're going to use some code more than
 

01:31:34.320 --> 01:31:36.470 align:start position:0%
you're going to use some code more than
once<01:31:34.800><c> you</c><01:31:34.960><c> can</c><01:31:35.120><c> stick</c><01:31:35.360><c> it</c><01:31:35.440><c> within</c><01:31:35.760><c> a</c><01:31:35.840><c> function</c>

01:31:36.470 --> 01:31:36.480 align:start position:0%
once you can stick it within a function
 

01:31:36.480 --> 01:31:37.990 align:start position:0%
once you can stick it within a function
and<01:31:36.560><c> then</c><01:31:36.719><c> to</c><01:31:36.880><c> repeat</c><01:31:37.280><c> that</c><01:31:37.440><c> code</c><01:31:37.760><c> you</c><01:31:37.840><c> just</c>

01:31:37.990 --> 01:31:38.000 align:start position:0%
and then to repeat that code you just
 

01:31:38.000 --> 01:31:39.750 align:start position:0%
and then to repeat that code you just
call<01:31:38.159><c> the</c><01:31:38.320><c> function</c><01:31:38.800><c> as</c><01:31:38.960><c> many</c><01:31:39.199><c> times</c><01:31:39.520><c> as</c><01:31:39.679><c> you</c>

01:31:39.750 --> 01:31:39.760 align:start position:0%
call the function as many times as you
 

01:31:39.760 --> 01:31:41.990 align:start position:0%
call the function as many times as you
need<01:31:40.159><c> so</c><01:31:40.320><c> yeah</c><01:31:40.639><c> those</c><01:31:40.880><c> are</c><01:31:41.040><c> functions</c><01:31:41.679><c> if</c><01:31:41.840><c> you</c>

01:31:41.990 --> 01:31:42.000 align:start position:0%
need so yeah those are functions if you
 

01:31:42.000 --> 01:31:43.750 align:start position:0%
need so yeah those are functions if you
would<01:31:42.080><c> like</c><01:31:42.320><c> a</c><01:31:42.560><c> copy</c><01:31:42.880><c> of</c><01:31:42.960><c> this</c><01:31:43.120><c> code</c><01:31:43.440><c> i</c><01:31:43.600><c> will</c>

01:31:43.750 --> 01:31:43.760 align:start position:0%
would like a copy of this code i will
 

01:31:43.760 --> 01:31:45.430 align:start position:0%
would like a copy of this code i will
post<01:31:44.080><c> this</c><01:31:44.239><c> to</c><01:31:44.400><c> the</c><01:31:44.480><c> comments</c><01:31:44.880><c> section</c><01:31:45.280><c> down</c>

01:31:45.430 --> 01:31:45.440 align:start position:0%
post this to the comments section down
 

01:31:45.440 --> 01:31:47.270 align:start position:0%
post this to the comments section down
below<01:31:45.920><c> and</c><01:31:46.159><c> in</c><01:31:46.239><c> the</c><01:31:46.320><c> next</c><01:31:46.639><c> video</c><01:31:46.960><c> we</c><01:31:47.120><c> will</c>

01:31:47.270 --> 01:31:47.280 align:start position:0%
below and in the next video we will
 

01:31:47.280 --> 01:31:49.910 align:start position:0%
below and in the next video we will
discuss<01:31:47.840><c> arguments</c><01:31:48.400><c> and</c><01:31:48.639><c> parameters</c><01:31:49.440><c> so</c><01:31:49.600><c> yeah</c>

01:31:49.910 --> 01:31:49.920 align:start position:0%
discuss arguments and parameters so yeah
 

01:31:49.920 --> 01:31:55.350 align:start position:0%
discuss arguments and parameters so yeah
that's<01:31:50.159><c> the</c><01:31:50.320><c> basics</c><01:31:50.880><c> of</c><01:31:51.040><c> functions</c><01:31:51.760><c> in</c><01:31:52.000><c> c</c>

01:31:55.350 --> 01:31:55.360 align:start position:0%
 
 

01:31:55.360 --> 01:31:57.510 align:start position:0%
 
hey<01:31:55.600><c> yeah</c><01:31:55.920><c> what's</c><01:31:56.159><c> going</c><01:31:56.400><c> on</c><01:31:56.560><c> people</c><01:31:57.040><c> so</c><01:31:57.280><c> let's</c>

01:31:57.510 --> 01:31:57.520 align:start position:0%
hey yeah what's going on people so let's
 

01:31:57.520 --> 01:32:00.149 align:start position:0%
hey yeah what's going on people so let's
talk<01:31:57.840><c> about</c><01:31:58.159><c> arguments</c><01:31:58.880><c> and</c><01:31:59.120><c> parameters</c><01:32:00.000><c> i</c>

01:32:00.149 --> 01:32:00.159 align:start position:0%
talk about arguments and parameters i
 

01:32:00.159 --> 01:32:01.990 align:start position:0%
talk about arguments and parameters i
have<01:32:00.320><c> a</c><01:32:00.400><c> function</c><01:32:00.800><c> named</c><01:32:01.120><c> birthday</c><01:32:01.600><c> which</c><01:32:01.840><c> we</c>

01:32:01.990 --> 01:32:02.000 align:start position:0%
have a function named birthday which we
 

01:32:02.000 --> 01:32:04.070 align:start position:0%
have a function named birthday which we
discussed<01:32:02.480><c> in</c><01:32:02.639><c> the</c><01:32:02.880><c> previous</c><01:32:03.360><c> video</c><01:32:03.920><c> this</c>

01:32:04.070 --> 01:32:04.080 align:start position:0%
discussed in the previous video this
 

01:32:04.080 --> 01:32:06.390 align:start position:0%
discussed in the previous video this
will<01:32:04.320><c> print</c><01:32:04.800><c> two</c><01:32:05.040><c> lines</c><01:32:05.360><c> of</c><01:32:05.520><c> text</c><01:32:06.000><c> happy</c>

01:32:06.390 --> 01:32:06.400 align:start position:0%
will print two lines of text happy
 

01:32:06.400 --> 01:32:10.070 align:start position:0%
will print two lines of text happy
birthday<01:32:07.120><c> dear</c><01:32:07.520><c> x</c><01:32:08.080><c> you</c><01:32:08.400><c> are</c><01:32:08.800><c> y</c><01:32:09.120><c> years</c><01:32:09.520><c> old</c><01:32:09.920><c> what</c>

01:32:10.070 --> 01:32:10.080 align:start position:0%
birthday dear x you are y years old what
 

01:32:10.080 --> 01:32:12.550 align:start position:0%
birthday dear x you are y years old what
i<01:32:10.159><c> would</c><01:32:10.320><c> like</c><01:32:10.480><c> to</c><01:32:10.639><c> do</c><01:32:10.960><c> is</c><01:32:11.120><c> replace</c><01:32:11.679><c> x</c><01:32:12.080><c> with</c><01:32:12.320><c> a</c>

01:32:12.550 --> 01:32:12.560 align:start position:0%
i would like to do is replace x with a
 

01:32:12.560 --> 01:32:16.149 align:start position:0%
i would like to do is replace x with a
user's<01:32:13.120><c> name</c><01:32:13.520><c> and</c><01:32:13.840><c> y</c><01:32:14.400><c> with</c><01:32:14.719><c> a</c><01:32:14.960><c> user's</c><01:32:15.520><c> age</c><01:32:15.920><c> so</c>

01:32:16.149 --> 01:32:16.159 align:start position:0%
user's name and y with a user's age so
 

01:32:16.159 --> 01:32:17.830 align:start position:0%
user's name and y with a user's age so
here's<01:32:16.400><c> how</c><01:32:16.560><c> we</c><01:32:16.639><c> can</c><01:32:16.719><c> write</c><01:32:17.040><c> a</c><01:32:17.120><c> program</c><01:32:17.600><c> like</c>

01:32:17.830 --> 01:32:17.840 align:start position:0%
here's how we can write a program like
 

01:32:17.840 --> 01:32:20.310 align:start position:0%
here's how we can write a program like
that<01:32:18.400><c> so</c><01:32:18.560><c> let's</c><01:32:18.800><c> begin</c><01:32:19.360><c> by</c><01:32:19.600><c> within</c><01:32:19.920><c> the</c><01:32:20.080><c> main</c>

01:32:20.310 --> 01:32:20.320 align:start position:0%
that so let's begin by within the main
 

01:32:20.320 --> 01:32:22.870 align:start position:0%
that so let's begin by within the main
function<01:32:20.880><c> declaring</c><01:32:21.520><c> two</c><01:32:21.679><c> variables</c><01:32:22.719><c> a</c>

01:32:22.870 --> 01:32:22.880 align:start position:0%
function declaring two variables a
 

01:32:22.880 --> 01:32:25.350 align:start position:0%
function declaring two variables a
character<01:32:23.360><c> array</c><01:32:23.920><c> named</c><01:32:24.320><c> name</c>

01:32:25.350 --> 01:32:25.360 align:start position:0%
character array named name
 

01:32:25.360 --> 01:32:27.430 align:start position:0%
character array named name
and<01:32:25.600><c> assign</c><01:32:25.840><c> this</c><01:32:26.080><c> your</c><01:32:26.159><c> first</c><01:32:26.480><c> name</c><01:32:27.040><c> and</c><01:32:27.280><c> an</c>

01:32:27.430 --> 01:32:27.440 align:start position:0%
and assign this your first name and an
 

01:32:27.440 --> 01:32:29.830 align:start position:0%
and assign this your first name and an
age<01:32:28.080><c> and</c><01:32:28.159><c> this</c><01:32:28.320><c> will</c><01:32:28.480><c> be</c><01:32:28.719><c> of</c><01:32:28.880><c> the</c><01:32:29.120><c> int</c><01:32:29.440><c> data</c>

01:32:29.830 --> 01:32:29.840 align:start position:0%
age and this will be of the int data
 

01:32:29.840 --> 01:32:32.550 align:start position:0%
age and this will be of the int data
type<01:32:30.400><c> and</c><01:32:30.800><c> let's</c><01:32:31.040><c> say</c><01:32:31.280><c> that</c><01:32:31.520><c> this</c><01:32:31.679><c> will</c><01:32:31.920><c> be</c><01:32:32.159><c> age</c>

01:32:32.550 --> 01:32:32.560 align:start position:0%
type and let's say that this will be age
 

01:32:32.560 --> 01:32:34.390 align:start position:0%
type and let's say that this will be age
and<01:32:32.800><c> make</c><01:32:33.040><c> up</c><01:32:33.120><c> some</c><01:32:33.360><c> age</c><01:32:33.760><c> i</c><01:32:33.920><c> like</c><01:32:34.080><c> to</c><01:32:34.239><c> think</c>

01:32:34.390 --> 01:32:34.400 align:start position:0%
and make up some age i like to think
 

01:32:34.400 --> 01:32:36.790 align:start position:0%
and make up some age i like to think
that<01:32:34.560><c> i'm</c><01:32:34.719><c> still</c><01:32:34.960><c> 21</c><01:32:35.360><c> years</c><01:32:35.600><c> old</c><01:32:35.920><c> okay</c><01:32:36.159><c> so</c><01:32:36.400><c> if</c><01:32:36.639><c> i</c>

01:32:36.790 --> 01:32:36.800 align:start position:0%
that i'm still 21 years old okay so if i
 

01:32:36.800 --> 01:32:39.430 align:start position:0%
that i'm still 21 years old okay so if i
try<01:32:37.120><c> and</c><01:32:37.280><c> display</c><01:32:37.679><c> a</c><01:32:37.840><c> name</c><01:32:38.239><c> and</c><01:32:38.480><c> age</c><01:32:38.960><c> you</c><01:32:39.199><c> think</c>

01:32:39.430 --> 01:32:39.440 align:start position:0%
try and display a name and age you think
 

01:32:39.440 --> 01:32:41.510 align:start position:0%
try and display a name and age you think
this<01:32:39.600><c> would</c><01:32:39.840><c> work</c><01:32:40.159><c> right</c><01:32:40.800><c> so</c><01:32:41.040><c> i'm</c><01:32:41.199><c> going</c><01:32:41.360><c> to</c>

01:32:41.510 --> 01:32:41.520 align:start position:0%
this would work right so i'm going to
 

01:32:41.520 --> 01:32:44.790 align:start position:0%
this would work right so i'm going to
use<01:32:41.760><c> a</c><01:32:41.920><c> format</c><01:32:42.320><c> specifier</c><01:32:43.440><c> then</c><01:32:43.760><c> s</c><01:32:44.080><c> to</c><01:32:44.320><c> display</c>

01:32:44.790 --> 01:32:44.800 align:start position:0%
use a format specifier then s to display
 

01:32:44.800 --> 01:32:47.430 align:start position:0%
use a format specifier then s to display
a<01:32:44.960><c> string</c><01:32:45.600><c> and</c><01:32:45.840><c> then</c><01:32:46.080><c> i</c><01:32:46.239><c> will</c><01:32:46.400><c> display</c><01:32:47.120><c> our</c>

01:32:47.430 --> 01:32:47.440 align:start position:0%
a string and then i will display our
 

01:32:47.440 --> 01:32:50.229 align:start position:0%
a string and then i will display our
name<01:32:47.679><c> variable</c><01:32:48.400><c> and</c><01:32:48.560><c> with</c><01:32:48.880><c> y</c><01:32:49.360><c> let's</c><01:32:49.679><c> display</c>

01:32:50.229 --> 01:32:50.239 align:start position:0%
name variable and with y let's display
 

01:32:50.239 --> 01:32:52.950 align:start position:0%
name variable and with y let's display
our<01:32:50.480><c> age</c><01:32:50.960><c> so</c><01:32:51.120><c> let's</c><01:32:51.440><c> use</c><01:32:51.840><c> d</c><01:32:52.159><c> for</c><01:32:52.400><c> our</c><01:32:52.480><c> format</c>

01:32:52.950 --> 01:32:52.960 align:start position:0%
our age so let's use d for our format
 

01:32:52.960 --> 01:32:55.189 align:start position:0%
our age so let's use d for our format
specifier<01:32:53.600><c> to</c><01:32:53.760><c> display</c><01:32:54.239><c> an</c><01:32:54.400><c> integer</c><01:32:54.880><c> and</c><01:32:55.040><c> we</c>

01:32:55.189 --> 01:32:55.199 align:start position:0%
specifier to display an integer and we
 

01:32:55.199 --> 01:32:57.510 align:start position:0%
specifier to display an integer and we
will<01:32:55.440><c> display</c><01:32:56.000><c> age</c><01:32:56.480><c> now</c><01:32:56.719><c> here's</c><01:32:56.960><c> the</c><01:32:57.120><c> problem</c>

01:32:57.510 --> 01:32:57.520 align:start position:0%
will display age now here's the problem
 

01:32:57.520 --> 01:32:58.790 align:start position:0%
will display age now here's the problem
you<01:32:57.679><c> can</c><01:32:57.760><c> see</c><01:32:57.920><c> that</c><01:32:58.080><c> we</c><01:32:58.239><c> have</c><01:32:58.320><c> some</c><01:32:58.480><c> red</c>

01:32:58.790 --> 01:32:58.800 align:start position:0%
you can see that we have some red
 

01:32:58.800 --> 01:33:01.750 align:start position:0%
you can see that we have some red
underlines<01:32:59.679><c> name</c><01:33:00.159><c> is</c><01:33:00.320><c> undeclared</c><01:33:01.040><c> as</c><01:33:01.280><c> well</c><01:33:01.520><c> as</c>

01:33:01.750 --> 01:33:01.760 align:start position:0%
underlines name is undeclared as well as
 

01:33:01.760 --> 01:33:04.470 align:start position:0%
underlines name is undeclared as well as
age<01:33:02.320><c> here's</c><01:33:02.560><c> the</c><01:33:02.719><c> deal</c><01:33:03.199><c> functions</c><01:33:03.920><c> can't</c><01:33:04.239><c> see</c>

01:33:04.470 --> 01:33:04.480 align:start position:0%
age here's the deal functions can't see
 

01:33:04.480 --> 01:33:07.110 align:start position:0%
age here's the deal functions can't see
inside<01:33:04.880><c> of</c><01:33:05.040><c> other</c><01:33:05.280><c> functions</c><01:33:06.239><c> our</c><01:33:06.560><c> birthday</c>

01:33:07.110 --> 01:33:07.120 align:start position:0%
inside of other functions our birthday
 

01:33:07.120 --> 01:33:10.149 align:start position:0%
inside of other functions our birthday
function<01:33:07.760><c> is</c><01:33:08.000><c> unaware</c><01:33:08.639><c> of</c><01:33:08.800><c> our</c><01:33:09.040><c> name</c><01:33:09.520><c> and</c><01:33:09.760><c> age</c>

01:33:10.149 --> 01:33:10.159 align:start position:0%
function is unaware of our name and age
 

01:33:10.159 --> 01:33:12.629 align:start position:0%
function is unaware of our name and age
variables<01:33:11.199><c> one</c><01:33:11.440><c> way</c><01:33:11.600><c> in</c><01:33:11.679><c> which</c><01:33:11.920><c> we</c><01:33:12.080><c> can</c><01:33:12.239><c> make</c>

01:33:12.629 --> 01:33:12.639 align:start position:0%
variables one way in which we can make
 

01:33:12.639 --> 01:33:14.950 align:start position:0%
variables one way in which we can make
our<01:33:12.800><c> birthday</c><01:33:13.280><c> function</c><01:33:13.840><c> aware</c><01:33:14.159><c> of</c><01:33:14.320><c> these</c><01:33:14.800><c> is</c>

01:33:14.950 --> 01:33:14.960 align:start position:0%
our birthday function aware of these is
 

01:33:14.960 --> 01:33:17.430 align:start position:0%
our birthday function aware of these is
to<01:33:15.120><c> pass</c><01:33:15.440><c> them</c><01:33:15.760><c> as</c><01:33:16.000><c> arguments</c><01:33:16.560><c> when</c><01:33:16.800><c> we</c><01:33:16.960><c> invoke</c>

01:33:17.430 --> 01:33:17.440 align:start position:0%
to pass them as arguments when we invoke
 

01:33:17.440 --> 01:33:19.430 align:start position:0%
to pass them as arguments when we invoke
the<01:33:17.679><c> birthday</c><01:33:18.159><c> function</c><01:33:18.719><c> so</c><01:33:18.960><c> based</c><01:33:19.199><c> on</c><01:33:19.360><c> the</c>

01:33:19.430 --> 01:33:19.440 align:start position:0%
the birthday function so based on the
 

01:33:19.440 --> 01:33:21.669 align:start position:0%
the birthday function so based on the
last<01:33:19.760><c> topic</c><01:33:20.159><c> on</c><01:33:20.400><c> functions</c><01:33:20.880><c> i</c><01:33:21.040><c> mentioned</c><01:33:21.440><c> that</c>

01:33:21.669 --> 01:33:21.679 align:start position:0%
last topic on functions i mentioned that
 

01:33:21.679 --> 01:33:23.750 align:start position:0%
last topic on functions i mentioned that
when<01:33:21.920><c> we</c><01:33:22.080><c> call</c><01:33:22.320><c> a</c><01:33:22.400><c> function</c><01:33:23.040><c> we</c><01:33:23.280><c> type</c><01:33:23.600><c> the</c>

01:33:23.750 --> 01:33:23.760 align:start position:0%
when we call a function we type the
 

01:33:23.760 --> 01:33:25.990 align:start position:0%
when we call a function we type the
function's<01:33:24.159><c> name</c><01:33:24.560><c> followed</c><01:33:24.880><c> by</c><01:33:25.199><c> a</c><01:33:25.440><c> set</c><01:33:25.760><c> of</c>

01:33:25.990 --> 01:33:26.000 align:start position:0%
function's name followed by a set of
 

01:33:26.000 --> 01:33:27.990 align:start position:0%
function's name followed by a set of
parentheses<01:33:26.880><c> i</c><01:33:26.960><c> like</c><01:33:27.120><c> to</c><01:33:27.280><c> imagine</c><01:33:27.679><c> the</c><01:33:27.760><c> set</c><01:33:27.920><c> of</c>

01:33:27.990 --> 01:33:28.000 align:start position:0%
parentheses i like to imagine the set of
 

01:33:28.000 --> 01:33:30.390 align:start position:0%
parentheses i like to imagine the set of
parentheses<01:33:28.800><c> as</c><01:33:29.040><c> a</c><01:33:29.120><c> pair</c><01:33:29.360><c> of</c><01:33:29.440><c> telephones</c><01:33:30.239><c> and</c>

01:33:30.390 --> 01:33:30.400 align:start position:0%
parentheses as a pair of telephones and
 

01:33:30.400 --> 01:33:32.229 align:start position:0%
parentheses as a pair of telephones and
these<01:33:30.639><c> two</c><01:33:30.800><c> functions</c><01:33:31.360><c> are</c><01:33:31.600><c> talking</c><01:33:31.840><c> to</c><01:33:32.080><c> each</c>

01:33:32.229 --> 01:33:32.239 align:start position:0%
these two functions are talking to each
 

01:33:32.239 --> 01:33:34.470 align:start position:0%
these two functions are talking to each
other<01:33:32.719><c> our</c><01:33:33.120><c> main</c><01:33:33.360><c> function</c><01:33:33.920><c> needs</c><01:33:34.159><c> to</c><01:33:34.239><c> make</c>

01:33:34.470 --> 01:33:34.480 align:start position:0%
other our main function needs to make
 

01:33:34.480 --> 01:33:36.870 align:start position:0%
other our main function needs to make
our<01:33:34.719><c> birthday</c><01:33:35.199><c> function</c><01:33:35.679><c> aware</c><01:33:36.159><c> of</c><01:33:36.320><c> our</c><01:33:36.560><c> name</c>

01:33:36.870 --> 01:33:36.880 align:start position:0%
our birthday function aware of our name
 

01:33:36.880 --> 01:33:39.350 align:start position:0%
our birthday function aware of our name
and<01:33:37.120><c> age</c><01:33:37.440><c> variables</c><01:33:38.239><c> so</c><01:33:38.480><c> what</c><01:33:38.639><c> we</c><01:33:38.719><c> can</c><01:33:38.880><c> do</c><01:33:39.120><c> is</c>

01:33:39.350 --> 01:33:39.360 align:start position:0%
and age variables so what we can do is
 

01:33:39.360 --> 01:33:42.310 align:start position:0%
and age variables so what we can do is
pass<01:33:39.920><c> these</c><01:33:40.159><c> variables</c><01:33:40.960><c> as</c><01:33:41.199><c> arguments</c><01:33:42.080><c> so</c>

01:33:42.310 --> 01:33:42.320 align:start position:0%
pass these variables as arguments so
 

01:33:42.320 --> 01:33:44.790 align:start position:0%
pass these variables as arguments so
between<01:33:42.880><c> the</c><01:33:43.040><c> parentheses</c><01:33:44.000><c> we</c><01:33:44.159><c> can</c><01:33:44.400><c> add</c><01:33:44.639><c> our</c>

01:33:44.790 --> 01:33:44.800 align:start position:0%
between the parentheses we can add our
 

01:33:44.800 --> 01:33:47.590 align:start position:0%
between the parentheses we can add our
variables<01:33:45.520><c> separated</c><01:33:46.159><c> with</c><01:33:46.480><c> a</c><01:33:46.639><c> comma</c><01:33:47.440><c> so</c>

01:33:47.590 --> 01:33:47.600 align:start position:0%
variables separated with a comma so
 

01:33:47.600 --> 01:33:51.110 align:start position:0%
variables separated with a comma so
let's<01:33:47.920><c> pass</c><01:33:48.320><c> name</c><01:33:49.040><c> and</c><01:33:49.360><c> age</c><01:33:50.080><c> so</c><01:33:50.480><c> anything</c><01:33:50.960><c> that</c>

01:33:51.110 --> 01:33:51.120 align:start position:0%
let's pass name and age so anything that
 

01:33:51.120 --> 01:33:53.430 align:start position:0%
let's pass name and age so anything that
you're<01:33:51.360><c> passing</c><01:33:51.760><c> to</c><01:33:51.920><c> a</c><01:33:52.080><c> function</c><01:33:52.800><c> are</c><01:33:53.040><c> known</c>

01:33:53.430 --> 01:33:53.440 align:start position:0%
you're passing to a function are known
 

01:33:53.440 --> 01:33:56.470 align:start position:0%
you're passing to a function are known
as<01:33:53.920><c> arguments</c><01:33:54.639><c> but</c><01:33:54.880><c> we</c><01:33:55.040><c> need</c><01:33:55.280><c> a</c><01:33:55.520><c> matching</c><01:33:56.080><c> set</c>

01:33:56.470 --> 01:33:56.480 align:start position:0%
as arguments but we need a matching set
 

01:33:56.480 --> 01:33:58.790 align:start position:0%
as arguments but we need a matching set
of<01:33:56.639><c> parameters</c><01:33:57.440><c> within</c><01:33:58.000><c> the</c><01:33:58.239><c> function</c>

01:33:58.790 --> 01:33:58.800 align:start position:0%
of parameters within the function
 

01:33:58.800 --> 01:34:01.110 align:start position:0%
of parameters within the function
declaration<01:33:59.920><c> so</c><01:34:00.159><c> between</c><01:34:00.719><c> this</c><01:34:00.880><c> set</c><01:34:01.040><c> of</c>

01:34:01.110 --> 01:34:01.120 align:start position:0%
declaration so between this set of
 

01:34:01.120 --> 01:34:04.070 align:start position:0%
declaration so between this set of
parentheses<01:34:02.080><c> we</c><01:34:02.239><c> will</c><01:34:02.480><c> list</c><01:34:03.040><c> our</c><01:34:03.280><c> name</c><01:34:03.840><c> and</c>

01:34:04.070 --> 01:34:04.080 align:start position:0%
parentheses we will list our name and
 

01:34:04.080 --> 01:34:06.629 align:start position:0%
parentheses we will list our name and
age<01:34:04.480><c> variables</c><01:34:05.199><c> but</c><01:34:05.520><c> precede</c><01:34:06.080><c> each</c><01:34:06.320><c> with</c><01:34:06.560><c> the</c>

01:34:06.629 --> 01:34:06.639 align:start position:0%
age variables but precede each with the
 

01:34:06.639 --> 01:34:08.709 align:start position:0%
age variables but precede each with the
data<01:34:06.960><c> type</c><01:34:07.199><c> that</c><01:34:07.360><c> we're</c><01:34:07.520><c> working</c><01:34:07.840><c> with</c><01:34:08.400><c> so</c><01:34:08.560><c> we</c>

01:34:08.709 --> 01:34:08.719 align:start position:0%
data type that we're working with so we
 

01:34:08.719 --> 01:34:11.990 align:start position:0%
data type that we're working with so we
have<01:34:09.040><c> name</c><01:34:09.679><c> and</c><01:34:10.000><c> age</c><01:34:10.800><c> so</c><01:34:11.040><c> age</c>

01:34:11.990 --> 01:34:12.000 align:start position:0%
have name and age so age
 

01:34:12.000 --> 01:34:14.790 align:start position:0%
have name and age so age
is<01:34:12.080><c> an</c><01:34:12.239><c> integer</c><01:34:12.960><c> so</c><01:34:13.199><c> precede</c><01:34:14.000><c> the</c><01:34:14.320><c> variable</c>

01:34:14.790 --> 01:34:14.800 align:start position:0%
is an integer so precede the variable
 

01:34:14.800 --> 01:34:18.149 align:start position:0%
is an integer so precede the variable
name<01:34:15.280><c> with</c><01:34:15.600><c> int</c><01:34:16.400><c> and</c><01:34:16.800><c> name</c><01:34:17.280><c> is</c><01:34:17.440><c> a</c><01:34:17.600><c> character</c>

01:34:18.149 --> 01:34:18.159 align:start position:0%
name with int and name is a character
 

01:34:18.159 --> 01:34:20.470 align:start position:0%
name with int and name is a character
array<01:34:18.560><c> so</c><01:34:18.719><c> we're</c><01:34:18.880><c> going</c><01:34:19.120><c> to</c><01:34:19.360><c> precede</c><01:34:20.080><c> name</c>

01:34:20.470 --> 01:34:20.480 align:start position:0%
array so we're going to precede name
 

01:34:20.480 --> 01:34:21.990 align:start position:0%
array so we're going to precede name
with<01:34:20.800><c> char</c>

01:34:21.990 --> 01:34:22.000 align:start position:0%
with char
 

01:34:22.000 --> 01:34:23.990 align:start position:0%
with char
and<01:34:22.159><c> then</c><01:34:22.400><c> add</c><01:34:22.639><c> a</c><01:34:22.800><c> set</c><01:34:23.120><c> of</c><01:34:23.280><c> straight</c><01:34:23.600><c> brackets</c>

01:34:23.990 --> 01:34:24.000 align:start position:0%
and then add a set of straight brackets
 

01:34:24.000 --> 01:34:26.870 align:start position:0%
and then add a set of straight brackets
after<01:34:24.800><c> so</c><01:34:25.040><c> these</c><01:34:25.280><c> are</c><01:34:25.440><c> parameters</c><01:34:26.159><c> parameters</c>

01:34:26.870 --> 01:34:26.880 align:start position:0%
after so these are parameters parameters
 

01:34:26.880 --> 01:34:28.870 align:start position:0%
after so these are parameters parameters
are<01:34:27.040><c> what</c><01:34:27.360><c> this</c><01:34:27.679><c> function</c><01:34:28.080><c> needs</c><01:34:28.400><c> in</c><01:34:28.560><c> order</c><01:34:28.800><c> to</c>

01:34:28.870 --> 01:34:28.880 align:start position:0%
are what this function needs in order to
 

01:34:28.880 --> 01:34:32.229 align:start position:0%
are what this function needs in order to
be<01:34:29.120><c> executed</c><01:34:30.000><c> so</c><01:34:30.239><c> this</c><01:34:30.480><c> does</c><01:34:30.840><c> work</c><01:34:31.920><c> happy</c>

01:34:32.229 --> 01:34:32.239 align:start position:0%
be executed so this does work happy
 

01:34:32.239 --> 01:34:35.189 align:start position:0%
be executed so this does work happy
birthday<01:34:32.800><c> dear</c><01:34:33.040><c> bro</c><01:34:33.440><c> you</c><01:34:33.679><c> are</c><01:34:33.920><c> 21</c><01:34:34.400><c> years</c><01:34:34.719><c> old</c>

01:34:35.189 --> 01:34:35.199 align:start position:0%
birthday dear bro you are 21 years old
 

01:34:35.199 --> 01:34:37.510 align:start position:0%
birthday dear bro you are 21 years old
so<01:34:35.360><c> with</c><01:34:35.600><c> parameter</c><01:34:36.159><c> setup</c><01:34:36.639><c> you</c><01:34:36.800><c> can</c><01:34:37.040><c> only</c>

01:34:37.510 --> 01:34:37.520 align:start position:0%
so with parameter setup you can only
 

01:34:37.520 --> 01:34:39.750 align:start position:0%
so with parameter setup you can only
call<01:34:37.920><c> this</c><01:34:38.159><c> function</c><01:34:38.719><c> if</c><01:34:38.880><c> you</c><01:34:39.040><c> pass</c><01:34:39.600><c> a</c>

01:34:39.750 --> 01:34:39.760 align:start position:0%
call this function if you pass a
 

01:34:39.760 --> 01:34:42.629 align:start position:0%
call this function if you pass a
character<01:34:40.239><c> array</c><01:34:40.880><c> as</c><01:34:41.040><c> well</c><01:34:41.360><c> as</c><01:34:41.520><c> an</c><01:34:41.679><c> integer</c><01:34:42.400><c> if</c>

01:34:42.629 --> 01:34:42.639 align:start position:0%
character array as well as an integer if
 

01:34:42.639 --> 01:34:44.629 align:start position:0%
character array as well as an integer if
i<01:34:42.719><c> were</c><01:34:42.880><c> to</c><01:34:43.040><c> remove</c><01:34:43.600><c> these</c><01:34:43.840><c> arguments</c><01:34:44.320><c> we</c><01:34:44.480><c> can</c>

01:34:44.629 --> 01:34:44.639 align:start position:0%
i were to remove these arguments we can
 

01:34:44.639 --> 01:34:47.590 align:start position:0%
i were to remove these arguments we can
no<01:34:44.800><c> longer</c><01:34:45.199><c> call</c><01:34:45.440><c> this</c><01:34:45.679><c> birthday</c><01:34:46.159><c> function</c>

01:34:47.590 --> 01:34:47.600 align:start position:0%
no longer call this birthday function
 

01:34:47.600 --> 01:34:50.149 align:start position:0%
no longer call this birthday function
error<01:34:48.159><c> too</c><01:34:48.400><c> few</c><01:34:48.719><c> arguments</c><01:34:49.280><c> to</c><01:34:49.520><c> function</c>

01:34:50.149 --> 01:34:50.159 align:start position:0%
error too few arguments to function
 

01:34:50.159 --> 01:34:52.390 align:start position:0%
error too few arguments to function
birthday<01:34:50.800><c> so</c><01:34:50.960><c> when</c><01:34:51.119><c> you</c><01:34:51.280><c> call</c><01:34:51.520><c> a</c><01:34:51.600><c> function</c><01:34:52.239><c> you</c>

01:34:52.390 --> 01:34:52.400 align:start position:0%
birthday so when you call a function you
 

01:34:52.400 --> 01:34:54.870 align:start position:0%
birthday so when you call a function you
can<01:34:52.560><c> pass</c><01:34:53.040><c> some</c><01:34:53.360><c> arguments</c><01:34:54.080><c> but</c><01:34:54.239><c> you</c><01:34:54.400><c> need</c><01:34:54.639><c> a</c>

01:34:54.870 --> 01:34:54.880 align:start position:0%
can pass some arguments but you need a
 

01:34:54.880 --> 01:34:57.189 align:start position:0%
can pass some arguments but you need a
matching<01:34:55.360><c> set</c><01:34:55.600><c> of</c><01:34:55.760><c> parameters</c><01:34:56.639><c> and</c><01:34:56.719><c> the</c><01:34:56.880><c> names</c>

01:34:57.189 --> 01:34:57.199 align:start position:0%
matching set of parameters and the names
 

01:34:57.199 --> 01:34:59.109 align:start position:0%
matching set of parameters and the names
of<01:34:57.280><c> these</c><01:34:57.440><c> parameters</c><01:34:58.159><c> don't</c><01:34:58.400><c> necessarily</c>

01:34:59.109 --> 01:34:59.119 align:start position:0%
of these parameters don't necessarily
 

01:34:59.119 --> 01:35:01.109 align:start position:0%
of these parameters don't necessarily
have<01:34:59.280><c> to</c><01:34:59.440><c> be</c><01:34:59.520><c> the</c><01:34:59.679><c> same</c><01:35:00.159><c> what's</c><01:35:00.480><c> important</c><01:35:00.960><c> is</c>

01:35:01.109 --> 01:35:01.119 align:start position:0%
have to be the same what's important is
 

01:35:01.119 --> 01:35:03.510 align:start position:0%
have to be the same what's important is
the<01:35:01.360><c> order</c><01:35:02.000><c> of</c><01:35:02.159><c> the</c><01:35:02.320><c> arguments</c><01:35:02.880><c> and</c><01:35:03.040><c> the</c><01:35:03.199><c> data</c>

01:35:03.510 --> 01:35:03.520 align:start position:0%
the order of the arguments and the data
 

01:35:03.520 --> 01:35:07.109 align:start position:0%
the order of the arguments and the data
type<01:35:04.000><c> so</c><01:35:04.159><c> let's</c><01:35:04.400><c> say</c><01:35:04.639><c> name</c><01:35:05.040><c> is</c><01:35:05.360><c> x</c><01:35:05.760><c> and</c><01:35:06.000><c> age</c><01:35:06.320><c> is</c><01:35:06.639><c> y</c>

01:35:07.109 --> 01:35:07.119 align:start position:0%
type so let's say name is x and age is y
 

01:35:07.119 --> 01:35:10.229 align:start position:0%
type so let's say name is x and age is y
so<01:35:07.280><c> let's</c><01:35:07.520><c> replace</c><01:35:08.000><c> that</c><01:35:08.239><c> here</c><01:35:08.560><c> as</c><01:35:08.639><c> well</c>

01:35:10.229 --> 01:35:10.239 align:start position:0%
so let's replace that here as well
 

01:35:10.239 --> 01:35:12.229 align:start position:0%
so let's replace that here as well
and<01:35:10.400><c> that</c><01:35:10.560><c> would</c><01:35:10.719><c> work</c><01:35:10.960><c> too</c><01:35:11.440><c> so</c><01:35:11.600><c> yeah</c><01:35:11.920><c> those</c>

01:35:12.229 --> 01:35:12.239 align:start position:0%
and that would work too so yeah those
 

01:35:12.239 --> 01:35:14.950 align:start position:0%
and that would work too so yeah those
are<01:35:12.480><c> arguments</c><01:35:13.119><c> and</c><01:35:13.360><c> parameters</c><01:35:14.320><c> arguments</c>

01:35:14.950 --> 01:35:14.960 align:start position:0%
are arguments and parameters arguments
 

01:35:14.960 --> 01:35:16.870 align:start position:0%
are arguments and parameters arguments
are<01:35:15.119><c> what</c><01:35:15.280><c> you're</c><01:35:15.520><c> sending</c><01:35:15.920><c> a</c><01:35:16.000><c> function</c>

01:35:16.870 --> 01:35:16.880 align:start position:0%
are what you're sending a function
 

01:35:16.880 --> 01:35:19.350 align:start position:0%
are what you're sending a function
parameters<01:35:17.600><c> are</c><01:35:17.760><c> what</c><01:35:18.000><c> a</c><01:35:18.239><c> function</c><01:35:18.800><c> expects</c>

01:35:19.350 --> 01:35:19.360 align:start position:0%
parameters are what a function expects
 

01:35:19.360 --> 01:35:21.350 align:start position:0%
parameters are what a function expects
when<01:35:19.520><c> it's</c><01:35:19.760><c> invoked</c><01:35:20.400><c> and</c><01:35:20.560><c> the</c><01:35:20.639><c> benefits</c><01:35:21.199><c> of</c>

01:35:21.350 --> 01:35:21.360 align:start position:0%
when it's invoked and the benefits of
 

01:35:21.360 --> 01:35:24.149 align:start position:0%
when it's invoked and the benefits of
arguments<01:35:21.920><c> and</c><01:35:22.159><c> parameters</c><01:35:23.280><c> is</c><01:35:23.520><c> that</c><01:35:23.840><c> these</c>

01:35:24.149 --> 01:35:24.159 align:start position:0%
arguments and parameters is that these
 

01:35:24.159 --> 01:35:26.310 align:start position:0%
arguments and parameters is that these
functions<01:35:24.639><c> can</c><01:35:24.880><c> talk</c><01:35:25.040><c> to</c><01:35:25.280><c> each</c><01:35:25.440><c> other</c><01:35:25.920><c> because</c>

01:35:26.310 --> 01:35:26.320 align:start position:0%
functions can talk to each other because
 

01:35:26.320 --> 01:35:27.990 align:start position:0%
functions can talk to each other because
functions<01:35:26.800><c> can't</c><01:35:27.119><c> see</c><01:35:27.360><c> inside</c><01:35:27.679><c> of</c><01:35:27.760><c> one</c>

01:35:27.990 --> 01:35:28.000 align:start position:0%
functions can't see inside of one
 

01:35:28.000 --> 01:35:30.070 align:start position:0%
functions can't see inside of one
another<01:35:28.560><c> so</c><01:35:28.800><c> if</c><01:35:28.960><c> you</c><01:35:29.040><c> have</c><01:35:29.360><c> some</c><01:35:29.600><c> variables</c>

01:35:30.070 --> 01:35:30.080 align:start position:0%
another so if you have some variables
 

01:35:30.080 --> 01:35:32.149 align:start position:0%
another so if you have some variables
within<01:35:30.480><c> a</c><01:35:30.560><c> function</c><01:35:31.199><c> you</c><01:35:31.360><c> can</c><01:35:31.520><c> pass</c><01:35:31.840><c> them</c><01:35:32.000><c> to</c>

01:35:32.149 --> 01:35:32.159 align:start position:0%
within a function you can pass them to
 

01:35:32.159 --> 01:35:34.390 align:start position:0%
within a function you can pass them to
another<01:35:32.480><c> function</c><01:35:33.040><c> as</c><01:35:33.280><c> arguments</c><01:35:33.920><c> so</c><01:35:34.159><c> yeah</c>

01:35:34.390 --> 01:35:34.400 align:start position:0%
another function as arguments so yeah
 

01:35:34.400 --> 01:35:36.709 align:start position:0%
another function as arguments so yeah
those<01:35:34.719><c> are</c><01:35:35.040><c> arguments</c><01:35:35.679><c> and</c><01:35:35.920><c> parameters</c><01:35:36.639><c> if</c>

01:35:36.709 --> 01:35:36.719 align:start position:0%
those are arguments and parameters if
 

01:35:36.719 --> 01:35:38.390 align:start position:0%
those are arguments and parameters if
you<01:35:36.880><c> would</c><01:35:36.960><c> like</c><01:35:37.280><c> a</c><01:35:37.440><c> copy</c><01:35:37.760><c> of</c><01:35:37.840><c> this</c><01:35:38.000><c> code</c><01:35:38.239><c> i</c>

01:35:38.390 --> 01:35:38.400 align:start position:0%
you would like a copy of this code i
 

01:35:38.400 --> 01:35:40.149 align:start position:0%
you would like a copy of this code i
will<01:35:38.639><c> post</c><01:35:38.880><c> this</c><01:35:39.119><c> in</c><01:35:39.199><c> the</c><01:35:39.360><c> comments</c><01:35:39.760><c> section</c>

01:35:40.149 --> 01:35:40.159 align:start position:0%
will post this in the comments section
 

01:35:40.159 --> 01:35:42.550 align:start position:0%
will post this in the comments section
down<01:35:40.320><c> below</c><01:35:40.880><c> and</c><01:35:41.119><c> well</c><01:35:41.520><c> yeah</c><01:35:41.920><c> those</c><01:35:42.239><c> are</c>

01:35:42.550 --> 01:35:42.560 align:start position:0%
down below and well yeah those are
 

01:35:42.560 --> 01:35:48.149 align:start position:0%
down below and well yeah those are
arguments<01:35:43.199><c> and</c><01:35:43.440><c> parameters</c><01:35:44.239><c> in</c><01:35:44.480><c> c</c>

01:35:48.149 --> 01:35:48.159 align:start position:0%
 
 

01:35:48.159 --> 01:35:50.629 align:start position:0%
 
hey<01:35:48.480><c> what's</c><01:35:48.719><c> going</c><01:35:48.960><c> on</c><01:35:49.119><c> people</c><01:35:49.679><c> so</c><01:35:50.080><c> the</c><01:35:50.239><c> return</c>

01:35:50.629 --> 01:35:50.639 align:start position:0%
hey what's going on people so the return
 

01:35:50.639 --> 01:35:53.350 align:start position:0%
hey what's going on people so the return
statement<01:35:51.199><c> the</c><01:35:51.360><c> return</c><01:35:51.840><c> statement</c><01:35:52.400><c> returns</c><01:35:53.119><c> a</c>

01:35:53.350 --> 01:35:53.360 align:start position:0%
statement the return statement returns a
 

01:35:53.360 --> 01:35:56.070 align:start position:0%
statement the return statement returns a
value<01:35:54.000><c> back</c><01:35:54.320><c> to</c><01:35:54.560><c> a</c><01:35:54.639><c> calling</c><01:35:55.119><c> function</c><01:35:55.760><c> here's</c>

01:35:56.070 --> 01:35:56.080 align:start position:0%
value back to a calling function here's
 

01:35:56.080 --> 01:35:58.149 align:start position:0%
value back to a calling function here's
an<01:35:56.239><c> example</c><01:35:56.800><c> i</c><01:35:56.960><c> have</c><01:35:57.119><c> a</c><01:35:57.199><c> function</c><01:35:57.760><c> named</c>

01:35:58.149 --> 01:35:58.159 align:start position:0%
an example i have a function named
 

01:35:58.159 --> 01:36:00.390 align:start position:0%
an example i have a function named
square<01:35:58.639><c> square</c><01:35:59.040><c> is</c><01:35:59.119><c> going</c><01:35:59.360><c> to</c><01:35:59.600><c> accept</c><01:36:00.159><c> one</c>

01:36:00.390 --> 01:36:00.400 align:start position:0%
square square is going to accept one
 

01:36:00.400 --> 01:36:03.189 align:start position:0%
square square is going to accept one
argument<01:36:01.119><c> a</c><01:36:01.520><c> double</c><01:36:02.080><c> it's</c><01:36:02.320><c> going</c><01:36:02.560><c> to</c><01:36:02.880><c> square</c>

01:36:03.189 --> 01:36:03.199 align:start position:0%
argument a double it's going to square
 

01:36:03.199 --> 01:36:05.350 align:start position:0%
argument a double it's going to square
that<01:36:03.440><c> double</c><01:36:03.840><c> and</c><01:36:04.080><c> return</c><01:36:04.480><c> the</c><01:36:04.639><c> result</c><01:36:05.199><c> back</c>

01:36:05.350 --> 01:36:05.360 align:start position:0%
that double and return the result back
 

01:36:05.360 --> 01:36:07.350 align:start position:0%
that double and return the result back
to<01:36:05.520><c> the</c><01:36:05.679><c> calling</c><01:36:06.080><c> function</c><01:36:06.719><c> so</c><01:36:06.960><c> here's</c><01:36:07.199><c> an</c>

01:36:07.350 --> 01:36:07.360 align:start position:0%
to the calling function so here's an
 

01:36:07.360 --> 01:36:10.149 align:start position:0%
to the calling function so here's an
example<01:36:07.760><c> let's</c><01:36:07.920><c> say</c><01:36:08.159><c> we</c><01:36:08.320><c> have</c><01:36:08.880><c> double</c><01:36:09.520><c> x</c><01:36:10.000><c> and</c>

01:36:10.149 --> 01:36:10.159 align:start position:0%
example let's say we have double x and
 

01:36:10.159 --> 01:36:13.109 align:start position:0%
example let's say we have double x and
i'm<01:36:10.400><c> going</c><01:36:10.719><c> to</c><01:36:11.119><c> call</c><01:36:11.440><c> the</c><01:36:11.679><c> square</c><01:36:12.080><c> function</c>

01:36:13.109 --> 01:36:13.119 align:start position:0%
i'm going to call the square function
 

01:36:13.119 --> 01:36:15.270 align:start position:0%
i'm going to call the square function
and<01:36:13.199><c> then</c><01:36:13.440><c> pass</c><01:36:13.760><c> in</c><01:36:14.000><c> some</c><01:36:14.159><c> value</c>

01:36:15.270 --> 01:36:15.280 align:start position:0%
and then pass in some value
 

01:36:15.280 --> 01:36:17.830 align:start position:0%
and then pass in some value
let's<01:36:15.520><c> say</c><01:36:16.000><c> 3.14</c>

01:36:17.830 --> 01:36:17.840 align:start position:0%
let's say 3.14
 

01:36:17.840 --> 01:36:20.149 align:start position:0%
let's say 3.14
so<01:36:18.000><c> when</c><01:36:18.239><c> we</c><01:36:18.400><c> call</c><01:36:18.639><c> a</c><01:36:18.800><c> function</c><01:36:19.280><c> we</c><01:36:19.440><c> can</c><01:36:19.679><c> also</c>

01:36:20.149 --> 01:36:20.159 align:start position:0%
so when we call a function we can also
 

01:36:20.159 --> 01:36:22.550 align:start position:0%
so when we call a function we can also
return<01:36:20.639><c> a</c><01:36:20.800><c> value</c><01:36:21.199><c> back</c><01:36:21.520><c> to</c><01:36:21.679><c> the</c><01:36:21.760><c> spot</c><01:36:22.159><c> in</c><01:36:22.320><c> which</c>

01:36:22.550 --> 01:36:22.560 align:start position:0%
return a value back to the spot in which
 

01:36:22.560 --> 01:36:25.030 align:start position:0%
return a value back to the spot in which
we<01:36:22.800><c> call</c><01:36:23.119><c> a</c><01:36:23.199><c> function</c><01:36:23.920><c> so</c><01:36:24.080><c> within</c><01:36:24.480><c> our</c><01:36:24.639><c> square</c>

01:36:25.030 --> 01:36:25.040 align:start position:0%
we call a function so within our square
 

01:36:25.040 --> 01:36:28.790 align:start position:0%
we call a function so within our square
function<01:36:25.600><c> let's</c><01:36:25.920><c> set</c><01:36:26.560><c> double</c><01:36:27.280><c> result</c><01:36:28.320><c> equal</c>

01:36:28.790 --> 01:36:28.800 align:start position:0%
function let's set double result equal
 

01:36:28.800 --> 01:36:32.470 align:start position:0%
function let's set double result equal
to<01:36:29.199><c> x</c><01:36:29.679><c> times</c><01:36:30.239><c> x</c><01:36:30.880><c> effectively</c><01:36:31.440><c> squaring</c><01:36:31.920><c> it</c><01:36:32.320><c> so</c>

01:36:32.470 --> 01:36:32.480 align:start position:0%
to x times x effectively squaring it so
 

01:36:32.480 --> 01:36:34.470 align:start position:0%
to x times x effectively squaring it so
to<01:36:32.639><c> return</c><01:36:33.040><c> a</c><01:36:33.199><c> value</c><01:36:33.600><c> back</c><01:36:33.840><c> to</c><01:36:33.920><c> the</c><01:36:34.080><c> calling</c>

01:36:34.470 --> 01:36:34.480 align:start position:0%
to return a value back to the calling
 

01:36:34.480 --> 01:36:37.430 align:start position:0%
to return a value back to the calling
function<01:36:35.280><c> we</c><01:36:35.440><c> will</c><01:36:35.679><c> use</c><01:36:36.000><c> this</c><01:36:36.239><c> return</c><01:36:36.719><c> keyword</c>

01:36:37.430 --> 01:36:37.440 align:start position:0%
function we will use this return keyword
 

01:36:37.440 --> 01:36:39.510 align:start position:0%
function we will use this return keyword
followed<01:36:37.679><c> by</c><01:36:38.000><c> some</c><01:36:38.239><c> value</c><01:36:38.639><c> or</c><01:36:38.800><c> variable</c><01:36:39.360><c> i</c>

01:36:39.510 --> 01:36:39.520 align:start position:0%
followed by some value or variable i
 

01:36:39.520 --> 01:36:42.390 align:start position:0%
followed by some value or variable i
would<01:36:39.679><c> like</c><01:36:39.840><c> to</c><01:36:40.080><c> return</c><01:36:40.719><c> result</c><01:36:41.440><c> however</c><01:36:42.239><c> we</c>

01:36:42.390 --> 01:36:42.400 align:start position:0%
would like to return result however we
 

01:36:42.400 --> 01:36:44.629 align:start position:0%
would like to return result however we
need<01:36:42.560><c> to</c><01:36:42.719><c> list</c><01:36:43.119><c> the</c><01:36:43.360><c> data</c><01:36:43.760><c> type</c><01:36:44.080><c> of</c><01:36:44.239><c> what</c><01:36:44.480><c> we're</c>

01:36:44.629 --> 01:36:44.639 align:start position:0%
need to list the data type of what we're
 

01:36:44.639 --> 01:36:46.310 align:start position:0%
need to list the data type of what we're
returning<01:36:45.199><c> within</c><01:36:45.679><c> the</c><01:36:45.920><c> function</c>

01:36:46.310 --> 01:36:46.320 align:start position:0%
returning within the function
 

01:36:46.320 --> 01:36:49.270 align:start position:0%
returning within the function
declaration<01:36:47.520><c> right</c><01:36:47.679><c> now</c><01:36:47.920><c> it's</c><01:36:48.159><c> void</c><01:36:48.880><c> so</c><01:36:49.119><c> if</c>

01:36:49.270 --> 01:36:49.280 align:start position:0%
declaration right now it's void so if
 

01:36:49.280 --> 01:36:51.590 align:start position:0%
declaration right now it's void so if
we're<01:36:49.440><c> returning</c><01:36:50.000><c> a</c><01:36:50.239><c> double</c><01:36:50.719><c> we</c><01:36:50.880><c> will</c><01:36:51.040><c> list</c>

01:36:51.590 --> 01:36:51.600 align:start position:0%
we're returning a double we will list
 

01:36:51.600 --> 01:36:54.070 align:start position:0%
we're returning a double we will list
double<01:36:52.000><c> here</c><01:36:52.639><c> if</c><01:36:52.800><c> this</c><01:36:53.040><c> was</c><01:36:53.280><c> an</c><01:36:53.440><c> integer</c><01:36:53.920><c> we</c>

01:36:54.070 --> 01:36:54.080 align:start position:0%
double here if this was an integer we
 

01:36:54.080 --> 01:36:55.910 align:start position:0%
double here if this was an integer we
would<01:36:54.320><c> return</c><01:36:54.960><c> int</c>

01:36:55.910 --> 01:36:55.920 align:start position:0%
would return int
 

01:36:55.920 --> 01:36:58.229 align:start position:0%
would return int
if<01:36:56.159><c> it</c><01:36:56.239><c> was</c><01:36:56.560><c> a</c><01:36:56.719><c> character</c><01:36:57.280><c> we</c><01:36:57.440><c> would</c><01:36:57.600><c> return</c>

01:36:58.229 --> 01:36:58.239 align:start position:0%
if it was a character we would return
 

01:36:58.239 --> 01:37:00.790 align:start position:0%
if it was a character we would return
char<01:36:58.719><c> you</c><01:36:58.880><c> kind</c><01:36:59.040><c> of</c><01:36:59.119><c> get</c><01:36:59.280><c> the</c><01:36:59.440><c> idea</c><01:37:00.080><c> so</c><01:37:00.320><c> result</c>

01:37:00.790 --> 01:37:00.800 align:start position:0%
char you kind of get the idea so result
 

01:37:00.800 --> 01:37:03.109 align:start position:0%
char you kind of get the idea so result
is<01:37:00.960><c> a</c><01:37:01.119><c> double</c><01:37:01.679><c> so</c><01:37:01.840><c> we</c><01:37:02.000><c> need</c><01:37:02.159><c> to</c><01:37:02.320><c> change</c><01:37:02.800><c> this</c>

01:37:03.109 --> 01:37:03.119 align:start position:0%
is a double so we need to change this
 

01:37:03.119 --> 01:37:05.910 align:start position:0%
is a double so we need to change this
from<01:37:03.440><c> void</c><01:37:03.920><c> to</c><01:37:04.239><c> double</c><01:37:04.719><c> and</c><01:37:04.960><c> we</c><01:37:05.119><c> will</c><01:37:05.280><c> return</c>

01:37:05.910 --> 01:37:05.920 align:start position:0%
from void to double and we will return
 

01:37:05.920 --> 01:37:08.310 align:start position:0%
from void to double and we will return
this<01:37:06.159><c> result</c><01:37:06.560><c> back</c><01:37:06.880><c> to</c><01:37:07.040><c> the</c><01:37:07.199><c> calling</c><01:37:07.600><c> function</c>

01:37:08.310 --> 01:37:08.320 align:start position:0%
this result back to the calling function
 

01:37:08.320 --> 01:37:11.189 align:start position:0%
this result back to the calling function
so<01:37:08.560><c> we're</c><01:37:08.800><c> effectively</c><01:37:09.600><c> stating</c><01:37:10.080><c> that</c><01:37:10.480><c> double</c>

01:37:11.189 --> 01:37:11.199 align:start position:0%
so we're effectively stating that double
 

01:37:11.199 --> 01:37:14.950 align:start position:0%
so we're effectively stating that double
x<01:37:11.679><c> equals</c><01:37:12.560><c> 3.14</c><01:37:13.679><c> squared</c><01:37:14.320><c> and</c><01:37:14.480><c> then</c><01:37:14.639><c> let's</c>

01:37:14.950 --> 01:37:14.960 align:start position:0%
x equals 3.14 squared and then let's
 

01:37:14.960 --> 01:37:16.870 align:start position:0%
x equals 3.14 squared and then let's
print<01:37:15.199><c> the</c><01:37:15.360><c> result</c>

01:37:16.870 --> 01:37:16.880 align:start position:0%
print the result
 

01:37:16.880 --> 01:37:18.550 align:start position:0%
print the result
so<01:37:17.119><c> printf</c>

01:37:18.550 --> 01:37:18.560 align:start position:0%
so printf
 

01:37:18.560 --> 01:37:21.270 align:start position:0%
so printf
the<01:37:18.800><c> format</c><01:37:19.199><c> specifier</c><01:37:19.760><c> for</c><01:37:20.000><c> a</c><01:37:20.159><c> double</c><01:37:20.560><c> is</c><01:37:20.800><c> lf</c>

01:37:21.270 --> 01:37:21.280 align:start position:0%
the format specifier for a double is lf
 

01:37:21.280 --> 01:37:23.510 align:start position:0%
the format specifier for a double is lf
and<01:37:21.440><c> we</c><01:37:21.600><c> will</c><01:37:21.840><c> print</c><01:37:22.400><c> x</c>

01:37:23.510 --> 01:37:23.520 align:start position:0%
and we will print x
 

01:37:23.520 --> 01:37:27.830 align:start position:0%
and we will print x
and<01:37:23.960><c> 3.14</c><01:37:25.040><c> squared</c><01:37:25.520><c> is</c><01:37:26.000><c> 9.859</c>

01:37:27.830 --> 01:37:27.840 align:start position:0%
and 3.14 squared is 9.859
 

01:37:27.840 --> 01:37:29.669 align:start position:0%
and 3.14 squared is 9.859
now<01:37:28.000><c> you</c><01:37:28.159><c> could</c><01:37:28.400><c> shorten</c><01:37:28.800><c> this</c><01:37:28.960><c> too</c><01:37:29.280><c> we</c><01:37:29.440><c> could</c>

01:37:29.669 --> 01:37:29.679 align:start position:0%
now you could shorten this too we could
 

01:37:29.679 --> 01:37:32.310 align:start position:0%
now you could shorten this too we could
just<01:37:29.840><c> say</c><01:37:30.159><c> return</c><01:37:30.719><c> x</c><01:37:31.040><c> times</c><01:37:31.440><c> x</c>

01:37:32.310 --> 01:37:32.320 align:start position:0%
just say return x times x
 

01:37:32.320 --> 01:37:35.109 align:start position:0%
just say return x times x
instead<01:37:32.639><c> of</c><01:37:32.800><c> declaring</c><01:37:33.440><c> a</c><01:37:33.679><c> local</c><01:37:34.000><c> variable</c>

01:37:35.109 --> 01:37:35.119 align:start position:0%
instead of declaring a local variable
 

01:37:35.119 --> 01:37:38.390 align:start position:0%
instead of declaring a local variable
return<01:37:35.760><c> x</c><01:37:36.239><c> times</c><01:37:36.639><c> x</c>

01:37:38.390 --> 01:37:38.400 align:start position:0%
return x times x
 

01:37:38.400 --> 01:37:40.390 align:start position:0%
return x times x
and<01:37:38.560><c> that</c><01:37:38.719><c> would</c><01:37:38.880><c> work</c><01:37:39.119><c> the</c><01:37:39.280><c> same</c><01:37:39.920><c> so</c><01:37:40.159><c> yeah</c>

01:37:40.390 --> 01:37:40.400 align:start position:0%
and that would work the same so yeah
 

01:37:40.400 --> 01:37:42.390 align:start position:0%
and that would work the same so yeah
that's<01:37:40.639><c> basically</c><01:37:41.040><c> the</c><01:37:41.199><c> return</c><01:37:41.600><c> statement</c>

01:37:42.390 --> 01:37:42.400 align:start position:0%
that's basically the return statement
 

01:37:42.400 --> 01:37:44.149 align:start position:0%
that's basically the return statement
you<01:37:42.480><c> can</c><01:37:42.719><c> place</c><01:37:42.960><c> it</c><01:37:43.040><c> within</c><01:37:43.440><c> a</c><01:37:43.520><c> function</c><01:37:44.000><c> and</c>

01:37:44.149 --> 01:37:44.159 align:start position:0%
you can place it within a function and
 

01:37:44.159 --> 01:37:47.189 align:start position:0%
you can place it within a function and
return<01:37:44.800><c> a</c><01:37:45.040><c> value</c><01:37:45.520><c> or</c><01:37:45.760><c> variable</c><01:37:46.560><c> back</c><01:37:46.880><c> to</c><01:37:47.040><c> the</c>

01:37:47.189 --> 01:37:47.199 align:start position:0%
return a value or variable back to the
 

01:37:47.199 --> 01:37:48.390 align:start position:0%
return a value or variable back to the
calling<01:37:47.600><c> function</c>

01:37:48.390 --> 01:37:48.400 align:start position:0%
calling function
 

01:37:48.400 --> 01:37:50.310 align:start position:0%
calling function
and<01:37:48.560><c> the</c><01:37:48.719><c> spot</c><01:37:49.040><c> in</c><01:37:49.119><c> which</c><01:37:49.360><c> you</c><01:37:49.600><c> invoked</c><01:37:50.080><c> that</c>

01:37:50.310 --> 01:37:50.320 align:start position:0%
and the spot in which you invoked that
 

01:37:50.320 --> 01:37:52.709 align:start position:0%
and the spot in which you invoked that
function<01:37:51.119><c> but</c><01:37:51.360><c> if</c><01:37:51.440><c> you're</c><01:37:51.600><c> going</c><01:37:51.840><c> to</c><01:37:52.000><c> return</c><01:37:52.560><c> a</c>

01:37:52.709 --> 01:37:52.719 align:start position:0%
function but if you're going to return a
 

01:37:52.719 --> 01:37:55.350 align:start position:0%
function but if you're going to return a
value<01:37:53.199><c> or</c><01:37:53.360><c> variable</c><01:37:54.159><c> within</c><01:37:54.639><c> the</c><01:37:54.960><c> function</c>

01:37:55.350 --> 01:37:55.360 align:start position:0%
value or variable within the function
 

01:37:55.360 --> 01:37:57.750 align:start position:0%
value or variable within the function
declaration<01:37:56.320><c> you</c><01:37:56.400><c> need</c><01:37:56.560><c> to</c><01:37:56.800><c> change</c><01:37:57.199><c> void</c><01:37:57.600><c> to</c>

01:37:57.750 --> 01:37:57.760 align:start position:0%
declaration you need to change void to
 

01:37:57.760 --> 01:38:00.070 align:start position:0%
declaration you need to change void to
the<01:37:57.920><c> data</c><01:37:58.320><c> type</c><01:37:58.639><c> of</c><01:37:58.800><c> what</c><01:37:58.960><c> you're</c><01:37:59.199><c> returning</c>

01:38:00.070 --> 01:38:00.080 align:start position:0%
the data type of what you're returning
 

01:38:00.080 --> 01:38:02.229 align:start position:0%
the data type of what you're returning
so<01:38:00.320><c> yeah</c><01:38:00.639><c> that</c><01:38:00.880><c> is</c><01:38:01.040><c> the</c><01:38:01.119><c> return</c><01:38:01.520><c> statement</c><01:38:02.159><c> and</c>

01:38:02.229 --> 01:38:02.239 align:start position:0%
so yeah that is the return statement and
 

01:38:02.239 --> 01:38:03.669 align:start position:0%
so yeah that is the return statement and
you<01:38:02.400><c> may</c><01:38:02.560><c> have</c><01:38:02.639><c> noticed</c><01:38:02.960><c> within</c><01:38:03.280><c> our</c><01:38:03.440><c> main</c>

01:38:03.669 --> 01:38:03.679 align:start position:0%
you may have noticed within our main
 

01:38:03.679 --> 01:38:06.550 align:start position:0%
you may have noticed within our main
function<01:38:04.159><c> we're</c><01:38:04.400><c> returning</c><01:38:05.119><c> zero</c><01:38:05.920><c> zero</c><01:38:06.400><c> is</c>

01:38:06.550 --> 01:38:06.560 align:start position:0%
function we're returning zero zero is
 

01:38:06.560 --> 01:38:08.870 align:start position:0%
function we're returning zero zero is
the<01:38:06.880><c> exit</c><01:38:07.199><c> status</c><01:38:07.679><c> if</c><01:38:07.840><c> this</c><01:38:08.080><c> program</c><01:38:08.639><c> runs</c>

01:38:08.870 --> 01:38:08.880 align:start position:0%
the exit status if this program runs
 

01:38:08.880 --> 01:38:11.750 align:start position:0%
the exit status if this program runs
successfully<01:38:09.920><c> so</c><01:38:10.159><c> instead</c><01:38:10.560><c> of</c><01:38:10.960><c> void</c><01:38:11.360><c> with</c><01:38:11.600><c> our</c>

01:38:11.750 --> 01:38:11.760 align:start position:0%
successfully so instead of void with our
 

01:38:11.760 --> 01:38:14.229 align:start position:0%
successfully so instead of void with our
main<01:38:12.000><c> function</c><01:38:12.400><c> declaration</c><01:38:13.360><c> we</c><01:38:13.600><c> have</c><01:38:13.920><c> int</c>

01:38:14.229 --> 01:38:14.239 align:start position:0%
main function declaration we have int
 

01:38:14.239 --> 01:38:16.950 align:start position:0%
main function declaration we have int
because<01:38:14.880><c> zero</c><01:38:15.280><c> is</c><01:38:15.440><c> technically</c><01:38:16.000><c> an</c><01:38:16.239><c> integer</c>

01:38:16.950 --> 01:38:16.960 align:start position:0%
because zero is technically an integer
 

01:38:16.960 --> 01:38:18.950 align:start position:0%
because zero is technically an integer
so<01:38:17.199><c> yeah</c><01:38:17.520><c> that's</c><01:38:17.760><c> the</c><01:38:17.840><c> return</c><01:38:18.239><c> statement</c><01:38:18.800><c> if</c>

01:38:18.950 --> 01:38:18.960 align:start position:0%
so yeah that's the return statement if
 

01:38:18.960 --> 01:38:20.550 align:start position:0%
so yeah that's the return statement if
you<01:38:19.040><c> would</c><01:38:19.199><c> like</c><01:38:19.440><c> a</c><01:38:19.600><c> copy</c><01:38:19.920><c> of</c><01:38:20.000><c> this</c><01:38:20.159><c> code</c><01:38:20.400><c> i</c>

01:38:20.550 --> 01:38:20.560 align:start position:0%
you would like a copy of this code i
 

01:38:20.560 --> 01:38:22.229 align:start position:0%
you would like a copy of this code i
will<01:38:20.719><c> post</c><01:38:21.040><c> this</c><01:38:21.199><c> to</c><01:38:21.360><c> the</c><01:38:21.440><c> comments</c><01:38:21.840><c> section</c>

01:38:22.229 --> 01:38:22.239 align:start position:0%
will post this to the comments section
 

01:38:22.239 --> 01:38:24.870 align:start position:0%
will post this to the comments section
down<01:38:22.400><c> below</c><01:38:23.040><c> well</c><01:38:23.520><c> yeah</c><01:38:24.000><c> that's</c><01:38:24.320><c> the</c><01:38:24.480><c> return</c>

01:38:24.870 --> 01:38:24.880 align:start position:0%
down below well yeah that's the return
 

01:38:24.880 --> 01:38:29.590 align:start position:0%
down below well yeah that's the return
statement<01:38:25.600><c> in</c><01:38:25.840><c> c</c>

01:38:29.590 --> 01:38:29.600 align:start position:0%
 
 

01:38:29.600 --> 01:38:32.709 align:start position:0%
 
hey<01:38:30.080><c> sup</c><01:38:30.400><c> people</c><01:38:31.040><c> the</c><01:38:31.280><c> trinary</c><01:38:31.760><c> operator</c><01:38:32.400><c> also</c>

01:38:32.709 --> 01:38:32.719 align:start position:0%
hey sup people the trinary operator also
 

01:38:32.719 --> 01:38:35.270 align:start position:0%
hey sup people the trinary operator also
known<01:38:33.040><c> as</c><01:38:33.360><c> the</c><01:38:33.520><c> conditional</c><01:38:34.159><c> operator</c><01:38:34.800><c> it's</c><01:38:35.040><c> a</c>

01:38:35.270 --> 01:38:35.280 align:start position:0%
known as the conditional operator it's a
 

01:38:35.280 --> 01:38:37.750 align:start position:0%
known as the conditional operator it's a
shortcut<01:38:35.840><c> to</c><01:38:36.000><c> using</c><01:38:36.400><c> an</c><01:38:36.639><c> if-else</c><01:38:37.199><c> statement</c>

01:38:37.750 --> 01:38:37.760 align:start position:0%
shortcut to using an if-else statement
 

01:38:37.760 --> 01:38:40.470 align:start position:0%
shortcut to using an if-else statement
when<01:38:38.080><c> assigning</c><01:38:38.719><c> or</c><01:38:38.960><c> returning</c><01:38:39.679><c> a</c><01:38:39.920><c> value</c>

01:38:40.470 --> 01:38:40.480 align:start position:0%
when assigning or returning a value
 

01:38:40.480 --> 01:38:42.629 align:start position:0%
when assigning or returning a value
here's<01:38:40.800><c> the</c><01:38:40.880><c> formula</c><01:38:41.440><c> we</c><01:38:41.600><c> write</c><01:38:41.760><c> a</c><01:38:41.840><c> condition</c>

01:38:42.629 --> 01:38:42.639 align:start position:0%
here's the formula we write a condition
 

01:38:42.639 --> 01:38:45.189 align:start position:0%
here's the formula we write a condition
followed<01:38:43.040><c> by</c><01:38:43.360><c> a</c><01:38:43.600><c> question</c><01:38:44.000><c> mark</c><01:38:44.639><c> if</c><01:38:45.040><c> this</c>

01:38:45.189 --> 01:38:45.199 align:start position:0%
followed by a question mark if this
 

01:38:45.199 --> 01:38:48.390 align:start position:0%
followed by a question mark if this
condition<01:38:45.920><c> is</c><01:38:46.159><c> true</c><01:38:46.800><c> we</c><01:38:46.960><c> return</c><01:38:47.600><c> some</c><01:38:47.840><c> value</c>

01:38:48.390 --> 01:38:48.400 align:start position:0%
condition is true we return some value
 

01:38:48.400 --> 01:38:51.590 align:start position:0%
condition is true we return some value
if<01:38:48.560><c> true</c><01:38:49.199><c> or</c><01:38:49.760><c> if</c><01:38:49.920><c> that</c><01:38:50.159><c> condition</c><01:38:50.639><c> is</c><01:38:50.880><c> false</c><01:38:51.440><c> we</c>

01:38:51.590 --> 01:38:51.600 align:start position:0%
if true or if that condition is false we
 

01:38:51.600 --> 01:38:53.510 align:start position:0%
if true or if that condition is false we
return<01:38:52.159><c> some</c><01:38:52.400><c> other</c><01:38:52.560><c> value</c><01:38:53.119><c> here's</c><01:38:53.360><c> an</c>

01:38:53.510 --> 01:38:53.520 align:start position:0%
return some other value here's an
 

01:38:53.520 --> 01:38:55.350 align:start position:0%
return some other value here's an
example<01:38:53.920><c> first</c><01:38:54.239><c> we'll</c><01:38:54.480><c> use</c><01:38:54.719><c> an</c><01:38:54.880><c> if-else</c>

01:38:55.350 --> 01:38:55.360 align:start position:0%
example first we'll use an if-else
 

01:38:55.360 --> 01:38:57.189 align:start position:0%
example first we'll use an if-else
statement<01:38:55.920><c> and</c><01:38:56.000><c> then</c><01:38:56.239><c> later</c><01:38:56.480><c> we'll</c><01:38:56.639><c> switch</c><01:38:57.040><c> to</c>

01:38:57.189 --> 01:38:57.199 align:start position:0%
statement and then later we'll switch to
 

01:38:57.199 --> 01:38:59.510 align:start position:0%
statement and then later we'll switch to
the<01:38:57.360><c> ternary</c><01:38:57.920><c> operator</c><01:38:58.719><c> so</c><01:38:58.880><c> let's</c><01:38:59.199><c> create</c><01:38:59.440><c> a</c>

01:38:59.510 --> 01:38:59.520 align:start position:0%
the ternary operator so let's create a
 

01:38:59.520 --> 01:39:01.990 align:start position:0%
the ternary operator so let's create a
function<01:39:00.080><c> that</c><01:39:00.239><c> will</c><01:39:00.400><c> find</c><01:39:00.880><c> the</c><01:39:01.119><c> maximum</c><01:39:01.679><c> of</c>

01:39:01.990 --> 01:39:02.000 align:start position:0%
function that will find the maximum of
 

01:39:02.000 --> 01:39:04.149 align:start position:0%
function that will find the maximum of
two<01:39:02.239><c> integers</c><01:39:03.040><c> and</c><01:39:03.199><c> i'm</c><01:39:03.360><c> going</c><01:39:03.600><c> to</c><01:39:03.840><c> assign</c>

01:39:04.149 --> 01:39:04.159 align:start position:0%
two integers and i'm going to assign
 

01:39:04.159 --> 01:39:06.149 align:start position:0%
two integers and i'm going to assign
that<01:39:04.400><c> to</c><01:39:04.719><c> int</c><01:39:05.280><c> max</c>

01:39:06.149 --> 01:39:06.159 align:start position:0%
that to int max
 

01:39:06.159 --> 01:39:09.109 align:start position:0%
that to int max
and<01:39:06.480><c> we</c><01:39:06.639><c> will</c><01:39:06.880><c> invoke</c><01:39:07.280><c> a</c><01:39:07.520><c> function</c><01:39:08.239><c> find</c><01:39:08.719><c> max</c>

01:39:09.109 --> 01:39:09.119 align:start position:0%
and we will invoke a function find max
 

01:39:09.119 --> 01:39:10.790 align:start position:0%
and we will invoke a function find max
but<01:39:09.280><c> we'll</c><01:39:09.520><c> still</c><01:39:09.679><c> need</c><01:39:09.840><c> to</c><01:39:10.000><c> declare</c><01:39:10.400><c> it</c><01:39:10.639><c> so</c>

01:39:10.790 --> 01:39:10.800 align:start position:0%
but we'll still need to declare it so
 

01:39:10.800 --> 01:39:13.030 align:start position:0%
but we'll still need to declare it so
let's<01:39:11.040><c> pass</c><01:39:11.360><c> in</c><01:39:11.600><c> two</c><01:39:11.840><c> integers</c><01:39:12.320><c> maybe</c><01:39:12.639><c> three</c>

01:39:13.030 --> 01:39:13.040 align:start position:0%
let's pass in two integers maybe three
 

01:39:13.040 --> 01:39:14.229 align:start position:0%
let's pass in two integers maybe three
and<01:39:13.280><c> four</c>

01:39:14.229 --> 01:39:14.239 align:start position:0%
and four
 

01:39:14.239 --> 01:39:15.990 align:start position:0%
and four
and<01:39:14.320><c> then</c><01:39:14.560><c> i'm</c><01:39:14.719><c> going</c><01:39:14.960><c> to</c><01:39:15.119><c> display</c><01:39:15.600><c> whatever</c>

01:39:15.990 --> 01:39:16.000 align:start position:0%
and then i'm going to display whatever
 

01:39:16.000 --> 01:39:18.229 align:start position:0%
and then i'm going to display whatever
max<01:39:16.400><c> is</c>

01:39:18.229 --> 01:39:18.239 align:start position:0%
max is
 

01:39:18.239 --> 01:39:20.790 align:start position:0%
max is
okay<01:39:18.639><c> so</c><01:39:18.880><c> let's</c><01:39:19.199><c> declare</c><01:39:19.600><c> this</c><01:39:19.840><c> function</c><01:39:20.560><c> so</c>

01:39:20.790 --> 01:39:20.800 align:start position:0%
okay so let's declare this function so
 

01:39:20.800 --> 01:39:22.870 align:start position:0%
okay so let's declare this function so
we're<01:39:20.960><c> returning</c><01:39:21.440><c> an</c><01:39:21.600><c> integer</c>

01:39:22.870 --> 01:39:22.880 align:start position:0%
we're returning an integer
 

01:39:22.880 --> 01:39:25.189 align:start position:0%
we're returning an integer
the<01:39:23.040><c> name</c><01:39:23.280><c> is</c><01:39:23.440><c> find</c><01:39:23.760><c> max</c><01:39:24.320><c> and</c><01:39:24.639><c> let's</c><01:39:24.880><c> set</c><01:39:25.119><c> up</c>

01:39:25.189 --> 01:39:25.199 align:start position:0%
the name is find max and let's set up
 

01:39:25.199 --> 01:39:29.109 align:start position:0%
the name is find max and let's set up
some<01:39:25.360><c> parameters</c><01:39:26.239><c> into</c><01:39:26.719><c> x</c><01:39:27.119><c> and</c><01:39:27.600><c> int</c><01:39:28.080><c> y</c><01:39:28.719><c> so</c><01:39:28.960><c> if</c>

01:39:29.109 --> 01:39:29.119 align:start position:0%
some parameters into x and int y so if
 

01:39:29.119 --> 01:39:31.109 align:start position:0%
some parameters into x and int y so if
we're<01:39:29.360><c> using</c><01:39:29.679><c> an</c><01:39:29.920><c> if</c><01:39:30.080><c> else</c><01:39:30.320><c> statement</c><01:39:30.800><c> if</c><01:39:30.960><c> we</c>

01:39:31.109 --> 01:39:31.119 align:start position:0%
we're using an if else statement if we
 

01:39:31.119 --> 01:39:33.669 align:start position:0%
we're using an if else statement if we
need<01:39:31.280><c> to</c><01:39:31.440><c> return</c><01:39:32.000><c> x</c><01:39:32.400><c> if</c><01:39:32.560><c> it's</c><01:39:32.719><c> larger</c><01:39:33.360><c> we</c><01:39:33.520><c> can</c>

01:39:33.669 --> 01:39:33.679 align:start position:0%
need to return x if it's larger we can
 

01:39:33.679 --> 01:39:35.189 align:start position:0%
need to return x if it's larger we can
check<01:39:33.920><c> to</c><01:39:34.080><c> see</c><01:39:34.400><c> if</c>

01:39:35.189 --> 01:39:35.199 align:start position:0%
check to see if
 

01:39:35.199 --> 01:39:38.470 align:start position:0%
check to see if
x<01:39:35.920><c> is</c><01:39:36.159><c> larger</c><01:39:36.560><c> than</c><01:39:36.800><c> y</c>

01:39:38.470 --> 01:39:38.480 align:start position:0%
x is larger than y
 

01:39:38.480 --> 01:39:41.430 align:start position:0%
x is larger than y
if<01:39:38.719><c> so</c><01:39:39.119><c> then</c><01:39:39.520><c> return</c><01:39:40.159><c> x</c>

01:39:41.430 --> 01:39:41.440 align:start position:0%
if so then return x
 

01:39:41.440 --> 01:39:43.830 align:start position:0%
if so then return x
else

01:39:43.830 --> 01:39:43.840 align:start position:0%
 
 

01:39:43.840 --> 01:39:44.950 align:start position:0%
 
return

01:39:44.950 --> 01:39:44.960 align:start position:0%
return
 

01:39:44.960 --> 01:39:47.830 align:start position:0%
return
y<01:39:45.600><c> so</c><01:39:45.840><c> this</c><01:39:46.080><c> does</c><01:39:46.320><c> work</c>

01:39:47.830 --> 01:39:47.840 align:start position:0%
y so this does work
 

01:39:47.840 --> 01:39:50.470 align:start position:0%
y so this does work
so<01:39:48.080><c> the</c><01:39:48.239><c> max</c><01:39:48.560><c> between</c><01:39:49.040><c> three</c><01:39:49.440><c> and</c><01:39:49.679><c> four</c>

01:39:50.470 --> 01:39:50.480 align:start position:0%
so the max between three and four
 

01:39:50.480 --> 01:39:51.750 align:start position:0%
so the max between three and four
is<01:39:50.719><c> four</c>

01:39:51.750 --> 01:39:51.760 align:start position:0%
is four
 

01:39:51.760 --> 01:39:54.390 align:start position:0%
is four
so<01:39:52.000><c> if</c><01:39:52.159><c> i</c><01:39:52.320><c> switch</c><01:39:52.880><c> three</c><01:39:53.199><c> to</c><01:39:53.440><c> five</c>

01:39:54.390 --> 01:39:54.400 align:start position:0%
so if i switch three to five
 

01:39:54.400 --> 01:39:57.350 align:start position:0%
so if i switch three to five
well<01:39:54.639><c> then</c><01:39:54.960><c> the</c><01:39:55.119><c> max</c><01:39:55.520><c> is</c><01:39:55.679><c> five</c><01:39:56.400><c> so</c><01:39:56.639><c> a</c><01:39:56.880><c> shortcut</c>

01:39:57.350 --> 01:39:57.360 align:start position:0%
well then the max is five so a shortcut
 

01:39:57.360 --> 01:39:59.350 align:start position:0%
well then the max is five so a shortcut
to<01:39:57.520><c> writing</c><01:39:58.000><c> an</c><01:39:58.159><c> if</c><01:39:58.480><c> else</c><01:39:58.719><c> statement</c><01:39:59.119><c> like</c>

01:39:59.350 --> 01:39:59.360 align:start position:0%
to writing an if else statement like
 

01:39:59.360 --> 01:40:01.510 align:start position:0%
to writing an if else statement like
this<01:39:59.679><c> if</c><01:39:59.840><c> we're</c><01:40:00.080><c> returning</c><01:40:00.719><c> or</c><01:40:00.880><c> assigning</c><01:40:01.360><c> a</c>

01:40:01.510 --> 01:40:01.520 align:start position:0%
this if we're returning or assigning a
 

01:40:01.520 --> 01:40:04.229 align:start position:0%
this if we're returning or assigning a
value<01:40:02.320><c> is</c><01:40:02.480><c> that</c><01:40:02.719><c> we</c><01:40:02.960><c> could</c><01:40:03.280><c> instead</c><01:40:03.840><c> use</c><01:40:04.080><c> the</c>

01:40:04.229 --> 01:40:04.239 align:start position:0%
value is that we could instead use the
 

01:40:04.239 --> 01:40:07.109 align:start position:0%
value is that we could instead use the
tenary<01:40:04.800><c> operator</c><01:40:05.600><c> so</c><01:40:05.840><c> let's</c><01:40:06.080><c> return</c><01:40:06.800><c> and</c><01:40:06.960><c> then</c>

01:40:07.109 --> 01:40:07.119 align:start position:0%
tenary operator so let's return and then
 

01:40:07.119 --> 01:40:08.790 align:start position:0%
tenary operator so let's return and then
we<01:40:07.280><c> have</c><01:40:07.600><c> a</c><01:40:07.760><c> condition</c>

01:40:08.790 --> 01:40:08.800 align:start position:0%
we have a condition
 

01:40:08.800 --> 01:40:11.270 align:start position:0%
we have a condition
so<01:40:09.119><c> this</c><01:40:09.280><c> is</c><01:40:09.360><c> our</c><01:40:09.520><c> condition</c>

01:40:11.270 --> 01:40:11.280 align:start position:0%
so this is our condition
 

01:40:11.280 --> 01:40:13.910 align:start position:0%
so this is our condition
is<01:40:11.600><c> x</c><01:40:12.000><c> greater</c><01:40:12.320><c> than</c><01:40:12.719><c> y</c><01:40:13.280><c> then</c><01:40:13.520><c> we</c><01:40:13.679><c> add</c><01:40:13.840><c> a</c>

01:40:13.910 --> 01:40:13.920 align:start position:0%
is x greater than y then we add a
 

01:40:13.920 --> 01:40:16.149 align:start position:0%
is x greater than y then we add a
question<01:40:14.320><c> mark</c>

01:40:16.149 --> 01:40:16.159 align:start position:0%
question mark
 

01:40:16.159 --> 01:40:19.109 align:start position:0%
question mark
then<01:40:16.480><c> the</c><01:40:16.719><c> value</c><01:40:17.199><c> we're</c><01:40:17.360><c> returning</c><01:40:18.000><c> if</c><01:40:18.239><c> true</c>

01:40:19.109 --> 01:40:19.119 align:start position:0%
then the value we're returning if true
 

01:40:19.119 --> 01:40:23.590 align:start position:0%
then the value we're returning if true
so<01:40:19.440><c> if</c><01:40:19.760><c> x</c><01:40:20.239><c> is</c><01:40:20.400><c> greater</c><01:40:20.719><c> than</c><01:40:20.960><c> y</c><01:40:21.440><c> let's</c><01:40:21.760><c> return</c><01:40:22.560><c> x</c>

01:40:23.590 --> 01:40:23.600 align:start position:0%
so if x is greater than y let's return x
 

01:40:23.600 --> 01:40:26.550 align:start position:0%
so if x is greater than y let's return x
colon<01:40:24.480><c> then</c><01:40:24.719><c> our</c><01:40:24.960><c> value</c><01:40:25.440><c> if</c><01:40:25.760><c> this</c><01:40:25.920><c> condition</c>

01:40:26.550 --> 01:40:26.560 align:start position:0%
colon then our value if this condition
 

01:40:26.560 --> 01:40:28.709 align:start position:0%
colon then our value if this condition
is<01:40:26.800><c> false</c><01:40:27.360><c> and</c><01:40:27.600><c> here</c><01:40:28.000><c> within</c><01:40:28.320><c> our</c><01:40:28.480><c> else</c>

01:40:28.709 --> 01:40:28.719 align:start position:0%
is false and here within our else
 

01:40:28.719 --> 01:40:31.030 align:start position:0%
is false and here within our else
statement<01:40:29.119><c> we're</c><01:40:29.360><c> returning</c><01:40:30.080><c> y</c>

01:40:31.030 --> 01:40:31.040 align:start position:0%
statement we're returning y
 

01:40:31.040 --> 01:40:33.189 align:start position:0%
statement we're returning y
and<01:40:31.360><c> we</c><01:40:31.520><c> no</c><01:40:31.679><c> longer</c><01:40:32.080><c> need</c><01:40:32.400><c> this</c><01:40:32.719><c> if</c><01:40:32.960><c> else</c>

01:40:33.189 --> 01:40:33.199 align:start position:0%
and we no longer need this if else
 

01:40:33.199 --> 01:40:35.270 align:start position:0%
and we no longer need this if else
statement<01:40:33.840><c> and</c><01:40:33.920><c> that's</c><01:40:34.159><c> all</c><01:40:34.320><c> there</c><01:40:34.480><c> is</c><01:40:34.639><c> to</c><01:40:34.880><c> it</c>

01:40:35.270 --> 01:40:35.280 align:start position:0%
statement and that's all there is to it
 

01:40:35.280 --> 01:40:37.430 align:start position:0%
statement and that's all there is to it
so<01:40:35.520><c> we</c><01:40:35.679><c> cut</c><01:40:35.920><c> down</c><01:40:36.239><c> on</c><01:40:36.400><c> all</c><01:40:36.480><c> that</c><01:40:36.719><c> code</c><01:40:37.040><c> and</c><01:40:37.199><c> now</c>

01:40:37.430 --> 01:40:37.440 align:start position:0%
so we cut down on all that code and now
 

01:40:37.440 --> 01:40:39.669 align:start position:0%
so we cut down on all that code and now
just<01:40:37.679><c> have</c><01:40:38.159><c> one</c><01:40:38.560><c> line</c><01:40:38.800><c> of</c><01:40:38.960><c> code</c><01:40:39.280><c> so</c><01:40:39.440><c> it's</c><01:40:39.520><c> kind</c>

01:40:39.669 --> 01:40:39.679 align:start position:0%
just have one line of code so it's kind
 

01:40:39.679 --> 01:40:41.669 align:start position:0%
just have one line of code so it's kind
of<01:40:39.760><c> like</c><01:40:39.920><c> a</c><01:40:40.000><c> shortcut</c><01:40:40.800><c> and</c><01:40:40.880><c> this</c><01:40:41.119><c> works</c><01:40:41.360><c> much</c>

01:40:41.669 --> 01:40:41.679 align:start position:0%
of like a shortcut and this works much
 

01:40:41.679 --> 01:40:44.229 align:start position:0%
of like a shortcut and this works much
the<01:40:41.840><c> same</c><01:40:42.320><c> so</c><01:40:42.480><c> the</c><01:40:42.639><c> maximum</c><01:40:43.199><c> between</c><01:40:43.679><c> five</c><01:40:44.000><c> and</c>

01:40:44.229 --> 01:40:44.239 align:start position:0%
the same so the maximum between five and
 

01:40:44.239 --> 01:40:46.790 align:start position:0%
the same so the maximum between five and
four<01:40:44.880><c> is</c><01:40:45.119><c> five</c><01:40:45.440><c> and</c><01:40:45.600><c> if</c><01:40:45.760><c> i</c><01:40:45.920><c> change</c><01:40:46.320><c> five</c><01:40:46.639><c> back</c>

01:40:46.790 --> 01:40:46.800 align:start position:0%
four is five and if i change five back
 

01:40:46.800 --> 01:40:49.750 align:start position:0%
four is five and if i change five back
to<01:40:47.040><c> three</c><01:40:47.679><c> well</c><01:40:47.920><c> then</c><01:40:48.159><c> the</c><01:40:48.320><c> max</c><01:40:48.800><c> is</c><01:40:48.960><c> for</c><01:40:49.600><c> so</c>

01:40:49.750 --> 01:40:49.760 align:start position:0%
to three well then the max is for so
 

01:40:49.760 --> 01:40:51.750 align:start position:0%
to three well then the max is for so
yeah<01:40:50.000><c> that's</c><01:40:50.239><c> the</c><01:40:50.320><c> ternary</c><01:40:50.800><c> operator</c><01:40:51.360><c> it's</c><01:40:51.600><c> a</c>

01:40:51.750 --> 01:40:51.760 align:start position:0%
yeah that's the ternary operator it's a
 

01:40:51.760 --> 01:40:53.910 align:start position:0%
yeah that's the ternary operator it's a
shortcut<01:40:52.239><c> to</c><01:40:52.400><c> using</c><01:40:52.719><c> an</c><01:40:52.880><c> if</c><01:40:53.119><c> else</c><01:40:53.360><c> statement</c>

01:40:53.910 --> 01:40:53.920 align:start position:0%
shortcut to using an if else statement
 

01:40:53.920 --> 01:40:56.550 align:start position:0%
shortcut to using an if else statement
when<01:40:54.159><c> assigning</c><01:40:54.719><c> or</c><01:40:54.880><c> returning</c><01:40:55.520><c> a</c><01:40:55.760><c> value</c><01:40:56.400><c> you</c>

01:40:56.550 --> 01:40:56.560 align:start position:0%
when assigning or returning a value you
 

01:40:56.560 --> 01:40:58.790 align:start position:0%
when assigning or returning a value you
write<01:40:56.800><c> some</c><01:40:56.960><c> condition</c><01:40:57.840><c> add</c><01:40:58.000><c> a</c><01:40:58.159><c> question</c><01:40:58.480><c> mark</c>

01:40:58.790 --> 01:40:58.800 align:start position:0%
write some condition add a question mark
 

01:40:58.800 --> 01:41:01.270 align:start position:0%
write some condition add a question mark
like<01:40:59.040><c> you're</c><01:40:59.199><c> asking</c><01:40:59.520><c> a</c><01:40:59.679><c> question</c><01:41:00.560><c> then</c><01:41:00.880><c> list</c>

01:41:01.270 --> 01:41:01.280 align:start position:0%
like you're asking a question then list
 

01:41:01.280 --> 01:41:04.310 align:start position:0%
like you're asking a question then list
some<01:41:01.600><c> value</c><01:41:02.000><c> to</c><01:41:02.159><c> return</c><01:41:02.960><c> if</c><01:41:03.280><c> this</c><01:41:03.520><c> condition</c>

01:41:04.310 --> 01:41:04.320 align:start position:0%
some value to return if this condition
 

01:41:04.320 --> 01:41:06.790 align:start position:0%
some value to return if this condition
is<01:41:04.560><c> true</c><01:41:05.199><c> and</c><01:41:05.360><c> then</c><01:41:05.600><c> some</c><01:41:05.840><c> other</c><01:41:06.080><c> value</c><01:41:06.560><c> if</c>

01:41:06.790 --> 01:41:06.800 align:start position:0%
is true and then some other value if
 

01:41:06.800 --> 01:41:09.189 align:start position:0%
is true and then some other value if
this<01:41:07.040><c> condition</c><01:41:07.760><c> is</c><01:41:08.000><c> false</c><01:41:08.639><c> so</c><01:41:08.800><c> you</c><01:41:08.960><c> just</c>

01:41:09.189 --> 01:41:09.199 align:start position:0%
this condition is false so you just
 

01:41:09.199 --> 01:41:11.189 align:start position:0%
this condition is false so you just
follow<01:41:09.520><c> this</c><01:41:09.679><c> formula</c><01:41:10.480><c> so</c><01:41:10.639><c> yeah</c><01:41:10.880><c> that's</c><01:41:11.119><c> the</c>

01:41:11.189 --> 01:41:11.199 align:start position:0%
follow this formula so yeah that's the
 

01:41:11.199 --> 01:41:12.950 align:start position:0%
follow this formula so yeah that's the
trenary<01:41:11.760><c> operator</c><01:41:12.400><c> if</c><01:41:12.560><c> you</c><01:41:12.639><c> would</c><01:41:12.719><c> like</c><01:41:12.880><c> a</c>

01:41:12.950 --> 01:41:12.960 align:start position:0%
trenary operator if you would like a
 

01:41:12.960 --> 01:41:14.709 align:start position:0%
trenary operator if you would like a
copy<01:41:13.280><c> of</c><01:41:13.360><c> this</c><01:41:13.520><c> code</c><01:41:13.760><c> i'll</c><01:41:14.000><c> post</c><01:41:14.320><c> this</c><01:41:14.480><c> to</c><01:41:14.639><c> the</c>

01:41:14.709 --> 01:41:14.719 align:start position:0%
copy of this code i'll post this to the
 

01:41:14.719 --> 01:41:16.709 align:start position:0%
copy of this code i'll post this to the
comments<01:41:15.040><c> section</c><01:41:15.360><c> down</c><01:41:15.600><c> below</c><01:41:16.159><c> and</c><01:41:16.400><c> well</c>

01:41:16.709 --> 01:41:16.719 align:start position:0%
comments section down below and well
 

01:41:16.719 --> 01:41:22.470 align:start position:0%
comments section down below and well
yeah<01:41:16.960><c> that's</c><01:41:17.199><c> the</c><01:41:17.360><c> canary</c><01:41:17.840><c> operator</c><01:41:18.560><c> nc</c>

01:41:22.470 --> 01:41:22.480 align:start position:0%
 
 

01:41:22.480 --> 01:41:24.790 align:start position:0%
 
hey<01:41:22.800><c> everybody</c><01:41:23.280><c> so</c><01:41:23.520><c> let's</c><01:41:23.760><c> discuss</c><01:41:24.400><c> function</c>

01:41:24.790 --> 01:41:24.800 align:start position:0%
hey everybody so let's discuss function
 

01:41:24.800 --> 01:41:27.669 align:start position:0%
hey everybody so let's discuss function
prototypes<01:41:25.679><c> a</c><01:41:25.920><c> function</c><01:41:26.400><c> prototype</c><01:41:27.119><c> is</c><01:41:27.360><c> a</c>

01:41:27.669 --> 01:41:27.679 align:start position:0%
prototypes a function prototype is a
 

01:41:27.679 --> 01:41:30.470 align:start position:0%
prototypes a function prototype is a
functional<01:41:28.239><c> declaration</c><01:41:29.280><c> without</c><01:41:29.679><c> a</c><01:41:29.760><c> body</c>

01:41:30.470 --> 01:41:30.480 align:start position:0%
functional declaration without a body
 

01:41:30.480 --> 01:41:32.709 align:start position:0%
functional declaration without a body
before<01:41:30.800><c> we</c><01:41:30.960><c> declare</c><01:41:31.440><c> the</c><01:41:31.520><c> main</c><01:41:31.840><c> function</c><01:41:32.480><c> it</c>

01:41:32.709 --> 01:41:32.719 align:start position:0%
before we declare the main function it
 

01:41:32.719 --> 01:41:35.030 align:start position:0%
before we declare the main function it
ensures<01:41:33.280><c> that</c><01:41:33.600><c> calls</c><01:41:34.000><c> to</c><01:41:34.159><c> a</c><01:41:34.320><c> function</c><01:41:34.880><c> are</c>

01:41:35.030 --> 01:41:35.040 align:start position:0%
ensures that calls to a function are
 

01:41:35.040 --> 01:41:37.669 align:start position:0%
ensures that calls to a function are
made<01:41:35.360><c> with</c><01:41:35.600><c> the</c><01:41:35.760><c> correct</c><01:41:36.320><c> number</c><01:41:36.800><c> and</c><01:41:37.119><c> type</c><01:41:37.440><c> of</c>

01:41:37.669 --> 01:41:37.679 align:start position:0%
made with the correct number and type of
 

01:41:37.679 --> 01:41:39.830 align:start position:0%
made with the correct number and type of
arguments<01:41:38.480><c> it</c><01:41:38.639><c> has</c><01:41:38.880><c> some</c><01:41:39.040><c> benefits</c><01:41:39.600><c> which</c>

01:41:39.830 --> 01:41:39.840 align:start position:0%
arguments it has some benefits which
 

01:41:39.840 --> 01:41:41.750 align:start position:0%
arguments it has some benefits which
we'll<01:41:40.000><c> discuss</c><01:41:40.480><c> later</c><01:41:40.960><c> basically</c><01:41:41.440><c> this</c><01:41:41.600><c> is</c>

01:41:41.750 --> 01:41:41.760 align:start position:0%
we'll discuss later basically this is
 

01:41:41.760 --> 01:41:43.830 align:start position:0%
we'll discuss later basically this is
another<01:41:42.239><c> way</c><01:41:42.560><c> in</c><01:41:42.639><c> which</c><01:41:42.880><c> we</c><01:41:43.040><c> can</c><01:41:43.280><c> declare</c><01:41:43.760><c> and</c>

01:41:43.830 --> 01:41:43.840 align:start position:0%
another way in which we can declare and
 

01:41:43.840 --> 01:41:46.550 align:start position:0%
another way in which we can declare and
define<01:41:44.320><c> functions</c><01:41:45.199><c> in</c><01:41:45.360><c> the</c><01:41:45.440><c> last</c><01:41:45.760><c> few</c><01:41:46.080><c> topics</c>

01:41:46.550 --> 01:41:46.560 align:start position:0%
define functions in the last few topics
 

01:41:46.560 --> 01:41:48.629 align:start position:0%
define functions in the last few topics
when<01:41:46.719><c> we</c><01:41:46.880><c> were</c><01:41:47.119><c> declaring</c><01:41:47.679><c> functions</c><01:41:48.239><c> we</c><01:41:48.400><c> were</c>

01:41:48.629 --> 01:41:48.639 align:start position:0%
when we were declaring functions we were
 

01:41:48.639 --> 01:41:51.109 align:start position:0%
when we were declaring functions we were
doing<01:41:48.960><c> so</c><01:41:49.360><c> before</c><01:41:49.760><c> the</c><01:41:49.920><c> main</c><01:41:50.159><c> function</c><01:41:50.880><c> so</c>

01:41:51.109 --> 01:41:51.119 align:start position:0%
doing so before the main function so
 

01:41:51.119 --> 01:41:53.109 align:start position:0%
doing so before the main function so
let's<01:41:51.280><c> say</c><01:41:51.600><c> void</c><01:41:52.080><c> and</c><01:41:52.239><c> we</c><01:41:52.400><c> have</c><01:41:52.560><c> a</c><01:41:52.639><c> function</c>

01:41:53.109 --> 01:41:53.119 align:start position:0%
let's say void and we have a function
 

01:41:53.119 --> 01:41:55.030 align:start position:0%
let's say void and we have a function
named<01:41:53.360><c> hello</c><01:41:54.159><c> and</c><01:41:54.320><c> there</c><01:41:54.480><c> will</c><01:41:54.639><c> be</c><01:41:54.800><c> two</c>

01:41:55.030 --> 01:41:55.040 align:start position:0%
named hello and there will be two
 

01:41:55.040 --> 01:41:57.109 align:start position:0%
named hello and there will be two
arguments<01:41:55.600><c> and</c><01:41:55.760><c> ray</c><01:41:55.920><c> of</c><01:41:56.080><c> characters</c><01:41:56.719><c> named</c>

01:41:57.109 --> 01:41:57.119 align:start position:0%
arguments and ray of characters named
 

01:41:57.119 --> 01:41:59.910 align:start position:0%
arguments and ray of characters named
name<01:41:57.840><c> and</c><01:41:58.159><c> int</c><01:41:58.560><c> age</c><01:41:59.199><c> and</c><01:41:59.360><c> what</c><01:41:59.600><c> i</c><01:41:59.679><c> would</c><01:41:59.760><c> like</c>

01:41:59.910 --> 01:41:59.920 align:start position:0%
name and int age and what i would like
 

01:41:59.920 --> 01:42:01.830 align:start position:0%
name and int age and what i would like
this<01:42:00.080><c> function</c><01:42:00.400><c> to</c><01:42:00.560><c> do</c><01:42:00.880><c> is</c><01:42:01.040><c> print</c><01:42:01.280><c> a</c><01:42:01.360><c> message</c>

01:42:01.830 --> 01:42:01.840 align:start position:0%
this function to do is print a message
 

01:42:01.840 --> 01:42:05.590 align:start position:0%
this function to do is print a message
using<01:42:02.320><c> our</c><01:42:02.560><c> name</c><01:42:03.040><c> and</c><01:42:03.360><c> age</c>

01:42:05.590 --> 01:42:05.600 align:start position:0%
using our name and age
 

01:42:05.600 --> 01:42:12.149 align:start position:0%
using our name and age
so<01:42:05.920><c> hello</c><01:42:06.320><c> name</c>

01:42:12.149 --> 01:42:12.159 align:start position:0%
 
 

01:42:12.159 --> 01:42:15.030 align:start position:0%
 
you<01:42:12.560><c> are</c><01:42:13.040><c> age</c><01:42:13.520><c> years</c><01:42:13.920><c> old</c><01:42:14.480><c> so</c><01:42:14.719><c> what</c><01:42:14.880><c> we're</c>

01:42:15.030 --> 01:42:15.040 align:start position:0%
you are age years old so what we're
 

01:42:15.040 --> 01:42:17.510 align:start position:0%
you are age years old so what we're
going<01:42:15.199><c> to</c><01:42:15.360><c> do</c><01:42:15.679><c> is</c><01:42:16.000><c> now</c><01:42:16.320><c> move</c><01:42:16.639><c> this</c><01:42:16.960><c> function</c>

01:42:17.510 --> 01:42:17.520 align:start position:0%
going to do is now move this function
 

01:42:17.520 --> 01:42:20.390 align:start position:0%
going to do is now move this function
from<01:42:18.000><c> before</c><01:42:18.400><c> the</c><01:42:18.560><c> main</c><01:42:18.800><c> function</c><01:42:19.760><c> to</c><01:42:20.080><c> after</c>

01:42:20.390 --> 01:42:20.400 align:start position:0%
from before the main function to after
 

01:42:20.400 --> 01:42:22.950 align:start position:0%
from before the main function to after
the<01:42:20.560><c> main</c><01:42:20.880><c> function</c><01:42:21.760><c> and</c><01:42:22.000><c> let's</c><01:42:22.239><c> declare</c><01:42:22.719><c> some</c>

01:42:22.950 --> 01:42:22.960 align:start position:0%
the main function and let's declare some
 

01:42:22.960 --> 01:42:26.310 align:start position:0%
the main function and let's declare some
name<01:42:23.280><c> and</c><01:42:23.440><c> age</c><01:42:23.679><c> variables</c><01:42:24.560><c> so</c><01:42:24.880><c> char</c><01:42:25.280><c> name</c>

01:42:26.310 --> 01:42:26.320 align:start position:0%
name and age variables so char name
 

01:42:26.320 --> 01:42:29.270 align:start position:0%
name and age variables so char name
use<01:42:26.560><c> your</c><01:42:26.639><c> first</c><01:42:26.960><c> name</c><01:42:27.520><c> and</c><01:42:27.760><c> int</c><01:42:28.320><c> age</c><01:42:28.880><c> make</c><01:42:29.119><c> up</c>

01:42:29.270 --> 01:42:29.280 align:start position:0%
use your first name and int age make up
 

01:42:29.280 --> 01:42:31.430 align:start position:0%
use your first name and int age make up
some<01:42:29.520><c> age</c><01:42:30.080><c> now</c><01:42:30.320><c> i'm</c><01:42:30.480><c> going</c><01:42:30.719><c> to</c><01:42:30.880><c> invoke</c><01:42:31.280><c> my</c>

01:42:31.430 --> 01:42:31.440 align:start position:0%
some age now i'm going to invoke my
 

01:42:31.440 --> 01:42:32.790 align:start position:0%
some age now i'm going to invoke my
hello<01:42:31.840><c> function</c>

01:42:32.790 --> 01:42:32.800 align:start position:0%
hello function
 

01:42:32.800 --> 01:42:35.030 align:start position:0%
hello function
but<01:42:33.119><c> pass</c><01:42:33.440><c> in</c><01:42:33.679><c> an</c><01:42:33.920><c> incorrect</c><01:42:34.560><c> number</c><01:42:34.880><c> of</c>

01:42:35.030 --> 01:42:35.040 align:start position:0%
but pass in an incorrect number of
 

01:42:35.040 --> 01:42:37.030 align:start position:0%
but pass in an incorrect number of
arguments<01:42:35.760><c> now</c><01:42:35.920><c> here's</c><01:42:36.159><c> one</c><01:42:36.320><c> of</c><01:42:36.400><c> the</c><01:42:36.480><c> benefits</c>

01:42:37.030 --> 01:42:37.040 align:start position:0%
arguments now here's one of the benefits
 

01:42:37.040 --> 01:42:39.350 align:start position:0%
arguments now here's one of the benefits
of<01:42:37.199><c> a</c><01:42:37.360><c> function</c><01:42:37.760><c> of</c><01:42:37.840><c> prototype</c><01:42:38.719><c> it's</c><01:42:38.960><c> going</c><01:42:39.119><c> to</c>

01:42:39.350 --> 01:42:39.360 align:start position:0%
of a function of prototype it's going to
 

01:42:39.360 --> 01:42:41.430 align:start position:0%
of a function of prototype it's going to
ensure<01:42:39.760><c> that</c><01:42:39.920><c> we</c><01:42:40.080><c> have</c><01:42:40.320><c> the</c><01:42:40.560><c> correct</c><01:42:41.040><c> number</c>

01:42:41.430 --> 01:42:41.440 align:start position:0%
ensure that we have the correct number
 

01:42:41.440 --> 01:42:43.830 align:start position:0%
ensure that we have the correct number
of<01:42:41.600><c> arguments</c><01:42:42.239><c> when</c><01:42:42.480><c> we</c><01:42:42.639><c> invoke</c><01:42:42.960><c> a</c><01:42:43.040><c> function</c>

01:42:43.830 --> 01:42:43.840 align:start position:0%
of arguments when we invoke a function
 

01:42:43.840 --> 01:42:45.990 align:start position:0%
of arguments when we invoke a function
so<01:42:44.080><c> the</c><01:42:44.239><c> correct</c><01:42:44.639><c> arguments</c><01:42:45.280><c> for</c><01:42:45.520><c> our</c><01:42:45.600><c> hello</c>

01:42:45.990 --> 01:42:46.000 align:start position:0%
so the correct arguments for our hello
 

01:42:46.000 --> 01:42:48.310 align:start position:0%
so the correct arguments for our hello
function<01:42:46.480><c> are</c><01:42:46.719><c> an</c><01:42:46.880><c> array</c><01:42:47.119><c> of</c><01:42:47.280><c> characters</c><01:42:48.080><c> and</c>

01:42:48.310 --> 01:42:48.320 align:start position:0%
function are an array of characters and
 

01:42:48.320 --> 01:42:50.149 align:start position:0%
function are an array of characters and
an<01:42:48.480><c> integer</c><01:42:49.199><c> what</c><01:42:49.360><c> if</c><01:42:49.520><c> i'm</c><01:42:49.600><c> missing</c><01:42:49.920><c> one</c><01:42:50.080><c> of</c>

01:42:50.149 --> 01:42:50.159 align:start position:0%
an integer what if i'm missing one of
 

01:42:50.159 --> 01:42:51.990 align:start position:0%
an integer what if i'm missing one of
these<01:42:50.320><c> arguments</c><01:42:50.880><c> let's</c><01:42:51.119><c> say</c><01:42:51.280><c> we</c><01:42:51.440><c> only</c><01:42:51.679><c> pass</c>

01:42:51.990 --> 01:42:52.000 align:start position:0%
these arguments let's say we only pass
 

01:42:52.000 --> 01:42:53.350 align:start position:0%
these arguments let's say we only pass
in<01:42:52.239><c> a</c><01:42:52.320><c> name</c>

01:42:53.350 --> 01:42:53.360 align:start position:0%
in a name
 

01:42:53.360 --> 01:42:55.350 align:start position:0%
in a name
and<01:42:53.440><c> then</c><01:42:53.679><c> invoke</c><01:42:54.000><c> this</c><01:42:54.239><c> function</c>

01:42:55.350 --> 01:42:55.360 align:start position:0%
and then invoke this function
 

01:42:55.360 --> 01:42:57.830 align:start position:0%
and then invoke this function
so<01:42:55.600><c> this</c><01:42:55.840><c> is</c><01:42:55.920><c> going</c><01:42:56.159><c> to</c><01:42:56.320><c> result</c><01:42:56.880><c> in</c><01:42:57.119><c> unexpected</c>

01:42:57.830 --> 01:42:57.840 align:start position:0%
so this is going to result in unexpected
 

01:42:57.840 --> 01:42:59.830 align:start position:0%
so this is going to result in unexpected
behavior

01:42:59.830 --> 01:42:59.840 align:start position:0%
behavior
 

01:42:59.840 --> 01:43:01.030 align:start position:0%
behavior
and<01:43:00.000><c> we</c><01:43:00.080><c> do</c><01:43:00.239><c> have</c><01:43:00.400><c> a</c><01:43:00.480><c> warning</c><01:43:00.800><c> here</c>

01:43:01.030 --> 01:43:01.040 align:start position:0%
and we do have a warning here
 

01:43:01.040 --> 01:43:03.430 align:start position:0%
and we do have a warning here
conflicting<01:43:01.760><c> types</c><01:43:02.080><c> for</c><01:43:02.320><c> hello</c><01:43:02.960><c> but</c><01:43:03.199><c> this</c>

01:43:03.430 --> 01:43:03.440 align:start position:0%
conflicting types for hello but this
 

01:43:03.440 --> 01:43:05.750 align:start position:0%
conflicting types for hello but this
program<01:43:03.840><c> will</c><01:43:04.080><c> still</c><01:43:04.320><c> compile</c><01:43:04.719><c> and</c><01:43:04.880><c> execute</c>

01:43:05.750 --> 01:43:05.760 align:start position:0%
program will still compile and execute
 

01:43:05.760 --> 01:43:09.030 align:start position:0%
program will still compile and execute
so<01:43:05.920><c> here's</c><01:43:06.239><c> the</c><01:43:06.320><c> result</c><01:43:06.960><c> hello</c><01:43:07.440><c> bro</c><01:43:07.840><c> you</c><01:43:08.159><c> are</c>

01:43:09.030 --> 01:43:09.040 align:start position:0%
so here's the result hello bro you are
 

01:43:09.040 --> 01:43:10.709 align:start position:0%
so here's the result hello bro you are
million<01:43:09.520><c> five</c><01:43:09.760><c> hundred</c><01:43:10.080><c> twelve</c><01:43:10.320><c> thousand</c>

01:43:10.709 --> 01:43:10.719 align:start position:0%
million five hundred twelve thousand
 

01:43:10.719 --> 01:43:13.030 align:start position:0%
million five hundred twelve thousand
three<01:43:10.880><c> hundred</c><01:43:11.119><c> and</c><01:43:11.280><c> fifty</c><01:43:11.520><c> two</c><01:43:11.760><c> years</c><01:43:12.000><c> old</c>

01:43:13.030 --> 01:43:13.040 align:start position:0%
three hundred and fifty two years old
 

01:43:13.040 --> 01:43:14.149 align:start position:0%
three hundred and fifty two years old
and<01:43:13.199><c> if</c><01:43:13.280><c> i</c><01:43:13.360><c> run</c><01:43:13.520><c> this</c><01:43:13.679><c> again</c><01:43:13.920><c> this</c><01:43:14.000><c> will</c>

01:43:14.149 --> 01:43:14.159 align:start position:0%
and if i run this again this will
 

01:43:14.159 --> 01:43:15.990 align:start position:0%
and if i run this again this will
probably<01:43:14.480><c> be</c><01:43:14.639><c> a</c><01:43:14.719><c> different</c><01:43:14.960><c> number</c><01:43:15.600><c> so</c><01:43:15.840><c> this</c>

01:43:15.990 --> 01:43:16.000 align:start position:0%
probably be a different number so this
 

01:43:16.000 --> 01:43:18.310 align:start position:0%
probably be a different number so this
will<01:43:16.239><c> result</c><01:43:16.639><c> in</c><01:43:16.960><c> unexpected</c><01:43:17.600><c> behavior</c><01:43:18.159><c> we're</c>

01:43:18.310 --> 01:43:18.320 align:start position:0%
will result in unexpected behavior we're
 

01:43:18.320 --> 01:43:20.550 align:start position:0%
will result in unexpected behavior we're
not<01:43:18.560><c> ensuring</c><01:43:19.280><c> that</c><01:43:19.520><c> calls</c><01:43:19.840><c> to</c><01:43:20.000><c> a</c><01:43:20.080><c> function</c>

01:43:20.550 --> 01:43:20.560 align:start position:0%
not ensuring that calls to a function
 

01:43:20.560 --> 01:43:22.709 align:start position:0%
not ensuring that calls to a function
are<01:43:20.719><c> made</c><01:43:20.960><c> with</c><01:43:21.119><c> the</c><01:43:21.199><c> correct</c><01:43:21.600><c> arguments</c><01:43:22.480><c> one</c>

01:43:22.709 --> 01:43:22.719 align:start position:0%
are made with the correct arguments one
 

01:43:22.719 --> 01:43:24.629 align:start position:0%
are made with the correct arguments one
way<01:43:22.880><c> in</c><01:43:23.040><c> which</c><01:43:23.199><c> we</c><01:43:23.360><c> can</c><01:43:23.520><c> do</c><01:43:23.679><c> that</c><01:43:23.920><c> is</c><01:43:24.080><c> to</c><01:43:24.239><c> add</c><01:43:24.400><c> a</c>

01:43:24.629 --> 01:43:24.639 align:start position:0%
way in which we can do that is to add a
 

01:43:24.639 --> 01:43:26.950 align:start position:0%
way in which we can do that is to add a
function<01:43:25.199><c> prototype</c><01:43:26.080><c> before</c><01:43:26.480><c> the</c><01:43:26.639><c> main</c>

01:43:26.950 --> 01:43:26.960 align:start position:0%
function prototype before the main
 

01:43:26.960 --> 01:43:29.990 align:start position:0%
function prototype before the main
function<01:43:27.760><c> and</c><01:43:28.000><c> to</c><01:43:28.239><c> add</c><01:43:28.480><c> a</c><01:43:28.719><c> function</c><01:43:29.119><c> prototype</c>

01:43:29.990 --> 01:43:30.000 align:start position:0%
function and to add a function prototype
 

01:43:30.000 --> 01:43:32.629 align:start position:0%
function and to add a function prototype
to<01:43:30.320><c> a</c><01:43:30.560><c> given</c><01:43:30.960><c> function</c><01:43:31.600><c> we</c><01:43:31.760><c> will</c><01:43:32.000><c> declare</c><01:43:32.480><c> that</c>

01:43:32.629 --> 01:43:32.639 align:start position:0%
to a given function we will declare that
 

01:43:32.639 --> 01:43:34.870 align:start position:0%
to a given function we will declare that
function<01:43:33.119><c> but</c><01:43:33.360><c> not</c><01:43:33.520><c> give</c><01:43:33.679><c> it</c><01:43:33.840><c> a</c><01:43:33.920><c> body</c><01:43:34.560><c> before</c>

01:43:34.870 --> 01:43:34.880 align:start position:0%
function but not give it a body before
 

01:43:34.880 --> 01:43:36.870 align:start position:0%
function but not give it a body before
the<01:43:35.040><c> main</c><01:43:35.280><c> function</c><01:43:35.840><c> and</c><01:43:36.000><c> then</c><01:43:36.159><c> we</c><01:43:36.320><c> will</c><01:43:36.480><c> later</c>

01:43:36.870 --> 01:43:36.880 align:start position:0%
the main function and then we will later
 

01:43:36.880 --> 01:43:38.870 align:start position:0%
the main function and then we will later
add<01:43:37.119><c> a</c><01:43:37.199><c> body</c><01:43:37.520><c> and</c><01:43:37.600><c> define</c><01:43:38.159><c> what</c><01:43:38.320><c> this</c><01:43:38.480><c> function</c>

01:43:38.870 --> 01:43:38.880 align:start position:0%
add a body and define what this function
 

01:43:38.880 --> 01:43:40.550 align:start position:0%
add a body and define what this function
is<01:43:38.960><c> going</c><01:43:39.119><c> to</c><01:43:39.280><c> do</c><01:43:39.600><c> so</c><01:43:39.840><c> before</c><01:43:40.159><c> the</c><01:43:40.320><c> main</c>

01:43:40.550 --> 01:43:40.560 align:start position:0%
is going to do so before the main
 

01:43:40.560 --> 01:43:43.030 align:start position:0%
is going to do so before the main
function<01:43:41.040><c> we</c><01:43:41.280><c> will</c><01:43:41.520><c> type</c><01:43:42.080><c> the</c><01:43:42.239><c> return</c><01:43:42.639><c> type</c><01:43:42.960><c> of</c>

01:43:43.030 --> 01:43:43.040 align:start position:0%
function we will type the return type of
 

01:43:43.040 --> 01:43:44.310 align:start position:0%
function we will type the return type of
this<01:43:43.280><c> function</c>

01:43:44.310 --> 01:43:44.320 align:start position:0%
this function
 

01:43:44.320 --> 01:43:45.830 align:start position:0%
this function
void

01:43:45.830 --> 01:43:45.840 align:start position:0%
void
 

01:43:45.840 --> 01:43:47.350 align:start position:0%
void
the<01:43:45.920><c> name</c><01:43:46.080><c> of</c><01:43:46.239><c> the</c><01:43:46.320><c> function</c>

01:43:47.350 --> 01:43:47.360 align:start position:0%
the name of the function
 

01:43:47.360 --> 01:43:50.070 align:start position:0%
the name of the function
hello<01:43:48.159><c> and</c><01:43:48.239><c> then</c><01:43:48.560><c> add</c><01:43:48.880><c> the</c><01:43:49.119><c> data</c><01:43:49.440><c> type</c><01:43:49.760><c> and</c><01:43:49.920><c> the</c>

01:43:50.070 --> 01:43:50.080 align:start position:0%
hello and then add the data type and the
 

01:43:50.080 --> 01:43:52.390 align:start position:0%
hello and then add the data type and the
order<01:43:50.480><c> of</c><01:43:50.719><c> arguments</c><01:43:51.520><c> so</c><01:43:51.760><c> we</c><01:43:51.920><c> have</c><01:43:52.239><c> a</c>

01:43:52.390 --> 01:43:52.400 align:start position:0%
order of arguments so we have a
 

01:43:52.400 --> 01:43:53.910 align:start position:0%
order of arguments so we have a
character<01:43:52.880><c> array</c>

01:43:53.910 --> 01:43:53.920 align:start position:0%
character array
 

01:43:53.920 --> 01:43:55.830 align:start position:0%
character array
and<01:43:54.159><c> an</c><01:43:54.320><c> integer</c><01:43:54.960><c> then</c><01:43:55.280><c> end</c><01:43:55.440><c> it</c><01:43:55.520><c> with</c><01:43:55.679><c> a</c>

01:43:55.830 --> 01:43:55.840 align:start position:0%
and an integer then end it with a
 

01:43:55.840 --> 01:43:59.189 align:start position:0%
and an integer then end it with a
semicolon<01:43:56.880><c> so</c><01:43:57.199><c> this</c><01:43:57.520><c> is</c><01:43:57.840><c> a</c><01:43:58.239><c> function</c>

01:43:59.189 --> 01:43:59.199 align:start position:0%
semicolon so this is a function
 

01:43:59.199 --> 01:44:00.629 align:start position:0%
semicolon so this is a function
prototype

01:44:00.629 --> 01:44:00.639 align:start position:0%
prototype
 

01:44:00.639 --> 01:44:02.870 align:start position:0%
prototype
it<01:44:00.880><c> ensures</c><01:44:01.360><c> that</c><01:44:01.600><c> calls</c><01:44:01.920><c> to</c><01:44:02.080><c> a</c><01:44:02.159><c> function</c><01:44:02.639><c> are</c>

01:44:02.870 --> 01:44:02.880 align:start position:0%
it ensures that calls to a function are
 

01:44:02.880 --> 01:44:05.109 align:start position:0%
it ensures that calls to a function are
made<01:44:03.119><c> with</c><01:44:03.280><c> the</c><01:44:03.360><c> correct</c><01:44:03.840><c> arguments</c><01:44:04.560><c> so</c><01:44:04.880><c> now</c>

01:44:05.109 --> 01:44:05.119 align:start position:0%
made with the correct arguments so now
 

01:44:05.119 --> 01:44:07.830 align:start position:0%
made with the correct arguments so now
if<01:44:05.280><c> i</c><01:44:05.440><c> attempt</c><01:44:05.920><c> to</c><01:44:06.159><c> call</c><01:44:06.400><c> the</c><01:44:06.560><c> hello</c><01:44:06.880><c> function</c>

01:44:07.830 --> 01:44:07.840 align:start position:0%
if i attempt to call the hello function
 

01:44:07.840 --> 01:44:10.070 align:start position:0%
if i attempt to call the hello function
with<01:44:08.080><c> only</c><01:44:08.400><c> one</c><01:44:08.639><c> argument</c><01:44:09.280><c> when</c><01:44:09.679><c> two</c><01:44:09.920><c> are</c>

01:44:10.070 --> 01:44:10.080 align:start position:0%
with only one argument when two are
 

01:44:10.080 --> 01:44:12.390 align:start position:0%
with only one argument when two are
required<01:44:10.960><c> instead</c><01:44:11.280><c> of</c><01:44:11.440><c> a</c><01:44:11.520><c> warning</c><01:44:12.239><c> we'll</c>

01:44:12.390 --> 01:44:12.400 align:start position:0%
required instead of a warning we'll
 

01:44:12.400 --> 01:44:14.149 align:start position:0%
required instead of a warning we'll
receive<01:44:12.719><c> an</c><01:44:12.960><c> error</c><01:44:13.360><c> and</c><01:44:13.520><c> it</c><01:44:13.600><c> states</c><01:44:14.000><c> that</c>

01:44:14.149 --> 01:44:14.159 align:start position:0%
receive an error and it states that
 

01:44:14.159 --> 01:44:16.709 align:start position:0%
receive an error and it states that
there<01:44:14.400><c> are</c><01:44:14.639><c> too</c><01:44:15.040><c> few</c><01:44:15.360><c> arguments</c><01:44:16.000><c> to</c><01:44:16.239><c> function</c>

01:44:16.709 --> 01:44:16.719 align:start position:0%
there are too few arguments to function
 

01:44:16.719 --> 01:44:19.350 align:start position:0%
there are too few arguments to function
hello<01:44:17.440><c> so</c><01:44:17.600><c> this</c><01:44:17.840><c> program</c><01:44:18.400><c> will</c><01:44:18.560><c> not</c><01:44:18.800><c> compile</c>

01:44:19.350 --> 01:44:19.360 align:start position:0%
hello so this program will not compile
 

01:44:19.360 --> 01:44:21.270 align:start position:0%
hello so this program will not compile
and<01:44:19.600><c> run</c><01:44:19.840><c> successfully</c><01:44:20.560><c> which</c><01:44:20.800><c> is</c><01:44:20.880><c> what</c><01:44:21.119><c> we</c>

01:44:21.270 --> 01:44:21.280 align:start position:0%
and run successfully which is what we
 

01:44:21.280 --> 01:44:23.750 align:start position:0%
and run successfully which is what we
want<01:44:21.840><c> because</c><01:44:22.239><c> we</c><01:44:22.400><c> made</c><01:44:22.560><c> a</c><01:44:22.639><c> mistake</c><01:44:23.280><c> and</c><01:44:23.520><c> if</c><01:44:23.679><c> i</c>

01:44:23.750 --> 01:44:23.760 align:start position:0%
want because we made a mistake and if i
 

01:44:23.760 --> 01:44:25.990 align:start position:0%
want because we made a mistake and if i
were<01:44:24.000><c> to</c><01:44:24.239><c> add</c><01:44:24.560><c> the</c><01:44:24.719><c> correct</c><01:44:25.119><c> arguments</c><01:44:25.600><c> now</c>

01:44:25.990 --> 01:44:26.000 align:start position:0%
were to add the correct arguments now
 

01:44:26.000 --> 01:44:27.910 align:start position:0%
were to add the correct arguments now
well<01:44:26.239><c> then</c><01:44:26.639><c> this</c><01:44:26.960><c> program</c><01:44:27.360><c> is</c><01:44:27.520><c> going</c><01:44:27.679><c> to</c>

01:44:27.910 --> 01:44:27.920 align:start position:0%
well then this program is going to
 

01:44:27.920 --> 01:44:29.830 align:start position:0%
well then this program is going to
compile<01:44:28.480><c> and</c><01:44:28.639><c> run</c><01:44:28.960><c> fine</c>

01:44:29.830 --> 01:44:29.840 align:start position:0%
compile and run fine
 

01:44:29.840 --> 01:44:31.830 align:start position:0%
compile and run fine
so<01:44:30.080><c> here's</c><01:44:30.320><c> some</c><01:44:30.560><c> important</c><01:44:30.960><c> notes</c><01:44:31.280><c> regarding</c>

01:44:31.830 --> 01:44:31.840 align:start position:0%
so here's some important notes regarding
 

01:44:31.840 --> 01:44:35.350 align:start position:0%
so here's some important notes regarding
function<01:44:32.320><c> prototypes</c><01:44:33.520><c> many</c><01:44:34.000><c> c</c><01:44:34.239><c> compilers</c><01:44:35.199><c> do</c>

01:44:35.350 --> 01:44:35.360 align:start position:0%
function prototypes many c compilers do
 

01:44:35.360 --> 01:44:37.830 align:start position:0%
function prototypes many c compilers do
not<01:44:35.600><c> check</c><01:44:36.000><c> for</c><01:44:36.239><c> parameter</c><01:44:36.800><c> matching</c><01:44:37.520><c> that's</c>

01:44:37.830 --> 01:44:37.840 align:start position:0%
not check for parameter matching that's
 

01:44:37.840 --> 01:44:39.830 align:start position:0%
not check for parameter matching that's
why<01:44:38.080><c> this</c><01:44:38.320><c> program</c><01:44:38.880><c> was</c><01:44:39.119><c> still</c><01:44:39.360><c> able</c><01:44:39.679><c> to</c>

01:44:39.830 --> 01:44:39.840 align:start position:0%
why this program was still able to
 

01:44:39.840 --> 01:44:42.149 align:start position:0%
why this program was still able to
compile<01:44:40.560><c> and</c><01:44:40.800><c> run</c><01:44:41.280><c> without</c><01:44:41.760><c> a</c><01:44:41.840><c> function</c>

01:44:42.149 --> 01:44:42.159 align:start position:0%
compile and run without a function
 

01:44:42.159 --> 01:44:44.390 align:start position:0%
compile and run without a function
prototype<01:44:43.199><c> even</c><01:44:43.520><c> though</c><01:44:43.679><c> we</c><01:44:43.840><c> were</c><01:44:44.000><c> missing</c>

01:44:44.390 --> 01:44:44.400 align:start position:0%
prototype even though we were missing
 

01:44:44.400 --> 01:44:46.550 align:start position:0%
prototype even though we were missing
arguments<01:44:45.199><c> and</c><01:44:45.360><c> that</c><01:44:45.520><c> can</c><01:44:45.760><c> result</c><01:44:46.239><c> in</c>

01:44:46.550 --> 01:44:46.560 align:start position:0%
arguments and that can result in
 

01:44:46.560 --> 01:44:49.510 align:start position:0%
arguments and that can result in
unexpected<01:44:47.360><c> and</c><01:44:47.520><c> unwanted</c><01:44:48.159><c> behavior</c><01:44:49.040><c> such</c><01:44:49.280><c> as</c>

01:44:49.510 --> 01:44:49.520 align:start position:0%
unexpected and unwanted behavior such as
 

01:44:49.520 --> 01:44:51.669 align:start position:0%
unexpected and unwanted behavior such as
saying<01:44:49.840><c> that</c><01:44:50.080><c> i</c><01:44:50.239><c> was</c><01:44:50.560><c> over</c><01:44:50.800><c> a</c><01:44:50.960><c> million</c><01:44:51.360><c> years</c>

01:44:51.669 --> 01:44:51.679 align:start position:0%
saying that i was over a million years
 

01:44:51.679 --> 01:44:54.790 align:start position:0%
saying that i was over a million years
old<01:44:52.239><c> so</c><01:44:52.560><c> a</c><01:44:52.800><c> function</c><01:44:53.280><c> of</c><01:44:53.360><c> prototype</c><01:44:54.400><c> causes</c>

01:44:54.790 --> 01:44:54.800 align:start position:0%
old so a function of prototype causes
 

01:44:54.800 --> 01:44:57.430 align:start position:0%
old so a function of prototype causes
the<01:44:54.960><c> compiler</c><01:44:55.920><c> to</c><01:44:56.159><c> flag</c><01:44:56.480><c> an</c><01:44:56.719><c> error</c><01:44:57.199><c> if</c>

01:44:57.430 --> 01:44:57.440 align:start position:0%
the compiler to flag an error if
 

01:44:57.440 --> 01:44:59.270 align:start position:0%
the compiler to flag an error if
arguments<01:44:58.080><c> are</c><01:44:58.320><c> missing</c>

01:44:59.270 --> 01:44:59.280 align:start position:0%
arguments are missing
 

01:44:59.280 --> 01:45:01.350 align:start position:0%
arguments are missing
you<01:44:59.440><c> can</c><01:44:59.760><c> write</c><01:45:00.080><c> the</c><01:45:00.320><c> functions</c><01:45:00.880><c> before</c><01:45:01.199><c> the</c>

01:45:01.350 --> 01:45:01.360 align:start position:0%
you can write the functions before the
 

01:45:01.360 --> 01:45:03.830 align:start position:0%
you can write the functions before the
main<01:45:01.600><c> function</c><01:45:02.239><c> that's</c><01:45:02.560><c> okay</c><01:45:02.880><c> too</c><01:45:03.360><c> but</c><01:45:03.520><c> a</c><01:45:03.600><c> few</c>

01:45:03.830 --> 01:45:03.840 align:start position:0%
main function that's okay too but a few
 

01:45:03.840 --> 01:45:06.550 align:start position:0%
main function that's okay too but a few
advantages<01:45:04.480><c> of</c><01:45:04.639><c> using</c><01:45:04.960><c> a</c><01:45:05.119><c> function</c><01:45:05.600><c> prototype</c>

01:45:06.550 --> 01:45:06.560 align:start position:0%
advantages of using a function prototype
 

01:45:06.560 --> 01:45:08.310 align:start position:0%
advantages of using a function prototype
is<01:45:06.719><c> that</c><01:45:06.960><c> it's</c><01:45:07.199><c> easier</c><01:45:07.520><c> to</c><01:45:07.679><c> navigate</c><01:45:08.159><c> a</c>

01:45:08.310 --> 01:45:08.320 align:start position:0%
is that it's easier to navigate a
 

01:45:08.320 --> 01:45:10.790 align:start position:0%
is that it's easier to navigate a
program<01:45:09.040><c> when</c><01:45:09.360><c> the</c><01:45:09.520><c> main</c><01:45:09.840><c> function</c><01:45:10.320><c> is</c><01:45:10.480><c> at</c><01:45:10.639><c> the</c>

01:45:10.790 --> 01:45:10.800 align:start position:0%
program when the main function is at the
 

01:45:10.800 --> 01:45:12.870 align:start position:0%
program when the main function is at the
top<01:45:11.119><c> of</c><01:45:11.199><c> your</c><01:45:11.440><c> file</c><01:45:12.000><c> it</c><01:45:12.159><c> also</c><01:45:12.400><c> helps</c><01:45:12.719><c> with</c>

01:45:12.870 --> 01:45:12.880 align:start position:0%
top of your file it also helps with
 

01:45:12.880 --> 01:45:15.109 align:start position:0%
top of your file it also helps with
debugging<01:45:13.760><c> and</c><01:45:13.920><c> it's</c><01:45:14.159><c> commonly</c><01:45:14.639><c> used</c><01:45:14.960><c> in</c>

01:45:15.109 --> 01:45:15.119 align:start position:0%
debugging and it's commonly used in
 

01:45:15.119 --> 01:45:16.950 align:start position:0%
debugging and it's commonly used in
header<01:45:15.440><c> files</c><01:45:15.920><c> which</c><01:45:16.159><c> is</c><01:45:16.239><c> something</c><01:45:16.639><c> we</c><01:45:16.800><c> need</c>

01:45:16.950 --> 01:45:16.960 align:start position:0%
header files which is something we need
 

01:45:16.960 --> 01:45:19.510 align:start position:0%
header files which is something we need
to<01:45:17.119><c> discuss</c><01:45:17.600><c> in</c><01:45:17.760><c> a</c><01:45:17.840><c> future</c><01:45:18.239><c> topic</c><01:45:19.119><c> so</c><01:45:19.280><c> yeah</c>

01:45:19.510 --> 01:45:19.520 align:start position:0%
to discuss in a future topic so yeah
 

01:45:19.520 --> 01:45:21.750 align:start position:0%
to discuss in a future topic so yeah
that's<01:45:19.760><c> basically</c><01:45:20.239><c> a</c><01:45:20.400><c> function</c><01:45:20.800><c> prototype</c>

01:45:21.750 --> 01:45:21.760 align:start position:0%
that's basically a function prototype
 

01:45:21.760 --> 01:45:24.310 align:start position:0%
that's basically a function prototype
we're<01:45:22.000><c> going</c><01:45:22.239><c> to</c><01:45:22.560><c> define</c><01:45:23.119><c> any</c><01:45:23.360><c> functions</c>

01:45:24.310 --> 01:45:24.320 align:start position:0%
we're going to define any functions
 

01:45:24.320 --> 01:45:26.470 align:start position:0%
we're going to define any functions
after<01:45:24.639><c> the</c><01:45:24.800><c> main</c><01:45:25.040><c> function</c><01:45:25.440><c> now</c><01:45:25.920><c> and</c><01:45:26.159><c> before</c>

01:45:26.470 --> 01:45:26.480 align:start position:0%
after the main function now and before
 

01:45:26.480 --> 01:45:28.790 align:start position:0%
after the main function now and before
the<01:45:26.560><c> main</c><01:45:26.880><c> function</c><01:45:27.360><c> we</c><01:45:27.520><c> will</c><01:45:27.760><c> declare</c><01:45:28.480><c> a</c>

01:45:28.790 --> 01:45:28.800 align:start position:0%
the main function we will declare a
 

01:45:28.800 --> 01:45:30.709 align:start position:0%
the main function we will declare a
function<01:45:29.280><c> prototype</c><01:45:30.080><c> one</c><01:45:30.320><c> function</c>

01:45:30.709 --> 01:45:30.719 align:start position:0%
function prototype one function
 

01:45:30.719 --> 01:45:32.709 align:start position:0%
function prototype one function
prototype<01:45:31.440><c> for</c><01:45:31.679><c> each</c><01:45:31.920><c> function</c><01:45:32.320><c> we</c><01:45:32.400><c> have</c>

01:45:32.709 --> 01:45:32.719 align:start position:0%
prototype for each function we have
 

01:45:32.719 --> 01:45:34.629 align:start position:0%
prototype for each function we have
besides<01:45:33.199><c> the</c><01:45:33.280><c> main</c><01:45:33.600><c> function</c><01:45:34.239><c> and</c><01:45:34.320><c> this</c>

01:45:34.629 --> 01:45:34.639 align:start position:0%
besides the main function and this
 

01:45:34.639 --> 01:45:36.870 align:start position:0%
besides the main function and this
ensures<01:45:35.119><c> that</c><01:45:35.280><c> we</c><01:45:35.440><c> have</c><01:45:35.679><c> the</c><01:45:35.840><c> correct</c><01:45:36.400><c> number</c>

01:45:36.870 --> 01:45:36.880 align:start position:0%
ensures that we have the correct number
 

01:45:36.880 --> 01:45:39.510 align:start position:0%
ensures that we have the correct number
and<01:45:37.199><c> type</c><01:45:37.440><c> of</c><01:45:37.600><c> arguments</c><01:45:38.480><c> which</c><01:45:38.719><c> will</c><01:45:38.960><c> prevent</c>

01:45:39.510 --> 01:45:39.520 align:start position:0%
and type of arguments which will prevent
 

01:45:39.520 --> 01:45:41.990 align:start position:0%
and type of arguments which will prevent
any<01:45:39.840><c> unexpected</c><01:45:40.560><c> behavior</c><01:45:41.360><c> it's</c><01:45:41.600><c> basically</c>

01:45:41.990 --> 01:45:42.000 align:start position:0%
any unexpected behavior it's basically
 

01:45:42.000 --> 01:45:44.070 align:start position:0%
any unexpected behavior it's basically
just<01:45:42.239><c> another</c><01:45:42.560><c> way</c><01:45:42.800><c> to</c><01:45:42.960><c> declare</c><01:45:43.360><c> functions</c>

01:45:44.070 --> 01:45:44.080 align:start position:0%
just another way to declare functions
 

01:45:44.080 --> 01:45:46.390 align:start position:0%
just another way to declare functions
that<01:45:44.239><c> you</c><01:45:44.480><c> may</c><01:45:44.719><c> run</c><01:45:44.880><c> into</c><01:45:45.199><c> in</c><01:45:45.280><c> the</c><01:45:45.360><c> future</c><01:45:46.159><c> so</c>

01:45:46.390 --> 01:45:46.400 align:start position:0%
that you may run into in the future so
 

01:45:46.400 --> 01:45:48.790 align:start position:0%
that you may run into in the future so
yeah<01:45:46.719><c> those</c><01:45:47.040><c> are</c><01:45:47.280><c> function</c><01:45:47.760><c> prototypes</c><01:45:48.639><c> if</c>

01:45:48.790 --> 01:45:48.800 align:start position:0%
yeah those are function prototypes if
 

01:45:48.800 --> 01:45:50.229 align:start position:0%
yeah those are function prototypes if
you<01:45:48.960><c> would</c><01:45:49.040><c> like</c><01:45:49.199><c> a</c><01:45:49.280><c> copy</c><01:45:49.600><c> of</c><01:45:49.679><c> this</c><01:45:49.840><c> code</c><01:45:50.159><c> i</c>

01:45:50.229 --> 01:45:50.239 align:start position:0%
you would like a copy of this code i
 

01:45:50.239 --> 01:45:51.910 align:start position:0%
you would like a copy of this code i
will<01:45:50.480><c> post</c><01:45:50.800><c> this</c><01:45:50.960><c> to</c><01:45:51.119><c> the</c><01:45:51.199><c> comment</c><01:45:51.520><c> section</c>

01:45:51.910 --> 01:45:51.920 align:start position:0%
will post this to the comment section
 

01:45:51.920 --> 01:45:54.310 align:start position:0%
will post this to the comment section
down<01:45:52.080><c> below</c><01:45:52.719><c> and</c><01:45:52.960><c> well</c><01:45:53.440><c> yeah</c><01:45:53.760><c> those</c><01:45:54.080><c> are</c>

01:45:54.310 --> 01:45:54.320 align:start position:0%
down below and well yeah those are
 

01:45:54.320 --> 01:45:59.350 align:start position:0%
down below and well yeah those are
function<01:45:54.719><c> of</c><01:45:54.880><c> prototypes</c><01:45:55.760><c> in</c><01:45:56.000><c> c</c>

01:45:59.350 --> 01:45:59.360 align:start position:0%
 
 

01:45:59.360 --> 01:46:01.510 align:start position:0%
 
hey<01:45:59.840><c> everybody</c><01:46:00.400><c> so</c><01:46:00.639><c> now</c><01:46:00.800><c> that</c><01:46:00.960><c> we</c><01:46:01.040><c> know</c><01:46:01.280><c> how</c>

01:46:01.510 --> 01:46:01.520 align:start position:0%
hey everybody so now that we know how
 

01:46:01.520 --> 01:46:03.109 align:start position:0%
hey everybody so now that we know how
functions<01:46:02.000><c> work</c><01:46:02.320><c> i</c><01:46:02.480><c> thought</c><01:46:02.639><c> this</c><01:46:02.800><c> would</c><01:46:02.960><c> be</c><01:46:03.040><c> a</c>

01:46:03.109 --> 01:46:03.119 align:start position:0%
functions work i thought this would be a
 

01:46:03.119 --> 01:46:05.270 align:start position:0%
functions work i thought this would be a
good<01:46:03.360><c> opportunity</c><01:46:04.000><c> for</c><01:46:04.159><c> us</c><01:46:04.480><c> to</c><01:46:04.719><c> learn</c><01:46:04.960><c> about</c>

01:46:05.270 --> 01:46:05.280 align:start position:0%
good opportunity for us to learn about
 

01:46:05.280 --> 01:46:07.510 align:start position:0%
good opportunity for us to learn about
some<01:46:05.440><c> useful</c><01:46:05.840><c> string</c><01:46:06.239><c> functions</c><01:46:07.040><c> so</c><01:46:07.280><c> there's</c>

01:46:07.510 --> 01:46:07.520 align:start position:0%
some useful string functions so there's
 

01:46:07.520 --> 01:46:09.030 align:start position:0%
some useful string functions so there's
a<01:46:07.600><c> lot</c><01:46:07.760><c> of</c><01:46:07.840><c> string</c><01:46:08.239><c> functions</c><01:46:08.719><c> that</c><01:46:08.880><c> are</c>

01:46:09.030 --> 01:46:09.040 align:start position:0%
a lot of string functions that are
 

01:46:09.040 --> 01:46:11.350 align:start position:0%
a lot of string functions that are
already<01:46:09.360><c> written</c><01:46:09.679><c> for</c><01:46:09.920><c> us</c><01:46:10.480><c> just</c><01:46:10.719><c> include</c><01:46:11.199><c> this</c>

01:46:11.350 --> 01:46:11.360 align:start position:0%
already written for us just include this
 

01:46:11.360 --> 01:46:14.070 align:start position:0%
already written for us just include this
header<01:46:11.600><c> file</c><01:46:12.000><c> at</c><01:46:12.080><c> the</c><01:46:12.239><c> top</c><01:46:12.880><c> include</c><01:46:13.440><c> string</c>

01:46:14.070 --> 01:46:14.080 align:start position:0%
header file at the top include string
 

01:46:14.080 --> 01:46:17.189 align:start position:0%
header file at the top include string
dot<01:46:14.320><c> h</c><01:46:15.040><c> so</c><01:46:15.360><c> create</c><01:46:15.679><c> two</c><01:46:15.920><c> strings</c><01:46:16.719><c> one</c><01:46:16.960><c> named</c>

01:46:17.189 --> 01:46:17.199 align:start position:0%
dot h so create two strings one named
 

01:46:17.199 --> 01:46:19.109 align:start position:0%
dot h so create two strings one named
string<01:46:17.520><c> one</c><01:46:17.920><c> and</c><01:46:18.159><c> the</c><01:46:18.239><c> other</c><01:46:18.480><c> named</c><01:46:18.800><c> string</c>

01:46:19.109 --> 01:46:19.119 align:start position:0%
string one and the other named string
 

01:46:19.119 --> 01:46:21.590 align:start position:0%
string one and the other named string
two<01:46:19.920><c> string</c><01:46:20.320><c> one</c><01:46:20.480><c> will</c><01:46:20.639><c> be</c><01:46:20.800><c> your</c><01:46:20.960><c> first</c><01:46:21.280><c> name</c>

01:46:21.590 --> 01:46:21.600 align:start position:0%
two string one will be your first name
 

01:46:21.600 --> 01:46:23.510 align:start position:0%
two string one will be your first name
string<01:46:21.920><c> two</c><01:46:22.159><c> will</c><01:46:22.239><c> be</c><01:46:22.400><c> your</c><01:46:22.560><c> last</c><01:46:22.800><c> name</c><01:46:23.360><c> and</c>

01:46:23.510 --> 01:46:23.520 align:start position:0%
string two will be your last name and
 

01:46:23.520 --> 01:46:24.950 align:start position:0%
string two will be your last name and
then<01:46:23.679><c> at</c><01:46:23.840><c> the</c><01:46:23.920><c> end</c><01:46:24.000><c> of</c><01:46:24.080><c> this</c><01:46:24.239><c> program</c><01:46:24.719><c> i</c><01:46:24.880><c> am</c>

01:46:24.950 --> 01:46:24.960 align:start position:0%
then at the end of this program i am
 

01:46:24.960 --> 01:46:27.430 align:start position:0%
then at the end of this program i am
just<01:46:25.280><c> printing</c><01:46:25.840><c> string</c><01:46:26.239><c> one</c><01:46:26.560><c> using</c><01:46:26.880><c> a</c><01:46:27.040><c> printf</c>

01:46:27.430 --> 01:46:27.440 align:start position:0%
just printing string one using a printf
 

01:46:27.440 --> 01:46:29.830 align:start position:0%
just printing string one using a printf
statement<01:46:28.320><c> so</c><01:46:28.480><c> let's</c><01:46:28.719><c> begin</c><01:46:29.360><c> the</c><01:46:29.520><c> first</c>

01:46:29.830 --> 01:46:29.840 align:start position:0%
statement so let's begin the first
 

01:46:29.840 --> 01:46:33.030 align:start position:0%
statement so let's begin the first
useful<01:46:30.239><c> string</c><01:46:30.560><c> function</c><01:46:31.119><c> is</c><01:46:31.600><c> string</c><01:46:32.239><c> lower</c>

01:46:33.030 --> 01:46:33.040 align:start position:0%
useful string function is string lower
 

01:46:33.040 --> 01:46:34.950 align:start position:0%
useful string function is string lower
so<01:46:33.360><c> whatever</c><01:46:33.760><c> string</c><01:46:34.000><c> you</c><01:46:34.159><c> pass</c><01:46:34.480><c> in</c><01:46:34.639><c> as</c><01:46:34.800><c> an</c>

01:46:34.950 --> 01:46:34.960 align:start position:0%
so whatever string you pass in as an
 

01:46:34.960 --> 01:46:37.270 align:start position:0%
so whatever string you pass in as an
argument<01:46:35.840><c> this</c><01:46:36.080><c> function</c><01:46:36.400><c> will</c><01:46:36.560><c> convert</c><01:46:37.040><c> a</c>

01:46:37.270 --> 01:46:37.280 align:start position:0%
argument this function will convert a
 

01:46:37.280 --> 01:46:40.149 align:start position:0%
argument this function will convert a
string<01:46:37.760><c> to</c><01:46:38.000><c> lowercase</c><01:46:39.119><c> so</c><01:46:39.360><c> the</c><01:46:39.520><c> first</c><01:46:39.920><c> letter</c>

01:46:40.149 --> 01:46:40.159 align:start position:0%
string to lowercase so the first letter
 

01:46:40.159 --> 01:46:42.950 align:start position:0%
string to lowercase so the first letter
in<01:46:40.239><c> my</c><01:46:40.480><c> name</c><01:46:40.880><c> is</c><01:46:41.119><c> uppercase</c><01:46:41.679><c> it's</c><01:46:41.840><c> capitalized</c>

01:46:42.950 --> 01:46:42.960 align:start position:0%
in my name is uppercase it's capitalized
 

01:46:42.960 --> 01:46:45.270 align:start position:0%
in my name is uppercase it's capitalized
so<01:46:43.119><c> after</c><01:46:43.440><c> passing</c><01:46:43.920><c> in</c><01:46:44.159><c> string1</c><01:46:44.800><c> into</c><01:46:45.040><c> this</c>

01:46:45.270 --> 01:46:45.280 align:start position:0%
so after passing in string1 into this
 

01:46:45.280 --> 01:46:46.390 align:start position:0%
so after passing in string1 into this
function

01:46:46.390 --> 01:46:46.400 align:start position:0%
function
 

01:46:46.400 --> 01:46:49.189 align:start position:0%
function
my<01:46:46.639><c> name</c><01:46:46.960><c> is</c><01:46:47.199><c> all</c><01:46:47.600><c> now</c><01:46:47.920><c> lowercase</c>

01:46:49.189 --> 01:46:49.199 align:start position:0%
my name is all now lowercase
 

01:46:49.199 --> 01:46:52.070 align:start position:0%
my name is all now lowercase
otherwise<01:46:50.000><c> there's</c><01:46:50.560><c> string</c><01:46:51.199><c> upper</c><01:46:51.760><c> that</c><01:46:51.920><c> will</c>

01:46:52.070 --> 01:46:52.080 align:start position:0%
otherwise there's string upper that will
 

01:46:52.080 --> 01:46:54.629 align:start position:0%
otherwise there's string upper that will
convert<01:46:52.480><c> a</c><01:46:52.639><c> string</c><01:46:53.040><c> to</c><01:46:53.360><c> uppercase</c>

01:46:54.629 --> 01:46:54.639 align:start position:0%
convert a string to uppercase
 

01:46:54.639 --> 01:46:56.870 align:start position:0%
convert a string to uppercase
and<01:46:54.800><c> my</c><01:46:55.040><c> name</c><01:46:55.360><c> is</c><01:46:55.600><c> uppercase</c>

01:46:56.870 --> 01:46:56.880 align:start position:0%
and my name is uppercase
 

01:46:56.880 --> 01:47:00.790 align:start position:0%
and my name is uppercase
stringcat<01:46:58.239><c> will</c><01:46:58.560><c> concatenate</c><01:46:59.520><c> as</c><01:46:59.760><c> in</c><01:47:00.000><c> append</c>

01:47:00.790 --> 01:47:00.800 align:start position:0%
stringcat will concatenate as in append
 

01:47:00.800 --> 01:47:03.750 align:start position:0%
stringcat will concatenate as in append
string2<01:47:01.600><c> to</c><01:47:01.760><c> the</c><01:47:01.840><c> end</c><01:47:02.000><c> of</c><01:47:02.159><c> string1</c><01:47:03.119><c> so</c><01:47:03.360><c> we</c><01:47:03.520><c> will</c>

01:47:03.750 --> 01:47:03.760 align:start position:0%
string2 to the end of string1 so we will
 

01:47:03.760 --> 01:47:05.910 align:start position:0%
string2 to the end of string1 so we will
append<01:47:04.320><c> the</c><01:47:04.480><c> second</c><01:47:04.800><c> argument</c><01:47:05.360><c> to</c><01:47:05.520><c> the</c><01:47:05.600><c> first</c>

01:47:05.910 --> 01:47:05.920 align:start position:0%
append the second argument to the first
 

01:47:05.920 --> 01:47:08.629 align:start position:0%
append the second argument to the first
argument<01:47:06.639><c> so</c><01:47:06.800><c> if</c><01:47:06.960><c> i</c><01:47:07.119><c> pass</c><01:47:07.360><c> in</c><01:47:07.600><c> string</c><01:47:08.000><c> one</c><01:47:08.400><c> then</c>

01:47:08.629 --> 01:47:08.639 align:start position:0%
argument so if i pass in string one then
 

01:47:08.639 --> 01:47:11.510 align:start position:0%
argument so if i pass in string one then
string<01:47:08.960><c> two</c><01:47:09.600><c> this</c><01:47:09.760><c> will</c><01:47:10.000><c> append</c><01:47:10.560><c> my</c><01:47:10.800><c> last</c><01:47:11.119><c> name</c>

01:47:11.510 --> 01:47:11.520 align:start position:0%
string two this will append my last name
 

01:47:11.520 --> 01:47:13.510 align:start position:0%
string two this will append my last name
to<01:47:11.679><c> my</c><01:47:11.840><c> first</c><01:47:12.159><c> name</c><01:47:12.719><c> and</c><01:47:12.880><c> these</c><01:47:13.119><c> strings</c><01:47:13.440><c> are</c>

01:47:13.510 --> 01:47:13.520 align:start position:0%
to my first name and these strings are
 

01:47:13.520 --> 01:47:16.390 align:start position:0%
to my first name and these strings are
now<01:47:13.679><c> combined</c><01:47:14.480><c> or</c><01:47:14.960><c> i</c><01:47:15.119><c> could</c><01:47:15.280><c> append</c><01:47:15.840><c> a</c><01:47:16.080><c> given</c>

01:47:16.390 --> 01:47:16.400 align:start position:0%
now combined or i could append a given
 

01:47:16.400 --> 01:47:18.709 align:start position:0%
now combined or i could append a given
amount<01:47:16.800><c> of</c><01:47:16.960><c> characters</c><01:47:17.679><c> from</c><01:47:17.920><c> string</c><01:47:18.320><c> two</c><01:47:18.560><c> to</c>

01:47:18.709 --> 01:47:18.719 align:start position:0%
amount of characters from string two to
 

01:47:18.719 --> 01:47:20.870 align:start position:0%
amount of characters from string two to
string<01:47:19.119><c> one</c><01:47:19.600><c> so</c><01:47:19.840><c> the</c><01:47:20.000><c> third</c><01:47:20.239><c> argument</c><01:47:20.719><c> is</c><01:47:20.800><c> a</c>

01:47:20.870 --> 01:47:20.880 align:start position:0%
string one so the third argument is a
 

01:47:20.880 --> 01:47:23.430 align:start position:0%
string one so the third argument is a
number<01:47:21.440><c> if</c><01:47:21.679><c> i</c><01:47:21.840><c> append</c><01:47:22.320><c> one</c><01:47:22.639><c> character</c><01:47:23.199><c> from</c>

01:47:23.430 --> 01:47:23.440 align:start position:0%
number if i append one character from
 

01:47:23.440 --> 01:47:25.910 align:start position:0%
number if i append one character from
string<01:47:23.760><c> two</c><01:47:24.159><c> to</c><01:47:24.320><c> string</c><01:47:24.639><c> one</c><01:47:25.360><c> then</c><01:47:25.520><c> this</c><01:47:25.679><c> will</c>

01:47:25.910 --> 01:47:25.920 align:start position:0%
string two to string one then this will
 

01:47:25.920 --> 01:47:28.629 align:start position:0%
string two to string one then this will
take<01:47:26.320><c> the</c><01:47:26.560><c> c</c><01:47:26.960><c> from</c><01:47:27.119><c> my</c><01:47:27.280><c> last</c><01:47:27.600><c> name</c><01:47:28.080><c> and</c><01:47:28.320><c> append</c>

01:47:28.629 --> 01:47:28.639 align:start position:0%
take the c from my last name and append
 

01:47:28.639 --> 01:47:31.109 align:start position:0%
take the c from my last name and append
it<01:47:28.719><c> to</c><01:47:28.880><c> the</c><01:47:29.040><c> end</c><01:47:29.520><c> of</c><01:47:29.760><c> my</c><01:47:29.920><c> first</c><01:47:30.159><c> name</c><01:47:30.639><c> so</c><01:47:30.880><c> that</c>

01:47:31.109 --> 01:47:31.119 align:start position:0%
it to the end of my first name so that
 

01:47:31.119 --> 01:47:33.990 align:start position:0%
it to the end of my first name so that
is<01:47:31.280><c> the</c><01:47:31.600><c> string</c><01:47:32.239><c> and</c><01:47:32.639><c> cat</c><01:47:32.960><c> function</c>

01:47:33.990 --> 01:47:34.000 align:start position:0%
is the string and cat function
 

01:47:34.000 --> 01:47:35.990 align:start position:0%
is the string and cat function
there's<01:47:34.320><c> also</c><01:47:34.719><c> string</c><01:47:35.040><c> copy</c><01:47:35.440><c> and</c><01:47:35.520><c> this</c><01:47:35.600><c> one</c><01:47:35.840><c> is</c>

01:47:35.990 --> 01:47:36.000 align:start position:0%
there's also string copy and this one is
 

01:47:36.000 --> 01:47:37.830 align:start position:0%
there's also string copy and this one is
actually<01:47:36.400><c> fairly</c><01:47:36.719><c> common</c>

01:47:37.830 --> 01:47:37.840 align:start position:0%
actually fairly common
 

01:47:37.840 --> 01:47:40.229 align:start position:0%
actually fairly common
so<01:47:38.080><c> this</c><01:47:38.320><c> will</c><01:47:38.480><c> copy</c><01:47:38.960><c> string</c><01:47:39.360><c> two</c><01:47:39.679><c> to</c><01:47:39.840><c> string</c>

01:47:40.229 --> 01:47:40.239 align:start position:0%
so this will copy string two to string
 

01:47:40.239 --> 01:47:43.189 align:start position:0%
so this will copy string two to string
one<01:47:40.880><c> if</c><01:47:41.040><c> i</c><01:47:41.199><c> print</c><01:47:41.679><c> string</c><01:47:42.080><c> one</c><01:47:42.639><c> well</c><01:47:42.880><c> it</c><01:47:43.040><c> now</c>

01:47:43.189 --> 01:47:43.199 align:start position:0%
one if i print string one well it now
 

01:47:43.199 --> 01:47:45.669 align:start position:0%
one if i print string one well it now
displays<01:47:43.760><c> code</c><01:47:44.159><c> instead</c><01:47:44.480><c> of</c><01:47:44.560><c> bro</c><01:47:45.280><c> this</c><01:47:45.440><c> will</c>

01:47:45.669 --> 01:47:45.679 align:start position:0%
displays code instead of bro this will
 

01:47:45.679 --> 01:47:47.830 align:start position:0%
displays code instead of bro this will
remove<01:47:46.080><c> the</c><01:47:46.239><c> contents</c><01:47:46.800><c> from</c><01:47:47.040><c> string</c><01:47:47.440><c> one</c><01:47:47.760><c> and</c>

01:47:47.830 --> 01:47:47.840 align:start position:0%
remove the contents from string one and
 

01:47:47.840 --> 01:47:49.830 align:start position:0%
remove the contents from string one and
replace<01:47:48.239><c> them</c><01:47:48.400><c> with</c><01:47:48.560><c> string</c><01:47:48.880><c> two</c><01:47:49.440><c> or</c><01:47:49.679><c> you</c>

01:47:49.830 --> 01:47:49.840 align:start position:0%
replace them with string two or you
 

01:47:49.840 --> 01:47:52.070 align:start position:0%
replace them with string two or you
could<01:47:50.080><c> copy</c><01:47:50.719><c> a</c><01:47:50.880><c> given</c><01:47:51.119><c> amount</c><01:47:51.360><c> of</c><01:47:51.520><c> characters</c>

01:47:52.070 --> 01:47:52.080 align:start position:0%
could copy a given amount of characters
 

01:47:52.080 --> 01:47:54.310 align:start position:0%
could copy a given amount of characters
from<01:47:52.320><c> string</c><01:47:52.639><c> two</c><01:47:52.880><c> to</c><01:47:53.040><c> string</c><01:47:53.360><c> one</c><01:47:53.920><c> uh</c><01:47:54.159><c> let's</c>

01:47:54.310 --> 01:47:54.320 align:start position:0%
from string two to string one uh let's
 

01:47:54.320 --> 01:47:55.750 align:start position:0%
from string two to string one uh let's
say<01:47:54.560><c> that</c><01:47:54.719><c> i'm</c><01:47:54.880><c> going</c><01:47:55.040><c> to</c><01:47:55.119><c> copy</c><01:47:55.440><c> the</c><01:47:55.520><c> first</c>

01:47:55.750 --> 01:47:55.760 align:start position:0%
say that i'm going to copy the first
 

01:47:55.760 --> 01:47:58.149 align:start position:0%
say that i'm going to copy the first
character<01:47:56.239><c> over</c><01:47:56.960><c> so</c><01:47:57.119><c> i'm</c><01:47:57.199><c> copying</c><01:47:57.679><c> the</c><01:47:57.840><c> first</c>

01:47:58.149 --> 01:47:58.159 align:start position:0%
character over so i'm copying the first
 

01:47:58.159 --> 01:48:00.709 align:start position:0%
character over so i'm copying the first
character<01:47:58.800><c> from</c><01:47:59.280><c> my</c><01:47:59.440><c> last</c><01:47:59.760><c> name</c><01:48:00.080><c> to</c><01:48:00.239><c> my</c><01:48:00.400><c> first</c>

01:48:00.709 --> 01:48:00.719 align:start position:0%
character from my last name to my first
 

01:48:00.719 --> 01:48:02.070 align:start position:0%
character from my last name to my first
name

01:48:02.070 --> 01:48:02.080 align:start position:0%
name
 

01:48:02.080 --> 01:48:04.870 align:start position:0%
name
and<01:48:02.239><c> my</c><01:48:02.400><c> first</c><01:48:02.639><c> name</c><01:48:02.960><c> is</c><01:48:03.119><c> now</c><01:48:03.600><c> crow</c><01:48:04.320><c> or</c><01:48:04.560><c> i</c><01:48:04.639><c> could</c>

01:48:04.870 --> 01:48:04.880 align:start position:0%
and my first name is now crow or i could
 

01:48:04.880 --> 01:48:06.790 align:start position:0%
and my first name is now crow or i could
set<01:48:05.119><c> this</c><01:48:05.360><c> to</c><01:48:05.679><c> two</c>

01:48:06.790 --> 01:48:06.800 align:start position:0%
set this to two
 

01:48:06.800 --> 01:48:08.790 align:start position:0%
set this to two
and<01:48:06.880><c> this</c><01:48:07.040><c> will</c><01:48:07.280><c> copy</c><01:48:07.600><c> the</c><01:48:07.679><c> first</c><01:48:08.159><c> two</c><01:48:08.400><c> letters</c>

01:48:08.790 --> 01:48:08.800 align:start position:0%
and this will copy the first two letters
 

01:48:08.800 --> 01:48:10.470 align:start position:0%
and this will copy the first two letters
over

01:48:10.470 --> 01:48:10.480 align:start position:0%
over
 

01:48:10.480 --> 01:48:12.870 align:start position:0%
over
coo<01:48:11.119><c> all</c><01:48:11.280><c> right</c><01:48:11.520><c> here's</c><01:48:11.760><c> a</c><01:48:11.840><c> few</c><01:48:12.000><c> more</c><01:48:12.560><c> so</c>

01:48:12.870 --> 01:48:12.880 align:start position:0%
coo all right here's a few more so
 

01:48:12.880 --> 01:48:15.990 align:start position:0%
coo all right here's a few more so
string<01:48:13.520><c> set</c><01:48:14.000><c> will</c><01:48:14.239><c> set</c><01:48:14.719><c> all</c><01:48:14.960><c> characters</c><01:48:15.679><c> of</c><01:48:15.840><c> a</c>

01:48:15.990 --> 01:48:16.000 align:start position:0%
string set will set all characters of a
 

01:48:16.000 --> 01:48:18.790 align:start position:0%
string set will set all characters of a
string<01:48:16.560><c> to</c><01:48:16.800><c> a</c><01:48:17.040><c> given</c><01:48:17.440><c> character</c><01:48:18.239><c> i'm</c><01:48:18.480><c> going</c><01:48:18.639><c> to</c>

01:48:18.790 --> 01:48:18.800 align:start position:0%
string to a given character i'm going to
 

01:48:18.800 --> 01:48:21.350 align:start position:0%
string to a given character i'm going to
set<01:48:19.119><c> all</c><01:48:19.280><c> of</c><01:48:19.360><c> the</c><01:48:19.520><c> characters</c><01:48:20.080><c> from</c><01:48:20.400><c> string</c><01:48:20.800><c> 1</c>

01:48:21.350 --> 01:48:21.360 align:start position:0%
set all of the characters from string 1
 

01:48:21.360 --> 01:48:24.149 align:start position:0%
set all of the characters from string 1
to<01:48:21.760><c> a</c><01:48:22.000><c> question</c><01:48:22.480><c> mark</c><01:48:23.119><c> all</c><01:48:23.280><c> of</c><01:48:23.440><c> the</c><01:48:23.600><c> characters</c>

01:48:24.149 --> 01:48:24.159 align:start position:0%
to a question mark all of the characters
 

01:48:24.159 --> 01:48:26.950 align:start position:0%
to a question mark all of the characters
within<01:48:24.480><c> my</c><01:48:24.719><c> name</c><01:48:25.119><c> are</c><01:48:25.360><c> all</c><01:48:25.840><c> question</c><01:48:26.239><c> marks</c>

01:48:26.950 --> 01:48:26.960 align:start position:0%
within my name are all question marks
 

01:48:26.960 --> 01:48:29.750 align:start position:0%
within my name are all question marks
and<01:48:27.360><c> string</c><01:48:27.840><c> and</c><01:48:28.159><c> set</c><01:48:28.400><c> will</c><01:48:28.639><c> set</c><01:48:28.880><c> the</c><01:48:29.119><c> first</c>

01:48:29.750 --> 01:48:29.760 align:start position:0%
and string and set will set the first
 

01:48:29.760 --> 01:48:31.750 align:start position:0%
and string and set will set the first
and<01:48:30.080><c> characters</c><01:48:30.719><c> of</c><01:48:30.880><c> a</c><01:48:30.960><c> string</c><01:48:31.280><c> to</c><01:48:31.440><c> a</c><01:48:31.520><c> given</c>

01:48:31.750 --> 01:48:31.760 align:start position:0%
and characters of a string to a given
 

01:48:31.760 --> 01:48:34.229 align:start position:0%
and characters of a string to a given
character<01:48:32.639><c> so</c><01:48:32.800><c> i'm</c><01:48:32.960><c> going</c><01:48:33.119><c> to</c><01:48:33.280><c> set</c><01:48:33.600><c> the</c><01:48:33.840><c> first</c>

01:48:34.229 --> 01:48:34.239 align:start position:0%
character so i'm going to set the first
 

01:48:34.239 --> 01:48:37.109 align:start position:0%
character so i'm going to set the first
character<01:48:34.800><c> of</c><01:48:35.040><c> my</c><01:48:35.199><c> first</c><01:48:35.520><c> name</c><01:48:35.840><c> to</c><01:48:36.080><c> an</c><01:48:36.239><c> x</c>

01:48:37.109 --> 01:48:37.119 align:start position:0%
character of my first name to an x
 

01:48:37.119 --> 01:48:39.910 align:start position:0%
character of my first name to an x
so<01:48:37.280><c> my</c><01:48:37.520><c> name</c><01:48:37.760><c> is</c><01:48:37.920><c> now</c><01:48:38.159><c> x</c><01:48:38.400><c> bro</c><01:48:39.199><c> and</c><01:48:39.600><c> string</c>

01:48:39.910 --> 01:48:39.920 align:start position:0%
so my name is now x bro and string
 

01:48:39.920 --> 01:48:42.070 align:start position:0%
so my name is now x bro and string
reverse<01:48:40.480><c> will</c><01:48:40.719><c> reverse</c><01:48:41.119><c> a</c><01:48:41.280><c> string</c><01:48:41.679><c> so</c><01:48:41.840><c> if</c><01:48:42.000><c> i</c>

01:48:42.070 --> 01:48:42.080 align:start position:0%
reverse will reverse a string so if i
 

01:48:42.080 --> 01:48:44.470 align:start position:0%
reverse will reverse a string so if i
reverse<01:48:42.639><c> string</c><01:48:43.040><c> one</c>

01:48:44.470 --> 01:48:44.480 align:start position:0%
reverse string one
 

01:48:44.480 --> 01:48:47.350 align:start position:0%
reverse string one
my<01:48:44.639><c> first</c><01:48:44.880><c> name</c><01:48:45.199><c> is</c><01:48:45.360><c> now</c><01:48:45.840><c> orb</c><01:48:46.560><c> so</c><01:48:46.800><c> this</c><01:48:47.040><c> next</c>

01:48:47.350 --> 01:48:47.360 align:start position:0%
my first name is now orb so this next
 

01:48:47.360 --> 01:48:50.390 align:start position:0%
my first name is now orb so this next
set<01:48:47.600><c> of</c><01:48:47.679><c> functions</c><01:48:48.239><c> will</c><01:48:48.480><c> return</c><01:48:49.040><c> an</c><01:48:49.280><c> integer</c>

01:48:50.390 --> 01:48:50.400 align:start position:0%
set of functions will return an integer
 

01:48:50.400 --> 01:48:53.109 align:start position:0%
set of functions will return an integer
so<01:48:50.639><c> i'm</c><01:48:50.800><c> going</c><01:48:51.040><c> to</c><01:48:51.199><c> declare</c><01:48:51.840><c> a</c><01:48:52.000><c> variable</c><01:48:52.719><c> int</c>

01:48:53.109 --> 01:48:53.119 align:start position:0%
so i'm going to declare a variable int
 

01:48:53.119 --> 01:48:55.350 align:start position:0%
so i'm going to declare a variable int
result<01:48:53.840><c> and</c><01:48:54.080><c> this</c><01:48:54.320><c> function</c><01:48:54.800><c> is</c><01:48:55.040><c> really</c>

01:48:55.350 --> 01:48:55.360 align:start position:0%
result and this function is really
 

01:48:55.360 --> 01:48:58.390 align:start position:0%
result and this function is really
common<01:48:55.920><c> string</c><01:48:56.560><c> length</c><01:48:57.280><c> this</c><01:48:57.520><c> returns</c><01:48:58.159><c> the</c>

01:48:58.390 --> 01:48:58.400 align:start position:0%
common string length this returns the
 

01:48:58.400 --> 01:49:00.390 align:start position:0%
common string length this returns the
string<01:48:58.800><c> length</c><01:48:59.199><c> as</c><01:48:59.360><c> an</c><01:48:59.520><c> integer</c>

01:49:00.390 --> 01:49:00.400 align:start position:0%
string length as an integer
 

01:49:00.400 --> 01:49:03.109 align:start position:0%
string length as an integer
if<01:49:00.560><c> i</c><01:49:00.719><c> pass</c><01:49:01.040><c> in</c><01:49:01.280><c> string</c><01:49:01.679><c> one</c><01:49:02.239><c> this</c><01:49:02.480><c> string</c><01:49:02.880><c> has</c>

01:49:03.109 --> 01:49:03.119 align:start position:0%
if i pass in string one this string has
 

01:49:03.119 --> 01:49:05.189 align:start position:0%
if i pass in string one this string has
a<01:49:03.280><c> length</c><01:49:03.600><c> of</c><01:49:03.760><c> three</c><01:49:04.000><c> characters</c><01:49:04.880><c> and</c><01:49:04.960><c> then</c>

01:49:05.189 --> 01:49:05.199 align:start position:0%
a length of three characters and then
 

01:49:05.199 --> 01:49:08.149 align:start position:0%
a length of three characters and then
i'm<01:49:05.440><c> going</c><01:49:05.600><c> to</c><01:49:05.920><c> print</c><01:49:06.719><c> my</c><01:49:06.880><c> result</c><01:49:07.679><c> and</c><01:49:07.840><c> this</c><01:49:08.000><c> is</c>

01:49:08.149 --> 01:49:08.159 align:start position:0%
i'm going to print my result and this is
 

01:49:08.159 --> 01:49:09.510 align:start position:0%
i'm going to print my result and this is
an<01:49:08.320><c> integer</c>

01:49:09.510 --> 01:49:09.520 align:start position:0%
an integer
 

01:49:09.520 --> 01:49:12.149 align:start position:0%
an integer
so<01:49:09.760><c> the</c><01:49:10.000><c> length</c><01:49:10.400><c> of</c><01:49:10.560><c> my</c><01:49:10.719><c> first</c><01:49:11.040><c> name</c>

01:49:12.149 --> 01:49:12.159 align:start position:0%
so the length of my first name
 

01:49:12.159 --> 01:49:15.030 align:start position:0%
so the length of my first name
is<01:49:12.480><c> three</c><01:49:12.719><c> characters</c><01:49:13.599><c> this</c><01:49:13.920><c> is</c><01:49:14.159><c> a</c><01:49:14.480><c> fairly</c>

01:49:15.030 --> 01:49:15.040 align:start position:0%
is three characters this is a fairly
 

01:49:15.040 --> 01:49:16.470 align:start position:0%
is three characters this is a fairly
common<01:49:15.520><c> function</c>

01:49:16.470 --> 01:49:16.480 align:start position:0%
common function
 

01:49:16.480 --> 01:49:19.510 align:start position:0%
common function
the<01:49:16.800><c> string</c><01:49:17.360><c> compare</c><01:49:17.920><c> function</c><01:49:18.639><c> will</c><01:49:18.880><c> compare</c>

01:49:19.510 --> 01:49:19.520 align:start position:0%
the string compare function will compare
 

01:49:19.520 --> 01:49:22.149 align:start position:0%
the string compare function will compare
all<01:49:19.679><c> of</c><01:49:19.840><c> the</c><01:49:20.000><c> characters</c><01:49:20.480><c> within</c><01:49:20.880><c> two</c><01:49:21.119><c> strings</c>

01:49:22.149 --> 01:49:22.159 align:start position:0%
all of the characters within two strings
 

01:49:22.159 --> 01:49:24.790 align:start position:0%
all of the characters within two strings
if<01:49:22.400><c> they're</c><01:49:22.639><c> the</c><01:49:22.880><c> same</c><01:49:23.679><c> they</c><01:49:23.840><c> will</c><01:49:24.080><c> return</c>

01:49:24.790 --> 01:49:24.800 align:start position:0%
if they're the same they will return
 

01:49:24.800 --> 01:49:27.030 align:start position:0%
if they're the same they will return
zero<01:49:25.679><c> if</c><01:49:25.840><c> they're</c><01:49:26.080><c> different</c><01:49:26.639><c> they</c><01:49:26.800><c> will</c>

01:49:27.030 --> 01:49:27.040 align:start position:0%
zero if they're different they will
 

01:49:27.040 --> 01:49:29.669 align:start position:0%
zero if they're different they will
return<01:49:27.520><c> a</c><01:49:27.679><c> number</c><01:49:28.000><c> beside</c><01:49:28.400><c> zero</c><01:49:29.119><c> so</c><01:49:29.280><c> here's</c><01:49:29.520><c> an</c>

01:49:29.669 --> 01:49:29.679 align:start position:0%
return a number beside zero so here's an
 

01:49:29.679 --> 01:49:31.109 align:start position:0%
return a number beside zero so here's an
if<01:49:29.840><c> statement</c>

01:49:31.109 --> 01:49:31.119 align:start position:0%
if statement
 

01:49:31.119 --> 01:49:34.709 align:start position:0%
if statement
if<01:49:31.440><c> result</c><01:49:32.239><c> is</c><01:49:32.480><c> equal</c><01:49:32.800><c> to</c><01:49:32.960><c> zero</c><01:49:33.599><c> we</c><01:49:33.840><c> will</c><01:49:34.080><c> print</c>

01:49:34.709 --> 01:49:34.719 align:start position:0%
if result is equal to zero we will print
 

01:49:34.719 --> 01:49:36.950 align:start position:0%
if result is equal to zero we will print
these<01:49:34.960><c> strings</c><01:49:35.280><c> are</c><01:49:35.440><c> the</c><01:49:35.520><c> same</c><01:49:36.159><c> else</c><01:49:36.800><c> these</c>

01:49:36.950 --> 01:49:36.960 align:start position:0%
these strings are the same else these
 

01:49:36.960 --> 01:49:38.870 align:start position:0%
these strings are the same else these
strings<01:49:37.360><c> are</c><01:49:37.440><c> not</c><01:49:37.599><c> the</c><01:49:37.760><c> same</c>

01:49:38.870 --> 01:49:38.880 align:start position:0%
strings are not the same
 

01:49:38.880 --> 01:49:41.430 align:start position:0%
strings are not the same
so<01:49:39.119><c> my</c><01:49:39.280><c> first</c><01:49:39.599><c> name</c><01:49:40.159><c> is</c><01:49:40.400><c> not</c><01:49:40.639><c> equal</c><01:49:40.880><c> to</c><01:49:41.040><c> my</c><01:49:41.199><c> last</c>

01:49:41.430 --> 01:49:41.440 align:start position:0%
so my first name is not equal to my last
 

01:49:41.440 --> 01:49:43.589 align:start position:0%
so my first name is not equal to my last
name<01:49:41.760><c> these</c><01:49:42.000><c> characters</c><01:49:42.400><c> are</c><01:49:42.560><c> different</c><01:49:43.360><c> so</c>

01:49:43.589 --> 01:49:43.599 align:start position:0%
name these characters are different so
 

01:49:43.599 --> 01:49:45.990 align:start position:0%
name these characters are different so
this<01:49:43.840><c> code</c><01:49:44.239><c> will</c><01:49:44.480><c> print</c>

01:49:45.990 --> 01:49:46.000 align:start position:0%
this code will print
 

01:49:46.000 --> 01:49:47.830 align:start position:0%
this code will print
these<01:49:46.239><c> strings</c><01:49:46.560><c> are</c><01:49:46.639><c> not</c><01:49:46.880><c> the</c><01:49:47.040><c> same</c><01:49:47.520><c> and</c><01:49:47.679><c> let</c>

01:49:47.830 --> 01:49:47.840 align:start position:0%
these strings are not the same and let
 

01:49:47.840 --> 01:49:50.070 align:start position:0%
these strings are not the same and let
me<01:49:47.920><c> get</c><01:49:48.080><c> rid</c><01:49:48.239><c> of</c><01:49:48.320><c> that</c><01:49:48.400><c> printf</c><01:49:48.880><c> statement</c>

01:49:50.070 --> 01:49:50.080 align:start position:0%
me get rid of that printf statement
 

01:49:50.080 --> 01:49:53.990 align:start position:0%
me get rid of that printf statement
okay<01:49:50.320><c> now</c><01:49:50.560><c> if</c><01:49:50.719><c> i</c><01:49:50.800><c> make</c><01:49:51.119><c> the</c><01:49:51.280><c> strings</c><01:49:51.679><c> the</c><01:49:51.840><c> same</c>

01:49:53.990 --> 01:49:54.000 align:start position:0%
okay now if i make the strings the same
 

01:49:54.000 --> 01:49:57.189 align:start position:0%
okay now if i make the strings the same
then<01:49:54.400><c> result</c><01:49:55.119><c> is</c><01:49:55.280><c> going</c><01:49:55.440><c> to</c><01:49:55.599><c> be</c><01:49:56.080><c> zero</c>

01:49:57.189 --> 01:49:57.199 align:start position:0%
then result is going to be zero
 

01:49:57.199 --> 01:49:59.430 align:start position:0%
then result is going to be zero
these<01:49:57.440><c> strings</c><01:49:57.840><c> are</c><01:49:58.000><c> the</c><01:49:58.080><c> same</c><01:49:58.800><c> and</c><01:49:58.960><c> you</c><01:49:59.199><c> can</c>

01:49:59.430 --> 01:49:59.440 align:start position:0%
these strings are the same and you can
 

01:49:59.440 --> 01:50:02.390 align:start position:0%
these strings are the same and you can
compare<01:50:00.000><c> a</c><01:50:00.159><c> given</c><01:50:00.560><c> amount</c><01:50:00.880><c> of</c><01:50:01.040><c> characters</c><01:50:01.599><c> too</c>

01:50:02.390 --> 01:50:02.400 align:start position:0%
compare a given amount of characters too
 

01:50:02.400 --> 01:50:04.629 align:start position:0%
compare a given amount of characters too
so<01:50:02.719><c> currently</c><01:50:03.360><c> i</c><01:50:03.520><c> have</c><01:50:03.679><c> these</c><01:50:03.840><c> strings</c><01:50:04.320><c> set</c><01:50:04.560><c> to</c>

01:50:04.629 --> 01:50:04.639 align:start position:0%
so currently i have these strings set to
 

01:50:04.639 --> 01:50:06.550 align:start position:0%
so currently i have these strings set to
be<01:50:04.800><c> the</c><01:50:04.880><c> same</c><01:50:05.119><c> characters</c><01:50:06.000><c> so</c><01:50:06.239><c> this</c><01:50:06.400><c> will</c>

01:50:06.550 --> 01:50:06.560 align:start position:0%
be the same characters so this will
 

01:50:06.560 --> 01:50:08.709 align:start position:0%
be the same characters so this will
compare<01:50:07.040><c> only</c><01:50:07.280><c> the</c><01:50:07.360><c> first</c><01:50:07.679><c> character</c>

01:50:08.709 --> 01:50:08.719 align:start position:0%
compare only the first character
 

01:50:08.719 --> 01:50:10.550 align:start position:0%
compare only the first character
these<01:50:08.960><c> strings</c><01:50:09.280><c> are</c><01:50:09.440><c> the</c><01:50:09.520><c> same</c><01:50:10.080><c> even</c><01:50:10.320><c> if</c><01:50:10.480><c> i</c>

01:50:10.550 --> 01:50:10.560 align:start position:0%
these strings are the same even if i
 

01:50:10.560 --> 01:50:12.470 align:start position:0%
these strings are the same even if i
change<01:50:10.880><c> the</c><01:50:11.040><c> other</c><01:50:11.280><c> characters</c><01:50:12.000><c> the</c><01:50:12.159><c> first</c>

01:50:12.470 --> 01:50:12.480 align:start position:0%
change the other characters the first
 

01:50:12.480 --> 01:50:14.709 align:start position:0%
change the other characters the first
characters<01:50:12.960><c> will</c><01:50:13.199><c> still</c><01:50:13.360><c> be</c><01:50:13.520><c> the</c><01:50:13.679><c> same</c>

01:50:14.709 --> 01:50:14.719 align:start position:0%
characters will still be the same
 

01:50:14.719 --> 01:50:17.589 align:start position:0%
characters will still be the same
so<01:50:14.960><c> this</c><01:50:15.199><c> function</c><01:50:15.760><c> will</c><01:50:16.000><c> return</c><01:50:16.639><c> zero</c><01:50:17.280><c> there</c>

01:50:17.589 --> 01:50:17.599 align:start position:0%
so this function will return zero there
 

01:50:17.599 --> 01:50:19.669 align:start position:0%
so this function will return zero there
are<01:50:17.760><c> two</c><01:50:18.000><c> additional</c><01:50:18.480><c> versions</c><01:50:19.119><c> of</c><01:50:19.280><c> string</c>

01:50:19.669 --> 01:50:19.679 align:start position:0%
are two additional versions of string
 

01:50:19.679 --> 01:50:22.790 align:start position:0%
are two additional versions of string
compare<01:50:20.239><c> and</c><01:50:20.560><c> string</c><01:50:20.960><c> and</c><01:50:21.199><c> compare</c><01:50:22.000><c> they</c><01:50:22.320><c> are</c>

01:50:22.790 --> 01:50:22.800 align:start position:0%
compare and string and compare they are
 

01:50:22.800 --> 01:50:27.430 align:start position:0%
compare and string and compare they are
string<01:50:23.360><c> compare</c><01:50:24.000><c> i</c><01:50:24.639><c> and</c><01:50:25.040><c> string</c><01:50:25.679><c> n</c><01:50:26.159><c> i</c><01:50:26.560><c> compare</c>

01:50:27.430 --> 01:50:27.440 align:start position:0%
string compare i and string n i compare
 

01:50:27.440 --> 01:50:29.830 align:start position:0%
string compare i and string n i compare
so<01:50:27.679><c> these</c><01:50:27.920><c> will</c><01:50:28.080><c> do</c><01:50:28.239><c> the</c><01:50:28.320><c> exact</c><01:50:28.800><c> same</c><01:50:29.119><c> things</c>

01:50:29.830 --> 01:50:29.840 align:start position:0%
so these will do the exact same things
 

01:50:29.840 --> 01:50:32.870 align:start position:0%
so these will do the exact same things
except<01:50:30.320><c> they</c><01:50:30.560><c> ignore</c><01:50:31.040><c> case</c><01:50:31.360><c> sensitivity</c><01:50:32.560><c> so</c>

01:50:32.870 --> 01:50:32.880 align:start position:0%
except they ignore case sensitivity so
 

01:50:32.880 --> 01:50:34.950 align:start position:0%
except they ignore case sensitivity so
yeah<01:50:33.199><c> everybody</c><01:50:33.679><c> those</c><01:50:34.080><c> are</c><01:50:34.239><c> just</c><01:50:34.560><c> a</c><01:50:34.639><c> few</c>

01:50:34.950 --> 01:50:34.960 align:start position:0%
yeah everybody those are just a few
 

01:50:34.960 --> 01:50:36.870 align:start position:0%
yeah everybody those are just a few
useful<01:50:35.360><c> string</c><01:50:35.760><c> functions</c><01:50:36.320><c> there's</c><01:50:36.560><c> still</c><01:50:36.800><c> a</c>

01:50:36.870 --> 01:50:36.880 align:start position:0%
useful string functions there's still a
 

01:50:36.880 --> 01:50:39.510 align:start position:0%
useful string functions there's still a
lot<01:50:37.119><c> more</c><01:50:37.520><c> located</c><01:50:38.000><c> within</c><01:50:38.400><c> this</c><01:50:38.639><c> header</c><01:50:38.960><c> file</c>

01:50:39.510 --> 01:50:39.520 align:start position:0%
lot more located within this header file
 

01:50:39.520 --> 01:50:41.189 align:start position:0%
lot more located within this header file
but<01:50:39.760><c> we</c><01:50:39.920><c> would</c><01:50:40.080><c> need</c><01:50:40.239><c> to</c><01:50:40.400><c> understand</c><01:50:40.960><c> how</c>

01:50:41.189 --> 01:50:41.199 align:start position:0%
but we would need to understand how
 

01:50:41.199 --> 01:50:43.189 align:start position:0%
but we would need to understand how
things<01:50:41.520><c> like</c><01:50:41.840><c> pointers</c><01:50:42.320><c> work</c><01:50:42.639><c> which</c><01:50:42.880><c> we</c><01:50:43.040><c> have</c>

01:50:43.189 --> 01:50:43.199 align:start position:0%
things like pointers work which we have
 

01:50:43.199 --> 01:50:45.109 align:start position:0%
things like pointers work which we have
not<01:50:43.440><c> discussed</c><01:50:43.920><c> yet</c><01:50:44.320><c> but</c><01:50:44.480><c> i</c><01:50:44.639><c> thought</c><01:50:44.880><c> i</c><01:50:44.960><c> would</c>

01:50:45.109 --> 01:50:45.119 align:start position:0%
not discussed yet but i thought i would
 

01:50:45.119 --> 01:50:47.350 align:start position:0%
not discussed yet but i thought i would
at<01:50:45.199><c> least</c><01:50:45.520><c> cover</c><01:50:45.840><c> some</c><01:50:46.000><c> of</c><01:50:46.080><c> the</c><01:50:46.239><c> basics</c><01:50:47.119><c> so</c>

01:50:47.350 --> 01:50:47.360 align:start position:0%
at least cover some of the basics so
 

01:50:47.360 --> 01:50:49.510 align:start position:0%
at least cover some of the basics so
yeah<01:50:47.679><c> those</c><01:50:48.000><c> are</c><01:50:48.239><c> a</c><01:50:48.480><c> few</c><01:50:48.719><c> useful</c><01:50:49.119><c> string</c>

01:50:49.510 --> 01:50:49.520 align:start position:0%
yeah those are a few useful string
 

01:50:49.520 --> 01:50:51.430 align:start position:0%
yeah those are a few useful string
functions<01:50:49.920><c> in</c><01:50:50.080><c> c</c><01:50:50.480><c> if</c><01:50:50.639><c> you</c><01:50:50.800><c> would</c><01:50:50.880><c> like</c><01:50:51.040><c> a</c><01:50:51.119><c> copy</c>

01:50:51.430 --> 01:50:51.440 align:start position:0%
functions in c if you would like a copy
 

01:50:51.440 --> 01:50:53.109 align:start position:0%
functions in c if you would like a copy
of<01:50:51.599><c> all</c><01:50:51.679><c> these</c><01:50:51.920><c> notes</c><01:50:52.320><c> i'll</c><01:50:52.480><c> post</c><01:50:52.719><c> them</c><01:50:52.880><c> to</c><01:50:53.040><c> the</c>

01:50:53.109 --> 01:50:53.119 align:start position:0%
of all these notes i'll post them to the
 

01:50:53.119 --> 01:50:55.750 align:start position:0%
of all these notes i'll post them to the
comment<01:50:53.520><c> section</c><01:50:53.840><c> down</c><01:50:54.000><c> below</c><01:50:54.719><c> and</c><01:50:54.960><c> well</c><01:50:55.360><c> yeah</c>

01:50:55.750 --> 01:50:55.760 align:start position:0%
comment section down below and well yeah
 

01:50:55.760 --> 01:50:58.229 align:start position:0%
comment section down below and well yeah
those<01:50:56.000><c> are</c><01:50:56.320><c> a</c><01:50:56.400><c> few</c><01:50:56.800><c> useful</c><01:50:57.280><c> string</c><01:50:57.599><c> functions</c>

01:50:58.229 --> 01:50:58.239 align:start position:0%
those are a few useful string functions
 

01:50:58.239 --> 01:51:02.229 align:start position:0%
those are a few useful string functions
in<01:50:58.480><c> c</c>

01:51:02.229 --> 01:51:02.239 align:start position:0%
 
 

01:51:02.239 --> 01:51:05.109 align:start position:0%
 
hey<01:51:02.480><c> yeah</c><01:51:02.960><c> welcome</c><01:51:03.360><c> back</c><01:51:03.920><c> so</c><01:51:04.239><c> we</c><01:51:04.480><c> have</c><01:51:04.639><c> to</c><01:51:04.800><c> talk</c>

01:51:05.109 --> 01:51:05.119 align:start position:0%
hey yeah welcome back so we have to talk
 

01:51:05.119 --> 01:51:08.390 align:start position:0%
hey yeah welcome back so we have to talk
about<01:51:05.520><c> for</c><01:51:05.840><c> loops</c><01:51:06.400><c> a</c><01:51:06.719><c> for</c><01:51:07.040><c> loop</c><01:51:07.440><c> repeats</c><01:51:08.080><c> a</c>

01:51:08.390 --> 01:51:08.400 align:start position:0%
about for loops a for loop repeats a
 

01:51:08.400 --> 01:51:10.709 align:start position:0%
about for loops a for loop repeats a
section<01:51:08.800><c> of</c><01:51:08.960><c> code</c><01:51:09.440><c> a</c><01:51:09.840><c> limited</c><01:51:10.320><c> amount</c><01:51:10.560><c> of</c>

01:51:10.709 --> 01:51:10.719 align:start position:0%
section of code a limited amount of
 

01:51:10.719 --> 01:51:13.350 align:start position:0%
section of code a limited amount of
times<01:51:11.360><c> here's</c><01:51:11.679><c> an</c><01:51:11.840><c> example</c><01:51:12.560><c> let's</c><01:51:12.880><c> say</c><01:51:13.199><c> that</c>

01:51:13.350 --> 01:51:13.360 align:start position:0%
times here's an example let's say that
 

01:51:13.360 --> 01:51:15.589 align:start position:0%
times here's an example let's say that
we<01:51:13.599><c> would</c><01:51:13.760><c> like</c><01:51:14.000><c> to</c><01:51:14.159><c> count</c><01:51:14.639><c> the</c><01:51:14.719><c> numbers</c><01:51:15.280><c> 1</c>

01:51:15.589 --> 01:51:15.599 align:start position:0%
we would like to count the numbers 1
 

01:51:15.599 --> 01:51:17.589 align:start position:0%
we would like to count the numbers 1
through<01:51:15.920><c> 10.</c><01:51:16.239><c> so</c><01:51:16.400><c> we</c><01:51:16.560><c> can</c><01:51:16.719><c> actually</c><01:51:17.119><c> write</c><01:51:17.440><c> a</c>

01:51:17.589 --> 01:51:17.599 align:start position:0%
through 10. so we can actually write a
 

01:51:17.599 --> 01:51:19.669 align:start position:0%
through 10. so we can actually write a
for<01:51:17.920><c> loop</c><01:51:18.159><c> to</c><01:51:18.239><c> do</c><01:51:18.400><c> that</c><01:51:18.560><c> for</c><01:51:18.800><c> us</c><01:51:19.199><c> and</c><01:51:19.440><c> here's</c>

01:51:19.669 --> 01:51:19.679 align:start position:0%
for loop to do that for us and here's
 

01:51:19.679 --> 01:51:21.750 align:start position:0%
for loop to do that for us and here's
how<01:51:19.840><c> to</c><01:51:20.000><c> create</c><01:51:20.239><c> one</c><01:51:20.560><c> type</c><01:51:20.960><c> four</c>

01:51:21.750 --> 01:51:21.760 align:start position:0%
how to create one type four
 

01:51:21.760 --> 01:51:23.910 align:start position:0%
how to create one type four
a<01:51:22.000><c> set</c><01:51:22.159><c> of</c><01:51:22.239><c> parentheses</c><01:51:23.119><c> then</c><01:51:23.280><c> a</c><01:51:23.360><c> set</c><01:51:23.520><c> of</c><01:51:23.599><c> curly</c>

01:51:23.910 --> 01:51:23.920 align:start position:0%
a set of parentheses then a set of curly
 

01:51:23.920 --> 01:51:26.550 align:start position:0%
a set of parentheses then a set of curly
braces<01:51:24.719><c> anything</c><01:51:25.119><c> within</c><01:51:25.679><c> this</c><01:51:25.920><c> set</c><01:51:26.080><c> of</c><01:51:26.239><c> curly</c>

01:51:26.550 --> 01:51:26.560 align:start position:0%
braces anything within this set of curly
 

01:51:26.560 --> 01:51:29.270 align:start position:0%
braces anything within this set of curly
braces<01:51:27.119><c> we</c><01:51:27.280><c> can</c><01:51:27.440><c> repeat</c><01:51:27.920><c> a</c><01:51:28.320><c> limited</c><01:51:28.800><c> amount</c><01:51:29.119><c> of</c>

01:51:29.270 --> 01:51:29.280 align:start position:0%
braces we can repeat a limited amount of
 

01:51:29.280 --> 01:51:31.910 align:start position:0%
braces we can repeat a limited amount of
times<01:51:29.840><c> but</c><01:51:30.080><c> before</c><01:51:30.400><c> we</c><01:51:30.560><c> do</c><01:51:30.800><c> so</c><01:51:31.119><c> there's</c><01:51:31.520><c> a</c><01:51:31.679><c> few</c>

01:51:31.910 --> 01:51:31.920 align:start position:0%
times but before we do so there's a few
 

01:51:31.920 --> 01:51:33.669 align:start position:0%
times but before we do so there's a few
statements<01:51:32.400><c> we</c><01:51:32.480><c> have</c><01:51:32.719><c> to</c><01:51:32.800><c> add</c><01:51:33.040><c> to</c><01:51:33.280><c> our</c><01:51:33.440><c> for</c>

01:51:33.669 --> 01:51:33.679 align:start position:0%
statements we have to add to our for
 

01:51:33.679 --> 01:51:35.910 align:start position:0%
statements we have to add to our for
loop<01:51:34.159><c> there</c><01:51:34.400><c> are</c><01:51:34.639><c> three</c><01:51:34.960><c> the</c><01:51:35.119><c> first</c><01:51:35.599><c> is</c><01:51:35.760><c> that</c>

01:51:35.910 --> 01:51:35.920 align:start position:0%
loop there are three the first is that
 

01:51:35.920 --> 01:51:38.629 align:start position:0%
loop there are three the first is that
we<01:51:36.080><c> need</c><01:51:36.320><c> some</c><01:51:36.560><c> sort</c><01:51:36.800><c> of</c><01:51:37.040><c> counter</c><01:51:37.520><c> or</c><01:51:37.840><c> index</c>

01:51:38.629 --> 01:51:38.639 align:start position:0%
we need some sort of counter or index
 

01:51:38.639 --> 01:51:40.310 align:start position:0%
we need some sort of counter or index
and<01:51:38.800><c> we</c><01:51:38.960><c> can</c><01:51:39.199><c> actually</c><01:51:39.520><c> declare</c><01:51:39.920><c> that</c><01:51:40.080><c> within</c>

01:51:40.310 --> 01:51:40.320 align:start position:0%
and we can actually declare that within
 

01:51:40.320 --> 01:51:43.109 align:start position:0%
and we can actually declare that within
the<01:51:40.480><c> for</c><01:51:40.719><c> loop</c><01:51:41.119><c> so</c><01:51:41.280><c> we</c><01:51:41.440><c> will</c><01:51:41.599><c> declare</c><01:51:42.159><c> an</c><01:51:42.480><c> index</c>

01:51:43.109 --> 01:51:43.119 align:start position:0%
the for loop so we will declare an index
 

01:51:43.119 --> 01:51:44.149 align:start position:0%
the for loop so we will declare an index
int

01:51:44.149 --> 01:51:44.159 align:start position:0%
int
 

01:51:44.159 --> 01:51:46.470 align:start position:0%
int
index<01:51:44.719><c> and</c><01:51:44.880><c> set</c><01:51:45.040><c> the</c><01:51:45.199><c> sql</c><01:51:45.679><c> to</c><01:51:46.000><c> some</c><01:51:46.239><c> number</c>

01:51:46.470 --> 01:51:46.480 align:start position:0%
index and set the sql to some number
 

01:51:46.480 --> 01:51:48.790 align:start position:0%
index and set the sql to some number
let's<01:51:46.639><c> say</c><01:51:46.880><c> one</c><01:51:47.520><c> so</c><01:51:47.679><c> we</c><01:51:47.840><c> will</c><01:51:48.080><c> start</c><01:51:48.320><c> at</c><01:51:48.480><c> one</c>

01:51:48.790 --> 01:51:48.800 align:start position:0%
let's say one so we will start at one
 

01:51:48.800 --> 01:51:50.790 align:start position:0%
let's say one so we will start at one
and<01:51:48.960><c> count</c><01:51:49.280><c> to</c><01:51:49.440><c> ten</c><01:51:49.920><c> and</c><01:51:50.000><c> then</c><01:51:50.239><c> finish</c><01:51:50.639><c> the</c>

01:51:50.790 --> 01:51:50.800 align:start position:0%
and count to ten and then finish the
 

01:51:50.800 --> 01:51:53.430 align:start position:0%
and count to ten and then finish the
statement<01:51:51.360><c> with</c><01:51:51.599><c> a</c><01:51:51.840><c> semicolon</c><01:51:52.639><c> now</c><01:51:52.880><c> a</c><01:51:53.119><c> common</c>

01:51:53.430 --> 01:51:53.440 align:start position:0%
statement with a semicolon now a common
 

01:51:53.440 --> 01:51:55.510 align:start position:0%
statement with a semicolon now a common
convention<01:51:54.080><c> is</c><01:51:54.239><c> that</c><01:51:54.639><c> a</c><01:51:54.719><c> lot</c><01:51:54.880><c> of</c><01:51:55.040><c> people</c><01:51:55.280><c> will</c>

01:51:55.510 --> 01:51:55.520 align:start position:0%
convention is that a lot of people will
 

01:51:55.520 --> 01:51:57.910 align:start position:0%
convention is that a lot of people will
shorten<01:51:56.000><c> index</c><01:51:56.560><c> to</c><01:51:56.800><c> i</c><01:51:57.119><c> because</c><01:51:57.440><c> it's</c><01:51:57.599><c> easier</c>

01:51:57.910 --> 01:51:57.920 align:start position:0%
shorten index to i because it's easier
 

01:51:57.920 --> 01:51:59.510 align:start position:0%
shorten index to i because it's easier
to<01:51:58.000><c> work</c><01:51:58.239><c> with</c><01:51:58.639><c> so</c><01:51:58.880><c> this</c><01:51:59.119><c> is</c><01:51:59.199><c> the</c><01:51:59.280><c> first</c>

01:51:59.510 --> 01:51:59.520 align:start position:0%
to work with so this is the first
 

01:51:59.520 --> 01:52:01.589 align:start position:0%
to work with so this is the first
statement<01:52:00.080><c> there's</c><01:52:00.400><c> two</c><01:52:00.560><c> more</c><01:52:01.199><c> and</c><01:52:01.440><c> the</c>

01:52:01.589 --> 01:52:01.599 align:start position:0%
statement there's two more and the
 

01:52:01.599 --> 01:52:04.149 align:start position:0%
statement there's two more and the
second<01:52:01.920><c> statement</c><01:52:02.639><c> is</c><01:52:02.880><c> a</c><01:52:03.119><c> condition</c><01:52:03.760><c> how</c><01:52:03.920><c> long</c>

01:52:04.149 --> 01:52:04.159 align:start position:0%
second statement is a condition how long
 

01:52:04.159 --> 01:52:06.070 align:start position:0%
second statement is a condition how long
should<01:52:04.320><c> we</c><01:52:04.480><c> continue</c><01:52:04.960><c> repeating</c><01:52:05.360><c> this</c><01:52:05.520><c> code</c>

01:52:06.070 --> 01:52:06.080 align:start position:0%
should we continue repeating this code
 

01:52:06.080 --> 01:52:08.149 align:start position:0%
should we continue repeating this code
so<01:52:06.320><c> let's</c><01:52:06.560><c> continue</c><01:52:06.960><c> this</c><01:52:07.199><c> for</c><01:52:07.440><c> loop</c><01:52:07.760><c> as</c><01:52:07.920><c> long</c>

01:52:08.149 --> 01:52:08.159 align:start position:0%
so let's continue this for loop as long
 

01:52:08.159 --> 01:52:12.229 align:start position:0%
so let's continue this for loop as long
as<01:52:08.480><c> i</c><01:52:08.960><c> our</c><01:52:09.280><c> index</c><01:52:10.239><c> is</c><01:52:10.560><c> less</c><01:52:10.800><c> than</c><01:52:11.119><c> or</c><01:52:11.440><c> equal</c><01:52:11.920><c> to</c>

01:52:12.229 --> 01:52:12.239 align:start position:0%
as i our index is less than or equal to
 

01:52:12.239 --> 01:52:15.350 align:start position:0%
as i our index is less than or equal to
10<01:52:12.960><c> and</c><01:52:13.119><c> then</c><01:52:13.360><c> add</c><01:52:13.679><c> a</c><01:52:13.840><c> semicolon</c><01:52:14.480><c> at</c><01:52:14.560><c> the</c><01:52:14.719><c> end</c>

01:52:15.350 --> 01:52:15.360 align:start position:0%
10 and then add a semicolon at the end
 

01:52:15.360 --> 01:52:17.510 align:start position:0%
10 and then add a semicolon at the end
so<01:52:15.520><c> that</c><01:52:15.760><c> is</c><01:52:15.920><c> the</c><01:52:16.080><c> second</c><01:52:16.400><c> statement</c><01:52:17.199><c> and</c><01:52:17.360><c> the</c>

01:52:17.510 --> 01:52:17.520 align:start position:0%
so that is the second statement and the
 

01:52:17.520 --> 01:52:19.830 align:start position:0%
so that is the second statement and the
third<01:52:17.760><c> statement</c><01:52:18.400><c> is</c><01:52:18.560><c> that</c><01:52:18.880><c> we</c><01:52:19.040><c> can</c><01:52:19.280><c> increment</c>

01:52:19.830 --> 01:52:19.840 align:start position:0%
third statement is that we can increment
 

01:52:19.840 --> 01:52:21.990 align:start position:0%
third statement is that we can increment
or<01:52:20.080><c> decrement</c><01:52:20.800><c> our</c><01:52:21.040><c> counter</c>

01:52:21.990 --> 01:52:22.000 align:start position:0%
or decrement our counter
 

01:52:22.000 --> 01:52:25.109 align:start position:0%
or decrement our counter
so<01:52:22.239><c> let's</c><01:52:22.480><c> take</c><01:52:22.800><c> i</c><01:52:23.440><c> and</c><01:52:23.760><c> increment</c><01:52:24.239><c> it</c><01:52:24.400><c> by</c><01:52:24.639><c> one</c>

01:52:25.109 --> 01:52:25.119 align:start position:0%
so let's take i and increment it by one
 

01:52:25.119 --> 01:52:27.589 align:start position:0%
so let's take i and increment it by one
after<01:52:25.599><c> each</c><01:52:25.840><c> iteration</c><01:52:26.480><c> by</c><01:52:26.639><c> using</c><01:52:27.040><c> i</c><01:52:27.280><c> plus</c>

01:52:27.589 --> 01:52:27.599 align:start position:0%
after each iteration by using i plus
 

01:52:27.599 --> 01:52:32.390 align:start position:0%
after each iteration by using i plus
plus<01:52:28.320><c> so</c><01:52:28.480><c> let's</c><01:52:28.719><c> just</c><01:52:28.960><c> test</c><01:52:29.280><c> this</c><01:52:30.000><c> so</c><01:52:30.320><c> printf</c>

01:52:32.390 --> 01:52:32.400 align:start position:0%
plus so let's just test this so printf
 

01:52:32.400 --> 01:52:35.189 align:start position:0%
plus so let's just test this so printf
i'll<01:52:32.639><c> just</c><01:52:32.800><c> print</c><01:52:33.119><c> the</c><01:52:33.199><c> word</c><01:52:33.440><c> test</c>

01:52:35.189 --> 01:52:35.199 align:start position:0%
i'll just print the word test
 

01:52:35.199 --> 01:52:37.669 align:start position:0%
i'll just print the word test
so<01:52:35.440><c> this</c><01:52:35.599><c> should</c><01:52:35.920><c> print</c><01:52:36.239><c> the</c><01:52:36.400><c> word</c><01:52:36.639><c> test</c><01:52:37.280><c> ten</c>

01:52:37.669 --> 01:52:37.679 align:start position:0%
so this should print the word test ten
 

01:52:37.679 --> 01:52:38.550 align:start position:0%
so this should print the word test ten
times

01:52:38.550 --> 01:52:38.560 align:start position:0%
times
 

01:52:38.560 --> 01:52:39.830 align:start position:0%
times
uh<01:52:38.719><c> then</c><01:52:38.880><c> we</c><01:52:39.040><c> should</c><01:52:39.199><c> add</c><01:52:39.360><c> a</c><01:52:39.440><c> new</c><01:52:39.599><c> line</c>

01:52:39.830 --> 01:52:39.840 align:start position:0%
uh then we should add a new line
 

01:52:39.840 --> 01:52:43.990 align:start position:0%
uh then we should add a new line
character<01:52:40.239><c> at</c><01:52:40.320><c> the</c><01:52:40.480><c> end</c>

01:52:43.990 --> 01:52:44.000 align:start position:0%
 
 

01:52:44.000 --> 01:52:45.990 align:start position:0%
 
that's<01:52:44.239><c> much</c><01:52:44.560><c> better</c><01:52:45.040><c> okay</c><01:52:45.520><c> now</c><01:52:45.760><c> let's</c>

01:52:45.990 --> 01:52:46.000 align:start position:0%
that's much better okay now let's
 

01:52:46.000 --> 01:52:48.870 align:start position:0%
that's much better okay now let's
replace<01:52:46.639><c> test</c><01:52:47.199><c> with</c><01:52:47.520><c> a</c><01:52:47.679><c> format</c><01:52:48.080><c> specifier</c>

01:52:48.870 --> 01:52:48.880 align:start position:0%
replace test with a format specifier
 

01:52:48.880 --> 01:52:51.430 align:start position:0%
replace test with a format specifier
we're<01:52:49.040><c> displaying</c><01:52:49.599><c> an</c><01:52:49.840><c> integer</c>

01:52:51.430 --> 01:52:51.440 align:start position:0%
we're displaying an integer
 

01:52:51.440 --> 01:52:54.950 align:start position:0%
we're displaying an integer
and<01:52:51.760><c> let's</c><01:52:52.080><c> display</c><01:52:52.800><c> i</c><01:52:53.280><c> our</c><01:52:53.520><c> index</c><01:52:54.400><c> and</c><01:52:54.800><c> this</c>

01:52:54.950 --> 01:52:54.960 align:start position:0%
and let's display i our index and this
 

01:52:54.960 --> 01:52:57.430 align:start position:0%
and let's display i our index and this
should<01:52:55.280><c> count</c><01:52:55.520><c> from</c><01:52:55.840><c> one</c><01:52:56.159><c> to</c><01:52:56.400><c> ten</c>

01:52:57.430 --> 01:52:57.440 align:start position:0%
should count from one to ten
 

01:52:57.440 --> 01:53:00.390 align:start position:0%
should count from one to ten
yep<01:52:57.840><c> just</c><01:52:58.080><c> like</c><01:52:58.320><c> that</c><01:52:58.719><c> one</c><01:52:59.199><c> through</c><01:52:59.599><c> ten</c><01:53:00.159><c> so</c>

01:53:00.390 --> 01:53:00.400 align:start position:0%
yep just like that one through ten so
 

01:53:00.400 --> 01:53:01.990 align:start position:0%
yep just like that one through ten so
with<01:53:00.639><c> this</c><01:53:00.880><c> third</c><01:53:01.119><c> statement</c><01:53:01.599><c> we</c><01:53:01.760><c> can</c>

01:53:01.990 --> 01:53:02.000 align:start position:0%
with this third statement we can
 

01:53:02.000 --> 01:53:04.550 align:start position:0%
with this third statement we can
increment<01:53:02.480><c> or</c><01:53:02.719><c> decrement</c><01:53:03.360><c> by</c><01:53:03.599><c> one</c><01:53:04.000><c> or</c><01:53:04.400><c> a</c>

01:53:04.550 --> 01:53:04.560 align:start position:0%
increment or decrement by one or a
 

01:53:04.560 --> 01:53:06.709 align:start position:0%
increment or decrement by one or a
greater<01:53:04.880><c> number</c><01:53:05.520><c> so</c><01:53:05.760><c> this</c><01:53:06.000><c> time</c><01:53:06.239><c> let's</c><01:53:06.480><c> count</c>

01:53:06.709 --> 01:53:06.719 align:start position:0%
greater number so this time let's count
 

01:53:06.719 --> 01:53:09.830 align:start position:0%
greater number so this time let's count
by<01:53:07.040><c> two</c><01:53:07.599><c> so</c><01:53:07.760><c> we</c><01:53:07.920><c> can</c><01:53:08.080><c> set</c><01:53:08.239><c> this</c><01:53:08.480><c> to</c><01:53:08.800><c> i</c><01:53:09.360><c> plus</c>

01:53:09.830 --> 01:53:09.840 align:start position:0%
by two so we can set this to i plus
 

01:53:09.840 --> 01:53:13.189 align:start position:0%
by two so we can set this to i plus
equals<01:53:10.840><c> two</c><01:53:11.760><c> and</c><01:53:11.920><c> we</c><01:53:12.159><c> will</c><01:53:12.320><c> now</c><01:53:12.639><c> count</c><01:53:12.880><c> up</c><01:53:13.040><c> by</c>

01:53:13.189 --> 01:53:13.199 align:start position:0%
equals two and we will now count up by
 

01:53:13.199 --> 01:53:15.910 align:start position:0%
equals two and we will now count up by
two<01:53:13.520><c> starting</c><01:53:13.920><c> from</c><01:53:14.159><c> one</c><01:53:14.800><c> one</c><01:53:15.119><c> three</c><01:53:15.520><c> five</c>

01:53:15.910 --> 01:53:15.920 align:start position:0%
two starting from one one three five
 

01:53:15.920 --> 01:53:17.030 align:start position:0%
two starting from one one three five
seven<01:53:16.239><c> nine</c>

01:53:17.030 --> 01:53:17.040 align:start position:0%
seven nine
 

01:53:17.040 --> 01:53:18.550 align:start position:0%
seven nine
or<01:53:17.199><c> how</c><01:53:17.440><c> about</c><01:53:17.679><c> three</c>

01:53:18.550 --> 01:53:18.560 align:start position:0%
or how about three
 

01:53:18.560 --> 01:53:20.550 align:start position:0%
or how about three
one<01:53:18.960><c> four</c><01:53:19.199><c> seven</c><01:53:19.599><c> ten</c><01:53:20.000><c> you</c><01:53:20.159><c> can</c><01:53:20.320><c> also</c>

01:53:20.550 --> 01:53:20.560 align:start position:0%
one four seven ten you can also
 

01:53:20.560 --> 01:53:23.189 align:start position:0%
one four seven ten you can also
decrement<01:53:21.360><c> this</c><01:53:21.599><c> time</c><01:53:21.840><c> let's</c><01:53:22.080><c> count</c><01:53:22.480><c> from</c><01:53:22.800><c> ten</c>

01:53:23.189 --> 01:53:23.199 align:start position:0%
decrement this time let's count from ten
 

01:53:23.199 --> 01:53:26.790 align:start position:0%
decrement this time let's count from ten
to<01:53:23.440><c> one</c><01:53:24.239><c> so</c><01:53:24.480><c> let's</c><01:53:24.719><c> set</c><01:53:24.960><c> i</c><01:53:25.280><c> to</c><01:53:25.440><c> equal</c><01:53:25.920><c> 10</c>

01:53:26.790 --> 01:53:26.800 align:start position:0%
to one so let's set i to equal 10
 

01:53:26.800 --> 01:53:29.430 align:start position:0%
to one so let's set i to equal 10
and<01:53:26.960><c> we</c><01:53:27.119><c> will</c><01:53:27.280><c> continue</c><01:53:27.760><c> this</c><01:53:28.000><c> as</c><01:53:28.320><c> long</c><01:53:28.560><c> as</c><01:53:28.800><c> i</c>

01:53:29.430 --> 01:53:29.440 align:start position:0%
and we will continue this as long as i
 

01:53:29.440 --> 01:53:32.629 align:start position:0%
and we will continue this as long as i
is<01:53:29.760><c> greater</c><01:53:30.080><c> than</c><01:53:30.560><c> or</c><01:53:30.800><c> equal</c><01:53:31.280><c> to</c><01:53:31.599><c> 1</c>

01:53:32.629 --> 01:53:32.639 align:start position:0%
is greater than or equal to 1
 

01:53:32.639 --> 01:53:36.149 align:start position:0%
is greater than or equal to 1
and<01:53:32.880><c> we</c><01:53:33.040><c> will</c><01:53:33.280><c> decrement</c><01:53:34.000><c> i</c><01:53:34.560><c> minus</c><01:53:34.960><c> minus</c>

01:53:36.149 --> 01:53:36.159 align:start position:0%
and we will decrement i minus minus
 

01:53:36.159 --> 01:53:39.109 align:start position:0%
and we will decrement i minus minus
so<01:53:36.320><c> this</c><01:53:36.480><c> will</c><01:53:36.719><c> count</c><01:53:37.119><c> from</c><01:53:37.520><c> 10</c><01:53:38.080><c> to</c><01:53:38.320><c> 1</c><01:53:38.719><c> and</c><01:53:38.880><c> then</c>

01:53:39.109 --> 01:53:39.119 align:start position:0%
so this will count from 10 to 1 and then
 

01:53:39.119 --> 01:53:42.070 align:start position:0%
so this will count from 10 to 1 and then
stop<01:53:39.679><c> or</c><01:53:40.000><c> we</c><01:53:40.159><c> could</c><01:53:40.400><c> count</c><01:53:40.639><c> down</c><01:53:40.880><c> by</c><01:53:41.199><c> two</c>

01:53:42.070 --> 01:53:42.080 align:start position:0%
stop or we could count down by two
 

01:53:42.080 --> 01:53:45.109 align:start position:0%
stop or we could count down by two
i<01:53:42.560><c> minus</c><01:53:43.199><c> equals</c><01:53:43.679><c> two</c>

01:53:45.109 --> 01:53:45.119 align:start position:0%
i minus equals two
 

01:53:45.119 --> 01:53:47.750 align:start position:0%
i minus equals two
then<01:53:45.280><c> we</c><01:53:45.440><c> have</c><01:53:45.760><c> ten</c><01:53:46.080><c> eight</c><01:53:46.320><c> six</c><01:53:46.560><c> four</c><01:53:46.880><c> two</c>

01:53:47.750 --> 01:53:47.760 align:start position:0%
then we have ten eight six four two
 

01:53:47.760 --> 01:53:50.870 align:start position:0%
then we have ten eight six four two
or<01:53:48.080><c> even</c><01:53:48.400><c> three</c><01:53:48.800><c> or</c><01:53:48.960><c> a</c><01:53:49.119><c> greater</c><01:53:49.440><c> number</c>

01:53:50.870 --> 01:53:50.880 align:start position:0%
or even three or a greater number
 

01:53:50.880 --> 01:53:53.189 align:start position:0%
or even three or a greater number
so<01:53:51.119><c> yeah</c><01:53:51.360><c> that's</c><01:53:51.599><c> a</c><01:53:51.679><c> for</c><01:53:51.920><c> loop</c><01:53:52.239><c> it</c><01:53:52.320><c> repeats</c><01:53:52.960><c> a</c>

01:53:53.189 --> 01:53:53.199 align:start position:0%
so yeah that's a for loop it repeats a
 

01:53:53.199 --> 01:53:55.510 align:start position:0%
so yeah that's a for loop it repeats a
section<01:53:53.599><c> of</c><01:53:53.760><c> code</c><01:53:54.159><c> a</c><01:53:54.560><c> limited</c><01:53:55.040><c> amount</c><01:53:55.360><c> of</c>

01:53:55.510 --> 01:53:55.520 align:start position:0%
section of code a limited amount of
 

01:53:55.520 --> 01:53:57.510 align:start position:0%
section of code a limited amount of
times<01:53:56.159><c> there's</c><01:53:56.480><c> up</c><01:53:56.560><c> to</c><01:53:56.800><c> three</c><01:53:57.040><c> statements</c>

01:53:57.510 --> 01:53:57.520 align:start position:0%
times there's up to three statements
 

01:53:57.520 --> 01:53:59.910 align:start position:0%
times there's up to three statements
that<01:53:57.679><c> we</c><01:53:57.840><c> can</c><01:53:58.000><c> add</c><01:53:58.320><c> we</c><01:53:58.480><c> can</c><01:53:58.639><c> declare</c><01:53:59.040><c> an</c><01:53:59.199><c> index</c>

01:53:59.910 --> 01:53:59.920 align:start position:0%
that we can add we can declare an index
 

01:53:59.920 --> 01:54:02.629 align:start position:0%
that we can add we can declare an index
a<01:54:00.159><c> counter</c><01:54:00.719><c> so</c><01:54:00.960><c> to</c><01:54:01.119><c> say</c><01:54:01.599><c> some</c><01:54:01.840><c> condition</c><01:54:02.480><c> that</c>

01:54:02.629 --> 01:54:02.639 align:start position:0%
a counter so to say some condition that
 

01:54:02.639 --> 01:54:05.270 align:start position:0%
a counter so to say some condition that
we<01:54:02.880><c> check</c><01:54:03.280><c> after</c><01:54:03.679><c> each</c><01:54:03.920><c> iteration</c><01:54:04.800><c> and</c><01:54:04.960><c> then</c>

01:54:05.270 --> 01:54:05.280 align:start position:0%
we check after each iteration and then
 

01:54:05.280 --> 01:54:07.750 align:start position:0%
we check after each iteration and then
some<01:54:05.520><c> way</c><01:54:05.760><c> to</c><01:54:06.080><c> increment</c><01:54:06.560><c> or</c><01:54:06.800><c> decrement</c><01:54:07.440><c> our</c>

01:54:07.750 --> 01:54:07.760 align:start position:0%
some way to increment or decrement our
 

01:54:07.760 --> 01:54:09.830 align:start position:0%
some way to increment or decrement our
index<01:54:08.480><c> and</c><01:54:08.639><c> then</c><01:54:08.880><c> place</c><01:54:09.199><c> any</c><01:54:09.360><c> code</c><01:54:09.599><c> you</c><01:54:09.760><c> would</c>

01:54:09.830 --> 01:54:09.840 align:start position:0%
index and then place any code you would
 

01:54:09.840 --> 01:54:11.830 align:start position:0%
index and then place any code you would
like<01:54:10.000><c> to</c><01:54:10.159><c> repeat</c><01:54:10.560><c> within</c><01:54:10.960><c> a</c><01:54:11.119><c> set</c><01:54:11.360><c> of</c><01:54:11.520><c> curly</c>

01:54:11.830 --> 01:54:11.840 align:start position:0%
like to repeat within a set of curly
 

01:54:11.840 --> 01:54:14.390 align:start position:0%
like to repeat within a set of curly
braces<01:54:12.639><c> so</c><01:54:12.960><c> yeah</c><01:54:13.199><c> that's</c><01:54:13.440><c> a</c><01:54:13.599><c> for</c><01:54:13.840><c> loop</c><01:54:14.159><c> if</c><01:54:14.320><c> you</c>

01:54:14.390 --> 01:54:14.400 align:start position:0%
braces so yeah that's a for loop if you
 

01:54:14.400 --> 01:54:15.990 align:start position:0%
braces so yeah that's a for loop if you
would<01:54:14.480><c> like</c><01:54:14.719><c> a</c><01:54:14.800><c> copy</c><01:54:15.119><c> of</c><01:54:15.199><c> this</c><01:54:15.360><c> code</c><01:54:15.599><c> i</c><01:54:15.760><c> will</c>

01:54:15.990 --> 01:54:16.000 align:start position:0%
would like a copy of this code i will
 

01:54:16.000 --> 01:54:17.589 align:start position:0%
would like a copy of this code i will
post<01:54:16.239><c> this</c><01:54:16.480><c> to</c><01:54:16.560><c> the</c><01:54:16.719><c> comment</c><01:54:17.040><c> section</c><01:54:17.360><c> down</c>

01:54:17.589 --> 01:54:17.599 align:start position:0%
post this to the comment section down
 

01:54:17.599 --> 01:54:20.229 align:start position:0%
post this to the comment section down
below<01:54:18.159><c> and</c><01:54:18.400><c> well</c><01:54:18.800><c> yeah</c><01:54:19.119><c> those</c><01:54:19.360><c> are</c><01:54:19.520><c> for</c><01:54:19.760><c> loops</c>

01:54:20.229 --> 01:54:20.239 align:start position:0%
below and well yeah those are for loops
 

01:54:20.239 --> 01:54:24.390 align:start position:0%
below and well yeah those are for loops
in<01:54:20.480><c> c</c>

01:54:24.390 --> 01:54:24.400 align:start position:0%
 
 

01:54:24.400 --> 01:54:26.390 align:start position:0%
 
all<01:54:24.639><c> right</c><01:54:25.040><c> we're</c><01:54:25.199><c> back</c><01:54:25.440><c> at</c><01:54:25.599><c> it</c><01:54:25.760><c> again</c><01:54:26.159><c> so</c>

01:54:26.390 --> 01:54:26.400 align:start position:0%
all right we're back at it again so
 

01:54:26.400 --> 01:54:28.390 align:start position:0%
all right we're back at it again so
let's<01:54:26.719><c> talk</c><01:54:26.960><c> about</c><01:54:27.199><c> while</c><01:54:27.440><c> loops</c><01:54:27.840><c> a</c><01:54:28.080><c> while</c>

01:54:28.390 --> 01:54:28.400 align:start position:0%
let's talk about while loops a while
 

01:54:28.400 --> 01:54:30.950 align:start position:0%
let's talk about while loops a while
loop<01:54:28.719><c> will</c><01:54:28.960><c> repeat</c><01:54:29.520><c> a</c><01:54:29.840><c> section</c><01:54:30.239><c> of</c><01:54:30.400><c> code</c>

01:54:30.950 --> 01:54:30.960 align:start position:0%
loop will repeat a section of code
 

01:54:30.960 --> 01:54:33.109 align:start position:0%
loop will repeat a section of code
possibly<01:54:31.599><c> unlimited</c><01:54:32.159><c> times</c><01:54:32.719><c> we</c><01:54:32.880><c> will</c>

01:54:33.109 --> 01:54:33.119 align:start position:0%
possibly unlimited times we will
 

01:54:33.119 --> 01:54:36.149 align:start position:0%
possibly unlimited times we will
continue<01:54:33.920><c> some</c><01:54:34.239><c> section</c><01:54:34.560><c> of</c><01:54:34.719><c> code</c><01:54:35.360><c> while</c><01:54:35.920><c> some</c>

01:54:36.149 --> 01:54:36.159 align:start position:0%
continue some section of code while some
 

01:54:36.159 --> 01:54:38.470 align:start position:0%
continue some section of code while some
condition<01:54:36.800><c> remains</c><01:54:37.280><c> true</c><01:54:37.760><c> and</c><01:54:37.920><c> it's</c><01:54:38.080><c> possible</c>

01:54:38.470 --> 01:54:38.480 align:start position:0%
condition remains true and it's possible
 

01:54:38.480 --> 01:54:40.310 align:start position:0%
condition remains true and it's possible
that<01:54:38.639><c> a</c><01:54:38.719><c> while</c><01:54:38.960><c> loop</c><01:54:39.280><c> might</c><01:54:39.440><c> not</c><01:54:39.679><c> execute</c><01:54:40.159><c> at</c>

01:54:40.310 --> 01:54:40.320 align:start position:0%
that a while loop might not execute at
 

01:54:40.320 --> 01:54:42.070 align:start position:0%
that a while loop might not execute at
all<01:54:40.480><c> depending</c><01:54:40.800><c> on</c><01:54:40.960><c> what</c><01:54:41.119><c> our</c><01:54:41.199><c> condition</c><01:54:41.760><c> is</c>

01:54:42.070 --> 01:54:42.080 align:start position:0%
all depending on what our condition is
 

01:54:42.080 --> 01:54:43.750 align:start position:0%
all depending on what our condition is
so<01:54:42.320><c> here's</c><01:54:42.560><c> an</c><01:54:42.719><c> example</c><01:54:43.199><c> let's</c><01:54:43.440><c> create</c><01:54:43.599><c> a</c>

01:54:43.750 --> 01:54:43.760 align:start position:0%
so here's an example let's create a
 

01:54:43.760 --> 01:54:45.990 align:start position:0%
so here's an example let's create a
program<01:54:44.239><c> that</c><01:54:44.480><c> will</c><01:54:44.639><c> ask</c><01:54:44.960><c> a</c><01:54:45.119><c> user</c><01:54:45.520><c> for</c><01:54:45.760><c> their</c>

01:54:45.990 --> 01:54:46.000 align:start position:0%
program that will ask a user for their
 

01:54:46.000 --> 01:54:48.709 align:start position:0%
program that will ask a user for their
name<01:54:46.400><c> if</c><01:54:46.560><c> they</c><01:54:46.800><c> attempt</c><01:54:47.199><c> to</c><01:54:47.440><c> skip</c><01:54:47.760><c> that</c><01:54:48.080><c> prompt</c>

01:54:48.709 --> 01:54:48.719 align:start position:0%
name if they attempt to skip that prompt
 

01:54:48.719 --> 01:54:50.229 align:start position:0%
name if they attempt to skip that prompt
then<01:54:48.880><c> we</c><01:54:49.040><c> will</c><01:54:49.199><c> keep</c><01:54:49.440><c> on</c><01:54:49.599><c> asking</c><01:54:49.920><c> them</c><01:54:50.080><c> for</c>

01:54:50.229 --> 01:54:50.239 align:start position:0%
then we will keep on asking them for
 

01:54:50.239 --> 01:54:52.149 align:start position:0%
then we will keep on asking them for
their<01:54:50.400><c> name</c><01:54:50.639><c> indefinitely</c><01:54:51.440><c> so</c><01:54:51.679><c> here's</c><01:54:51.920><c> how</c><01:54:52.080><c> we</c>

01:54:52.149 --> 01:54:52.159 align:start position:0%
their name indefinitely so here's how we
 

01:54:52.159 --> 01:54:53.750 align:start position:0%
their name indefinitely so here's how we
can<01:54:52.239><c> write</c><01:54:52.480><c> a</c><01:54:52.560><c> program</c><01:54:52.960><c> like</c><01:54:53.119><c> that</c><01:54:53.360><c> using</c><01:54:53.599><c> a</c>

01:54:53.750 --> 01:54:53.760 align:start position:0%
can write a program like that using a
 

01:54:53.760 --> 01:54:55.830 align:start position:0%
can write a program like that using a
while<01:54:54.000><c> loop</c><01:54:54.320><c> we'll</c><01:54:54.480><c> need</c><01:54:54.639><c> to</c><01:54:54.719><c> begin</c><01:54:55.280><c> with</c><01:54:55.599><c> a</c>

01:54:55.830 --> 01:54:55.840 align:start position:0%
while loop we'll need to begin with a
 

01:54:55.840 --> 01:54:58.070 align:start position:0%
while loop we'll need to begin with a
character<01:54:56.239><c> array</c><01:54:56.639><c> let's</c><01:54:56.880><c> say</c><01:54:57.119><c> name</c><01:54:57.679><c> and</c><01:54:57.840><c> this</c>

01:54:58.070 --> 01:54:58.080 align:start position:0%
character array let's say name and this
 

01:54:58.080 --> 01:55:00.629 align:start position:0%
character array let's say name and this
will<01:54:58.320><c> be</c><01:54:58.480><c> 25</c><01:54:58.960><c> bytes</c><01:54:59.599><c> and</c><01:54:59.840><c> we</c><01:55:00.000><c> will</c><01:55:00.159><c> create</c><01:55:00.560><c> a</c>

01:55:00.629 --> 01:55:00.639 align:start position:0%
will be 25 bytes and we will create a
 

01:55:00.639 --> 01:55:04.950 align:start position:0%
will be 25 bytes and we will create a
prompt<01:55:01.199><c> using</c><01:55:01.599><c> printf</c>

01:55:04.950 --> 01:55:04.960 align:start position:0%
 
 

01:55:04.960 --> 01:55:07.430 align:start position:0%
 
what's<01:55:05.360><c> your</c><01:55:05.599><c> name</c><01:55:06.159><c> we</c><01:55:06.320><c> can</c><01:55:06.560><c> use</c><01:55:06.800><c> scanf</c><01:55:07.280><c> for</c>

01:55:07.430 --> 01:55:07.440 align:start position:0%
what's your name we can use scanf for
 

01:55:07.440 --> 01:55:09.589 align:start position:0%
what's your name we can use scanf for
user<01:55:07.840><c> input</c><01:55:08.320><c> but</c><01:55:08.560><c> with</c><01:55:08.880><c> names</c><01:55:09.280><c> that</c><01:55:09.440><c> may</c>

01:55:09.589 --> 01:55:09.599 align:start position:0%
user input but with names that may
 

01:55:09.599 --> 01:55:11.830 align:start position:0%
user input but with names that may
contain<01:55:10.000><c> spaces</c><01:55:10.560><c> i'm</c><01:55:10.719><c> going</c><01:55:10.880><c> to</c><01:55:11.040><c> use</c><01:55:11.360><c> fgets</c>

01:55:11.830 --> 01:55:11.840 align:start position:0%
contain spaces i'm going to use fgets
 

01:55:11.840 --> 01:55:13.669 align:start position:0%
contain spaces i'm going to use fgets
instead

01:55:13.669 --> 01:55:13.679 align:start position:0%
instead
 

01:55:13.679 --> 01:55:15.910 align:start position:0%
instead
refer<01:55:14.000><c> to</c><01:55:14.159><c> the</c><01:55:14.320><c> video</c><01:55:14.639><c> on</c><01:55:14.880><c> user</c><01:55:15.280><c> input</c><01:55:15.679><c> to</c>

01:55:15.910 --> 01:55:15.920 align:start position:0%
refer to the video on user input to
 

01:55:15.920 --> 01:55:18.229 align:start position:0%
refer to the video on user input to
learn<01:55:16.159><c> more</c><01:55:16.400><c> about</c><01:55:16.719><c> fgets</c><01:55:17.520><c> so</c><01:55:17.760><c> i</c><01:55:17.840><c> would</c><01:55:18.000><c> like</c>

01:55:18.229 --> 01:55:18.239 align:start position:0%
learn more about fgets so i would like
 

01:55:18.239 --> 01:55:21.270 align:start position:0%
learn more about fgets so i would like
to<01:55:18.400><c> assign</c><01:55:19.040><c> my</c><01:55:19.280><c> variable</c><01:55:20.000><c> name</c>

01:55:21.270 --> 01:55:21.280 align:start position:0%
to assign my variable name
 

01:55:21.280 --> 01:55:23.910 align:start position:0%
to assign my variable name
set<01:55:21.520><c> the</c><01:55:21.679><c> size</c><01:55:22.000><c> of</c><01:55:22.080><c> the</c><01:55:22.159><c> user</c><01:55:22.560><c> input</c><01:55:23.040><c> 25</c><01:55:23.760><c> to</c>

01:55:23.910 --> 01:55:23.920 align:start position:0%
set the size of the user input 25 to
 

01:55:23.920 --> 01:55:25.270 align:start position:0%
set the size of the user input 25 to
match<01:55:24.159><c> what</c><01:55:24.320><c> we</c><01:55:24.480><c> have</c>

01:55:25.270 --> 01:55:25.280 align:start position:0%
match what we have
 

01:55:25.280 --> 01:55:29.030 align:start position:0%
match what we have
then<01:55:25.520><c> type</c><01:55:26.119><c> stdn</c><01:55:27.280><c> for</c><01:55:27.520><c> standard</c><01:55:28.000><c> input</c><01:55:28.800><c> then</c>

01:55:29.030 --> 01:55:29.040 align:start position:0%
then type stdn for standard input then
 

01:55:29.040 --> 01:55:30.950 align:start position:0%
then type stdn for standard input then
we<01:55:29.199><c> just</c><01:55:29.360><c> need</c><01:55:29.520><c> to</c><01:55:29.599><c> get</c><01:55:29.840><c> rid</c><01:55:30.000><c> of</c><01:55:30.159><c> the</c><01:55:30.480><c> new</c><01:55:30.719><c> line</c>

01:55:30.950 --> 01:55:30.960 align:start position:0%
we just need to get rid of the new line
 

01:55:30.960 --> 01:55:33.030 align:start position:0%
we just need to get rid of the new line
character<01:55:31.520><c> at</c><01:55:31.599><c> the</c><01:55:31.760><c> end</c><01:55:31.840><c> of</c><01:55:32.000><c> our</c><01:55:32.080><c> user</c><01:55:32.400><c> input</c>

01:55:33.030 --> 01:55:33.040 align:start position:0%
character at the end of our user input
 

01:55:33.040 --> 01:55:35.030 align:start position:0%
character at the end of our user input
so<01:55:33.199><c> we</c><01:55:33.360><c> can</c><01:55:33.520><c> write</c><01:55:33.679><c> something</c><01:55:34.000><c> like</c><01:55:34.239><c> this</c>

01:55:35.030 --> 01:55:35.040 align:start position:0%
so we can write something like this
 

01:55:35.040 --> 01:55:37.750 align:start position:0%
so we can write something like this
set<01:55:35.360><c> our</c><01:55:35.599><c> character</c><01:55:36.159><c> array</c><01:55:36.719><c> of</c><01:55:36.880><c> name</c><01:55:37.520><c> and</c>

01:55:37.750 --> 01:55:37.760 align:start position:0%
set our character array of name and
 

01:55:37.760 --> 01:55:40.149 align:start position:0%
set our character array of name and
within<01:55:38.080><c> the</c><01:55:38.159><c> straight</c><01:55:38.560><c> brackets</c><01:55:39.280><c> we</c><01:55:39.520><c> will</c><01:55:39.679><c> use</c>

01:55:40.149 --> 01:55:40.159 align:start position:0%
within the straight brackets we will use
 

01:55:40.159 --> 01:55:42.870 align:start position:0%
within the straight brackets we will use
the<01:55:40.560><c> string</c><01:55:41.280><c> length</c><01:55:41.679><c> function</c>

01:55:42.870 --> 01:55:42.880 align:start position:0%
the string length function
 

01:55:42.880 --> 01:55:44.830 align:start position:0%
the string length function
pass<01:55:43.199><c> in</c><01:55:43.360><c> name</c>

01:55:44.830 --> 01:55:44.840 align:start position:0%
pass in name
 

01:55:44.840 --> 01:55:46.390 align:start position:0%
pass in name
-1

01:55:46.390 --> 01:55:46.400 align:start position:0%
-1
 

01:55:46.400 --> 01:55:49.109 align:start position:0%
-1
and<01:55:46.639><c> we</c><01:55:46.880><c> will</c><01:55:47.040><c> set</c><01:55:47.280><c> this</c><01:55:47.599><c> equal</c><01:55:48.000><c> to</c><01:55:48.400><c> a</c><01:55:48.719><c> null</c>

01:55:49.109 --> 01:55:49.119 align:start position:0%
and we will set this equal to a null
 

01:55:49.119 --> 01:55:51.510 align:start position:0%
and we will set this equal to a null
character<01:55:50.080><c> and</c><01:55:50.320><c> then</c><01:55:50.560><c> at</c><01:55:50.719><c> the</c><01:55:50.880><c> end</c><01:55:51.119><c> we</c><01:55:51.280><c> will</c>

01:55:51.510 --> 01:55:51.520 align:start position:0%
character and then at the end we will
 

01:55:51.520 --> 01:55:54.870 align:start position:0%
character and then at the end we will
display<01:55:51.920><c> the</c><01:55:52.000><c> user's</c><01:55:52.400><c> name</c><01:55:52.960><c> printf</c>

01:55:54.870 --> 01:55:54.880 align:start position:0%
display the user's name printf
 

01:55:54.880 --> 01:55:57.510 align:start position:0%
display the user's name printf
let's<01:55:55.199><c> say</c><01:55:55.520><c> hello</c><01:55:56.239><c> and</c><01:55:56.400><c> then</c><01:55:56.639><c> use</c><01:55:56.960><c> a</c><01:55:57.119><c> format</c>

01:55:57.510 --> 01:55:57.520 align:start position:0%
let's say hello and then use a format
 

01:55:57.520 --> 01:56:00.550 align:start position:0%
let's say hello and then use a format
specifier<01:55:58.320><c> for</c><01:55:58.560><c> strings</c><01:55:59.040><c> which</c><01:55:59.280><c> is</c><01:55:59.440><c> s</c><01:56:00.239><c> and</c><01:56:00.400><c> we</c>

01:56:00.550 --> 01:56:00.560 align:start position:0%
specifier for strings which is s and we
 

01:56:00.560 --> 01:56:02.870 align:start position:0%
specifier for strings which is s and we
will<01:56:00.719><c> display</c><01:56:01.199><c> a</c><01:56:01.360><c> user's</c><01:56:01.760><c> name</c>

01:56:02.870 --> 01:56:02.880 align:start position:0%
will display a user's name
 

01:56:02.880 --> 01:56:04.149 align:start position:0%
will display a user's name
okay<01:56:03.199><c> this</c><01:56:03.360><c> is</c><01:56:03.440><c> what</c><01:56:03.599><c> this</c><01:56:03.760><c> looks</c><01:56:04.000><c> like</c>

01:56:04.149 --> 01:56:04.159 align:start position:0%
okay this is what this looks like
 

01:56:04.159 --> 01:56:05.189 align:start position:0%
okay this is what this looks like
currently

01:56:05.189 --> 01:56:05.199 align:start position:0%
currently
 

01:56:05.199 --> 01:56:08.149 align:start position:0%
currently
what's<01:56:05.520><c> your</c><01:56:05.679><c> name</c><01:56:06.320><c> i'll</c><01:56:06.560><c> type</c><01:56:07.040><c> my</c><01:56:07.280><c> name</c><01:56:07.920><c> hit</c>

01:56:08.149 --> 01:56:08.159 align:start position:0%
what's your name i'll type my name hit
 

01:56:08.159 --> 01:56:09.109 align:start position:0%
what's your name i'll type my name hit
enter

01:56:09.109 --> 01:56:09.119 align:start position:0%
enter
 

01:56:09.119 --> 01:56:11.830 align:start position:0%
enter
and<01:56:09.360><c> it</c><01:56:09.520><c> says</c><01:56:09.920><c> hello</c><01:56:10.480><c> bro</c><01:56:11.199><c> now</c><01:56:11.440><c> what</c><01:56:11.599><c> if</c><01:56:11.760><c> i</c>

01:56:11.830 --> 01:56:11.840 align:start position:0%
and it says hello bro now what if i
 

01:56:11.840 --> 01:56:14.149 align:start position:0%
and it says hello bro now what if i
don't<01:56:12.080><c> type</c><01:56:12.320><c> in</c><01:56:12.480><c> anything</c><01:56:13.360><c> like</c><01:56:13.599><c> i</c><01:56:13.760><c> just</c><01:56:13.920><c> hit</c>

01:56:14.149 --> 01:56:14.159 align:start position:0%
don't type in anything like i just hit
 

01:56:14.159 --> 01:56:15.270 align:start position:0%
don't type in anything like i just hit
enter

01:56:15.270 --> 01:56:15.280 align:start position:0%
enter
 

01:56:15.280 --> 01:56:17.350 align:start position:0%
enter
what's<01:56:15.599><c> your</c><01:56:15.679><c> name</c><01:56:16.000><c> i'm</c><01:56:16.080><c> going</c><01:56:16.320><c> to</c><01:56:16.400><c> hit</c><01:56:16.639><c> enter</c>

01:56:17.350 --> 01:56:17.360 align:start position:0%
what's your name i'm going to hit enter
 

01:56:17.360 --> 01:56:19.990 align:start position:0%
what's your name i'm going to hit enter
hello<01:56:18.000><c> and</c><01:56:18.159><c> then</c><01:56:18.320><c> there</c><01:56:18.480><c> is</c><01:56:18.639><c> no</c><01:56:18.800><c> name</c><01:56:19.040><c> here</c><01:56:19.760><c> how</c>

01:56:19.990 --> 01:56:20.000 align:start position:0%
hello and then there is no name here how
 

01:56:20.000 --> 01:56:22.790 align:start position:0%
hello and then there is no name here how
can<01:56:20.159><c> i</c><01:56:20.400><c> force</c><01:56:20.800><c> a</c><01:56:21.040><c> user</c><01:56:21.360><c> to</c><01:56:21.520><c> type</c><01:56:21.840><c> in</c><01:56:22.000><c> something</c>

01:56:22.790 --> 01:56:22.800 align:start position:0%
can i force a user to type in something
 

01:56:22.800 --> 01:56:24.709 align:start position:0%
can i force a user to type in something
well<01:56:23.119><c> i</c><01:56:23.280><c> could</c><01:56:23.599><c> use</c><01:56:23.840><c> a</c><01:56:24.000><c> while</c><01:56:24.239><c> loop</c><01:56:24.480><c> and</c><01:56:24.560><c> that</c>

01:56:24.709 --> 01:56:24.719 align:start position:0%
well i could use a while loop and that
 

01:56:24.719 --> 01:56:26.790 align:start position:0%
well i could use a while loop and that
will<01:56:24.960><c> prompt</c><01:56:25.360><c> a</c><01:56:25.520><c> user</c><01:56:25.920><c> to</c><01:56:26.159><c> enter</c><01:56:26.400><c> their</c><01:56:26.560><c> name</c>

01:56:26.790 --> 01:56:26.800 align:start position:0%
will prompt a user to enter their name
 

01:56:26.800 --> 01:56:29.109 align:start position:0%
will prompt a user to enter their name
indefinitely<01:56:28.239><c> so</c><01:56:28.400><c> here's</c><01:56:28.639><c> how</c><01:56:28.800><c> to</c><01:56:28.880><c> create</c><01:56:29.040><c> a</c>

01:56:29.109 --> 01:56:29.119 align:start position:0%
indefinitely so here's how to create a
 

01:56:29.119 --> 01:56:32.390 align:start position:0%
indefinitely so here's how to create a
while<01:56:29.440><c> loop</c><01:56:29.760><c> type</c><01:56:30.239><c> while</c><01:56:31.040><c> parentheses</c>

01:56:32.390 --> 01:56:32.400 align:start position:0%
while loop type while parentheses
 

01:56:32.400 --> 01:56:34.709 align:start position:0%
while loop type while parentheses
curly<01:56:32.719><c> braces</c><01:56:33.520><c> and</c><01:56:33.679><c> we</c><01:56:33.840><c> need</c><01:56:34.000><c> a</c><01:56:34.080><c> condition</c>

01:56:34.709 --> 01:56:34.719 align:start position:0%
curly braces and we need a condition
 

01:56:34.719 --> 01:56:36.310 align:start position:0%
curly braces and we need a condition
what<01:56:34.880><c> are</c><01:56:35.040><c> we</c><01:56:35.119><c> going</c><01:56:35.360><c> to</c><01:56:35.520><c> check</c><01:56:36.000><c> we</c><01:56:36.159><c> will</c>

01:56:36.310 --> 01:56:36.320 align:start position:0%
what are we going to check we will
 

01:56:36.320 --> 01:56:38.470 align:start position:0%
what are we going to check we will
continue<01:56:36.800><c> this</c><01:56:37.040><c> while</c><01:56:37.360><c> loop</c><01:56:37.920><c> while</c><01:56:38.320><c> some</c>

01:56:38.470 --> 01:56:38.480 align:start position:0%
continue this while loop while some
 

01:56:38.480 --> 01:56:40.229 align:start position:0%
continue this while loop while some
condition<01:56:38.960><c> remains</c><01:56:39.360><c> true</c>

01:56:40.229 --> 01:56:40.239 align:start position:0%
condition remains true
 

01:56:40.239 --> 01:56:42.070 align:start position:0%
condition remains true
our<01:56:40.400><c> condition</c><01:56:40.880><c> to</c><01:56:41.040><c> check</c><01:56:41.280><c> to</c><01:56:41.440><c> see</c><01:56:41.679><c> if</c><01:56:41.840><c> we</c><01:56:41.920><c> have</c>

01:56:42.070 --> 01:56:42.080 align:start position:0%
our condition to check to see if we have
 

01:56:42.080 --> 01:56:43.350 align:start position:0%
our condition to check to see if we have
an<01:56:42.239><c> empty</c><01:56:42.480><c> string</c>

01:56:43.350 --> 01:56:43.360 align:start position:0%
an empty string
 

01:56:43.360 --> 01:56:46.950 align:start position:0%
an empty string
we<01:56:43.520><c> could</c><01:56:43.840><c> use</c><01:56:44.239><c> the</c><01:56:44.560><c> string</c><01:56:45.119><c> length</c><01:56:45.440><c> function</c>

01:56:46.950 --> 01:56:46.960 align:start position:0%
we could use the string length function
 

01:56:46.960 --> 01:56:49.510 align:start position:0%
we could use the string length function
pass<01:56:47.280><c> in</c><01:56:47.440><c> name</c><01:56:48.080><c> and</c><01:56:48.320><c> check</c><01:56:48.560><c> to</c><01:56:48.719><c> see</c><01:56:48.960><c> if</c><01:56:49.119><c> this</c><01:56:49.360><c> is</c>

01:56:49.510 --> 01:56:49.520 align:start position:0%
pass in name and check to see if this is
 

01:56:49.520 --> 01:56:51.589 align:start position:0%
pass in name and check to see if this is
equal<01:56:50.000><c> to</c><01:56:50.320><c> zero</c>

01:56:51.589 --> 01:56:51.599 align:start position:0%
equal to zero
 

01:56:51.599 --> 01:56:53.510 align:start position:0%
equal to zero
if<01:56:51.760><c> it</c><01:56:51.920><c> is</c><01:56:52.000><c> zero</c><01:56:52.480><c> that</c><01:56:52.639><c> means</c><01:56:52.960><c> that</c><01:56:53.199><c> somebody</c>

01:56:53.510 --> 01:56:53.520 align:start position:0%
if it is zero that means that somebody
 

01:56:53.520 --> 01:56:55.030 align:start position:0%
if it is zero that means that somebody
just<01:56:53.679><c> hit</c><01:56:53.920><c> enter</c><01:56:54.239><c> without</c><01:56:54.560><c> typing</c><01:56:54.880><c> in</c>

01:56:55.030 --> 01:56:55.040 align:start position:0%
just hit enter without typing in
 

01:56:55.040 --> 01:56:57.910 align:start position:0%
just hit enter without typing in
anything<01:56:56.159><c> so</c><01:56:56.400><c> let's</c><01:56:56.719><c> print</c><01:56:57.040><c> a</c><01:56:57.199><c> message</c><01:56:57.679><c> to</c>

01:56:57.910 --> 01:56:57.920 align:start position:0%
anything so let's print a message to
 

01:56:57.920 --> 01:57:00.149 align:start position:0%
anything so let's print a message to
yell<01:56:58.159><c> at</c><01:56:58.320><c> them</c>

01:57:00.149 --> 01:57:00.159 align:start position:0%
yell at them
 

01:57:00.159 --> 01:57:01.189 align:start position:0%
yell at them
you

01:57:01.189 --> 01:57:01.199 align:start position:0%
you
 

01:57:01.199 --> 01:57:04.390 align:start position:0%
you
did<01:57:01.840><c> not</c><01:57:02.400><c> enter</c><01:57:02.960><c> your</c><01:57:03.440><c> name</c>

01:57:04.390 --> 01:57:04.400 align:start position:0%
did not enter your name
 

01:57:04.400 --> 01:57:06.390 align:start position:0%
did not enter your name
and<01:57:04.480><c> then</c><01:57:04.719><c> let's</c><01:57:04.960><c> copy</c><01:57:05.440><c> this</c><01:57:05.599><c> section</c><01:57:06.000><c> of</c><01:57:06.080><c> code</c>

01:57:06.390 --> 01:57:06.400 align:start position:0%
and then let's copy this section of code
 

01:57:06.400 --> 01:57:08.790 align:start position:0%
and then let's copy this section of code
and<01:57:06.639><c> paste</c><01:57:07.040><c> it</c><01:57:07.199><c> to</c><01:57:07.440><c> reprompt</c><01:57:08.080><c> the</c><01:57:08.239><c> user</c><01:57:08.639><c> to</c>

01:57:08.790 --> 01:57:08.800 align:start position:0%
and paste it to reprompt the user to
 

01:57:08.800 --> 01:57:10.470 align:start position:0%
and paste it to reprompt the user to
type<01:57:09.040><c> in</c><01:57:09.119><c> their</c><01:57:09.360><c> name</c>

01:57:10.470 --> 01:57:10.480 align:start position:0%
type in their name
 

01:57:10.480 --> 01:57:13.189 align:start position:0%
type in their name
and<01:57:10.719><c> that's</c><01:57:10.960><c> all</c><01:57:11.119><c> there</c><01:57:11.280><c> is</c><01:57:11.440><c> to</c><01:57:11.679><c> it</c><01:57:12.080><c> so</c><01:57:12.560><c> while</c>

01:57:13.189 --> 01:57:13.199 align:start position:0%
and that's all there is to it so while
 

01:57:13.199 --> 01:57:15.430 align:start position:0%
and that's all there is to it so while
this<01:57:13.360><c> condition</c><01:57:14.000><c> remains</c><01:57:14.480><c> true</c><01:57:15.040><c> we</c><01:57:15.199><c> will</c>

01:57:15.430 --> 01:57:15.440 align:start position:0%
this condition remains true we will
 

01:57:15.440 --> 01:57:18.149 align:start position:0%
this condition remains true we will
execute<01:57:16.080><c> this</c><01:57:16.320><c> code</c><01:57:16.719><c> forever</c><01:57:17.599><c> so</c><01:57:17.760><c> let's</c><01:57:18.000><c> try</c>

01:57:18.149 --> 01:57:18.159 align:start position:0%
execute this code forever so let's try
 

01:57:18.159 --> 01:57:19.669 align:start position:0%
execute this code forever so let's try
it<01:57:18.239><c> again</c>

01:57:19.669 --> 01:57:19.679 align:start position:0%
it again
 

01:57:19.679 --> 01:57:21.510 align:start position:0%
it again
okay<01:57:20.159><c> what's</c><01:57:20.400><c> your</c><01:57:20.560><c> name</c><01:57:20.800><c> i'm</c><01:57:20.960><c> going</c><01:57:21.119><c> to</c><01:57:21.280><c> hit</c>

01:57:21.510 --> 01:57:21.520 align:start position:0%
okay what's your name i'm going to hit
 

01:57:21.520 --> 01:57:23.589 align:start position:0%
okay what's your name i'm going to hit
enter<01:57:22.159><c> you</c><01:57:22.320><c> did</c><01:57:22.480><c> not</c><01:57:22.719><c> enter</c><01:57:22.960><c> your</c><01:57:23.040><c> name</c><01:57:23.280><c> what's</c>

01:57:23.589 --> 01:57:23.599 align:start position:0%
enter you did not enter your name what's
 

01:57:23.599 --> 01:57:26.950 align:start position:0%
enter you did not enter your name what's
your<01:57:23.679><c> name</c><01:57:24.239><c> no</c><01:57:24.880><c> no</c><01:57:25.520><c> no</c><01:57:26.159><c> no</c>

01:57:26.950 --> 01:57:26.960 align:start position:0%
your name no no no no
 

01:57:26.960 --> 01:57:28.950 align:start position:0%
your name no no no no
okay<01:57:27.280><c> i</c><01:57:27.440><c> give</c><01:57:27.679><c> up</c>

01:57:28.950 --> 01:57:28.960 align:start position:0%
okay i give up
 

01:57:28.960 --> 01:57:31.189 align:start position:0%
okay i give up
hello<01:57:29.520><c> whatever</c><01:57:29.840><c> your</c><01:57:30.000><c> name</c><01:57:30.320><c> is</c><01:57:30.800><c> so</c><01:57:31.040><c> yeah</c>

01:57:31.189 --> 01:57:31.199 align:start position:0%
hello whatever your name is so yeah
 

01:57:31.199 --> 01:57:33.270 align:start position:0%
hello whatever your name is so yeah
that's<01:57:31.440><c> basically</c><01:57:31.840><c> a</c><01:57:32.000><c> while</c><01:57:32.239><c> loop</c><01:57:32.560><c> it</c><01:57:32.719><c> repeats</c>

01:57:33.270 --> 01:57:33.280 align:start position:0%
that's basically a while loop it repeats
 

01:57:33.280 --> 01:57:36.070 align:start position:0%
that's basically a while loop it repeats
a<01:57:33.520><c> section</c><01:57:33.920><c> of</c><01:57:34.080><c> code</c><01:57:34.880><c> possibly</c><01:57:35.599><c> unlimited</c>

01:57:36.070 --> 01:57:36.080 align:start position:0%
a section of code possibly unlimited
 

01:57:36.080 --> 01:57:38.550 align:start position:0%
a section of code possibly unlimited
times<01:57:36.960><c> there's</c><01:57:37.199><c> a</c><01:57:37.280><c> lot</c><01:57:37.440><c> of</c><01:57:37.679><c> overlap</c><01:57:38.239><c> where</c><01:57:38.400><c> you</c>

01:57:38.550 --> 01:57:38.560 align:start position:0%
times there's a lot of overlap where you
 

01:57:38.560 --> 01:57:40.790 align:start position:0%
times there's a lot of overlap where you
could<01:57:38.719><c> use</c><01:57:39.040><c> either</c><01:57:39.360><c> a</c><01:57:39.599><c> for</c><01:57:39.920><c> loop</c><01:57:40.239><c> or</c><01:57:40.400><c> a</c><01:57:40.560><c> while</c>

01:57:40.790 --> 01:57:40.800 align:start position:0%
could use either a for loop or a while
 

01:57:40.800 --> 01:57:43.750 align:start position:0%
could use either a for loop or a while
loop<01:57:41.440><c> and</c><01:57:41.679><c> we</c><01:57:41.840><c> execute</c><01:57:42.560><c> some</c><01:57:42.800><c> body</c><01:57:43.040><c> of</c><01:57:43.199><c> code</c>

01:57:43.750 --> 01:57:43.760 align:start position:0%
loop and we execute some body of code
 

01:57:43.760 --> 01:57:46.070 align:start position:0%
loop and we execute some body of code
while<01:57:44.159><c> some</c><01:57:44.400><c> condition</c><01:57:44.800><c> remains</c><01:57:45.280><c> true</c>

01:57:46.070 --> 01:57:46.080 align:start position:0%
while some condition remains true
 

01:57:46.080 --> 01:57:48.470 align:start position:0%
while some condition remains true
however<01:57:46.719><c> a</c><01:57:46.880><c> while</c><01:57:47.119><c> loop</c><01:57:47.520><c> might</c><01:57:47.760><c> not</c><01:57:48.000><c> execute</c>

01:57:48.470 --> 01:57:48.480 align:start position:0%
however a while loop might not execute
 

01:57:48.480 --> 01:57:51.270 align:start position:0%
however a while loop might not execute
at<01:57:48.639><c> all</c><01:57:49.199><c> if</c><01:57:49.520><c> this</c><01:57:49.679><c> condition</c><01:57:50.480><c> is</c><01:57:50.800><c> false</c><01:57:51.119><c> to</c>

01:57:51.270 --> 01:57:51.280 align:start position:0%
at all if this condition is false to
 

01:57:51.280 --> 01:57:53.350 align:start position:0%
at all if this condition is false to
begin<01:57:51.520><c> with</c><01:57:51.920><c> so</c><01:57:52.159><c> if</c><01:57:52.239><c> the</c><01:57:52.400><c> user</c><01:57:52.800><c> actually</c><01:57:53.119><c> does</c>

01:57:53.350 --> 01:57:53.360 align:start position:0%
begin with so if the user actually does
 

01:57:53.360 --> 01:57:55.990 align:start position:0%
begin with so if the user actually does
type<01:57:53.599><c> in</c><01:57:53.760><c> something</c><01:57:54.400><c> well</c><01:57:54.719><c> this</c><01:57:54.960><c> condition</c><01:57:55.760><c> is</c>

01:57:55.990 --> 01:57:56.000 align:start position:0%
type in something well this condition is
 

01:57:56.000 --> 01:57:58.629 align:start position:0%
type in something well this condition is
false<01:57:56.639><c> and</c><01:57:56.880><c> we</c><01:57:57.040><c> do</c><01:57:57.199><c> not</c><01:57:57.440><c> execute</c><01:57:57.920><c> this</c><01:57:58.159><c> body</c><01:57:58.480><c> of</c>

01:57:58.629 --> 01:57:58.639 align:start position:0%
false and we do not execute this body of
 

01:57:58.639 --> 01:58:00.550 align:start position:0%
false and we do not execute this body of
code<01:57:59.199><c> so</c><01:57:59.360><c> yeah</c><01:57:59.599><c> that's</c><01:57:59.840><c> a</c><01:57:59.920><c> while</c><01:58:00.239><c> loop</c><01:58:00.480><c> it</c>

01:58:00.550 --> 01:58:00.560 align:start position:0%
code so yeah that's a while loop it
 

01:58:00.560 --> 01:58:02.470 align:start position:0%
code so yeah that's a while loop it
repeats<01:58:00.960><c> a</c><01:58:01.119><c> section</c><01:58:01.520><c> of</c><01:58:01.599><c> code</c><01:58:02.000><c> possibly</c>

01:58:02.470 --> 01:58:02.480 align:start position:0%
repeats a section of code possibly
 

01:58:02.480 --> 01:58:04.950 align:start position:0%
repeats a section of code possibly
unlimited<01:58:03.040><c> times</c><01:58:03.760><c> if</c><01:58:03.920><c> you</c><01:58:04.000><c> would</c><01:58:04.159><c> like</c><01:58:04.400><c> a</c><01:58:04.639><c> copy</c>

01:58:04.950 --> 01:58:04.960 align:start position:0%
unlimited times if you would like a copy
 

01:58:04.960 --> 01:58:06.550 align:start position:0%
unlimited times if you would like a copy
of<01:58:05.040><c> this</c><01:58:05.199><c> code</c><01:58:05.440><c> i</c><01:58:05.599><c> will</c><01:58:05.840><c> post</c><01:58:06.159><c> this</c><01:58:06.320><c> to</c><01:58:06.480><c> the</c>

01:58:06.550 --> 01:58:06.560 align:start position:0%
of this code i will post this to the
 

01:58:06.560 --> 01:58:09.030 align:start position:0%
of this code i will post this to the
comment<01:58:06.960><c> section</c><01:58:07.280><c> down</c><01:58:07.520><c> below</c><01:58:08.080><c> and</c><01:58:08.320><c> well</c><01:58:08.719><c> yeah</c>

01:58:09.030 --> 01:58:09.040 align:start position:0%
comment section down below and well yeah
 

01:58:09.040 --> 01:58:14.709 align:start position:0%
comment section down below and well yeah
those<01:58:09.360><c> are</c><01:58:09.599><c> while</c><01:58:09.920><c> loops</c><01:58:10.400><c> in</c><01:58:10.639><c> c</c>

01:58:14.709 --> 01:58:14.719 align:start position:0%
 
 

01:58:14.719 --> 01:58:17.109 align:start position:0%
 
hey<01:58:15.199><c> everybody</c><01:58:15.760><c> so</c><01:58:16.000><c> let's</c><01:58:16.239><c> talk</c><01:58:16.480><c> about</c><01:58:16.880><c> do</c>

01:58:17.109 --> 01:58:17.119 align:start position:0%
hey everybody so let's talk about do
 

01:58:17.119 --> 01:58:19.350 align:start position:0%
hey everybody so let's talk about do
while<01:58:17.440><c> loops</c><01:58:17.840><c> a</c><01:58:18.080><c> do</c><01:58:18.320><c> while</c><01:58:18.560><c> loop</c><01:58:18.960><c> is</c><01:58:19.119><c> a</c>

01:58:19.350 --> 01:58:19.360 align:start position:0%
while loops a do while loop is a
 

01:58:19.360 --> 01:58:22.070 align:start position:0%
while loops a do while loop is a
variation<01:58:20.159><c> of</c><01:58:20.320><c> a</c><01:58:20.400><c> while</c><01:58:20.719><c> loop</c><01:58:21.360><c> so</c><01:58:21.599><c> a</c><01:58:21.840><c> while</c>

01:58:22.070 --> 01:58:22.080 align:start position:0%
variation of a while loop so a while
 

01:58:22.080 --> 01:58:24.709 align:start position:0%
variation of a while loop so a while
loop<01:58:22.639><c> first</c><01:58:23.119><c> checks</c><01:58:23.440><c> a</c><01:58:23.520><c> condition</c>

01:58:24.709 --> 01:58:24.719 align:start position:0%
loop first checks a condition
 

01:58:24.719 --> 01:58:27.669 align:start position:0%
loop first checks a condition
then<01:58:25.199><c> it</c><01:58:25.360><c> executes</c><01:58:26.000><c> a</c><01:58:26.159><c> block</c><01:58:26.480><c> of</c><01:58:26.639><c> code</c><01:58:27.280><c> if</c><01:58:27.520><c> that</c>

01:58:27.669 --> 01:58:27.679 align:start position:0%
then it executes a block of code if that
 

01:58:27.679 --> 01:58:30.229 align:start position:0%
then it executes a block of code if that
condition<01:58:28.159><c> is</c><01:58:28.320><c> true</c><01:58:29.040><c> so</c><01:58:29.280><c> we</c><01:58:29.520><c> may</c><01:58:29.760><c> not</c><01:58:29.920><c> even</c>

01:58:30.229 --> 01:58:30.239 align:start position:0%
condition is true so we may not even
 

01:58:30.239 --> 01:58:32.229 align:start position:0%
condition is true so we may not even
execute<01:58:30.639><c> that</c><01:58:30.880><c> block</c><01:58:31.119><c> of</c><01:58:31.280><c> code</c><01:58:31.520><c> at</c><01:58:31.679><c> all</c><01:58:32.080><c> if</c>

01:58:32.229 --> 01:58:32.239 align:start position:0%
execute that block of code at all if
 

01:58:32.239 --> 01:58:34.709 align:start position:0%
execute that block of code at all if
that<01:58:32.400><c> condition</c><01:58:32.960><c> is</c><01:58:33.199><c> false</c><01:58:33.440><c> from</c><01:58:33.679><c> the</c><01:58:33.840><c> get</c><01:58:34.080><c> go</c>

01:58:34.709 --> 01:58:34.719 align:start position:0%
that condition is false from the get go
 

01:58:34.719 --> 01:58:37.910 align:start position:0%
that condition is false from the get go
a<01:58:35.040><c> do</c><01:58:35.280><c> while</c><01:58:35.599><c> loop</c><01:58:36.239><c> always</c><01:58:36.800><c> executes</c><01:58:37.440><c> a</c><01:58:37.599><c> block</c>

01:58:37.910 --> 01:58:37.920 align:start position:0%
a do while loop always executes a block
 

01:58:37.920 --> 01:58:40.390 align:start position:0%
a do while loop always executes a block
of<01:58:38.080><c> code</c><01:58:38.480><c> once</c><01:58:39.199><c> and</c><01:58:39.679><c> then</c><01:58:39.920><c> we</c><01:58:40.080><c> checking</c>

01:58:40.390 --> 01:58:40.400 align:start position:0%
of code once and then we checking
 

01:58:40.400 --> 01:58:42.550 align:start position:0%
of code once and then we checking
condition<01:58:40.880><c> at</c><01:58:41.040><c> the</c><01:58:41.199><c> end</c><01:58:41.760><c> if</c><01:58:41.920><c> that</c><01:58:42.080><c> condition</c>

01:58:42.550 --> 01:58:42.560 align:start position:0%
condition at the end if that condition
 

01:58:42.560 --> 01:58:45.350 align:start position:0%
condition at the end if that condition
is<01:58:42.719><c> true</c><01:58:43.280><c> we</c><01:58:43.440><c> will</c><01:58:43.599><c> continue</c><01:58:44.239><c> another</c><01:58:44.800><c> loop</c><01:58:45.119><c> so</c>

01:58:45.350 --> 01:58:45.360 align:start position:0%
is true we will continue another loop so
 

01:58:45.360 --> 01:58:46.390 align:start position:0%
is true we will continue another loop so
here's<01:58:45.520><c> what</c><01:58:45.679><c> i'm</c><01:58:45.840><c> thinking</c><01:58:46.159><c> for</c><01:58:46.320><c> a</c>

01:58:46.390 --> 01:58:46.400 align:start position:0%
here's what i'm thinking for a
 

01:58:46.400 --> 01:58:47.910 align:start position:0%
here's what i'm thinking for a
demonstration<01:58:47.119><c> we'll</c><01:58:47.280><c> create</c><01:58:47.520><c> a</c><01:58:47.599><c> small</c>

01:58:47.910 --> 01:58:47.920 align:start position:0%
demonstration we'll create a small
 

01:58:47.920 --> 01:58:50.470 align:start position:0%
demonstration we'll create a small
program<01:58:48.480><c> where</c><01:58:48.719><c> we</c><01:58:48.880><c> will</c><01:58:49.040><c> have</c><01:58:49.360><c> a</c><01:58:49.520><c> user</c><01:58:50.239><c> type</c>

01:58:50.470 --> 01:58:50.480 align:start position:0%
program where we will have a user type
 

01:58:50.480 --> 01:58:52.470 align:start position:0%
program where we will have a user type
in<01:58:50.639><c> as</c><01:58:50.719><c> many</c><01:58:50.960><c> numbers</c><01:58:51.360><c> as</c><01:58:51.599><c> they</c><01:58:51.760><c> want</c><01:58:52.159><c> as</c><01:58:52.320><c> long</c>

01:58:52.470 --> 01:58:52.480 align:start position:0%
in as many numbers as they want as long
 

01:58:52.480 --> 01:58:54.550 align:start position:0%
in as many numbers as they want as long
as<01:58:52.560><c> it's</c><01:58:52.719><c> above</c><01:58:53.040><c> zero</c><01:58:53.599><c> and</c><01:58:53.760><c> then</c><01:58:53.920><c> we</c><01:58:54.080><c> will</c><01:58:54.239><c> find</c>

01:58:54.550 --> 01:58:54.560 align:start position:0%
as it's above zero and then we will find
 

01:58:54.560 --> 01:58:56.550 align:start position:0%
as it's above zero and then we will find
a<01:58:54.639><c> sum</c><01:58:55.040><c> so</c><01:58:55.280><c> if</c><01:58:55.440><c> we're</c><01:58:55.599><c> writing</c><01:58:55.840><c> a</c><01:58:55.920><c> program</c><01:58:56.400><c> like</c>

01:58:56.550 --> 01:58:56.560 align:start position:0%
a sum so if we're writing a program like
 

01:58:56.560 --> 01:58:58.950 align:start position:0%
a sum so if we're writing a program like
that<01:58:56.800><c> we</c><01:58:56.960><c> can</c><01:58:57.119><c> first</c><01:58:57.599><c> declare</c><01:58:58.159><c> two</c><01:58:58.320><c> variables</c>

01:58:58.950 --> 01:58:58.960 align:start position:0%
that we can first declare two variables
 

01:58:58.960 --> 01:59:01.109 align:start position:0%
that we can first declare two variables
int<01:58:59.280><c> number</c><01:58:59.920><c> i'll</c><01:59:00.159><c> go</c><01:59:00.320><c> ahead</c><01:59:00.639><c> and</c><01:59:00.800><c> assign</c>

01:59:01.109 --> 01:59:01.119 align:start position:0%
int number i'll go ahead and assign
 

01:59:01.119 --> 01:59:03.030 align:start position:0%
int number i'll go ahead and assign
these<01:59:01.280><c> some</c><01:59:01.440><c> values</c><01:59:01.920><c> right</c><01:59:02.080><c> away</c><01:59:02.639><c> so</c><01:59:02.800><c> we'll</c>

01:59:03.030 --> 01:59:03.040 align:start position:0%
these some values right away so we'll
 

01:59:03.040 --> 01:59:06.070 align:start position:0%
these some values right away so we'll
set<01:59:03.280><c> number</c><01:59:03.520><c> to</c><01:59:03.760><c> zero</c><01:59:04.480><c> and</c><01:59:04.800><c> int</c><01:59:05.199><c> sum</c><01:59:05.679><c> equal</c><01:59:05.920><c> to</c>

01:59:06.070 --> 01:59:06.080 align:start position:0%
set number to zero and int sum equal to
 

01:59:06.080 --> 01:59:07.990 align:start position:0%
set number to zero and int sum equal to
zero<01:59:06.400><c> as</c><01:59:06.480><c> well</c><01:59:06.719><c> to</c><01:59:06.800><c> keep</c><01:59:07.040><c> track</c><01:59:07.280><c> of</c><01:59:07.360><c> the</c><01:59:07.520><c> sum</c>

01:59:07.990 --> 01:59:08.000 align:start position:0%
zero as well to keep track of the sum
 

01:59:08.000 --> 01:59:10.070 align:start position:0%
zero as well to keep track of the sum
we'll<01:59:08.239><c> first</c><01:59:08.560><c> begin</c><01:59:08.880><c> by</c><01:59:09.119><c> creating</c><01:59:09.520><c> a</c><01:59:09.760><c> while</c>

01:59:10.070 --> 01:59:10.080 align:start position:0%
we'll first begin by creating a while
 

01:59:10.080 --> 01:59:10.870 align:start position:0%
we'll first begin by creating a while
loop

01:59:10.870 --> 01:59:10.880 align:start position:0%
loop
 

01:59:10.880 --> 01:59:13.669 align:start position:0%
loop
so<01:59:11.119><c> we</c><01:59:11.280><c> will</c><01:59:11.440><c> use</c><01:59:11.760><c> a</c><01:59:11.920><c> while</c><01:59:12.239><c> loop</c>

01:59:13.669 --> 01:59:13.679 align:start position:0%
so we will use a while loop
 

01:59:13.679 --> 01:59:16.390 align:start position:0%
so we will use a while loop
and<01:59:13.920><c> our</c><01:59:14.080><c> condition</c><01:59:14.880><c> is</c><01:59:15.119><c> if</c><01:59:15.520><c> number</c>

01:59:16.390 --> 01:59:16.400 align:start position:0%
and our condition is if number
 

01:59:16.400 --> 01:59:18.550 align:start position:0%
and our condition is if number
is<01:59:16.639><c> greater</c><01:59:17.280><c> than</c><01:59:17.599><c> zero</c>

01:59:18.550 --> 01:59:18.560 align:start position:0%
is greater than zero
 

01:59:18.560 --> 01:59:20.709 align:start position:0%
is greater than zero
then<01:59:18.719><c> we</c><01:59:18.880><c> will</c><01:59:19.119><c> continue</c><01:59:19.599><c> to</c><01:59:19.760><c> ask</c><01:59:20.000><c> the</c><01:59:20.239><c> user</c><01:59:20.560><c> to</c>

01:59:20.709 --> 01:59:20.719 align:start position:0%
then we will continue to ask the user to
 

01:59:20.719 --> 01:59:22.390 align:start position:0%
then we will continue to ask the user to
type<01:59:21.040><c> in</c><01:59:21.199><c> some</c><01:59:21.360><c> numbers</c>

01:59:22.390 --> 01:59:22.400 align:start position:0%
type in some numbers
 

01:59:22.400 --> 01:59:24.870 align:start position:0%
type in some numbers
if<01:59:22.560><c> that</c><01:59:22.800><c> number</c><01:59:23.280><c> is</c><01:59:23.520><c> zero</c><01:59:23.840><c> or</c><01:59:24.080><c> less</c><01:59:24.480><c> then</c><01:59:24.719><c> we</c>

01:59:24.870 --> 01:59:24.880 align:start position:0%
if that number is zero or less then we
 

01:59:24.880 --> 01:59:28.390 align:start position:0%
if that number is zero or less then we
stop<01:59:25.679><c> so</c><01:59:25.920><c> let's</c><01:59:26.159><c> ask</c><01:59:26.480><c> a</c><01:59:26.639><c> user</c><01:59:27.040><c> for</c><01:59:27.280><c> a</c><01:59:27.360><c> number</c>

01:59:28.390 --> 01:59:28.400 align:start position:0%
stop so let's ask a user for a number
 

01:59:28.400 --> 01:59:30.470 align:start position:0%
stop so let's ask a user for a number
enter<01:59:29.119><c> a</c><01:59:29.599><c> number</c>

01:59:30.470 --> 01:59:30.480 align:start position:0%
enter a number
 

01:59:30.480 --> 01:59:33.990 align:start position:0%
enter a number
above<01:59:31.440><c> zero</c><01:59:32.239><c> and</c><01:59:32.400><c> then</c><01:59:32.639><c> using</c><01:59:32.960><c> scanf</c><01:59:33.679><c> we</c><01:59:33.840><c> will</c>

01:59:33.990 --> 01:59:34.000 align:start position:0%
above zero and then using scanf we will
 

01:59:34.000 --> 01:59:36.310 align:start position:0%
above zero and then using scanf we will
accept<01:59:34.480><c> some</c><01:59:34.719><c> user</c><01:59:35.040><c> input</c>

01:59:36.310 --> 01:59:36.320 align:start position:0%
accept some user input
 

01:59:36.320 --> 01:59:39.030 align:start position:0%
accept some user input
and<01:59:36.560><c> store</c><01:59:36.880><c> this</c><01:59:37.119><c> within</c><01:59:37.840><c> number</c><01:59:38.639><c> and</c><01:59:38.800><c> let's</c>

01:59:39.030 --> 01:59:39.040 align:start position:0%
and store this within number and let's
 

01:59:39.040 --> 01:59:40.629 align:start position:0%
and store this within number and let's
check<01:59:39.280><c> to</c><01:59:39.440><c> see</c><01:59:39.840><c> if</c>

01:59:40.629 --> 01:59:40.639 align:start position:0%
check to see if
 

01:59:40.639 --> 01:59:41.589 align:start position:0%
check to see if
number

01:59:41.589 --> 01:59:41.599 align:start position:0%
number
 

01:59:41.599 --> 01:59:44.629 align:start position:0%
number
is<01:59:41.760><c> greater</c><01:59:42.320><c> than</c><01:59:42.880><c> zero</c>

01:59:44.629 --> 01:59:44.639 align:start position:0%
is greater than zero
 

01:59:44.639 --> 01:59:47.030 align:start position:0%
is greater than zero
if<01:59:44.800><c> it</c><01:59:44.960><c> is</c><01:59:45.119><c> we</c><01:59:45.199><c> will</c><01:59:45.440><c> take</c><01:59:45.760><c> sum</c><01:59:46.320><c> set</c><01:59:46.560><c> this</c><01:59:46.800><c> equal</c>

01:59:47.030 --> 01:59:47.040 align:start position:0%
if it is we will take sum set this equal
 

01:59:47.040 --> 01:59:47.990 align:start position:0%
if it is we will take sum set this equal
to<01:59:47.199><c> sum</c>

01:59:47.990 --> 01:59:48.000 align:start position:0%
to sum
 

01:59:48.000 --> 01:59:50.229 align:start position:0%
to sum
plus<01:59:48.400><c> number</c><01:59:49.199><c> but</c><01:59:49.360><c> you</c><01:59:49.520><c> can</c><01:59:49.679><c> just</c><01:59:49.840><c> shorten</c><01:59:50.159><c> the</c>

01:59:50.229 --> 01:59:50.239 align:start position:0%
plus number but you can just shorten the
 

01:59:50.239 --> 01:59:53.350 align:start position:0%
plus number but you can just shorten the
statement<01:59:50.800><c> to</c><01:59:51.280><c> plus</c><01:59:51.760><c> equals</c><01:59:52.400><c> number</c><01:59:53.040><c> that's</c>

01:59:53.350 --> 01:59:53.360 align:start position:0%
statement to plus equals number that's
 

01:59:53.360 --> 01:59:56.390 align:start position:0%
statement to plus equals number that's
fine<01:59:53.679><c> too</c><01:59:54.320><c> and</c><01:59:54.560><c> then</c><01:59:54.960><c> at</c><01:59:55.119><c> the</c><01:59:55.360><c> end</c><01:59:55.920><c> we</c><01:59:56.080><c> will</c>

01:59:56.390 --> 01:59:56.400 align:start position:0%
fine too and then at the end we will
 

01:59:56.400 --> 01:59:58.709 align:start position:0%
fine too and then at the end we will
print<01:59:57.040><c> whatever</c><01:59:57.360><c> the</c><01:59:57.520><c> sum</c><01:59:57.760><c> is</c>

01:59:58.709 --> 01:59:58.719 align:start position:0%
print whatever the sum is
 

01:59:58.719 --> 01:59:59.510 align:start position:0%
print whatever the sum is
sum

01:59:59.510 --> 01:59:59.520 align:start position:0%
sum
 

01:59:59.520 --> 02:00:01.510 align:start position:0%
sum
we're<01:59:59.760><c> displaying</c><02:00:00.159><c> an</c><02:00:00.320><c> integer</c>

02:00:01.510 --> 02:00:01.520 align:start position:0%
we're displaying an integer
 

02:00:01.520 --> 02:00:03.990 align:start position:0%
we're displaying an integer
and<02:00:01.679><c> we</c><02:00:01.840><c> are</c><02:00:02.000><c> displaying</c><02:00:02.480><c> some</c><02:00:03.199><c> so</c><02:00:03.520><c> with</c><02:00:03.840><c> our</c>

02:00:03.990 --> 02:00:04.000 align:start position:0%
and we are displaying some so with our
 

02:00:04.000 --> 02:00:06.790 align:start position:0%
and we are displaying some so with our
number<02:00:04.480><c> i</c><02:00:04.639><c> set</c><02:00:04.880><c> this</c><02:00:05.119><c> to</c><02:00:05.280><c> zero</c><02:00:06.000><c> and</c><02:00:06.239><c> since</c><02:00:06.560><c> our</c>

02:00:06.790 --> 02:00:06.800 align:start position:0%
number i set this to zero and since our
 

02:00:06.800 --> 02:00:08.550 align:start position:0%
number i set this to zero and since our
while<02:00:07.040><c> loop</c><02:00:07.360><c> is</c><02:00:07.599><c> checking</c><02:00:07.920><c> the</c><02:00:08.000><c> condition</c>

02:00:08.550 --> 02:00:08.560 align:start position:0%
while loop is checking the condition
 

02:00:08.560 --> 02:00:10.390 align:start position:0%
while loop is checking the condition
first<02:00:09.040><c> we're</c><02:00:09.280><c> not</c><02:00:09.599><c> actually</c><02:00:10.000><c> going</c><02:00:10.159><c> to</c>

02:00:10.390 --> 02:00:10.400 align:start position:0%
first we're not actually going to
 

02:00:10.400 --> 02:00:13.350 align:start position:0%
first we're not actually going to
execute<02:00:10.880><c> this</c><02:00:11.040><c> body</c><02:00:11.360><c> of</c><02:00:11.520><c> code</c>

02:00:13.350 --> 02:00:13.360 align:start position:0%
execute this body of code
 

02:00:13.360 --> 02:00:15.669 align:start position:0%
execute this body of code
so<02:00:13.679><c> our</c><02:00:13.920><c> program</c><02:00:14.480><c> skipped</c><02:00:14.960><c> this</c><02:00:15.119><c> while</c><02:00:15.440><c> loop</c>

02:00:15.669 --> 02:00:15.679 align:start position:0%
so our program skipped this while loop
 

02:00:15.679 --> 02:00:17.109 align:start position:0%
so our program skipped this while loop
and<02:00:15.760><c> went</c><02:00:16.080><c> straight</c><02:00:16.320><c> to</c><02:00:16.480><c> the</c><02:00:16.639><c> printf</c>

02:00:17.109 --> 02:00:17.119 align:start position:0%
and went straight to the printf
 

02:00:17.119 --> 02:00:19.430 align:start position:0%
and went straight to the printf
statement<02:00:17.920><c> so</c><02:00:18.159><c> a</c><02:00:18.400><c> while</c><02:00:18.639><c> loop</c><02:00:19.040><c> checks</c><02:00:19.360><c> a</c>

02:00:19.430 --> 02:00:19.440 align:start position:0%
statement so a while loop checks a
 

02:00:19.440 --> 02:00:21.910 align:start position:0%
statement so a while loop checks a
condition<02:00:19.840><c> first</c><02:00:20.639><c> a</c><02:00:20.800><c> do</c><02:00:21.040><c> while</c><02:00:21.360><c> loop</c><02:00:21.679><c> will</c>

02:00:21.910 --> 02:00:21.920 align:start position:0%
condition first a do while loop will
 

02:00:21.920 --> 02:00:24.550 align:start position:0%
condition first a do while loop will
check<02:00:22.239><c> a</c><02:00:22.400><c> condition</c><02:00:22.960><c> last</c><02:00:23.679><c> so</c><02:00:23.920><c> to</c><02:00:24.080><c> change</c><02:00:24.320><c> this</c>

02:00:24.550 --> 02:00:24.560 align:start position:0%
check a condition last so to change this
 

02:00:24.560 --> 02:00:26.310 align:start position:0%
check a condition last so to change this
to<02:00:24.719><c> a</c><02:00:24.880><c> do</c><02:00:25.119><c> while</c><02:00:25.360><c> loop</c><02:00:25.599><c> we</c><02:00:25.760><c> will</c><02:00:25.920><c> take</c><02:00:26.239><c> our</c>

02:00:26.310 --> 02:00:26.320 align:start position:0%
to a do while loop we will take our
 

02:00:26.320 --> 02:00:27.430 align:start position:0%
to a do while loop we will take our
condition

02:00:27.430 --> 02:00:27.440 align:start position:0%
condition
 

02:00:27.440 --> 02:00:29.189 align:start position:0%
condition
and<02:00:27.599><c> move</c><02:00:27.840><c> it</c><02:00:27.920><c> to</c><02:00:28.000><c> the</c><02:00:28.159><c> end</c>

02:00:29.189 --> 02:00:29.199 align:start position:0%
and move it to the end
 

02:00:29.199 --> 02:00:31.669 align:start position:0%
and move it to the end
just<02:00:29.520><c> after</c><02:00:29.760><c> the</c><02:00:29.920><c> last</c><02:00:30.239><c> curly</c><02:00:30.560><c> brace</c><02:00:31.199><c> and</c><02:00:31.360><c> add</c>

02:00:31.669 --> 02:00:31.679 align:start position:0%
just after the last curly brace and add
 

02:00:31.679 --> 02:00:33.990 align:start position:0%
just after the last curly brace and add
a<02:00:31.840><c> semicolon</c><02:00:32.960><c> and</c><02:00:33.040><c> then</c><02:00:33.280><c> before</c><02:00:33.599><c> the</c><02:00:33.679><c> first</c>

02:00:33.990 --> 02:00:34.000 align:start position:0%
a semicolon and then before the first
 

02:00:34.000 --> 02:00:36.790 align:start position:0%
a semicolon and then before the first
curly<02:00:34.400><c> brace</c><02:00:34.800><c> we</c><02:00:34.960><c> will</c><02:00:35.199><c> add</c><02:00:35.440><c> the</c><02:00:35.599><c> word</c><02:00:36.080><c> do</c><02:00:36.480><c> so</c>

02:00:36.790 --> 02:00:36.800 align:start position:0%
curly brace we will add the word do so
 

02:00:36.800 --> 02:00:39.270 align:start position:0%
curly brace we will add the word do so
we<02:00:36.960><c> will</c><02:00:37.199><c> do</c><02:00:37.440><c> this</c><02:00:37.679><c> once</c><02:00:38.400><c> and</c><02:00:38.639><c> then</c><02:00:38.880><c> check</c><02:00:39.119><c> the</c>

02:00:39.270 --> 02:00:39.280 align:start position:0%
we will do this once and then check the
 

02:00:39.280 --> 02:00:40.790 align:start position:0%
we will do this once and then check the
condition<02:00:39.679><c> to</c><02:00:39.920><c> see</c><02:00:40.080><c> if</c><02:00:40.239><c> we</c><02:00:40.320><c> would</c><02:00:40.480><c> like</c><02:00:40.639><c> to</c>

02:00:40.790 --> 02:00:40.800 align:start position:0%
condition to see if we would like to
 

02:00:40.800 --> 02:00:43.510 align:start position:0%
condition to see if we would like to
continue<02:00:41.520><c> so</c><02:00:41.840><c> now</c><02:00:42.080><c> if</c><02:00:42.239><c> i</c><02:00:42.320><c> run</c><02:00:42.560><c> this</c>

02:00:43.510 --> 02:00:43.520 align:start position:0%
continue so now if i run this
 

02:00:43.520 --> 02:00:45.990 align:start position:0%
continue so now if i run this
we<02:00:43.679><c> get</c><02:00:43.840><c> that</c><02:00:44.080><c> prompt</c><02:00:44.639><c> enter</c><02:00:45.119><c> a</c><02:00:45.280><c> number</c><02:00:45.599><c> above</c>

02:00:45.990 --> 02:00:46.000 align:start position:0%
we get that prompt enter a number above
 

02:00:46.000 --> 02:00:48.149 align:start position:0%
we get that prompt enter a number above
zero<02:00:46.560><c> and</c><02:00:46.719><c> i</c><02:00:46.880><c> can</c><02:00:46.960><c> type</c><02:00:47.280><c> in</c><02:00:47.360><c> as</c><02:00:47.520><c> many</c><02:00:47.760><c> numbers</c>

02:00:48.149 --> 02:00:48.159 align:start position:0%
zero and i can type in as many numbers
 

02:00:48.159 --> 02:00:52.229 align:start position:0%
zero and i can type in as many numbers
as<02:00:48.400><c> i</c><02:00:48.480><c> want</c><02:00:49.119><c> so</c><02:00:49.440><c> one</c><02:00:49.920><c> two</c><02:00:50.400><c> three</c><02:00:50.880><c> four</c><02:00:51.360><c> five</c><02:00:52.000><c> so</c>

02:00:52.229 --> 02:00:52.239 align:start position:0%
as i want so one two three four five so
 

02:00:52.239 --> 02:00:54.390 align:start position:0%
as i want so one two three four five so
we<02:00:52.480><c> check</c><02:00:52.719><c> the</c><02:00:52.880><c> condition</c><02:00:53.360><c> at</c><02:00:53.440><c> the</c><02:00:53.599><c> end</c>

02:00:54.390 --> 02:00:54.400 align:start position:0%
we check the condition at the end
 

02:00:54.400 --> 02:00:57.109 align:start position:0%
we check the condition at the end
so<02:00:54.639><c> our</c><02:00:54.800><c> condition</c><02:00:55.520><c> is</c><02:00:55.760><c> that</c><02:00:56.320><c> if</c><02:00:56.560><c> our</c><02:00:56.719><c> number</c>

02:00:57.109 --> 02:00:57.119 align:start position:0%
so our condition is that if our number
 

02:00:57.119 --> 02:00:59.109 align:start position:0%
so our condition is that if our number
is<02:00:57.280><c> greater</c><02:00:57.520><c> than</c><02:00:57.760><c> zero</c><02:00:58.159><c> we</c><02:00:58.320><c> will</c><02:00:58.480><c> continue</c>

02:00:59.109 --> 02:00:59.119 align:start position:0%
is greater than zero we will continue
 

02:00:59.119 --> 02:01:01.830 align:start position:0%
is greater than zero we will continue
this<02:00:59.360><c> loop</c><02:01:00.000><c> so</c><02:01:00.159><c> if</c><02:01:00.320><c> i</c><02:01:00.400><c> type</c><02:01:00.719><c> in</c><02:01:00.960><c> negative</c><02:01:01.360><c> one</c>

02:01:01.830 --> 02:01:01.840 align:start position:0%
this loop so if i type in negative one
 

02:01:01.840 --> 02:01:03.350 align:start position:0%
this loop so if i type in negative one
we<02:01:02.000><c> will</c><02:01:02.320><c> exit</c>

02:01:03.350 --> 02:01:03.360 align:start position:0%
we will exit
 

02:01:03.360 --> 02:01:06.310 align:start position:0%
we will exit
and<02:01:03.679><c> our</c><02:01:03.840><c> sum</c><02:01:04.400><c> is</c><02:01:04.639><c> 15.</c><02:01:05.440><c> so</c><02:01:05.599><c> that's</c><02:01:05.840><c> the</c><02:01:06.000><c> major</c>

02:01:06.310 --> 02:01:06.320 align:start position:0%
and our sum is 15. so that's the major
 

02:01:06.320 --> 02:01:08.470 align:start position:0%
and our sum is 15. so that's the major
difference<02:01:06.639><c> between</c><02:01:07.040><c> a</c><02:01:07.199><c> while</c><02:01:07.440><c> loop</c><02:01:07.760><c> and</c><02:01:08.080><c> a</c><02:01:08.239><c> do</c>

02:01:08.470 --> 02:01:08.480 align:start position:0%
difference between a while loop and a do
 

02:01:08.480 --> 02:01:10.390 align:start position:0%
difference between a while loop and a do
while<02:01:08.719><c> loop</c><02:01:09.280><c> a</c><02:01:09.440><c> while</c><02:01:09.679><c> loop</c><02:01:10.080><c> checks</c><02:01:10.320><c> a</c>

02:01:10.390 --> 02:01:10.400 align:start position:0%
while loop a while loop checks a
 

02:01:10.400 --> 02:01:13.109 align:start position:0%
while loop a while loop checks a
condition<02:01:10.880><c> first</c><02:01:11.679><c> then</c><02:01:12.000><c> executes</c><02:01:12.560><c> a</c><02:01:12.639><c> block</c><02:01:12.960><c> of</c>

02:01:13.109 --> 02:01:13.119 align:start position:0%
condition first then executes a block of
 

02:01:13.119 --> 02:01:15.589 align:start position:0%
condition first then executes a block of
code<02:01:13.440><c> if</c><02:01:13.599><c> that</c><02:01:13.760><c> condition</c><02:01:14.239><c> is</c><02:01:14.400><c> true</c><02:01:15.119><c> a</c><02:01:15.360><c> do</c>

02:01:15.589 --> 02:01:15.599 align:start position:0%
code if that condition is true a do
 

02:01:15.599 --> 02:01:17.910 align:start position:0%
code if that condition is true a do
while<02:01:15.840><c> loop</c><02:01:16.480><c> always</c><02:01:16.960><c> executes</c><02:01:17.440><c> a</c><02:01:17.520><c> block</c><02:01:17.840><c> of</c>

02:01:17.910 --> 02:01:17.920 align:start position:0%
while loop always executes a block of
 

02:01:17.920 --> 02:01:19.109 align:start position:0%
while loop always executes a block of
code<02:01:18.239><c> once</c>

02:01:19.109 --> 02:01:19.119 align:start position:0%
code once
 

02:01:19.119 --> 02:01:20.950 align:start position:0%
code once
then<02:01:19.360><c> checks</c><02:01:19.679><c> a</c><02:01:19.760><c> condition</c><02:01:20.639><c> if</c><02:01:20.800><c> that</c>

02:01:20.950 --> 02:01:20.960 align:start position:0%
then checks a condition if that
 

02:01:20.960 --> 02:01:23.510 align:start position:0%
then checks a condition if that
condition<02:01:21.360><c> is</c><02:01:21.520><c> true</c><02:01:22.000><c> then</c><02:01:22.159><c> we</c><02:01:22.320><c> continue</c><02:01:22.800><c> again</c>

02:01:23.510 --> 02:01:23.520 align:start position:0%
condition is true then we continue again
 

02:01:23.520 --> 02:01:25.910 align:start position:0%
condition is true then we continue again
so<02:01:23.679><c> yeah</c><02:01:24.000><c> that's</c><02:01:24.320><c> a</c><02:01:24.560><c> do</c><02:01:24.800><c> while</c><02:01:25.040><c> loop</c><02:01:25.440><c> it's</c><02:01:25.679><c> a</c>

02:01:25.910 --> 02:01:25.920 align:start position:0%
so yeah that's a do while loop it's a
 

02:01:25.920 --> 02:01:27.990 align:start position:0%
so yeah that's a do while loop it's a
variation<02:01:26.719><c> of</c><02:01:26.880><c> a</c><02:01:26.960><c> while</c><02:01:27.280><c> loop</c><02:01:27.679><c> and</c><02:01:27.840><c> if</c><02:01:27.920><c> you</c>

02:01:27.990 --> 02:01:28.000 align:start position:0%
variation of a while loop and if you
 

02:01:28.000 --> 02:01:29.750 align:start position:0%
variation of a while loop and if you
would<02:01:28.159><c> like</c><02:01:28.320><c> a</c><02:01:28.400><c> copy</c><02:01:28.639><c> of</c><02:01:28.800><c> this</c><02:01:28.880><c> code</c><02:01:29.280><c> i'll</c><02:01:29.520><c> post</c>

02:01:29.750 --> 02:01:29.760 align:start position:0%
would like a copy of this code i'll post
 

02:01:29.760 --> 02:01:31.510 align:start position:0%
would like a copy of this code i'll post
this<02:01:29.920><c> to</c><02:01:30.080><c> the</c><02:01:30.159><c> comments</c><02:01:30.560><c> section</c><02:01:30.880><c> down</c><02:01:31.040><c> below</c>

02:01:31.510 --> 02:01:31.520 align:start position:0%
this to the comments section down below
 

02:01:31.520 --> 02:01:37.830 align:start position:0%
this to the comments section down below
and<02:01:31.679><c> well</c><02:01:32.159><c> that's</c><02:01:32.480><c> the</c><02:01:32.880><c> do</c><02:01:33.119><c> while</c><02:01:33.440><c> loop</c><02:01:33.920><c> in</c><02:01:34.159><c> c</c>

02:01:37.830 --> 02:01:37.840 align:start position:0%
 
 

02:01:37.840 --> 02:01:40.950 align:start position:0%
 
hey<02:01:38.320><c> welcome</c><02:01:38.800><c> back</c><02:01:39.440><c> so</c><02:01:39.920><c> nested</c><02:01:40.320><c> loops</c><02:01:40.719><c> a</c>

02:01:40.950 --> 02:01:40.960 align:start position:0%
hey welcome back so nested loops a
 

02:01:40.960 --> 02:01:43.830 align:start position:0%
hey welcome back so nested loops a
nested<02:01:41.440><c> loop</c><02:01:41.840><c> is</c><02:01:42.159><c> a</c><02:01:42.400><c> loop</c><02:01:42.880><c> inside</c><02:01:43.280><c> of</c><02:01:43.440><c> another</c>

02:01:43.830 --> 02:01:43.840 align:start position:0%
nested loop is a loop inside of another
 

02:01:43.840 --> 02:01:45.510 align:start position:0%
nested loop is a loop inside of another
loop<02:01:44.159><c> when</c><02:01:44.320><c> you'll</c><02:01:44.560><c> encounter</c><02:01:45.040><c> them</c><02:01:45.280><c> it's</c>

02:01:45.510 --> 02:01:45.520 align:start position:0%
loop when you'll encounter them it's
 

02:01:45.520 --> 02:01:47.589 align:start position:0%
loop when you'll encounter them it's
really<02:01:45.920><c> situational</c><02:01:46.800><c> so</c><02:01:46.960><c> i</c><02:01:47.040><c> don't</c><02:01:47.280><c> really</c>

02:01:47.589 --> 02:01:47.599 align:start position:0%
really situational so i don't really
 

02:01:47.599 --> 02:01:49.430 align:start position:0%
really situational so i don't really
have<02:01:47.920><c> one</c><02:01:48.159><c> good</c><02:01:48.400><c> example</c><02:01:48.960><c> but</c><02:01:49.119><c> what</c><02:01:49.360><c> i'm</c>

02:01:49.430 --> 02:01:49.440 align:start position:0%
have one good example but what i'm
 

02:01:49.440 --> 02:01:51.910 align:start position:0%
have one good example but what i'm
thinking<02:01:49.760><c> we'll</c><02:01:49.920><c> do</c><02:01:50.320><c> is</c><02:01:50.560><c> use</c><02:01:50.960><c> a</c><02:01:51.199><c> nested</c><02:01:51.599><c> loop</c>

02:01:51.910 --> 02:01:51.920 align:start position:0%
thinking we'll do is use a nested loop
 

02:01:51.920 --> 02:01:54.070 align:start position:0%
thinking we'll do is use a nested loop
for<02:01:52.080><c> an</c><02:01:52.320><c> exercise</c><02:01:53.199><c> what</c><02:01:53.360><c> i'm</c><02:01:53.520><c> thinking</c><02:01:53.920><c> is</c>

02:01:54.070 --> 02:01:54.080 align:start position:0%
for an exercise what i'm thinking is
 

02:01:54.080 --> 02:01:56.149 align:start position:0%
for an exercise what i'm thinking is
that<02:01:54.239><c> we'll</c><02:01:54.480><c> let</c><02:01:54.719><c> a</c><02:01:54.800><c> user</c><02:01:55.280><c> type</c><02:01:55.599><c> in</c><02:01:55.760><c> a</c><02:01:55.920><c> number</c>

02:01:56.149 --> 02:01:56.159 align:start position:0%
that we'll let a user type in a number
 

02:01:56.159 --> 02:01:58.790 align:start position:0%
that we'll let a user type in a number
of<02:01:56.400><c> rows</c><02:01:56.880><c> and</c><02:01:57.119><c> columns</c><02:01:57.760><c> and</c><02:01:58.000><c> a</c><02:01:58.080><c> symbol</c><02:01:58.639><c> and</c>

02:01:58.790 --> 02:01:58.800 align:start position:0%
of rows and columns and a symbol and
 

02:01:58.800 --> 02:02:01.350 align:start position:0%
of rows and columns and a symbol and
print<02:01:59.280><c> a</c><02:01:59.440><c> rectangle</c><02:02:00.159><c> of</c><02:02:00.320><c> that</c><02:02:00.560><c> given</c><02:02:00.880><c> symbol</c>

02:02:01.350 --> 02:02:01.360 align:start position:0%
print a rectangle of that given symbol
 

02:02:01.360 --> 02:02:03.189 align:start position:0%
print a rectangle of that given symbol
but<02:02:01.520><c> the</c><02:02:01.679><c> user</c><02:02:02.000><c> is</c><02:02:02.080><c> going</c><02:02:02.320><c> to</c><02:02:02.400><c> specify</c><02:02:03.119><c> a</c>

02:02:03.189 --> 02:02:03.199 align:start position:0%
but the user is going to specify a
 

02:02:03.199 --> 02:02:05.510 align:start position:0%
but the user is going to specify a
number<02:02:03.520><c> of</c><02:02:03.760><c> rows</c><02:02:04.159><c> and</c><02:02:04.480><c> columns</c><02:02:05.119><c> so</c><02:02:05.280><c> let's</c>

02:02:05.510 --> 02:02:05.520 align:start position:0%
number of rows and columns so let's
 

02:02:05.520 --> 02:02:07.189 align:start position:0%
number of rows and columns so let's
begin<02:02:05.920><c> by</c><02:02:06.080><c> declaring</c><02:02:06.560><c> all</c><02:02:06.719><c> of</c><02:02:06.800><c> the</c><02:02:06.960><c> different</c>

02:02:07.189 --> 02:02:07.199 align:start position:0%
begin by declaring all of the different
 

02:02:07.199 --> 02:02:09.750 align:start position:0%
begin by declaring all of the different
variables<02:02:07.679><c> that</c><02:02:07.840><c> we'll</c><02:02:08.000><c> need</c><02:02:08.400><c> intros</c><02:02:09.520><c> and</c>

02:02:09.750 --> 02:02:09.760 align:start position:0%
variables that we'll need intros and
 

02:02:09.760 --> 02:02:11.990 align:start position:0%
variables that we'll need intros and
columns<02:02:10.400><c> and</c><02:02:10.880><c> char</c>

02:02:11.990 --> 02:02:12.000 align:start position:0%
columns and char
 

02:02:12.000 --> 02:02:14.149 align:start position:0%
columns and char
symbol<02:02:12.639><c> we'll</c><02:02:12.800><c> let</c><02:02:13.040><c> the</c><02:02:13.119><c> user</c><02:02:13.520><c> type</c><02:02:13.760><c> in</c><02:02:14.000><c> a</c>

02:02:14.149 --> 02:02:14.159 align:start position:0%
symbol we'll let the user type in a
 

02:02:14.159 --> 02:02:17.990 align:start position:0%
symbol we'll let the user type in a
number<02:02:14.400><c> of</c><02:02:14.560><c> rows</c><02:02:14.960><c> and</c><02:02:15.199><c> columns</c>

02:02:17.990 --> 02:02:18.000 align:start position:0%
number of rows and columns
 

02:02:18.000 --> 02:02:20.950 align:start position:0%
number of rows and columns
enter<02:02:18.719><c> number</c><02:02:19.199><c> of</c><02:02:19.599><c> rows</c>

02:02:20.950 --> 02:02:20.960 align:start position:0%
enter number of rows
 

02:02:20.960 --> 02:02:23.910 align:start position:0%
enter number of rows
then<02:02:21.199><c> use</c><02:02:21.360><c> scanf</c><02:02:21.920><c> to</c><02:02:22.159><c> accept</c><02:02:22.560><c> some</c><02:02:22.719><c> user</c><02:02:23.119><c> input</c>

02:02:23.910 --> 02:02:23.920 align:start position:0%
then use scanf to accept some user input
 

02:02:23.920 --> 02:02:27.270 align:start position:0%
then use scanf to accept some user input
we<02:02:24.159><c> are</c><02:02:24.400><c> accepting</c><02:02:25.280><c> an</c><02:02:25.599><c> integer</c><02:02:26.239><c> so</c><02:02:26.560><c> use</c><02:02:26.880><c> d</c><02:02:27.119><c> for</c>

02:02:27.270 --> 02:02:27.280 align:start position:0%
we are accepting an integer so use d for
 

02:02:27.280 --> 02:02:30.830 align:start position:0%
we are accepting an integer so use d for
the<02:02:27.360><c> format</c><02:02:27.760><c> specifier</c><02:02:28.960><c> address</c><02:02:29.440><c> of</c><02:02:29.599><c> operator</c>

02:02:30.830 --> 02:02:30.840 align:start position:0%
the format specifier address of operator
 

02:02:30.840 --> 02:02:36.229 align:start position:0%
the format specifier address of operator
rows<02:02:31.840><c> then</c><02:02:32.080><c> do</c><02:02:32.239><c> the</c><02:02:32.320><c> same</c><02:02:32.560><c> thing</c><02:02:32.719><c> with</c><02:02:32.880><c> columns</c>

02:02:36.229 --> 02:02:36.239 align:start position:0%
 
 

02:02:36.239 --> 02:02:40.149 align:start position:0%
 
enter<02:02:37.040><c> number</c><02:02:37.679><c> of</c><02:02:38.080><c> columns</c>

02:02:40.149 --> 02:02:40.159 align:start position:0%
enter number of columns
 

02:02:40.159 --> 02:02:42.310 align:start position:0%
enter number of columns
let's<02:02:40.480><c> create</c><02:02:40.800><c> our</c><02:02:41.040><c> nested</c><02:02:41.440><c> loops</c><02:02:42.000><c> you</c><02:02:42.159><c> can</c>

02:02:42.310 --> 02:02:42.320 align:start position:0%
let's create our nested loops you can
 

02:02:42.320 --> 02:02:44.870 align:start position:0%
let's create our nested loops you can
use<02:02:42.560><c> either</c><02:02:42.800><c> for</c><02:02:43.040><c> loops</c><02:02:43.360><c> or</c><02:02:43.599><c> while</c><02:02:43.920><c> loops</c><02:02:44.639><c> it's</c>

02:02:44.870 --> 02:02:44.880 align:start position:0%
use either for loops or while loops it's
 

02:02:44.880 --> 02:02:46.870 align:start position:0%
use either for loops or while loops it's
just<02:02:45.040><c> the</c><02:02:45.199><c> concept</c><02:02:45.679><c> of</c><02:02:46.000><c> one</c><02:02:46.159><c> loop</c><02:02:46.400><c> inside</c><02:02:46.719><c> of</c>

02:02:46.870 --> 02:02:46.880 align:start position:0%
just the concept of one loop inside of
 

02:02:46.880 --> 02:02:49.189 align:start position:0%
just the concept of one loop inside of
another<02:02:47.520><c> so</c><02:02:47.679><c> let's</c><02:02:47.920><c> use</c><02:02:48.159><c> for</c><02:02:48.400><c> loops</c><02:02:48.800><c> for</c><02:02:49.040><c> our</c>

02:02:49.189 --> 02:02:49.199 align:start position:0%
another so let's use for loops for our
 

02:02:49.199 --> 02:02:51.910 align:start position:0%
another so let's use for loops for our
outer<02:02:49.520><c> loop</c><02:02:49.840><c> and</c><02:02:50.159><c> inner</c><02:02:50.400><c> loop</c>

02:02:51.910 --> 02:02:51.920 align:start position:0%
outer loop and inner loop
 

02:02:51.920 --> 02:02:53.910 align:start position:0%
outer loop and inner loop
the<02:02:52.159><c> outer</c><02:02:52.480><c> loop</c><02:02:52.719><c> is</c><02:02:52.880><c> in</c><02:02:53.040><c> charge</c><02:02:53.360><c> of</c><02:02:53.520><c> keeping</c>

02:02:53.910 --> 02:02:53.920 align:start position:0%
the outer loop is in charge of keeping
 

02:02:53.920 --> 02:02:56.229 align:start position:0%
the outer loop is in charge of keeping
track<02:02:54.159><c> of</c><02:02:54.239><c> the</c><02:02:54.400><c> rows</c><02:02:55.119><c> the</c><02:02:55.360><c> inner</c><02:02:55.599><c> loop</c><02:02:55.920><c> will</c><02:02:56.080><c> be</c>

02:02:56.229 --> 02:02:56.239 align:start position:0%
track of the rows the inner loop will be
 

02:02:56.239 --> 02:02:57.589 align:start position:0%
track of the rows the inner loop will be
in<02:02:56.400><c> charge</c><02:02:56.719><c> of</c><02:02:56.800><c> keeping</c><02:02:57.119><c> track</c><02:02:57.360><c> of</c><02:02:57.440><c> the</c>

02:02:57.589 --> 02:02:57.599 align:start position:0%
in charge of keeping track of the
 

02:02:57.599 --> 02:03:00.550 align:start position:0%
in charge of keeping track of the
columns<02:02:58.320><c> so</c><02:02:58.560><c> i</c><02:02:58.719><c> need</c><02:02:59.119><c> this</c><02:02:59.440><c> outer</c><02:02:59.760><c> for</c><02:03:00.000><c> loop</c><02:03:00.320><c> to</c>

02:03:00.550 --> 02:03:00.560 align:start position:0%
columns so i need this outer for loop to
 

02:03:00.560 --> 02:03:03.189 align:start position:0%
columns so i need this outer for loop to
iterate<02:03:01.040><c> once</c><02:03:01.440><c> for</c><02:03:01.679><c> every</c><02:03:02.080><c> row</c><02:03:02.320><c> that</c><02:03:02.480><c> we</c><02:03:02.639><c> have</c>

02:03:03.189 --> 02:03:03.199 align:start position:0%
iterate once for every row that we have
 

02:03:03.199 --> 02:03:05.350 align:start position:0%
iterate once for every row that we have
so<02:03:03.360><c> we</c><02:03:03.520><c> could</c><02:03:03.760><c> write</c><02:03:04.000><c> something</c><02:03:04.239><c> like</c><02:03:04.480><c> this</c>

02:03:05.350 --> 02:03:05.360 align:start position:0%
so we could write something like this
 

02:03:05.360 --> 02:03:08.629 align:start position:0%
so we could write something like this
int<02:03:05.840><c> i</c><02:03:06.400><c> set</c><02:03:06.639><c> this</c><02:03:06.880><c> equal</c><02:03:07.199><c> to</c><02:03:07.440><c> one</c><02:03:08.000><c> i</c><02:03:08.159><c> need</c><02:03:08.400><c> to</c>

02:03:08.629 --> 02:03:08.639 align:start position:0%
int i set this equal to one i need to
 

02:03:08.639 --> 02:03:11.750 align:start position:0%
int i set this equal to one i need to
continue<02:03:09.119><c> this</c><02:03:09.360><c> for</c><02:03:09.679><c> loop</c><02:03:10.159><c> as</c><02:03:10.480><c> long</c><02:03:10.719><c> as</c><02:03:10.960><c> i</c><02:03:11.520><c> is</c>

02:03:11.750 --> 02:03:11.760 align:start position:0%
continue this for loop as long as i is
 

02:03:11.760 --> 02:03:15.030 align:start position:0%
continue this for loop as long as i is
less<02:03:12.000><c> than</c><02:03:12.400><c> or</c><02:03:12.639><c> equal</c><02:03:13.119><c> to</c><02:03:13.440><c> rows</c>

02:03:15.030 --> 02:03:15.040 align:start position:0%
less than or equal to rows
 

02:03:15.040 --> 02:03:17.510 align:start position:0%
less than or equal to rows
and<02:03:15.199><c> then</c><02:03:15.440><c> increment</c><02:03:16.000><c> i</c><02:03:16.320><c> by</c><02:03:16.560><c> one</c><02:03:16.880><c> after</c><02:03:17.280><c> each</c>

02:03:17.510 --> 02:03:17.520 align:start position:0%
and then increment i by one after each
 

02:03:17.520 --> 02:03:20.070 align:start position:0%
and then increment i by one after each
iteration<02:03:18.400><c> so</c><02:03:18.639><c> now</c><02:03:18.800><c> let's</c><02:03:19.119><c> create</c><02:03:19.440><c> a</c><02:03:19.679><c> nested</c>

02:03:20.070 --> 02:03:20.080 align:start position:0%
iteration so now let's create a nested
 

02:03:20.080 --> 02:03:22.390 align:start position:0%
iteration so now let's create a nested
for<02:03:20.320><c> loop</c><02:03:20.719><c> we</c><02:03:20.880><c> will</c><02:03:21.040><c> declare</c><02:03:21.520><c> a</c><02:03:21.679><c> loop</c><02:03:22.080><c> inside</c>

02:03:22.390 --> 02:03:22.400 align:start position:0%
for loop we will declare a loop inside
 

02:03:22.400 --> 02:03:24.149 align:start position:0%
for loop we will declare a loop inside
of<02:03:22.480><c> another</c><02:03:22.880><c> loop</c>

02:03:24.149 --> 02:03:24.159 align:start position:0%
of another loop
 

02:03:24.159 --> 02:03:26.229 align:start position:0%
of another loop
and<02:03:24.480><c> this</c><02:03:24.719><c> inner</c><02:03:24.960><c> for</c><02:03:25.199><c> loop</c><02:03:25.520><c> is</c><02:03:25.679><c> in</c><02:03:25.840><c> charge</c><02:03:26.159><c> of</c>

02:03:26.229 --> 02:03:26.239 align:start position:0%
and this inner for loop is in charge of
 

02:03:26.239 --> 02:03:28.790 align:start position:0%
and this inner for loop is in charge of
the<02:03:26.400><c> columns</c><02:03:27.199><c> we</c><02:03:27.360><c> should</c><02:03:27.599><c> probably</c><02:03:28.080><c> not</c><02:03:28.320><c> reuse</c>

02:03:28.790 --> 02:03:28.800 align:start position:0%
the columns we should probably not reuse
 

02:03:28.800 --> 02:03:30.790 align:start position:0%
the columns we should probably not reuse
our<02:03:28.960><c> index</c><02:03:29.360><c> of</c><02:03:29.520><c> i</c><02:03:29.760><c> so</c><02:03:29.920><c> let's</c><02:03:30.159><c> create</c><02:03:30.400><c> a</c><02:03:30.560><c> new</c>

02:03:30.790 --> 02:03:30.800 align:start position:0%
our index of i so let's create a new
 

02:03:30.800 --> 02:03:33.350 align:start position:0%
our index of i so let's create a new
index<02:03:31.520><c> and</c><02:03:31.760><c> a</c><02:03:31.920><c> common</c><02:03:32.239><c> naming</c><02:03:32.560><c> convention</c><02:03:33.119><c> for</c>

02:03:33.350 --> 02:03:33.360 align:start position:0%
index and a common naming convention for
 

02:03:33.360 --> 02:03:36.310 align:start position:0%
index and a common naming convention for
an<02:03:33.520><c> inner</c><02:03:33.840><c> for</c><02:03:34.159><c> loop</c><02:03:34.560><c> is</c><02:03:34.800><c> to</c><02:03:34.880><c> use</c><02:03:35.360><c> j</c><02:03:35.679><c> because</c><02:03:36.000><c> j</c>

02:03:36.310 --> 02:03:36.320 align:start position:0%
an inner for loop is to use j because j
 

02:03:36.320 --> 02:03:38.390 align:start position:0%
an inner for loop is to use j because j
comes<02:03:36.560><c> after</c><02:03:36.880><c> i</c><02:03:37.040><c> in</c><02:03:37.119><c> the</c><02:03:37.199><c> alphabet</c>

02:03:38.390 --> 02:03:38.400 align:start position:0%
comes after i in the alphabet
 

02:03:38.400 --> 02:03:41.830 align:start position:0%
comes after i in the alphabet
so<02:03:38.639><c> i</c><02:03:38.719><c> will</c><02:03:38.960><c> set</c><02:03:39.440><c> int</c><02:03:39.920><c> j</c><02:03:40.400><c> equal</c><02:03:40.719><c> to</c><02:03:40.880><c> one</c><02:03:41.440><c> we</c><02:03:41.599><c> will</c>

02:03:41.830 --> 02:03:41.840 align:start position:0%
so i will set int j equal to one we will
 

02:03:41.840 --> 02:03:44.950 align:start position:0%
so i will set int j equal to one we will
continue<02:03:42.239><c> this</c><02:03:42.560><c> as</c><02:03:42.800><c> long</c><02:03:43.119><c> as</c><02:03:43.440><c> j</c><02:03:44.080><c> is</c><02:03:44.320><c> less</c><02:03:44.560><c> than</c>

02:03:44.950 --> 02:03:44.960 align:start position:0%
continue this as long as j is less than
 

02:03:44.960 --> 02:03:47.910 align:start position:0%
continue this as long as j is less than
or<02:03:45.199><c> equal</c><02:03:45.679><c> to</c><02:03:46.000><c> columns</c>

02:03:47.910 --> 02:03:47.920 align:start position:0%
or equal to columns
 

02:03:47.920 --> 02:03:50.790 align:start position:0%
or equal to columns
then<02:03:48.320><c> increment</c><02:03:48.960><c> j</c><02:03:49.280><c> by</c><02:03:49.520><c> one</c><02:03:50.239><c> for</c><02:03:50.400><c> the</c><02:03:50.560><c> time</c>

02:03:50.790 --> 02:03:50.800 align:start position:0%
then increment j by one for the time
 

02:03:50.800 --> 02:03:52.870 align:start position:0%
then increment j by one for the time
being<02:03:51.040><c> until</c><02:03:51.280><c> we</c><02:03:51.440><c> let</c><02:03:51.679><c> a</c><02:03:51.760><c> user</c><02:03:52.079><c> type</c><02:03:52.400><c> in</c><02:03:52.639><c> a</c>

02:03:52.870 --> 02:03:52.880 align:start position:0%
being until we let a user type in a
 

02:03:52.880 --> 02:03:55.830 align:start position:0%
being until we let a user type in a
symbol<02:03:53.599><c> let's</c><02:03:53.840><c> just</c><02:03:54.079><c> print</c><02:03:54.480><c> our</c><02:03:54.639><c> index</c><02:03:55.599><c> so</c>

02:03:55.830 --> 02:03:55.840 align:start position:0%
symbol let's just print our index so
 

02:03:55.840 --> 02:03:59.350 align:start position:0%
symbol let's just print our index so
let's<02:03:56.079><c> use</c><02:03:56.480><c> printf</c>

02:03:59.350 --> 02:03:59.360 align:start position:0%
 
 

02:03:59.360 --> 02:04:01.910 align:start position:0%
 
we're<02:03:59.520><c> displaying</c><02:03:59.920><c> an</c><02:04:00.079><c> integer</c>

02:04:01.910 --> 02:04:01.920 align:start position:0%
we're displaying an integer
 

02:04:01.920 --> 02:04:04.790 align:start position:0%
we're displaying an integer
and<02:04:02.239><c> let's</c><02:04:02.560><c> display</c><02:04:03.199><c> j</c>

02:04:04.790 --> 02:04:04.800 align:start position:0%
and let's display j
 

02:04:04.800 --> 02:04:06.629 align:start position:0%
and let's display j
and<02:04:05.040><c> let's</c><02:04:05.280><c> take</c><02:04:05.440><c> a</c><02:04:05.520><c> look</c><02:04:05.760><c> at</c><02:04:05.840><c> this</c>

02:04:06.629 --> 02:04:06.639 align:start position:0%
and let's take a look at this
 

02:04:06.639 --> 02:04:08.870 align:start position:0%
and let's take a look at this
okay<02:04:07.040><c> enter</c><02:04:07.360><c> number</c><02:04:07.599><c> of</c><02:04:07.760><c> rows</c><02:04:08.079><c> how</c><02:04:08.239><c> about</c><02:04:08.639><c> 3</c>

02:04:08.870 --> 02:04:08.880 align:start position:0%
okay enter number of rows how about 3
 

02:04:08.880 --> 02:04:11.109 align:start position:0%
okay enter number of rows how about 3
rows<02:04:09.360><c> and</c><02:04:09.679><c> five</c><02:04:09.920><c> columns</c>

02:04:11.109 --> 02:04:11.119 align:start position:0%
rows and five columns
 

02:04:11.119 --> 02:04:13.830 align:start position:0%
rows and five columns
so<02:04:11.360><c> here's</c><02:04:11.679><c> our</c><02:04:11.920><c> output</c><02:04:12.719><c> we</c><02:04:12.880><c> have</c><02:04:13.119><c> the</c><02:04:13.199><c> numbers</c>

02:04:13.830 --> 02:04:13.840 align:start position:0%
so here's our output we have the numbers
 

02:04:13.840 --> 02:04:16.950 align:start position:0%
so here's our output we have the numbers
one<02:04:14.239><c> through</c><02:04:14.560><c> five</c><02:04:15.119><c> three</c><02:04:15.520><c> times</c>

02:04:16.950 --> 02:04:16.960 align:start position:0%
one through five three times
 

02:04:16.960 --> 02:04:19.430 align:start position:0%
one through five three times
so<02:04:17.199><c> to</c><02:04:17.280><c> make</c><02:04:17.440><c> this</c><02:04:17.760><c> more</c><02:04:18.079><c> of</c><02:04:18.320><c> a</c><02:04:18.560><c> rectangle</c><02:04:19.280><c> a</c>

02:04:19.430 --> 02:04:19.440 align:start position:0%
so to make this more of a rectangle a
 

02:04:19.440 --> 02:04:21.350 align:start position:0%
so to make this more of a rectangle a
grid<02:04:19.760><c> i'm</c><02:04:19.920><c> going</c><02:04:20.159><c> to</c><02:04:20.320><c> add</c><02:04:20.639><c> a</c><02:04:20.880><c> new</c><02:04:21.119><c> line</c>

02:04:21.350 --> 02:04:21.360 align:start position:0%
grid i'm going to add a new line
 

02:04:21.360 --> 02:04:24.709 align:start position:0%
grid i'm going to add a new line
character<02:04:21.920><c> whenever</c><02:04:22.320><c> we</c><02:04:22.560><c> finish</c><02:04:23.119><c> a</c><02:04:23.360><c> row</c>

02:04:24.709 --> 02:04:24.719 align:start position:0%
character whenever we finish a row
 

02:04:24.719 --> 02:04:27.030 align:start position:0%
character whenever we finish a row
so<02:04:25.199><c> printf</c>

02:04:27.030 --> 02:04:27.040 align:start position:0%
so printf
 

02:04:27.040 --> 02:04:31.030 align:start position:0%
so printf
newline<02:04:27.520><c> character</c><02:04:28.159><c> let's</c><02:04:28.400><c> try</c><02:04:28.560><c> that</c><02:04:28.800><c> again</c>

02:04:31.030 --> 02:04:31.040 align:start position:0%
newline character let's try that again
 

02:04:31.040 --> 02:04:33.830 align:start position:0%
newline character let's try that again
enter<02:04:31.440><c> number</c><02:04:31.679><c> of</c><02:04:31.840><c> rows</c><02:04:32.639><c> three</c><02:04:33.440><c> number</c><02:04:33.679><c> of</c>

02:04:33.830 --> 02:04:33.840 align:start position:0%
enter number of rows three number of
 

02:04:33.840 --> 02:04:35.270 align:start position:0%
enter number of rows three number of
columns<02:04:34.400><c> five</c>

02:04:35.270 --> 02:04:35.280 align:start position:0%
columns five
 

02:04:35.280 --> 02:04:38.470 align:start position:0%
columns five
so<02:04:35.440><c> we</c><02:04:35.599><c> have</c><02:04:36.079><c> three</c><02:04:36.400><c> rows</c><02:04:36.960><c> and</c><02:04:37.280><c> five</c><02:04:37.599><c> columns</c>

02:04:38.470 --> 02:04:38.480 align:start position:0%
so we have three rows and five columns
 

02:04:38.480 --> 02:04:40.390 align:start position:0%
so we have three rows and five columns
basically<02:04:39.040><c> speaking</c><02:04:39.520><c> to</c><02:04:39.679><c> complete</c><02:04:40.159><c> one</c>

02:04:40.390 --> 02:04:40.400 align:start position:0%
basically speaking to complete one
 

02:04:40.400 --> 02:04:42.950 align:start position:0%
basically speaking to complete one
iteration<02:04:41.040><c> of</c><02:04:41.199><c> our</c><02:04:41.440><c> outer</c><02:04:41.840><c> loop</c><02:04:42.320><c> we</c><02:04:42.480><c> have</c><02:04:42.719><c> to</c>

02:04:42.950 --> 02:04:42.960 align:start position:0%
iteration of our outer loop we have to
 

02:04:42.960 --> 02:04:45.350 align:start position:0%
iteration of our outer loop we have to
escape<02:04:43.599><c> our</c><02:04:43.840><c> inner</c><02:04:44.079><c> loop</c><02:04:44.480><c> first</c>

02:04:45.350 --> 02:04:45.360 align:start position:0%
escape our inner loop first
 

02:04:45.360 --> 02:04:47.430 align:start position:0%
escape our inner loop first
once<02:04:45.679><c> this</c><02:04:45.840><c> condition</c><02:04:46.320><c> is</c><02:04:46.480><c> no</c><02:04:46.639><c> longer</c><02:04:46.960><c> true</c>

02:04:47.430 --> 02:04:47.440 align:start position:0%
once this condition is no longer true
 

02:04:47.440 --> 02:04:49.669 align:start position:0%
once this condition is no longer true
then<02:04:47.679><c> we</c><02:04:47.840><c> will</c><02:04:48.079><c> escape</c><02:04:48.480><c> the</c><02:04:48.719><c> inner</c><02:04:48.960><c> loop</c><02:04:49.440><c> and</c>

02:04:49.669 --> 02:04:49.679 align:start position:0%
then we will escape the inner loop and
 

02:04:49.679 --> 02:04:51.910 align:start position:0%
then we will escape the inner loop and
complete<02:04:50.159><c> one</c><02:04:50.400><c> iteration</c><02:04:51.040><c> of</c><02:04:51.199><c> the</c><02:04:51.360><c> outer</c><02:04:51.679><c> for</c>

02:04:51.910 --> 02:04:51.920 align:start position:0%
complete one iteration of the outer for
 

02:04:51.920 --> 02:04:54.149 align:start position:0%
complete one iteration of the outer for
loop<02:04:52.480><c> but</c><02:04:52.719><c> then</c><02:04:52.960><c> once</c><02:04:53.199><c> we</c><02:04:53.360><c> begin</c><02:04:53.679><c> in</c><02:04:53.760><c> the</c><02:04:53.840><c> next</c>

02:04:54.149 --> 02:04:54.159 align:start position:0%
loop but then once we begin in the next
 

02:04:54.159 --> 02:04:56.229 align:start position:0%
loop but then once we begin in the next
iteration<02:04:54.560><c> of</c><02:04:54.719><c> our</c><02:04:54.800><c> for</c><02:04:55.119><c> loop</c><02:04:55.599><c> we're</c><02:04:55.840><c> stuck</c>

02:04:56.229 --> 02:04:56.239 align:start position:0%
iteration of our for loop we're stuck
 

02:04:56.239 --> 02:04:58.550 align:start position:0%
iteration of our for loop we're stuck
back<02:04:56.480><c> within</c><02:04:56.880><c> our</c><02:04:57.040><c> inner</c><02:04:57.280><c> for</c><02:04:57.520><c> loop</c><02:04:57.760><c> again</c><02:04:58.400><c> so</c>

02:04:58.550 --> 02:04:58.560 align:start position:0%
back within our inner for loop again so
 

02:04:58.560 --> 02:05:00.790 align:start position:0%
back within our inner for loop again so
that's<02:04:58.719><c> kind</c><02:04:58.880><c> of</c><02:04:59.040><c> the</c><02:04:59.119><c> concept</c><02:04:59.920><c> now</c><02:05:00.159><c> this</c><02:05:00.400><c> time</c>

02:05:00.790 --> 02:05:00.800 align:start position:0%
that's kind of the concept now this time
 

02:05:00.800 --> 02:05:03.270 align:start position:0%
that's kind of the concept now this time
let's<02:05:01.040><c> let</c><02:05:01.280><c> a</c><02:05:01.360><c> user</c><02:05:01.760><c> type</c><02:05:02.000><c> in</c><02:05:02.079><c> a</c><02:05:02.159><c> symbol</c><02:05:02.880><c> and</c><02:05:03.119><c> we</c>

02:05:03.270 --> 02:05:03.280 align:start position:0%
let's let a user type in a symbol and we
 

02:05:03.280 --> 02:05:07.430 align:start position:0%
let's let a user type in a symbol and we
will<02:05:03.440><c> create</c><02:05:03.840><c> a</c><02:05:04.000><c> sort</c><02:05:04.239><c> of</c><02:05:04.400><c> rectangle</c>

02:05:07.430 --> 02:05:07.440 align:start position:0%
 
 

02:05:07.440 --> 02:05:12.069 align:start position:0%
 
enter<02:05:08.079><c> a</c><02:05:08.560><c> symbol</c><02:05:09.360><c> to</c><02:05:09.840><c> use</c><02:05:10.639><c> then</c><02:05:10.880><c> scanf</c><02:05:11.679><c> we</c><02:05:11.920><c> are</c>

02:05:12.069 --> 02:05:12.079 align:start position:0%
enter a symbol to use then scanf we are
 

02:05:12.079 --> 02:05:14.629 align:start position:0%
enter a symbol to use then scanf we are
accepting<02:05:12.719><c> a</c><02:05:12.880><c> character</c><02:05:13.440><c> so</c><02:05:13.679><c> use</c><02:05:14.000><c> the</c><02:05:14.320><c> c</c>

02:05:14.629 --> 02:05:14.639 align:start position:0%
accepting a character so use the c
 

02:05:14.639 --> 02:05:17.589 align:start position:0%
accepting a character so use the c
format<02:05:15.040><c> specifier</c><02:05:15.920><c> address</c><02:05:16.400><c> of</c><02:05:16.560><c> operator</c>

02:05:17.589 --> 02:05:17.599 align:start position:0%
format specifier address of operator
 

02:05:17.599 --> 02:05:20.149 align:start position:0%
format specifier address of operator
our<02:05:17.920><c> symbol</c><02:05:18.320><c> variable</c>

02:05:20.149 --> 02:05:20.159 align:start position:0%
our symbol variable
 

02:05:20.159 --> 02:05:22.870 align:start position:0%
our symbol variable
now<02:05:20.400><c> we're</c><02:05:20.560><c> going</c><02:05:20.719><c> to</c><02:05:20.880><c> replace</c><02:05:21.599><c> j</c><02:05:22.239><c> with</c><02:05:22.639><c> our</c>

02:05:22.870 --> 02:05:22.880 align:start position:0%
now we're going to replace j with our
 

02:05:22.880 --> 02:05:24.470 align:start position:0%
now we're going to replace j with our
symbol

02:05:24.470 --> 02:05:24.480 align:start position:0%
symbol
 

02:05:24.480 --> 02:05:26.870 align:start position:0%
symbol
and<02:05:24.719><c> the</c><02:05:24.800><c> format</c><02:05:25.199><c> specifier</c><02:05:26.000><c> for</c><02:05:26.159><c> a</c><02:05:26.400><c> character</c>

02:05:26.870 --> 02:05:26.880 align:start position:0%
and the format specifier for a character
 

02:05:26.880 --> 02:05:27.830 align:start position:0%
and the format specifier for a character
is<02:05:27.119><c> c</c>

02:05:27.830 --> 02:05:27.840 align:start position:0%
is c
 

02:05:27.840 --> 02:05:31.109 align:start position:0%
is c
then<02:05:28.000><c> let's</c><02:05:28.239><c> try</c><02:05:28.480><c> this</c><02:05:28.639><c> again</c>

02:05:31.109 --> 02:05:31.119 align:start position:0%
 
 

02:05:31.119 --> 02:05:35.270 align:start position:0%
 
so<02:05:31.280><c> how</c><02:05:31.520><c> about</c><02:05:32.159><c> three</c><02:05:32.480><c> rows</c><02:05:33.040><c> and</c><02:05:33.360><c> six</c><02:05:33.599><c> columns</c>

02:05:35.270 --> 02:05:35.280 align:start position:0%
so how about three rows and six columns
 

02:05:35.280 --> 02:05:37.189 align:start position:0%
so how about three rows and six columns
okay<02:05:35.599><c> here's</c><02:05:35.840><c> the</c><02:05:36.000><c> issue</c><02:05:36.400><c> so</c><02:05:36.560><c> we</c><02:05:36.719><c> have</c><02:05:36.960><c> all</c><02:05:37.119><c> of</c>

02:05:37.189 --> 02:05:37.199 align:start position:0%
okay here's the issue so we have all of
 

02:05:37.199 --> 02:05:38.790 align:start position:0%
okay here's the issue so we have all of
this<02:05:37.440><c> empty</c><02:05:37.760><c> space</c>

02:05:38.790 --> 02:05:38.800 align:start position:0%
this empty space
 

02:05:38.800 --> 02:05:40.629 align:start position:0%
this empty space
now<02:05:39.040><c> when</c><02:05:39.199><c> we</c><02:05:39.440><c> entered</c><02:05:39.920><c> our</c><02:05:40.159><c> number</c><02:05:40.480><c> of</c>

02:05:40.629 --> 02:05:40.639 align:start position:0%
now when we entered our number of
 

02:05:40.639 --> 02:05:43.589 align:start position:0%
now when we entered our number of
columns<02:05:41.520><c> after</c><02:05:41.840><c> hitting</c><02:05:42.159><c> enter</c><02:05:42.560><c> we</c><02:05:42.719><c> have</c><02:05:43.119><c> the</c>

02:05:43.589 --> 02:05:43.599 align:start position:0%
columns after hitting enter we have the
 

02:05:43.599 --> 02:05:45.589 align:start position:0%
columns after hitting enter we have the
new<02:05:43.920><c> line</c><02:05:44.239><c> character</c><02:05:44.639><c> within</c><02:05:45.040><c> our</c><02:05:45.199><c> input</c>

02:05:45.589 --> 02:05:45.599 align:start position:0%
new line character within our input
 

02:05:45.599 --> 02:05:48.470 align:start position:0%
new line character within our input
buffer<02:05:46.320><c> so</c><02:05:46.800><c> our</c><02:05:47.040><c> next</c><02:05:47.440><c> scana</c><02:05:47.920><c> function</c>

02:05:48.470 --> 02:05:48.480 align:start position:0%
buffer so our next scana function
 

02:05:48.480 --> 02:05:50.470 align:start position:0%
buffer so our next scana function
actually<02:05:48.880><c> picked</c><02:05:49.199><c> that</c><02:05:49.440><c> up</c><02:05:49.840><c> so</c><02:05:50.000><c> what</c><02:05:50.159><c> we</c><02:05:50.320><c> need</c>

02:05:50.470 --> 02:05:50.480 align:start position:0%
actually picked that up so what we need
 

02:05:50.480 --> 02:05:52.950 align:start position:0%
actually picked that up so what we need
to<02:05:50.560><c> do</c><02:05:50.800><c> is</c><02:05:51.119><c> clear</c><02:05:51.440><c> our</c><02:05:51.679><c> buffer</c><02:05:52.159><c> and</c><02:05:52.400><c> one</c><02:05:52.639><c> simple</c>

02:05:52.950 --> 02:05:52.960 align:start position:0%
to do is clear our buffer and one simple
 

02:05:52.960 --> 02:05:54.229 align:start position:0%
to do is clear our buffer and one simple
way<02:05:53.119><c> of</c><02:05:53.199><c> doing</c><02:05:53.440><c> that</c><02:05:53.679><c> there's</c><02:05:53.840><c> a</c><02:05:53.920><c> couple</c>

02:05:54.229 --> 02:05:54.239 align:start position:0%
way of doing that there's a couple
 

02:05:54.239 --> 02:05:56.550 align:start position:0%
way of doing that there's a couple
different<02:05:54.480><c> ways</c><02:05:55.280><c> is</c><02:05:55.440><c> that</c><02:05:55.599><c> we</c><02:05:55.760><c> can</c><02:05:55.920><c> just</c><02:05:56.159><c> use</c>

02:05:56.550 --> 02:05:56.560 align:start position:0%
different ways is that we can just use
 

02:05:56.560 --> 02:05:58.550 align:start position:0%
different ways is that we can just use
scanf<02:05:57.119><c> again</c>

02:05:58.550 --> 02:05:58.560 align:start position:0%
scanf again
 

02:05:58.560 --> 02:06:00.870 align:start position:0%
scanf again
and<02:05:58.800><c> we</c><02:05:58.960><c> will</c><02:05:59.199><c> read</c><02:05:59.599><c> a</c><02:05:59.840><c> character</c><02:06:00.480><c> and</c><02:06:00.639><c> that's</c>

02:06:00.870 --> 02:06:00.880 align:start position:0%
and we will read a character and that's
 

02:06:00.880 --> 02:06:02.790 align:start position:0%
and we will read a character and that's
one<02:06:01.040><c> way</c><02:06:01.280><c> to</c><02:06:01.360><c> do</c><02:06:01.599><c> it</c><02:06:01.920><c> basically</c><02:06:02.320><c> with</c><02:06:02.560><c> this</c>

02:06:02.790 --> 02:06:02.800 align:start position:0%
one way to do it basically with this
 

02:06:02.800 --> 02:06:04.790 align:start position:0%
one way to do it basically with this
line<02:06:03.040><c> we're</c><02:06:03.199><c> just</c><02:06:03.360><c> getting</c><02:06:03.679><c> rid</c><02:06:04.000><c> of</c><02:06:04.239><c> the</c><02:06:04.560><c> new</c>

02:06:04.790 --> 02:06:04.800 align:start position:0%
line we're just getting rid of the new
 

02:06:04.800 --> 02:06:06.950 align:start position:0%
line we're just getting rid of the new
line<02:06:05.119><c> character</c><02:06:06.000><c> after</c><02:06:06.239><c> the</c><02:06:06.400><c> last</c><02:06:06.639><c> time</c><02:06:06.800><c> we</c>

02:06:06.950 --> 02:06:06.960 align:start position:0%
line character after the last time we
 

02:06:06.960 --> 02:06:08.790 align:start position:0%
line character after the last time we
use<02:06:07.119><c> scanf</c><02:06:07.760><c> because</c><02:06:08.000><c> that's</c><02:06:08.320><c> still</c><02:06:08.480><c> within</c>

02:06:08.790 --> 02:06:08.800 align:start position:0%
use scanf because that's still within
 

02:06:08.800 --> 02:06:10.870 align:start position:0%
use scanf because that's still within
our<02:06:08.960><c> buffer</c><02:06:09.520><c> okay</c><02:06:09.840><c> let's</c><02:06:10.079><c> try</c><02:06:10.320><c> this</c><02:06:10.400><c> one</c><02:06:10.639><c> last</c>

02:06:10.870 --> 02:06:10.880 align:start position:0%
our buffer okay let's try this one last
 

02:06:10.880 --> 02:06:13.669 align:start position:0%
our buffer okay let's try this one last
time<02:06:11.440><c> what</c><02:06:11.599><c> about</c><02:06:12.159><c> four</c><02:06:12.400><c> rows</c>

02:06:13.669 --> 02:06:13.679 align:start position:0%
time what about four rows
 

02:06:13.679 --> 02:06:16.709 align:start position:0%
time what about four rows
and<02:06:14.000><c> five</c><02:06:14.320><c> columns</c><02:06:14.960><c> enter</c><02:06:15.360><c> a</c><02:06:15.520><c> symbol</c><02:06:15.920><c> to</c><02:06:16.079><c> use</c>

02:06:16.709 --> 02:06:16.719 align:start position:0%
and five columns enter a symbol to use
 

02:06:16.719 --> 02:06:18.550 align:start position:0%
and five columns enter a symbol to use
uh<02:06:16.880><c> how</c><02:06:17.040><c> about</c><02:06:17.280><c> the</c><02:06:17.360><c> dollar</c><02:06:17.679><c> sign</c>

02:06:18.550 --> 02:06:18.560 align:start position:0%
uh how about the dollar sign
 

02:06:18.560 --> 02:06:21.030 align:start position:0%
uh how about the dollar sign
there<02:06:18.719><c> we</c><02:06:18.800><c> go</c><02:06:19.040><c> here's</c><02:06:19.280><c> our</c><02:06:19.360><c> rectangle</c><02:06:20.320><c> it</c><02:06:20.480><c> has</c>

02:06:21.030 --> 02:06:21.040 align:start position:0%
there we go here's our rectangle it has
 

02:06:21.040 --> 02:06:24.390 align:start position:0%
there we go here's our rectangle it has
five<02:06:21.360><c> columns</c><02:06:22.320><c> and</c><02:06:22.880><c> four</c><02:06:23.199><c> rows</c><02:06:23.920><c> so</c><02:06:24.159><c> yeah</c>

02:06:24.390 --> 02:06:24.400 align:start position:0%
five columns and four rows so yeah
 

02:06:24.400 --> 02:06:26.709 align:start position:0%
five columns and four rows so yeah
that's<02:06:24.639><c> basically</c><02:06:25.119><c> a</c><02:06:25.280><c> nested</c><02:06:25.679><c> loop</c><02:06:26.079><c> it's</c><02:06:26.480><c> a</c>

02:06:26.709 --> 02:06:26.719 align:start position:0%
that's basically a nested loop it's a
 

02:06:26.719 --> 02:06:28.790 align:start position:0%
that's basically a nested loop it's a
loop<02:06:27.040><c> inside</c><02:06:27.360><c> of</c><02:06:27.520><c> another</c><02:06:27.840><c> loop</c><02:06:28.400><c> and</c><02:06:28.560><c> when</c>

02:06:28.790 --> 02:06:28.800 align:start position:0%
loop inside of another loop and when
 

02:06:28.800 --> 02:06:30.229 align:start position:0%
loop inside of another loop and when
you'll<02:06:29.040><c> encounter</c><02:06:29.440><c> them</c><02:06:29.679><c> it's</c><02:06:29.920><c> really</c>

02:06:30.229 --> 02:06:30.239 align:start position:0%
you'll encounter them it's really
 

02:06:30.239 --> 02:06:32.390 align:start position:0%
you'll encounter them it's really
situational<02:06:31.280><c> i</c><02:06:31.440><c> thought</c><02:06:31.679><c> this</c><02:06:31.840><c> would</c><02:06:32.000><c> be</c><02:06:32.159><c> good</c>

02:06:32.390 --> 02:06:32.400 align:start position:0%
situational i thought this would be good
 

02:06:32.400 --> 02:06:34.550 align:start position:0%
situational i thought this would be good
practice<02:06:32.800><c> to</c><02:06:33.040><c> understand</c><02:06:33.520><c> how</c><02:06:33.679><c> they</c><02:06:33.840><c> work</c><02:06:34.320><c> to</c>

02:06:34.550 --> 02:06:34.560 align:start position:0%
practice to understand how they work to
 

02:06:34.560 --> 02:06:37.350 align:start position:0%
practice to understand how they work to
complete<02:06:35.119><c> one</c><02:06:35.520><c> iteration</c><02:06:36.159><c> of</c><02:06:36.320><c> the</c><02:06:36.480><c> outer</c><02:06:36.880><c> loop</c>

02:06:37.350 --> 02:06:37.360 align:start position:0%
complete one iteration of the outer loop
 

02:06:37.360 --> 02:06:40.069 align:start position:0%
complete one iteration of the outer loop
you<02:06:37.520><c> have</c><02:06:37.760><c> to</c><02:06:38.000><c> first</c><02:06:38.480><c> escape</c><02:06:39.040><c> the</c><02:06:39.280><c> inner</c><02:06:39.520><c> loop</c>

02:06:40.069 --> 02:06:40.079 align:start position:0%
you have to first escape the inner loop
 

02:06:40.079 --> 02:06:41.910 align:start position:0%
you have to first escape the inner loop
and<02:06:40.239><c> that</c><02:06:40.480><c> may</c><02:06:40.719><c> involve</c><02:06:41.119><c> completing</c><02:06:41.679><c> all</c>

02:06:41.910 --> 02:06:41.920 align:start position:0%
and that may involve completing all
 

02:06:41.920 --> 02:06:44.069 align:start position:0%
and that may involve completing all
iterations<02:06:42.639><c> of</c><02:06:42.719><c> the</c><02:06:42.960><c> inner</c><02:06:43.199><c> loop</c><02:06:43.520><c> so</c><02:06:43.840><c> yeah</c>

02:06:44.069 --> 02:06:44.079 align:start position:0%
iterations of the inner loop so yeah
 

02:06:44.079 --> 02:06:45.830 align:start position:0%
iterations of the inner loop so yeah
those<02:06:44.400><c> are</c><02:06:44.560><c> nested</c><02:06:44.960><c> loops</c><02:06:45.360><c> if</c><02:06:45.440><c> you</c><02:06:45.599><c> would</c><02:06:45.679><c> like</c>

02:06:45.830 --> 02:06:45.840 align:start position:0%
those are nested loops if you would like
 

02:06:45.840 --> 02:06:47.669 align:start position:0%
those are nested loops if you would like
a<02:06:45.920><c> copy</c><02:06:46.239><c> of</c><02:06:46.320><c> this</c><02:06:46.480><c> code</c><02:06:46.719><c> i</c><02:06:46.880><c> will</c><02:06:47.119><c> post</c><02:06:47.360><c> this</c><02:06:47.599><c> to</c>

02:06:47.669 --> 02:06:47.679 align:start position:0%
a copy of this code i will post this to
 

02:06:47.679 --> 02:06:49.830 align:start position:0%
a copy of this code i will post this to
the<02:06:47.840><c> comment</c><02:06:48.239><c> section</c><02:06:48.560><c> down</c><02:06:48.800><c> below</c><02:06:49.199><c> and</c><02:06:49.360><c> well</c>

02:06:49.830 --> 02:06:49.840 align:start position:0%
the comment section down below and well
 

02:06:49.840 --> 02:06:55.669 align:start position:0%
the comment section down below and well
yeah<02:06:50.159><c> those</c><02:06:50.480><c> are</c><02:06:50.639><c> nested</c><02:06:51.040><c> loops</c><02:06:51.520><c> in</c><02:06:51.760><c> c</c>

02:06:55.669 --> 02:06:55.679 align:start position:0%
 
 

02:06:55.679 --> 02:06:57.990 align:start position:0%
 
hey<02:06:56.000><c> people</c><02:06:56.400><c> i</c><02:06:56.560><c> have</c><02:06:56.880><c> a</c><02:06:57.119><c> super</c><02:06:57.440><c> quick</c><02:06:57.679><c> video</c>

02:06:57.990 --> 02:06:58.000 align:start position:0%
hey people i have a super quick video
 

02:06:58.000 --> 02:06:59.910 align:start position:0%
hey people i have a super quick video
for<02:06:58.159><c> you</c><02:06:58.320><c> today</c><02:06:58.639><c> on</c><02:06:58.800><c> the</c><02:06:58.960><c> differences</c><02:06:59.520><c> between</c>

02:06:59.910 --> 02:06:59.920 align:start position:0%
for you today on the differences between
 

02:06:59.920 --> 02:07:02.390 align:start position:0%
for you today on the differences between
the<02:07:00.159><c> continue</c><02:07:00.800><c> and</c><02:07:01.040><c> break</c><02:07:01.360><c> statements</c><02:07:02.159><c> so</c>

02:07:02.390 --> 02:07:02.400 align:start position:0%
the continue and break statements so
 

02:07:02.400 --> 02:07:04.470 align:start position:0%
the continue and break statements so
when<02:07:02.719><c> using</c><02:07:03.040><c> either</c><02:07:03.360><c> statements</c><02:07:03.920><c> within</c><02:07:04.320><c> the</c>

02:07:04.470 --> 02:07:04.480 align:start position:0%
when using either statements within the
 

02:07:04.480 --> 02:07:06.950 align:start position:0%
when using either statements within the
context<02:07:05.040><c> of</c><02:07:05.199><c> a</c><02:07:05.280><c> loop</c><02:07:05.679><c> a</c><02:07:05.840><c> continue</c><02:07:06.320><c> statement</c>

02:07:06.950 --> 02:07:06.960 align:start position:0%
context of a loop a continue statement
 

02:07:06.960 --> 02:07:09.270 align:start position:0%
context of a loop a continue statement
will<02:07:07.199><c> skip</c><02:07:07.520><c> the</c><02:07:07.679><c> rest</c><02:07:08.000><c> of</c><02:07:08.159><c> a</c><02:07:08.239><c> section</c><02:07:08.639><c> of</c><02:07:08.800><c> code</c>

02:07:09.270 --> 02:07:09.280 align:start position:0%
will skip the rest of a section of code
 

02:07:09.280 --> 02:07:11.669 align:start position:0%
will skip the rest of a section of code
and<02:07:09.520><c> force</c><02:07:09.840><c> the</c><02:07:10.000><c> next</c><02:07:10.320><c> iteration</c><02:07:10.880><c> of</c><02:07:11.040><c> a</c><02:07:11.119><c> loop</c><02:07:11.520><c> a</c>

02:07:11.669 --> 02:07:11.679 align:start position:0%
and force the next iteration of a loop a
 

02:07:11.679 --> 02:07:13.910 align:start position:0%
and force the next iteration of a loop a
break<02:07:12.000><c> statement</c><02:07:12.480><c> will</c><02:07:12.719><c> exit</c><02:07:13.119><c> out</c><02:07:13.199><c> of</c><02:07:13.360><c> a</c><02:07:13.440><c> loop</c>

02:07:13.910 --> 02:07:13.920 align:start position:0%
break statement will exit out of a loop
 

02:07:13.920 --> 02:07:15.910 align:start position:0%
break statement will exit out of a loop
entirely<02:07:14.800><c> another</c><02:07:15.199><c> place</c><02:07:15.440><c> where</c><02:07:15.599><c> you</c><02:07:15.679><c> see</c>

02:07:15.910 --> 02:07:15.920 align:start position:0%
entirely another place where you see
 

02:07:15.920 --> 02:07:17.990 align:start position:0%
entirely another place where you see
break<02:07:16.159><c> statements</c><02:07:16.800><c> is</c><02:07:16.960><c> when</c><02:07:17.119><c> used</c><02:07:17.440><c> within</c><02:07:17.840><c> a</c>

02:07:17.990 --> 02:07:18.000 align:start position:0%
break statements is when used within a
 

02:07:18.000 --> 02:07:20.229 align:start position:0%
break statements is when used within a
switch<02:07:18.560><c> after</c><02:07:18.960><c> each</c><02:07:19.199><c> case</c><02:07:19.679><c> so</c><02:07:19.840><c> here's</c><02:07:20.159><c> an</c>

02:07:20.229 --> 02:07:20.239 align:start position:0%
switch after each case so here's an
 

02:07:20.239 --> 02:07:21.830 align:start position:0%
switch after each case so here's an
example<02:07:20.719><c> let's</c><02:07:20.880><c> say</c><02:07:21.119><c> that</c><02:07:21.280><c> we</c><02:07:21.440><c> would</c><02:07:21.599><c> like</c><02:07:21.760><c> to</c>

02:07:21.830 --> 02:07:21.840 align:start position:0%
example let's say that we would like to
 

02:07:21.840 --> 02:07:24.310 align:start position:0%
example let's say that we would like to
count<02:07:22.079><c> the</c><02:07:22.159><c> numbers</c><02:07:22.719><c> 1</c><02:07:23.119><c> through</c><02:07:23.520><c> 20</c><02:07:24.079><c> but</c><02:07:24.239><c> i</c>

02:07:24.310 --> 02:07:24.320 align:start position:0%
count the numbers 1 through 20 but i
 

02:07:24.320 --> 02:07:26.310 align:start position:0%
count the numbers 1 through 20 but i
would<02:07:24.400><c> like</c><02:07:24.560><c> to</c><02:07:24.639><c> skip</c><02:07:24.960><c> the</c><02:07:25.040><c> number</c><02:07:25.360><c> 13</c><02:07:25.840><c> because</c>

02:07:26.310 --> 02:07:26.320 align:start position:0%
would like to skip the number 13 because
 

02:07:26.320 --> 02:07:28.870 align:start position:0%
would like to skip the number 13 because
13<02:07:26.800><c> is</c><02:07:26.880><c> considered</c><02:07:27.360><c> an</c><02:07:27.520><c> unlucky</c><02:07:27.920><c> number</c><02:07:28.480><c> so</c><02:07:28.719><c> if</c>

02:07:28.870 --> 02:07:28.880 align:start position:0%
13 is considered an unlucky number so if
 

02:07:28.880 --> 02:07:30.629 align:start position:0%
13 is considered an unlucky number so if
i<02:07:28.960><c> were</c><02:07:29.119><c> to</c><02:07:29.280><c> write</c><02:07:29.520><c> a</c><02:07:29.599><c> program</c><02:07:30.000><c> like</c><02:07:30.159><c> that</c><02:07:30.480><c> that</c>

02:07:30.629 --> 02:07:30.639 align:start position:0%
i were to write a program like that that
 

02:07:30.639 --> 02:07:32.229 align:start position:0%
i were to write a program like that that
would<02:07:30.800><c> look</c><02:07:30.960><c> something</c><02:07:31.280><c> like</c><02:07:31.440><c> this</c>

02:07:32.229 --> 02:07:32.239 align:start position:0%
would look something like this
 

02:07:32.239 --> 02:07:35.189 align:start position:0%
would look something like this
so<02:07:32.480><c> let's</c><02:07:32.800><c> use</c><02:07:33.040><c> a</c><02:07:33.280><c> for</c><02:07:33.599><c> loop</c><02:07:34.239><c> and</c><02:07:34.480><c> i</c><02:07:34.560><c> will</c><02:07:34.800><c> set</c>

02:07:35.189 --> 02:07:35.199 align:start position:0%
so let's use a for loop and i will set
 

02:07:35.199 --> 02:07:38.229 align:start position:0%
so let's use a for loop and i will set
an<02:07:35.440><c> index</c><02:07:35.840><c> of</c><02:07:36.000><c> i</c><02:07:36.400><c> equal</c><02:07:36.719><c> to</c><02:07:36.960><c> one</c><02:07:37.520><c> continue</c><02:07:38.000><c> this</c>

02:07:38.229 --> 02:07:38.239 align:start position:0%
an index of i equal to one continue this
 

02:07:38.239 --> 02:07:41.270 align:start position:0%
an index of i equal to one continue this
as<02:07:38.480><c> long</c><02:07:38.719><c> as</c><02:07:38.960><c> i</c><02:07:39.280><c> is</c><02:07:39.440><c> less</c><02:07:39.679><c> than</c><02:07:39.920><c> or</c><02:07:40.159><c> equal</c><02:07:40.400><c> to</c><02:07:40.560><c> 20</c>

02:07:41.270 --> 02:07:41.280 align:start position:0%
as long as i is less than or equal to 20
 

02:07:41.280 --> 02:07:43.589 align:start position:0%
as long as i is less than or equal to 20
and<02:07:41.440><c> then</c><02:07:41.679><c> increment</c><02:07:42.159><c> i</c><02:07:42.320><c> by</c><02:07:42.560><c> one</c><02:07:43.040><c> then</c><02:07:43.280><c> let's</c>

02:07:43.589 --> 02:07:43.599 align:start position:0%
and then increment i by one then let's
 

02:07:43.599 --> 02:07:46.149 align:start position:0%
and then increment i by one then let's
print<02:07:43.840><c> our</c><02:07:44.079><c> index</c><02:07:44.880><c> so</c><02:07:45.199><c> printf</c><02:07:45.920><c> we're</c>

02:07:46.149 --> 02:07:46.159 align:start position:0%
print our index so printf we're
 

02:07:46.159 --> 02:07:47.750 align:start position:0%
print our index so printf we're
displaying<02:07:46.639><c> an</c><02:07:46.800><c> integer</c>

02:07:47.750 --> 02:07:47.760 align:start position:0%
displaying an integer
 

02:07:47.760 --> 02:07:49.910 align:start position:0%
displaying an integer
and<02:07:47.920><c> let's</c><02:07:48.159><c> display</c><02:07:48.639><c> i</c><02:07:49.280><c> i'm</c><02:07:49.440><c> just</c><02:07:49.599><c> going</c><02:07:49.760><c> to</c>

02:07:49.910 --> 02:07:49.920 align:start position:0%
and let's display i i'm just going to
 

02:07:49.920 --> 02:07:51.830 align:start position:0%
and let's display i i'm just going to
add<02:07:50.079><c> a</c><02:07:50.159><c> new</c><02:07:50.400><c> line</c><02:07:50.639><c> character</c><02:07:51.280><c> after</c><02:07:51.599><c> each</c>

02:07:51.830 --> 02:07:51.840 align:start position:0%
add a new line character after each
 

02:07:51.840 --> 02:07:54.149 align:start position:0%
add a new line character after each
iteration<02:07:52.400><c> when</c><02:07:52.560><c> we</c><02:07:52.719><c> use</c><02:07:52.960><c> a</c><02:07:53.119><c> printf</c><02:07:53.599><c> statement</c>

02:07:54.149 --> 02:07:54.159 align:start position:0%
iteration when we use a printf statement
 

02:07:54.159 --> 02:07:56.069 align:start position:0%
iteration when we use a printf statement
okay<02:07:54.400><c> so</c><02:07:54.639><c> this</c><02:07:54.800><c> is</c><02:07:54.880><c> what</c><02:07:55.040><c> this</c><02:07:55.280><c> looks</c><02:07:55.520><c> like</c><02:07:55.920><c> we</c>

02:07:56.069 --> 02:07:56.079 align:start position:0%
okay so this is what this looks like we
 

02:07:56.079 --> 02:07:59.189 align:start position:0%
okay so this is what this looks like we
have<02:07:56.320><c> the</c><02:07:56.480><c> numbers</c><02:07:56.880><c> 1</c><02:07:57.599><c> through</c><02:07:58.000><c> 20.</c><02:07:58.719><c> so</c><02:07:58.960><c> if</c><02:07:59.119><c> i</c>

02:07:59.189 --> 02:07:59.199 align:start position:0%
have the numbers 1 through 20. so if i
 

02:07:59.199 --> 02:08:01.750 align:start position:0%
have the numbers 1 through 20. so if i
would<02:07:59.360><c> like</c><02:07:59.599><c> to</c><02:07:59.840><c> skip</c><02:08:00.239><c> the</c><02:08:00.400><c> number</c><02:08:00.719><c> 13</c><02:08:01.360><c> i</c><02:08:01.520><c> can</c>

02:08:01.750 --> 02:08:01.760 align:start position:0%
would like to skip the number 13 i can
 

02:08:01.760 --> 02:08:03.750 align:start position:0%
would like to skip the number 13 i can
use<02:08:02.079><c> a</c><02:08:02.239><c> continue</c><02:08:02.719><c> statement</c><02:08:03.119><c> but</c><02:08:03.360><c> we</c><02:08:03.440><c> need</c><02:08:03.599><c> to</c>

02:08:03.750 --> 02:08:03.760 align:start position:0%
use a continue statement but we need to
 

02:08:03.760 --> 02:08:06.870 align:start position:0%
use a continue statement but we need to
check<02:08:04.000><c> to</c><02:08:04.159><c> see</c><02:08:04.480><c> if</c><02:08:04.719><c> i</c><02:08:05.040><c> is</c><02:08:05.280><c> equal</c><02:08:05.520><c> to</c><02:08:05.679><c> 13</c><02:08:06.560><c> we</c><02:08:06.719><c> can</c>

02:08:06.870 --> 02:08:06.880 align:start position:0%
check to see if i is equal to 13 we can
 

02:08:06.880 --> 02:08:09.669 align:start position:0%
check to see if i is equal to 13 we can
use<02:08:07.199><c> an</c><02:08:07.360><c> if</c><02:08:07.599><c> statement</c>

02:08:09.669 --> 02:08:09.679 align:start position:0%
use an if statement
 

02:08:09.679 --> 02:08:10.470 align:start position:0%
use an if statement
so

02:08:10.470 --> 02:08:10.480 align:start position:0%
so
 

02:08:10.480 --> 02:08:13.030 align:start position:0%
so
if<02:08:10.880><c> i</c><02:08:11.360><c> is</c><02:08:11.599><c> equal</c><02:08:11.840><c> to</c><02:08:12.000><c> 13</c>

02:08:13.030 --> 02:08:13.040 align:start position:0%
if i is equal to 13
 

02:08:13.040 --> 02:08:16.229 align:start position:0%
if i is equal to 13
then<02:08:13.280><c> we</c><02:08:13.440><c> will</c><02:08:14.000><c> continue</c>

02:08:16.229 --> 02:08:16.239 align:start position:0%
then we will continue
 

02:08:16.239 --> 02:08:17.910 align:start position:0%
then we will continue
and<02:08:16.480><c> let's</c><02:08:16.719><c> take</c><02:08:16.960><c> a</c><02:08:17.040><c> look</c><02:08:17.280><c> so</c><02:08:17.440><c> we</c><02:08:17.599><c> have</c><02:08:17.760><c> the</c>

02:08:17.910 --> 02:08:17.920 align:start position:0%
and let's take a look so we have the
 

02:08:17.920 --> 02:08:21.270 align:start position:0%
and let's take a look so we have the
numbers<02:08:18.400><c> 1</c><02:08:19.040><c> through</c><02:08:19.360><c> 20</c><02:08:20.079><c> but</c><02:08:20.320><c> we</c><02:08:20.560><c> are</c><02:08:20.719><c> missing</c>

02:08:21.270 --> 02:08:21.280 align:start position:0%
numbers 1 through 20 but we are missing
 

02:08:21.280 --> 02:08:24.310 align:start position:0%
numbers 1 through 20 but we are missing
13<02:08:22.079><c> so</c><02:08:22.400><c> a</c><02:08:22.560><c> continue</c><02:08:23.040><c> statement</c><02:08:23.599><c> will</c><02:08:23.760><c> skip</c><02:08:24.159><c> the</c>

02:08:24.310 --> 02:08:24.320 align:start position:0%
13 so a continue statement will skip the
 

02:08:24.320 --> 02:08:26.950 align:start position:0%
13 so a continue statement will skip the
rest<02:08:24.639><c> of</c><02:08:24.880><c> a</c><02:08:25.040><c> section</c><02:08:25.360><c> of</c><02:08:25.520><c> code</c><02:08:26.159><c> and</c><02:08:26.480><c> force</c><02:08:26.800><c> the</c>

02:08:26.950 --> 02:08:26.960 align:start position:0%
rest of a section of code and force the
 

02:08:26.960 --> 02:08:29.669 align:start position:0%
rest of a section of code and force the
next<02:08:27.280><c> iteration</c><02:08:27.920><c> of</c><02:08:28.079><c> a</c><02:08:28.159><c> loop</c><02:08:28.800><c> now</c><02:08:29.040><c> if</c><02:08:29.199><c> this</c><02:08:29.360><c> was</c>

02:08:29.669 --> 02:08:29.679 align:start position:0%
next iteration of a loop now if this was
 

02:08:29.679 --> 02:08:31.910 align:start position:0%
next iteration of a loop now if this was
a<02:08:29.920><c> break</c><02:08:30.159><c> statement</c><02:08:30.880><c> this</c><02:08:31.119><c> will</c><02:08:31.360><c> break</c><02:08:31.679><c> out</c><02:08:31.840><c> of</c>

02:08:31.910 --> 02:08:31.920 align:start position:0%
a break statement this will break out of
 

02:08:31.920 --> 02:08:36.550 align:start position:0%
a break statement this will break out of
our<02:08:32.079><c> loop</c><02:08:32.400><c> entirely</c><02:08:33.360><c> so</c><02:08:33.599><c> once</c><02:08:34.079><c> we</c><02:08:34.320><c> reach</c><02:08:34.960><c> 13</c>

02:08:36.550 --> 02:08:36.560 align:start position:0%
our loop entirely so once we reach 13
 

02:08:36.560 --> 02:08:38.390 align:start position:0%
our loop entirely so once we reach 13
then<02:08:36.800><c> we</c><02:08:36.960><c> will</c><02:08:37.199><c> exit</c><02:08:37.599><c> out</c><02:08:37.760><c> of</c><02:08:37.920><c> this</c><02:08:38.079><c> loop</c>

02:08:38.390 --> 02:08:38.400 align:start position:0%
then we will exit out of this loop
 

02:08:38.400 --> 02:08:40.550 align:start position:0%
then we will exit out of this loop
entirely<02:08:39.280><c> so</c><02:08:39.520><c> here</c><02:08:39.760><c> we</c><02:08:40.000><c> only</c><02:08:40.239><c> have</c><02:08:40.400><c> the</c>

02:08:40.550 --> 02:08:40.560 align:start position:0%
entirely so here we only have the
 

02:08:40.560 --> 02:08:43.830 align:start position:0%
entirely so here we only have the
numbers<02:08:41.280><c> 1</c><02:08:41.840><c> through</c><02:08:42.159><c> 12</c><02:08:42.880><c> and</c><02:08:42.960><c> then</c><02:08:43.199><c> we</c><02:08:43.440><c> break</c>

02:08:43.830 --> 02:08:43.840 align:start position:0%
numbers 1 through 12 and then we break
 

02:08:43.840 --> 02:08:45.990 align:start position:0%
numbers 1 through 12 and then we break
we<02:08:44.000><c> exit</c><02:08:44.400><c> out</c><02:08:44.480><c> of</c><02:08:44.639><c> the</c><02:08:44.719><c> loop</c><02:08:45.280><c> so</c><02:08:45.520><c> that's</c><02:08:45.840><c> a</c>

02:08:45.990 --> 02:08:46.000 align:start position:0%
we exit out of the loop so that's a
 

02:08:46.000 --> 02:08:47.910 align:start position:0%
we exit out of the loop so that's a
quick<02:08:46.320><c> demonstration</c><02:08:47.119><c> of</c><02:08:47.280><c> the</c><02:08:47.360><c> differences</c>

02:08:47.910 --> 02:08:47.920 align:start position:0%
quick demonstration of the differences
 

02:08:47.920 --> 02:08:50.629 align:start position:0%
quick demonstration of the differences
between<02:08:48.400><c> continue</c><02:08:49.119><c> and</c><02:08:49.440><c> break</c><02:08:50.000><c> the</c><02:08:50.159><c> continue</c>

02:08:50.629 --> 02:08:50.639 align:start position:0%
between continue and break the continue
 

02:08:50.639 --> 02:08:52.310 align:start position:0%
between continue and break the continue
statement<02:08:51.119><c> will</c><02:08:51.360><c> skip</c><02:08:51.679><c> the</c><02:08:51.840><c> rest</c><02:08:52.079><c> of</c><02:08:52.239><c> a</c>

02:08:52.310 --> 02:08:52.320 align:start position:0%
statement will skip the rest of a
 

02:08:52.320 --> 02:08:54.390 align:start position:0%
statement will skip the rest of a
section<02:08:52.719><c> of</c><02:08:52.880><c> code</c><02:08:53.360><c> and</c><02:08:53.599><c> force</c><02:08:53.920><c> the</c><02:08:54.079><c> next</c>

02:08:54.390 --> 02:08:54.400 align:start position:0%
section of code and force the next
 

02:08:54.400 --> 02:08:56.790 align:start position:0%
section of code and force the next
iteration<02:08:54.880><c> of</c><02:08:55.040><c> a</c><02:08:55.119><c> loop</c><02:08:55.520><c> a</c><02:08:55.760><c> break</c><02:08:56.079><c> statement</c>

02:08:56.790 --> 02:08:56.800 align:start position:0%
iteration of a loop a break statement
 

02:08:56.800 --> 02:08:59.350 align:start position:0%
iteration of a loop a break statement
exits<02:08:57.280><c> out</c><02:08:57.440><c> of</c><02:08:57.599><c> a</c><02:08:57.679><c> loop</c><02:08:58.000><c> entirely</c><02:08:58.880><c> so</c><02:08:59.119><c> yeah</c>

02:08:59.350 --> 02:08:59.360 align:start position:0%
exits out of a loop entirely so yeah
 

02:08:59.360 --> 02:09:01.109 align:start position:0%
exits out of a loop entirely so yeah
that's<02:08:59.679><c> a</c><02:08:59.920><c> super</c><02:09:00.239><c> quick</c><02:09:00.480><c> video</c><02:09:00.880><c> on</c><02:09:01.040><c> the</c>

02:09:01.109 --> 02:09:01.119 align:start position:0%
that's a super quick video on the
 

02:09:01.119 --> 02:09:03.270 align:start position:0%
that's a super quick video on the
differences<02:09:01.760><c> between</c><02:09:02.239><c> the</c><02:09:02.400><c> continue</c><02:09:03.040><c> and</c>

02:09:03.270 --> 02:09:03.280 align:start position:0%
differences between the continue and
 

02:09:03.280 --> 02:09:04.950 align:start position:0%
differences between the continue and
break<02:09:03.599><c> statements</c><02:09:04.400><c> if</c><02:09:04.480><c> you</c><02:09:04.639><c> would</c><02:09:04.719><c> like</c><02:09:04.880><c> a</c>

02:09:04.950 --> 02:09:04.960 align:start position:0%
break statements if you would like a
 

02:09:04.960 --> 02:09:06.709 align:start position:0%
break statements if you would like a
copy<02:09:05.280><c> of</c><02:09:05.360><c> this</c><02:09:05.520><c> code</c><02:09:05.840><c> i'll</c><02:09:06.000><c> post</c><02:09:06.320><c> this</c><02:09:06.480><c> to</c><02:09:06.639><c> the</c>

02:09:06.709 --> 02:09:06.719 align:start position:0%
copy of this code i'll post this to the
 

02:09:06.719 --> 02:09:08.550 align:start position:0%
copy of this code i'll post this to the
comments<02:09:07.040><c> section</c><02:09:07.360><c> down</c><02:09:07.599><c> below</c><02:09:08.000><c> and</c><02:09:08.239><c> well</c>

02:09:08.550 --> 02:09:08.560 align:start position:0%
comments section down below and well
 

02:09:08.560 --> 02:09:10.149 align:start position:0%
comments section down below and well
yeah<02:09:08.880><c> those</c><02:09:09.119><c> are</c><02:09:09.280><c> the</c><02:09:09.360><c> major</c><02:09:09.679><c> differences</c>

02:09:10.149 --> 02:09:10.159 align:start position:0%
yeah those are the major differences
 

02:09:10.159 --> 02:09:11.750 align:start position:0%
yeah those are the major differences
between<02:09:10.480><c> the</c><02:09:10.719><c> continue</c><02:09:11.280><c> and</c><02:09:11.520><c> break</c>

02:09:11.750 --> 02:09:11.760 align:start position:0%
between the continue and break
 

02:09:11.760 --> 02:09:15.990 align:start position:0%
between the continue and break
statements<02:09:12.480><c> in</c><02:09:12.719><c> c</c>

02:09:15.990 --> 02:09:16.000 align:start position:0%
 
 

02:09:16.000 --> 02:09:18.390 align:start position:0%
 
hey<02:09:16.400><c> everybody</c><02:09:16.880><c> let's</c><02:09:17.119><c> talk</c><02:09:17.360><c> about</c><02:09:17.599><c> arrays</c><02:09:18.159><c> an</c>

02:09:18.390 --> 02:09:18.400 align:start position:0%
hey everybody let's talk about arrays an
 

02:09:18.400 --> 02:09:21.430 align:start position:0%
hey everybody let's talk about arrays an
array<02:09:18.880><c> is</c><02:09:19.199><c> a</c><02:09:19.440><c> data</c><02:09:19.760><c> structure</c><02:09:20.400><c> that</c><02:09:20.639><c> can</c><02:09:20.800><c> store</c>

02:09:21.430 --> 02:09:21.440 align:start position:0%
array is a data structure that can store
 

02:09:21.440 --> 02:09:24.069 align:start position:0%
array is a data structure that can store
many<02:09:21.840><c> values</c><02:09:22.480><c> of</c><02:09:22.639><c> the</c><02:09:22.880><c> same</c><02:09:23.199><c> data</c><02:09:23.520><c> type</c><02:09:23.840><c> here's</c>

02:09:24.069 --> 02:09:24.079 align:start position:0%
many values of the same data type here's
 

02:09:24.079 --> 02:09:26.550 align:start position:0%
many values of the same data type here's
an<02:09:24.239><c> example</c><02:09:24.719><c> let's</c><02:09:24.960><c> say</c><02:09:25.199><c> i</c><02:09:25.360><c> have</c><02:09:25.760><c> a</c><02:09:26.000><c> variable</c>

02:09:26.550 --> 02:09:26.560 align:start position:0%
an example let's say i have a variable
 

02:09:26.560 --> 02:09:28.629 align:start position:0%
an example let's say i have a variable
named<02:09:26.960><c> price</c><02:09:27.440><c> and</c><02:09:27.599><c> i</c><02:09:27.760><c> have</c><02:09:27.920><c> the</c><02:09:28.079><c> price</c><02:09:28.400><c> of</c>

02:09:28.629 --> 02:09:28.639 align:start position:0%
named price and i have the price of
 

02:09:28.639 --> 02:09:31.189 align:start position:0%
named price and i have the price of
maybe<02:09:29.040><c> one</c><02:09:29.360><c> item</c><02:09:29.760><c> in</c><02:09:30.000><c> a</c><02:09:30.159><c> fictional</c><02:09:30.639><c> store</c><02:09:31.040><c> of</c>

02:09:31.189 --> 02:09:31.199 align:start position:0%
maybe one item in a fictional store of
 

02:09:31.199 --> 02:09:33.350 align:start position:0%
maybe one item in a fictional store of
ours<02:09:31.599><c> so</c><02:09:31.840><c> by</c><02:09:32.079><c> using</c><02:09:32.400><c> an</c><02:09:32.560><c> array</c><02:09:32.960><c> we</c><02:09:33.119><c> can</c>

02:09:33.350 --> 02:09:33.360 align:start position:0%
ours so by using an array we can
 

02:09:33.360 --> 02:09:35.830 align:start position:0%
ours so by using an array we can
actually<02:09:33.840><c> store</c><02:09:34.400><c> more</c><02:09:34.639><c> than</c><02:09:34.880><c> one</c><02:09:35.199><c> value</c><02:09:35.679><c> but</c>

02:09:35.830 --> 02:09:35.840 align:start position:0%
actually store more than one value but
 

02:09:35.840 --> 02:09:38.069 align:start position:0%
actually store more than one value but
it<02:09:36.000><c> has</c><02:09:36.159><c> to</c><02:09:36.239><c> be</c><02:09:36.400><c> of</c><02:09:36.560><c> the</c><02:09:36.639><c> same</c><02:09:36.960><c> data</c><02:09:37.280><c> type</c><02:09:37.679><c> so</c><02:09:37.920><c> i</c>

02:09:38.069 --> 02:09:38.079 align:start position:0%
it has to be of the same data type so i
 

02:09:38.079 --> 02:09:40.470 align:start position:0%
it has to be of the same data type so i
can<02:09:38.320><c> turn</c><02:09:38.800><c> this</c><02:09:39.040><c> variable</c><02:09:39.599><c> price</c><02:09:40.079><c> into</c><02:09:40.320><c> an</c>

02:09:40.470 --> 02:09:40.480 align:start position:0%
can turn this variable price into an
 

02:09:40.480 --> 02:09:43.189 align:start position:0%
can turn this variable price into an
array<02:09:41.040><c> and</c><02:09:41.199><c> i</c><02:09:41.280><c> can</c><02:09:41.520><c> do</c><02:09:41.679><c> that</c><02:09:42.000><c> by</c><02:09:42.239><c> following</c><02:09:42.960><c> the</c>

02:09:43.189 --> 02:09:43.199 align:start position:0%
array and i can do that by following the
 

02:09:43.199 --> 02:09:45.510 align:start position:0%
array and i can do that by following the
name<02:09:43.440><c> of</c><02:09:43.440><c> the</c><02:09:43.599><c> variable</c><02:09:44.239><c> and</c><02:09:44.400><c> add</c><02:09:44.719><c> a</c><02:09:44.880><c> set</c><02:09:45.280><c> of</c>

02:09:45.510 --> 02:09:45.520 align:start position:0%
name of the variable and add a set of
 

02:09:45.520 --> 02:09:47.910 align:start position:0%
name of the variable and add a set of
straight<02:09:45.920><c> brackets</c><02:09:46.560><c> and</c><02:09:46.880><c> then</c><02:09:47.119><c> any</c><02:09:47.440><c> values</c><02:09:47.840><c> i</c>

02:09:47.910 --> 02:09:47.920 align:start position:0%
straight brackets and then any values i
 

02:09:47.920 --> 02:09:50.229 align:start position:0%
straight brackets and then any values i
would<02:09:48.079><c> like</c><02:09:48.320><c> to</c><02:09:48.480><c> add</c><02:09:48.880><c> to</c><02:09:49.040><c> this</c><02:09:49.280><c> array</c><02:09:49.920><c> i</c><02:09:50.000><c> will</c>

02:09:50.229 --> 02:09:50.239 align:start position:0%
would like to add to this array i will
 

02:09:50.239 --> 02:09:52.790 align:start position:0%
would like to add to this array i will
surround<02:09:50.639><c> with</c><02:09:50.880><c> a</c><02:09:51.040><c> set</c><02:09:51.280><c> of</c><02:09:51.440><c> curly</c><02:09:51.760><c> braces</c><02:09:52.719><c> and</c>

02:09:52.790 --> 02:09:52.800 align:start position:0%
surround with a set of curly braces and
 

02:09:52.800 --> 02:09:54.790 align:start position:0%
surround with a set of curly braces and
there<02:09:53.040><c> we</c><02:09:53.119><c> go</c><02:09:53.360><c> we</c><02:09:53.520><c> have</c><02:09:53.679><c> turned</c><02:09:54.079><c> our</c><02:09:54.239><c> variable</c>

02:09:54.790 --> 02:09:54.800 align:start position:0%
there we go we have turned our variable
 

02:09:54.800 --> 02:09:57.109 align:start position:0%
there we go we have turned our variable
price<02:09:55.280><c> into</c><02:09:55.679><c> an</c><02:09:55.840><c> array</c><02:09:56.480><c> but</c><02:09:56.639><c> i'm</c><02:09:56.800><c> going</c><02:09:56.960><c> to</c>

02:09:57.109 --> 02:09:57.119 align:start position:0%
price into an array but i'm going to
 

02:09:57.119 --> 02:09:59.350 align:start position:0%
price into an array but i'm going to
change<02:09:57.440><c> the</c><02:09:57.520><c> name</c><02:09:57.840><c> to</c><02:09:58.159><c> prices</c><02:09:58.880><c> because</c><02:09:59.280><c> i</c>

02:09:59.350 --> 02:09:59.360 align:start position:0%
change the name to prices because i
 

02:09:59.360 --> 02:10:01.109 align:start position:0%
change the name to prices because i
think<02:09:59.599><c> it</c><02:09:59.679><c> would</c><02:09:59.840><c> be</c><02:10:00.000><c> more</c><02:10:00.159><c> descriptive</c>

02:10:01.109 --> 02:10:01.119 align:start position:0%
think it would be more descriptive
 

02:10:01.119 --> 02:10:03.430 align:start position:0%
think it would be more descriptive
because<02:10:01.440><c> we</c><02:10:01.599><c> can</c><02:10:01.760><c> store</c><02:10:02.239><c> more</c><02:10:02.480><c> than</c><02:10:02.719><c> one</c><02:10:02.960><c> value</c>

02:10:03.430 --> 02:10:03.440 align:start position:0%
because we can store more than one value
 

02:10:03.440 --> 02:10:06.149 align:start position:0%
because we can store more than one value
now<02:10:03.840><c> so</c><02:10:04.079><c> we</c><02:10:04.239><c> can</c><02:10:04.400><c> add</c><02:10:04.800><c> multiple</c><02:10:05.280><c> values</c><02:10:05.840><c> each</c>

02:10:06.149 --> 02:10:06.159 align:start position:0%
now so we can add multiple values each
 

02:10:06.159 --> 02:10:08.470 align:start position:0%
now so we can add multiple values each
separated<02:10:06.719><c> with</c><02:10:06.960><c> a</c><02:10:07.199><c> comma</c><02:10:07.760><c> so</c><02:10:07.920><c> let's</c><02:10:08.159><c> say</c><02:10:08.320><c> we</c>

02:10:08.470 --> 02:10:08.480 align:start position:0%
separated with a comma so let's say we
 

02:10:08.480 --> 02:10:11.430 align:start position:0%
separated with a comma so let's say we
have<02:10:08.800><c> another</c><02:10:09.199><c> price</c><02:10:09.599><c> that</c><02:10:09.840><c> is</c><02:10:10.000><c> 10</c>

02:10:11.430 --> 02:10:11.440 align:start position:0%
have another price that is 10
 

02:10:11.440 --> 02:10:13.030 align:start position:0%
have another price that is 10
15

02:10:13.030 --> 02:10:13.040 align:start position:0%
15
 

02:10:13.040 --> 02:10:16.550 align:start position:0%
15
25<02:10:14.000><c> and</c><02:10:14.800><c> maybe</c><02:10:15.199><c> 20.</c><02:10:15.920><c> now</c><02:10:16.159><c> you</c><02:10:16.239><c> may</c><02:10:16.400><c> have</c>

02:10:16.550 --> 02:10:16.560 align:start position:0%
25 and maybe 20. now you may have
 

02:10:16.560 --> 02:10:18.950 align:start position:0%
25 and maybe 20. now you may have
noticed<02:10:17.119><c> some</c><02:10:17.360><c> parallels</c><02:10:18.000><c> when</c><02:10:18.159><c> we</c><02:10:18.400><c> create</c><02:10:18.800><c> a</c>

02:10:18.950 --> 02:10:18.960 align:start position:0%
noticed some parallels when we create a
 

02:10:18.960 --> 02:10:20.470 align:start position:0%
noticed some parallels when we create a
string<02:10:19.440><c> it's</c><02:10:19.599><c> really</c><02:10:19.840><c> an</c><02:10:20.000><c> array</c><02:10:20.320><c> of</c>

02:10:20.470 --> 02:10:20.480 align:start position:0%
string it's really an array of
 

02:10:20.480 --> 02:10:22.950 align:start position:0%
string it's really an array of
characters<02:10:21.280><c> so</c><02:10:21.520><c> if</c><02:10:21.679><c> i</c><02:10:21.840><c> need</c><02:10:22.079><c> a</c><02:10:22.320><c> name</c><02:10:22.639><c> we</c><02:10:22.800><c> would</c>

02:10:22.950 --> 02:10:22.960 align:start position:0%
characters so if i need a name we would
 

02:10:22.960 --> 02:10:25.030 align:start position:0%
characters so if i need a name we would
say<02:10:23.280><c> the</c><02:10:23.440><c> data</c><02:10:23.679><c> type</c><02:10:24.000><c> is</c><02:10:24.159><c> char</c>

02:10:25.030 --> 02:10:25.040 align:start position:0%
say the data type is char
 

02:10:25.040 --> 02:10:27.350 align:start position:0%
say the data type is char
and<02:10:25.199><c> we</c><02:10:25.360><c> will</c><02:10:25.599><c> create</c><02:10:26.000><c> a</c><02:10:26.320><c> name</c><02:10:26.560><c> array</c><02:10:27.040><c> followed</c>

02:10:27.350 --> 02:10:27.360 align:start position:0%
and we will create a name array followed
 

02:10:27.360 --> 02:10:29.830 align:start position:0%
and we will create a name array followed
by<02:10:27.679><c> a</c><02:10:27.840><c> set</c><02:10:28.159><c> of</c><02:10:28.320><c> square</c><02:10:28.639><c> brackets</c><02:10:29.360><c> and</c><02:10:29.520><c> i</c><02:10:29.599><c> will</c>

02:10:29.830 --> 02:10:29.840 align:start position:0%
by a set of square brackets and i will
 

02:10:29.840 --> 02:10:32.069 align:start position:0%
by a set of square brackets and i will
set<02:10:30.000><c> this</c><02:10:30.320><c> equal</c><02:10:30.800><c> to</c><02:10:31.199><c> some</c><02:10:31.599><c> amount</c><02:10:31.920><c> of</c>

02:10:32.069 --> 02:10:32.079 align:start position:0%
set this equal to some amount of
 

02:10:32.079 --> 02:10:34.629 align:start position:0%
set this equal to some amount of
characters<02:10:33.119><c> a</c><02:10:33.280><c> string</c><02:10:33.679><c> is</c><02:10:33.840><c> really</c><02:10:34.159><c> just</c><02:10:34.480><c> an</c>

02:10:34.629 --> 02:10:34.639 align:start position:0%
characters a string is really just an
 

02:10:34.639 --> 02:10:37.109 align:start position:0%
characters a string is really just an
array<02:10:35.040><c> of</c><02:10:35.280><c> individual</c><02:10:35.840><c> characters</c><02:10:36.719><c> and</c><02:10:36.880><c> with</c>

02:10:37.109 --> 02:10:37.119 align:start position:0%
array of individual characters and with
 

02:10:37.119 --> 02:10:39.750 align:start position:0%
array of individual characters and with
my<02:10:37.280><c> name</c><02:10:37.520><c> here</c><02:10:37.920><c> i</c><02:10:38.079><c> have</c><02:10:38.560><c> three</c><02:10:39.040><c> individual</c>

02:10:39.750 --> 02:10:39.760 align:start position:0%
my name here i have three individual
 

02:10:39.760 --> 02:10:42.550 align:start position:0%
my name here i have three individual
elements<02:10:40.320><c> three</c><02:10:40.639><c> individual</c><02:10:41.199><c> values</c><02:10:42.079><c> now</c><02:10:42.400><c> if</c>

02:10:42.550 --> 02:10:42.560 align:start position:0%
elements three individual values now if
 

02:10:42.560 --> 02:10:45.109 align:start position:0%
elements three individual values now if
i<02:10:42.639><c> need</c><02:10:42.880><c> to</c><02:10:43.119><c> access</c><02:10:43.760><c> one</c><02:10:44.000><c> of</c><02:10:44.079><c> these</c><02:10:44.400><c> values</c><02:10:45.040><c> i</c>

02:10:45.109 --> 02:10:45.119 align:start position:0%
i need to access one of these values i
 

02:10:45.119 --> 02:10:47.589 align:start position:0%
i need to access one of these values i
need<02:10:45.360><c> to</c><02:10:45.520><c> use</c><02:10:46.000><c> an</c><02:10:46.239><c> index</c><02:10:46.639><c> number</c><02:10:47.199><c> so</c><02:10:47.360><c> let's</c>

02:10:47.589 --> 02:10:47.599 align:start position:0%
need to use an index number so let's
 

02:10:47.599 --> 02:10:49.990 align:start position:0%
need to use an index number so let's
print<02:10:47.840><c> one</c><02:10:48.000><c> of</c><02:10:48.079><c> these</c><02:10:48.320><c> numbers</c>

02:10:49.990 --> 02:10:50.000 align:start position:0%
print one of these numbers
 

02:10:50.000 --> 02:10:51.669 align:start position:0%
print one of these numbers
so<02:10:50.239><c> printf</c>

02:10:51.669 --> 02:10:51.679 align:start position:0%
so printf
 

02:10:51.679 --> 02:10:53.830 align:start position:0%
so printf
i'm<02:10:51.840><c> going</c><02:10:52.079><c> to</c><02:10:52.239><c> use</c><02:10:52.480><c> the</c><02:10:52.719><c> format</c><02:10:53.040><c> specifier</c>

02:10:53.830 --> 02:10:53.840 align:start position:0%
i'm going to use the format specifier
 

02:10:53.840 --> 02:10:56.229 align:start position:0%
i'm going to use the format specifier
for<02:10:54.079><c> a</c><02:10:54.239><c> double</c><02:10:54.800><c> and</c><02:10:54.960><c> i'm</c><02:10:55.199><c> going</c><02:10:55.360><c> to</c><02:10:55.599><c> list</c><02:10:56.000><c> my</c>

02:10:56.229 --> 02:10:56.239 align:start position:0%
for a double and i'm going to list my
 

02:10:56.239 --> 02:10:57.350 align:start position:0%
for a double and i'm going to list my
array<02:10:56.560><c> name</c>

02:10:57.350 --> 02:10:57.360 align:start position:0%
array name
 

02:10:57.360 --> 02:10:59.910 align:start position:0%
array name
prices<02:10:58.320><c> then</c><02:10:58.639><c> follow</c><02:10:58.960><c> this</c><02:10:59.280><c> with</c><02:10:59.520><c> a</c><02:10:59.599><c> set</c><02:10:59.840><c> of</c>

02:10:59.910 --> 02:10:59.920 align:start position:0%
prices then follow this with a set of
 

02:10:59.920 --> 02:11:02.470 align:start position:0%
prices then follow this with a set of
straight<02:11:00.239><c> brackets</c><02:11:01.119><c> then</c><02:11:01.440><c> i</c><02:11:01.599><c> need</c><02:11:01.840><c> an</c><02:11:02.079><c> index</c>

02:11:02.470 --> 02:11:02.480 align:start position:0%
straight brackets then i need an index
 

02:11:02.480 --> 02:11:05.109 align:start position:0%
straight brackets then i need an index
number<02:11:03.119><c> so</c><02:11:03.440><c> each</c><02:11:03.679><c> spot</c><02:11:04.079><c> within</c><02:11:04.400><c> an</c><02:11:04.560><c> array</c><02:11:04.960><c> is</c>

02:11:05.109 --> 02:11:05.119 align:start position:0%
number so each spot within an array is
 

02:11:05.119 --> 02:11:07.750 align:start position:0%
number so each spot within an array is
known<02:11:05.440><c> as</c><02:11:05.599><c> an</c><02:11:05.760><c> element</c><02:11:06.400><c> so</c><02:11:06.639><c> we</c><02:11:06.800><c> have</c><02:11:07.280><c> five</c>

02:11:07.750 --> 02:11:07.760 align:start position:0%
known as an element so we have five
 

02:11:07.760 --> 02:11:10.470 align:start position:0%
known as an element so we have five
elements<02:11:08.159><c> within</c><02:11:08.639><c> our</c><02:11:08.800><c> array</c><02:11:09.440><c> and</c><02:11:09.679><c> to</c><02:11:09.920><c> access</c>

02:11:10.470 --> 02:11:10.480 align:start position:0%
elements within our array and to access
 

02:11:10.480 --> 02:11:12.310 align:start position:0%
elements within our array and to access
one<02:11:10.639><c> of</c><02:11:10.719><c> these</c><02:11:10.960><c> elements</c><02:11:11.440><c> i</c><02:11:11.520><c> need</c><02:11:11.679><c> to</c><02:11:11.840><c> list</c><02:11:12.079><c> an</c>

02:11:12.310 --> 02:11:12.320 align:start position:0%
one of these elements i need to list an
 

02:11:12.320 --> 02:11:14.790 align:start position:0%
one of these elements i need to list an
index<02:11:12.719><c> number</c><02:11:13.280><c> the</c><02:11:13.440><c> first</c><02:11:13.760><c> element</c><02:11:14.400><c> has</c><02:11:14.560><c> an</c>

02:11:14.790 --> 02:11:14.800 align:start position:0%
index number the first element has an
 

02:11:14.800 --> 02:11:17.109 align:start position:0%
index number the first element has an
index<02:11:15.119><c> number</c><02:11:15.599><c> of</c><02:11:15.840><c> zero</c><02:11:16.239><c> because</c><02:11:16.639><c> computers</c>

02:11:17.109 --> 02:11:17.119 align:start position:0%
index number of zero because computers
 

02:11:17.119 --> 02:11:19.669 align:start position:0%
index number of zero because computers
always<02:11:17.440><c> start</c><02:11:17.599><c> with</c><02:11:17.840><c> zero</c><02:11:18.480><c> so</c><02:11:18.719><c> if</c><02:11:18.960><c> i</c><02:11:19.040><c> display</c>

02:11:19.669 --> 02:11:19.679 align:start position:0%
always start with zero so if i display
 

02:11:19.679 --> 02:11:22.149 align:start position:0%
always start with zero so if i display
prices<02:11:20.320><c> at</c><02:11:20.560><c> index</c><02:11:21.040><c> zero</c>

02:11:22.149 --> 02:11:22.159 align:start position:0%
prices at index zero
 

02:11:22.159 --> 02:11:23.990 align:start position:0%
prices at index zero
this<02:11:22.400><c> contains</c><02:11:22.880><c> the</c><02:11:22.960><c> number</c><02:11:23.280><c> five</c><02:11:23.760><c> i'm</c>

02:11:23.990 --> 02:11:24.000 align:start position:0%
this contains the number five i'm
 

02:11:24.000 --> 02:11:25.669 align:start position:0%
this contains the number five i'm
actually<02:11:24.239><c> going</c><02:11:24.400><c> to</c><02:11:24.480><c> format</c><02:11:24.880><c> this</c><02:11:25.360><c> let's</c>

02:11:25.669 --> 02:11:25.679 align:start position:0%
actually going to format this let's
 

02:11:25.679 --> 02:11:28.149 align:start position:0%
actually going to format this let's
display<02:11:26.159><c> it</c><02:11:26.320><c> two</c><02:11:26.560><c> digits</c><02:11:26.960><c> after</c><02:11:27.199><c> the</c><02:11:27.280><c> decimal</c>

02:11:28.149 --> 02:11:28.159 align:start position:0%
display it two digits after the decimal
 

02:11:28.159 --> 02:11:29.750 align:start position:0%
display it two digits after the decimal
and<02:11:28.320><c> i'll</c><02:11:28.560><c> precede</c><02:11:28.960><c> this</c><02:11:29.119><c> number</c><02:11:29.440><c> with</c><02:11:29.679><c> a</c>

02:11:29.750 --> 02:11:29.760 align:start position:0%
and i'll precede this number with a
 

02:11:29.760 --> 02:11:31.350 align:start position:0%
and i'll precede this number with a
dollar<02:11:30.159><c> sign</c>

02:11:31.350 --> 02:11:31.360 align:start position:0%
dollar sign
 

02:11:31.360 --> 02:11:33.350 align:start position:0%
dollar sign
much<02:11:31.679><c> better</c><02:11:32.159><c> all</c><02:11:32.320><c> right</c><02:11:32.639><c> so</c><02:11:32.800><c> then</c><02:11:33.040><c> if</c><02:11:33.199><c> i</c>

02:11:33.350 --> 02:11:33.360 align:start position:0%
much better all right so then if i
 

02:11:33.360 --> 02:11:36.149 align:start position:0%
much better all right so then if i
display<02:11:33.920><c> prices</c><02:11:34.480><c> at</c><02:11:34.639><c> index</c><02:11:35.119><c> one</c><02:11:35.760><c> that</c><02:11:36.000><c> is</c>

02:11:36.149 --> 02:11:36.159 align:start position:0%
display prices at index one that is
 

02:11:36.159 --> 02:11:38.229 align:start position:0%
display prices at index one that is
technically<02:11:36.800><c> our</c><02:11:36.960><c> second</c><02:11:37.199><c> number</c><02:11:37.840><c> of</c><02:11:38.000><c> ten</c>

02:11:38.229 --> 02:11:38.239 align:start position:0%
technically our second number of ten
 

02:11:38.239 --> 02:11:39.830 align:start position:0%
technically our second number of ten
dollars

02:11:39.830 --> 02:11:39.840 align:start position:0%
dollars
 

02:11:39.840 --> 02:11:41.910 align:start position:0%
dollars
so<02:11:40.079><c> prices</c><02:11:40.560><c> at</c><02:11:40.719><c> index</c><02:11:41.119><c> two</c>

02:11:41.910 --> 02:11:41.920 align:start position:0%
so prices at index two
 

02:11:41.920 --> 02:11:44.629 align:start position:0%
so prices at index two
is<02:11:42.159><c> fifteen</c><02:11:42.960><c> three</c>

02:11:44.629 --> 02:11:44.639 align:start position:0%
is fifteen three
 

02:11:44.639 --> 02:11:46.709 align:start position:0%
is fifteen three
is<02:11:44.800><c> twenty</c><02:11:45.119><c> five</c>

02:11:46.709 --> 02:11:46.719 align:start position:0%
is twenty five
 

02:11:46.719 --> 02:11:49.270 align:start position:0%
is twenty five
and<02:11:47.119><c> four</c><02:11:47.520><c> which</c><02:11:47.760><c> is</c><02:11:47.920><c> our</c><02:11:48.079><c> last</c><02:11:48.320><c> element</c>

02:11:49.270 --> 02:11:49.280 align:start position:0%
and four which is our last element
 

02:11:49.280 --> 02:11:52.229 align:start position:0%
and four which is our last element
is<02:11:49.520><c> twenty</c><02:11:50.079><c> so</c><02:11:50.320><c> arrays</c><02:11:50.960><c> they</c><02:11:51.119><c> have</c><02:11:51.360><c> a</c><02:11:51.679><c> fixed</c>

02:11:52.229 --> 02:11:52.239 align:start position:0%
is twenty so arrays they have a fixed
 

02:11:52.239 --> 02:11:54.790 align:start position:0%
is twenty so arrays they have a fixed
size<02:11:52.960><c> we</c><02:11:53.119><c> can't</c><02:11:53.440><c> change</c><02:11:53.760><c> the</c><02:11:53.920><c> size</c><02:11:54.320><c> after</c><02:11:54.639><c> we</c>

02:11:54.790 --> 02:11:54.800 align:start position:0%
size we can't change the size after we
 

02:11:54.800 --> 02:11:56.950 align:start position:0%
size we can't change the size after we
compile<02:11:55.280><c> and</c><02:11:55.440><c> run</c><02:11:55.679><c> our</c><02:11:55.840><c> program</c><02:11:56.560><c> another</c>

02:11:56.950 --> 02:11:56.960 align:start position:0%
compile and run our program another
 

02:11:56.960 --> 02:11:58.790 align:start position:0%
compile and run our program another
thing<02:11:57.119><c> that</c><02:11:57.199><c> you</c><02:11:57.360><c> can</c><02:11:57.440><c> do</c><02:11:57.679><c> too</c><02:11:58.079><c> if</c><02:11:58.159><c> you</c><02:11:58.400><c> do</c><02:11:58.560><c> not</c>

02:11:58.790 --> 02:11:58.800 align:start position:0%
thing that you can do too if you do not
 

02:11:58.800 --> 02:12:00.390 align:start position:0%
thing that you can do too if you do not
know<02:11:58.960><c> what</c><02:11:59.199><c> values</c><02:11:59.679><c> you</c><02:11:59.760><c> would</c><02:11:59.920><c> like</c><02:12:00.159><c> to</c>

02:12:00.390 --> 02:12:00.400 align:start position:0%
know what values you would like to
 

02:12:00.400 --> 02:12:02.229 align:start position:0%
know what values you would like to
initialize<02:12:00.960><c> your</c><02:12:01.199><c> array</c><02:12:01.520><c> with</c><02:12:02.000><c> you</c><02:12:02.079><c> can</c>

02:12:02.229 --> 02:12:02.239 align:start position:0%
initialize your array with you can
 

02:12:02.239 --> 02:12:03.990 align:start position:0%
initialize your array with you can
always<02:12:02.480><c> just</c><02:12:02.719><c> set</c><02:12:02.880><c> a</c><02:12:03.040><c> size</c><02:12:03.440><c> let's</c><02:12:03.599><c> say</c><02:12:03.760><c> i</c><02:12:03.840><c> would</c>

02:12:03.990 --> 02:12:04.000 align:start position:0%
always just set a size let's say i would
 

02:12:04.000 --> 02:12:06.709 align:start position:0%
always just set a size let's say i would
like<02:12:04.239><c> a</c><02:12:04.480><c> size</c><02:12:04.960><c> of</c><02:12:05.360><c> five</c><02:12:05.599><c> elements</c><02:12:06.320><c> but</c><02:12:06.560><c> then</c>

02:12:06.709 --> 02:12:06.719 align:start position:0%
like a size of five elements but then
 

02:12:06.719 --> 02:12:09.030 align:start position:0%
like a size of five elements but then
i'll<02:12:06.960><c> assign</c><02:12:07.280><c> some</c><02:12:07.520><c> values</c><02:12:08.000><c> later</c>

02:12:09.030 --> 02:12:09.040 align:start position:0%
i'll assign some values later
 

02:12:09.040 --> 02:12:11.030 align:start position:0%
i'll assign some values later
so<02:12:09.280><c> later</c><02:12:09.599><c> on</c><02:12:09.679><c> in</c><02:12:09.840><c> our</c><02:12:10.000><c> program</c><02:12:10.400><c> we</c><02:12:10.560><c> can</c><02:12:10.719><c> say</c>

02:12:11.030 --> 02:12:11.040 align:start position:0%
so later on in our program we can say
 

02:12:11.040 --> 02:12:12.149 align:start position:0%
so later on in our program we can say
prices

02:12:12.149 --> 02:12:12.159 align:start position:0%
prices
 

02:12:12.159 --> 02:12:14.950 align:start position:0%
prices
at<02:12:12.320><c> whatever</c><02:12:12.800><c> index</c><02:12:13.520><c> let's</c><02:12:13.760><c> say</c><02:12:14.000><c> index</c><02:12:14.320><c> zero</c>

02:12:14.950 --> 02:12:14.960 align:start position:0%
at whatever index let's say index zero
 

02:12:14.960 --> 02:12:17.910 align:start position:0%
at whatever index let's say index zero
i'm<02:12:15.199><c> going</c><02:12:15.360><c> to</c><02:12:15.599><c> assign</c><02:12:16.480><c> with</c><02:12:17.040><c> five</c><02:12:17.679><c> and</c><02:12:17.840><c> i'll</c>

02:12:17.910 --> 02:12:17.920 align:start position:0%
i'm going to assign with five and i'll
 

02:12:17.920 --> 02:12:20.870 align:start position:0%
i'm going to assign with five and i'll
do<02:12:18.079><c> the</c><02:12:18.159><c> same</c><02:12:18.400><c> thing</c><02:12:18.639><c> for</c><02:12:18.880><c> the</c><02:12:19.040><c> other</c><02:12:19.280><c> elements</c>

02:12:20.870 --> 02:12:20.880 align:start position:0%
do the same thing for the other elements
 

02:12:20.880 --> 02:12:25.589 align:start position:0%
do the same thing for the other elements
so<02:12:21.119><c> prices</c><02:12:21.679><c> at</c><02:12:21.840><c> index</c><02:12:22.239><c> one</c><02:12:22.719><c> is</c><02:12:23.040><c> maybe</c><02:12:23.360><c> ten</c>

02:12:25.589 --> 02:12:25.599 align:start position:0%
so prices at index one is maybe ten
 

02:12:25.599 --> 02:12:30.629 align:start position:0%
so prices at index one is maybe ten
prices<02:12:26.239><c> at</c><02:12:26.560><c> index</c><02:12:26.960><c> two</c><02:12:27.440><c> is</c><02:12:27.679><c> fifteen</c>

02:12:30.629 --> 02:12:30.639 align:start position:0%
 
 

02:12:30.639 --> 02:12:34.790 align:start position:0%
 
three<02:12:31.040><c> will</c><02:12:31.280><c> be</c><02:12:31.679><c> twenty</c><02:12:32.000><c> five</c>

02:12:34.790 --> 02:12:34.800 align:start position:0%
three will be twenty five
 

02:12:34.800 --> 02:12:37.430 align:start position:0%
three will be twenty five
and<02:12:35.199><c> 4</c><02:12:35.599><c> will</c><02:12:35.920><c> be</c><02:12:36.159><c> 20.</c>

02:12:37.430 --> 02:12:37.440 align:start position:0%
and 4 will be 20.
 

02:12:37.440 --> 02:12:38.950 align:start position:0%
and 4 will be 20.
that's<02:12:37.760><c> another</c><02:12:38.079><c> way</c><02:12:38.320><c> in</c><02:12:38.400><c> which</c><02:12:38.639><c> you</c><02:12:38.719><c> can</c>

02:12:38.950 --> 02:12:38.960 align:start position:0%
that's another way in which you can
 

02:12:38.960 --> 02:12:41.430 align:start position:0%
that's another way in which you can
initialize<02:12:39.599><c> an</c><02:12:39.760><c> array</c><02:12:40.480><c> you</c><02:12:40.639><c> can</c><02:12:40.800><c> always</c><02:12:41.119><c> set</c><02:12:41.360><c> a</c>

02:12:41.430 --> 02:12:41.440 align:start position:0%
initialize an array you can always set a
 

02:12:41.440 --> 02:12:44.470 align:start position:0%
initialize an array you can always set a
size<02:12:42.239><c> and</c><02:12:42.320><c> then</c><02:12:42.639><c> add</c><02:12:42.880><c> elements</c><02:12:43.280><c> later</c><02:12:44.079><c> another</c>

02:12:44.470 --> 02:12:44.480 align:start position:0%
size and then add elements later another
 

02:12:44.480 --> 02:12:46.629 align:start position:0%
size and then add elements later another
option<02:12:44.880><c> is</c><02:12:44.960><c> that</c><02:12:45.119><c> you</c><02:12:45.280><c> could</c><02:12:45.520><c> combine</c><02:12:45.920><c> the</c><02:12:46.079><c> two</c>

02:12:46.629 --> 02:12:46.639 align:start position:0%
option is that you could combine the two
 

02:12:46.639 --> 02:12:48.950 align:start position:0%
option is that you could combine the two
we<02:12:46.800><c> could</c><02:12:47.040><c> set</c><02:12:47.280><c> a</c><02:12:47.360><c> size</c><02:12:47.679><c> right</c><02:12:47.920><c> away</c><02:12:48.480><c> so</c><02:12:48.639><c> maybe</c>

02:12:48.950 --> 02:12:48.960 align:start position:0%
we could set a size right away so maybe
 

02:12:48.960 --> 02:12:51.589 align:start position:0%
we could set a size right away so maybe
prices<02:12:49.360><c> will</c><02:12:49.520><c> have</c><02:12:49.760><c> a</c><02:12:49.920><c> size</c><02:12:50.239><c> of</c><02:12:50.320><c> 10</c><02:12:50.880><c> and</c><02:12:51.119><c> we</c><02:12:51.280><c> can</c>

02:12:51.589 --> 02:12:51.599 align:start position:0%
prices will have a size of 10 and we can
 

02:12:51.599 --> 02:12:53.750 align:start position:0%
prices will have a size of 10 and we can
right<02:12:51.840><c> off</c><02:12:52.000><c> the</c><02:12:52.159><c> bat</c><02:12:52.800><c> assign</c><02:12:53.119><c> some</c><02:12:53.360><c> values</c>

02:12:53.750 --> 02:12:53.760 align:start position:0%
right off the bat assign some values
 

02:12:53.760 --> 02:12:56.229 align:start position:0%
right off the bat assign some values
right<02:12:53.920><c> away</c><02:12:54.560><c> so</c><02:12:54.719><c> we</c><02:12:54.880><c> have</c><02:12:55.280><c> five</c><02:12:55.599><c> elements</c><02:12:56.079><c> that</c>

02:12:56.229 --> 02:12:56.239 align:start position:0%
right away so we have five elements that
 

02:12:56.239 --> 02:12:58.069 align:start position:0%
right away so we have five elements that
are<02:12:56.400><c> currently</c><02:12:56.880><c> filled</c><02:12:57.360><c> but</c><02:12:57.520><c> then</c><02:12:57.679><c> the</c><02:12:57.840><c> other</c>

02:12:58.069 --> 02:12:58.079 align:start position:0%
are currently filled but then the other
 

02:12:58.079 --> 02:13:00.149 align:start position:0%
are currently filled but then the other
five<02:12:58.480><c> are</c><02:12:58.719><c> empty</c><02:12:59.440><c> so</c><02:12:59.599><c> there's</c><02:12:59.920><c> a</c><02:13:00.000><c> few</c>

02:13:00.149 --> 02:13:00.159 align:start position:0%
five are empty so there's a few
 

02:13:00.159 --> 02:13:01.270 align:start position:0%
five are empty so there's a few
different<02:13:00.400><c> ways</c><02:13:00.719><c> in</c><02:13:00.800><c> which</c><02:13:00.960><c> you</c><02:13:01.119><c> can</c>

02:13:01.270 --> 02:13:01.280 align:start position:0%
different ways in which you can
 

02:13:01.280 --> 02:13:03.350 align:start position:0%
different ways in which you can
initialize<02:13:01.920><c> an</c><02:13:02.079><c> array</c><02:13:02.639><c> so</c><02:13:02.880><c> yeah</c><02:13:03.119><c> that's</c>

02:13:03.350 --> 02:13:03.360 align:start position:0%
initialize an array so yeah that's
 

02:13:03.360 --> 02:13:05.669 align:start position:0%
initialize an array so yeah that's
basically<02:13:03.760><c> an</c><02:13:03.920><c> array</c><02:13:04.320><c> it's</c><02:13:04.560><c> a</c><02:13:04.880><c> data</c><02:13:05.199><c> structure</c>

02:13:05.669 --> 02:13:05.679 align:start position:0%
basically an array it's a data structure
 

02:13:05.679 --> 02:13:08.229 align:start position:0%
basically an array it's a data structure
that<02:13:05.840><c> can</c><02:13:06.079><c> store</c><02:13:06.639><c> many</c><02:13:06.960><c> values</c><02:13:07.599><c> of</c><02:13:07.760><c> the</c><02:13:07.920><c> same</c>

02:13:08.229 --> 02:13:08.239 align:start position:0%
that can store many values of the same
 

02:13:08.239 --> 02:13:10.470 align:start position:0%
that can store many values of the same
data<02:13:08.560><c> type</c><02:13:09.040><c> initializing</c><02:13:09.599><c> an</c><02:13:09.760><c> array</c><02:13:10.079><c> is</c><02:13:10.239><c> much</c>

02:13:10.470 --> 02:13:10.480 align:start position:0%
data type initializing an array is much
 

02:13:10.480 --> 02:13:12.550 align:start position:0%
data type initializing an array is much
like<02:13:10.639><c> creating</c><02:13:10.960><c> a</c><02:13:11.040><c> variable</c><02:13:11.920><c> except</c><02:13:12.320><c> you</c><02:13:12.400><c> will</c>

02:13:12.550 --> 02:13:12.560 align:start position:0%
like creating a variable except you will
 

02:13:12.560 --> 02:13:14.790 align:start position:0%
like creating a variable except you will
add<02:13:12.880><c> a</c><02:13:13.040><c> set</c><02:13:13.280><c> of</c><02:13:13.440><c> straight</c><02:13:13.760><c> brackets</c><02:13:14.159><c> after</c><02:13:14.719><c> and</c>

02:13:14.790 --> 02:13:14.800 align:start position:0%
add a set of straight brackets after and
 

02:13:14.800 --> 02:13:16.310 align:start position:0%
add a set of straight brackets after and
then<02:13:15.040><c> you</c><02:13:15.119><c> can</c><02:13:15.199><c> either</c><02:13:15.440><c> add</c><02:13:15.599><c> some</c><02:13:15.840><c> values</c>

02:13:16.310 --> 02:13:16.320 align:start position:0%
then you can either add some values
 

02:13:16.320 --> 02:13:18.470 align:start position:0%
then you can either add some values
right<02:13:16.480><c> away</c><02:13:17.040><c> or</c><02:13:17.280><c> later</c><02:13:17.520><c> on</c><02:13:17.679><c> in</c><02:13:17.760><c> your</c><02:13:17.920><c> program</c>

02:13:18.470 --> 02:13:18.480 align:start position:0%
right away or later on in your program
 

02:13:18.480 --> 02:13:21.030 align:start position:0%
right away or later on in your program
but<02:13:18.639><c> you</c><02:13:18.719><c> need</c><02:13:18.880><c> to</c><02:13:19.119><c> list</c><02:13:19.440><c> an</c><02:13:19.679><c> index</c><02:13:20.159><c> number</c><02:13:20.800><c> of</c>

02:13:21.030 --> 02:13:21.040 align:start position:0%
but you need to list an index number of
 

02:13:21.040 --> 02:13:22.790 align:start position:0%
but you need to list an index number of
where<02:13:21.280><c> you're</c><02:13:21.440><c> placing</c><02:13:21.840><c> a</c><02:13:22.000><c> value</c><02:13:22.320><c> within</c><02:13:22.639><c> the</c>

02:13:22.790 --> 02:13:22.800 align:start position:0%
where you're placing a value within the
 

02:13:22.800 --> 02:13:25.350 align:start position:0%
where you're placing a value within the
array<02:13:23.440><c> and</c><02:13:23.520><c> then</c><02:13:23.760><c> to</c><02:13:24.079><c> access</c><02:13:24.560><c> a</c><02:13:24.719><c> value</c><02:13:25.040><c> within</c>

02:13:25.350 --> 02:13:25.360 align:start position:0%
array and then to access a value within
 

02:13:25.360 --> 02:13:27.270 align:start position:0%
array and then to access a value within
your<02:13:25.520><c> array</c><02:13:26.000><c> you</c><02:13:26.239><c> type</c><02:13:26.480><c> the</c><02:13:26.639><c> array</c><02:13:26.960><c> name</c>

02:13:27.270 --> 02:13:27.280 align:start position:0%
your array you type the array name
 

02:13:27.280 --> 02:13:29.189 align:start position:0%
your array you type the array name
followed<02:13:27.679><c> by</c><02:13:27.840><c> an</c><02:13:28.000><c> index</c><02:13:28.320><c> number</c><02:13:28.800><c> kind</c><02:13:28.960><c> of</c><02:13:29.040><c> like</c>

02:13:29.189 --> 02:13:29.199 align:start position:0%
followed by an index number kind of like
 

02:13:29.199 --> 02:13:31.510 align:start position:0%
followed by an index number kind of like
a<02:13:29.280><c> parking</c><02:13:29.599><c> spot</c><02:13:29.920><c> number</c><02:13:30.560><c> so</c><02:13:30.800><c> yeah</c><02:13:31.040><c> those</c><02:13:31.360><c> are</c>

02:13:31.510 --> 02:13:31.520 align:start position:0%
a parking spot number so yeah those are
 

02:13:31.520 --> 02:13:33.189 align:start position:0%
a parking spot number so yeah those are
arrays<02:13:32.000><c> in</c><02:13:32.079><c> the</c><02:13:32.159><c> next</c><02:13:32.480><c> video</c><02:13:32.800><c> i'm</c><02:13:32.960><c> going</c><02:13:33.119><c> to</c>

02:13:33.189 --> 02:13:33.199 align:start position:0%
arrays in the next video i'm going to
 

02:13:33.199 --> 02:13:34.870 align:start position:0%
arrays in the next video i'm going to
show<02:13:33.360><c> you</c><02:13:33.599><c> how</c><02:13:33.760><c> we</c><02:13:33.840><c> can</c><02:13:34.079><c> iterate</c><02:13:34.480><c> over</c><02:13:34.719><c> the</c>

02:13:34.870 --> 02:13:34.880 align:start position:0%
show you how we can iterate over the
 

02:13:34.880 --> 02:13:37.510 align:start position:0%
show you how we can iterate over the
elements<02:13:35.360><c> in</c><02:13:35.520><c> an</c><02:13:35.679><c> array</c><02:13:36.079><c> using</c><02:13:36.480><c> a</c><02:13:36.639><c> for</c><02:13:36.880><c> loop</c><02:13:37.440><c> if</c>

02:13:37.510 --> 02:13:37.520 align:start position:0%
elements in an array using a for loop if
 

02:13:37.520 --> 02:13:39.030 align:start position:0%
elements in an array using a for loop if
you<02:13:37.679><c> would</c><02:13:37.760><c> like</c><02:13:37.920><c> a</c><02:13:38.000><c> copy</c><02:13:38.320><c> of</c><02:13:38.400><c> this</c><02:13:38.560><c> code</c><02:13:38.880><c> i</c>

02:13:39.030 --> 02:13:39.040 align:start position:0%
you would like a copy of this code i
 

02:13:39.040 --> 02:13:40.550 align:start position:0%
you would like a copy of this code i
will<02:13:39.199><c> post</c><02:13:39.440><c> this</c><02:13:39.599><c> to</c><02:13:39.760><c> the</c><02:13:39.840><c> comments</c><02:13:40.239><c> section</c>

02:13:40.550 --> 02:13:40.560 align:start position:0%
will post this to the comments section
 

02:13:40.560 --> 02:13:42.550 align:start position:0%
will post this to the comments section
down<02:13:40.800><c> below</c><02:13:41.199><c> and</c><02:13:41.440><c> well</c><02:13:41.840><c> yeah</c><02:13:42.239><c> that's</c><02:13:42.480><c> an</c>

02:13:42.550 --> 02:13:42.560 align:start position:0%
down below and well yeah that's an
 

02:13:42.560 --> 02:13:48.550 align:start position:0%
down below and well yeah that's an
introduction<02:13:43.199><c> to</c><02:13:43.440><c> arrays</c><02:13:44.079><c> in</c><02:13:44.320><c> c</c>

02:13:48.550 --> 02:13:48.560 align:start position:0%
 
 

02:13:48.560 --> 02:13:50.950 align:start position:0%
 
hey<02:13:48.960><c> welcome</c><02:13:49.280><c> back</c><02:13:49.520><c> everybody</c><02:13:50.239><c> in</c><02:13:50.400><c> this</c><02:13:50.639><c> video</c>

02:13:50.950 --> 02:13:50.960 align:start position:0%
hey welcome back everybody in this video
 

02:13:50.960 --> 02:13:52.470 align:start position:0%
hey welcome back everybody in this video
i'm<02:13:51.040><c> going</c><02:13:51.199><c> to</c><02:13:51.280><c> show</c><02:13:51.440><c> you</c><02:13:51.679><c> how</c><02:13:51.840><c> we</c><02:13:51.920><c> can</c><02:13:52.159><c> loop</c>

02:13:52.470 --> 02:13:52.480 align:start position:0%
i'm going to show you how we can loop
 

02:13:52.480 --> 02:13:54.310 align:start position:0%
i'm going to show you how we can loop
through<02:13:52.800><c> and</c><02:13:53.119><c> print</c><02:13:53.440><c> the</c><02:13:53.599><c> elements</c><02:13:54.079><c> of</c><02:13:54.159><c> an</c>

02:13:54.310 --> 02:13:54.320 align:start position:0%
through and print the elements of an
 

02:13:54.320 --> 02:13:57.030 align:start position:0%
through and print the elements of an
array<02:13:54.880><c> so</c><02:13:55.119><c> i</c><02:13:55.280><c> have</c><02:13:55.440><c> an</c><02:13:55.599><c> array</c><02:13:56.079><c> of</c><02:13:56.400><c> doubles</c>

02:13:57.030 --> 02:13:57.040 align:start position:0%
array so i have an array of doubles
 

02:13:57.040 --> 02:13:59.189 align:start position:0%
array so i have an array of doubles
named<02:13:57.520><c> prices</c><02:13:58.079><c> and</c><02:13:58.239><c> i</c><02:13:58.320><c> just</c><02:13:58.560><c> made</c><02:13:58.800><c> up</c><02:13:58.960><c> some</c>

02:13:59.189 --> 02:13:59.199 align:start position:0%
named prices and i just made up some
 

02:13:59.199 --> 02:14:01.830 align:start position:0%
named prices and i just made up some
fictional<02:13:59.760><c> prices</c><02:14:00.719><c> to</c><02:14:00.960><c> display</c><02:14:01.440><c> one</c><02:14:01.599><c> of</c><02:14:01.679><c> these</c>

02:14:01.830 --> 02:14:01.840 align:start position:0%
fictional prices to display one of these
 

02:14:01.840 --> 02:14:04.709 align:start position:0%
fictional prices to display one of these
elements<02:14:02.239><c> i</c><02:14:02.400><c> can</c><02:14:02.560><c> use</c><02:14:02.960><c> a</c><02:14:03.199><c> printf</c><02:14:03.840><c> statement</c><02:14:04.560><c> i</c>

02:14:04.709 --> 02:14:04.719 align:start position:0%
elements i can use a printf statement i
 

02:14:04.719 --> 02:14:06.470 align:start position:0%
elements i can use a printf statement i
will<02:14:04.960><c> use</c><02:14:05.360><c> the</c><02:14:05.520><c> appropriate</c><02:14:06.079><c> format</c>

02:14:06.470 --> 02:14:06.480 align:start position:0%
will use the appropriate format
 

02:14:06.480 --> 02:14:08.550 align:start position:0%
will use the appropriate format
specifier<02:14:07.280><c> for</c><02:14:07.520><c> the</c><02:14:07.679><c> elements</c><02:14:08.159><c> displayed</c>

02:14:08.550 --> 02:14:08.560 align:start position:0%
specifier for the elements displayed
 

02:14:08.560 --> 02:14:10.709 align:start position:0%
specifier for the elements displayed
within<02:14:08.960><c> this</c><02:14:09.199><c> array</c><02:14:09.840><c> since</c><02:14:10.159><c> this</c><02:14:10.400><c> array</c>

02:14:10.709 --> 02:14:10.719 align:start position:0%
within this array since this array
 

02:14:10.719 --> 02:14:12.950 align:start position:0%
within this array since this array
contains<02:14:11.280><c> doubles</c><02:14:11.679><c> i</c><02:14:11.840><c> will</c><02:14:12.079><c> use</c><02:14:12.400><c> the</c><02:14:12.560><c> format</c>

02:14:12.950 --> 02:14:12.960 align:start position:0%
contains doubles i will use the format
 

02:14:12.960 --> 02:14:15.589 align:start position:0%
contains doubles i will use the format
specifier<02:14:13.679><c> for</c><02:14:13.840><c> a</c><02:14:14.000><c> double</c><02:14:14.560><c> then</c><02:14:14.800><c> to</c><02:14:15.040><c> access</c>

02:14:15.589 --> 02:14:15.599 align:start position:0%
specifier for a double then to access
 

02:14:15.599 --> 02:14:17.109 align:start position:0%
specifier for a double then to access
one<02:14:15.760><c> of</c><02:14:15.840><c> these</c><02:14:16.000><c> elements</c><02:14:16.400><c> i</c><02:14:16.480><c> will</c><02:14:16.719><c> type</c><02:14:17.040><c> the</c>

02:14:17.109 --> 02:14:17.119 align:start position:0%
one of these elements i will type the
 

02:14:17.119 --> 02:14:19.189 align:start position:0%
one of these elements i will type the
name<02:14:17.360><c> of</c><02:14:17.440><c> my</c><02:14:17.599><c> array</c><02:14:18.239><c> followed</c><02:14:18.639><c> by</c><02:14:18.800><c> a</c><02:14:18.880><c> set</c><02:14:19.119><c> of</c>

02:14:19.189 --> 02:14:19.199 align:start position:0%
name of my array followed by a set of
 

02:14:19.199 --> 02:14:21.830 align:start position:0%
name of my array followed by a set of
straight<02:14:19.520><c> brackets</c><02:14:20.320><c> then</c><02:14:20.560><c> an</c><02:14:20.719><c> index</c><02:14:21.119><c> number</c>

02:14:21.830 --> 02:14:21.840 align:start position:0%
straight brackets then an index number
 

02:14:21.840 --> 02:14:24.390 align:start position:0%
straight brackets then an index number
so<02:14:22.079><c> the</c><02:14:22.239><c> first</c><02:14:22.639><c> element</c><02:14:23.119><c> in</c><02:14:23.280><c> an</c><02:14:23.440><c> array</c><02:14:23.840><c> is</c><02:14:24.000><c> zero</c>

02:14:24.390 --> 02:14:24.400 align:start position:0%
so the first element in an array is zero
 

02:14:24.400 --> 02:14:26.709 align:start position:0%
so the first element in an array is zero
because<02:14:24.719><c> computers</c><02:14:25.280><c> always</c><02:14:25.520><c> start</c><02:14:25.679><c> with</c><02:14:25.920><c> zero</c>

02:14:26.709 --> 02:14:26.719 align:start position:0%
because computers always start with zero
 

02:14:26.719 --> 02:14:28.229 align:start position:0%
because computers always start with zero
then<02:14:26.960><c> if</c><02:14:27.040><c> i</c><02:14:27.119><c> need</c><02:14:27.360><c> to</c><02:14:27.520><c> display</c><02:14:27.840><c> the</c><02:14:28.000><c> other</c>

02:14:28.229 --> 02:14:28.239 align:start position:0%
then if i need to display the other
 

02:14:28.239 --> 02:14:30.550 align:start position:0%
then if i need to display the other
elements<02:14:28.800><c> well</c><02:14:29.040><c> i</c><02:14:29.119><c> would</c><02:14:29.280><c> have</c><02:14:29.440><c> to</c><02:14:29.679><c> manually</c>

02:14:30.550 --> 02:14:30.560 align:start position:0%
elements well i would have to manually
 

02:14:30.560 --> 02:14:34.870 align:start position:0%
elements well i would have to manually
type<02:14:31.280><c> prices</c><02:14:31.840><c> at</c><02:14:32.000><c> index</c><02:14:32.480><c> zero</c><02:14:33.199><c> then</c><02:14:33.520><c> one</c><02:14:34.159><c> two</c>

02:14:34.870 --> 02:14:34.880 align:start position:0%
type prices at index zero then one two
 

02:14:34.880 --> 02:14:37.669 align:start position:0%
type prices at index zero then one two
three<02:14:35.520><c> four</c><02:14:36.000><c> so</c><02:14:36.239><c> on</c><02:14:36.400><c> and</c><02:14:36.480><c> so</c><02:14:36.719><c> forth</c><02:14:37.199><c> so</c><02:14:37.440><c> this</c>

02:14:37.669 --> 02:14:37.679 align:start position:0%
three four so on and so forth so this
 

02:14:37.679 --> 02:14:39.350 align:start position:0%
three four so on and so forth so this
does<02:14:37.920><c> work</c><02:14:38.159><c> if</c><02:14:38.320><c> you</c><02:14:38.400><c> have</c><02:14:38.639><c> a</c><02:14:38.719><c> couple</c><02:14:38.960><c> elements</c>

02:14:39.350 --> 02:14:39.360 align:start position:0%
does work if you have a couple elements
 

02:14:39.360 --> 02:14:41.189 align:start position:0%
does work if you have a couple elements
but<02:14:39.520><c> what</c><02:14:39.679><c> if</c><02:14:39.840><c> you</c><02:14:40.000><c> have</c><02:14:40.239><c> hundreds</c><02:14:40.960><c> this</c>

02:14:41.189 --> 02:14:41.199 align:start position:0%
but what if you have hundreds this
 

02:14:41.199 --> 02:14:43.270 align:start position:0%
but what if you have hundreds this
method<02:14:41.599><c> is</c><02:14:41.679><c> not</c><02:14:41.840><c> going</c><02:14:42.079><c> to</c><02:14:42.159><c> be</c><02:14:42.320><c> practical</c><02:14:43.040><c> a</c>

02:14:43.270 --> 02:14:43.280 align:start position:0%
method is not going to be practical a
 

02:14:43.280 --> 02:14:45.510 align:start position:0%
method is not going to be practical a
better<02:14:43.520><c> solution</c><02:14:44.239><c> is</c><02:14:44.400><c> that</c><02:14:44.639><c> we</c><02:14:44.800><c> could</c><02:14:45.199><c> make</c><02:14:45.360><c> a</c>

02:14:45.510 --> 02:14:45.520 align:start position:0%
better solution is that we could make a
 

02:14:45.520 --> 02:14:47.750 align:start position:0%
better solution is that we could make a
for<02:14:45.760><c> loop</c><02:14:46.159><c> and</c><02:14:46.239><c> this</c><02:14:46.480><c> for</c><02:14:46.800><c> loop</c><02:14:47.119><c> will</c><02:14:47.360><c> iterate</c>

02:14:47.750 --> 02:14:47.760 align:start position:0%
for loop and this for loop will iterate
 

02:14:47.760 --> 02:14:49.910 align:start position:0%
for loop and this for loop will iterate
once<02:14:48.159><c> and</c><02:14:48.320><c> display</c><02:14:48.880><c> each</c><02:14:49.199><c> element</c><02:14:49.599><c> of</c><02:14:49.679><c> this</c>

02:14:49.910 --> 02:14:49.920 align:start position:0%
once and display each element of this
 

02:14:49.920 --> 02:14:52.629 align:start position:0%
once and display each element of this
array<02:14:50.560><c> so</c><02:14:50.719><c> let's</c><02:14:50.960><c> create</c><02:14:51.199><c> a</c><02:14:51.280><c> for</c><02:14:51.520><c> loop</c><02:14:52.000><c> for</c>

02:14:52.629 --> 02:14:52.639 align:start position:0%
array so let's create a for loop for
 

02:14:52.639 --> 02:14:55.189 align:start position:0%
array so let's create a for loop for
parentheses<02:14:53.280><c> curly</c><02:14:53.679><c> braces</c><02:14:54.639><c> and</c><02:14:54.960><c> we'll</c><02:14:55.040><c> need</c>

02:14:55.189 --> 02:14:55.199 align:start position:0%
parentheses curly braces and we'll need
 

02:14:55.199 --> 02:14:57.830 align:start position:0%
parentheses curly braces and we'll need
an<02:14:55.440><c> index</c><02:14:56.000><c> int</c><02:14:56.400><c> i</c><02:14:56.800><c> i'll</c><02:14:56.960><c> set</c><02:14:57.119><c> this</c><02:14:57.360><c> equal</c><02:14:57.599><c> to</c>

02:14:57.830 --> 02:14:57.840 align:start position:0%
an index int i i'll set this equal to
 

02:14:57.840 --> 02:14:58.870 align:start position:0%
an index int i i'll set this equal to
zero

02:14:58.870 --> 02:14:58.880 align:start position:0%
zero
 

02:14:58.880 --> 02:15:00.629 align:start position:0%
zero
then<02:14:59.040><c> we'll</c><02:14:59.199><c> need</c><02:14:59.360><c> a</c><02:14:59.440><c> condition</c><02:15:00.000><c> for</c><02:15:00.159><c> the</c><02:15:00.320><c> time</c>

02:15:00.629 --> 02:15:00.639 align:start position:0%
then we'll need a condition for the time
 

02:15:00.639 --> 02:15:03.830 align:start position:0%
then we'll need a condition for the time
being<02:15:01.040><c> let's</c><02:15:01.280><c> set</c><02:15:01.599><c> i</c><02:15:02.239><c> less</c><02:15:02.639><c> than</c><02:15:03.119><c> five</c><02:15:03.679><c> but</c>

02:15:03.830 --> 02:15:03.840 align:start position:0%
being let's set i less than five but
 

02:15:03.840 --> 02:15:05.430 align:start position:0%
being let's set i less than five but
later<02:15:04.159><c> on</c><02:15:04.239><c> we're</c><02:15:04.480><c> going</c><02:15:04.639><c> to</c><02:15:04.719><c> replace</c><02:15:05.199><c> five</c>

02:15:05.430 --> 02:15:05.440 align:start position:0%
later on we're going to replace five
 

02:15:05.440 --> 02:15:06.950 align:start position:0%
later on we're going to replace five
with<02:15:05.679><c> something</c><02:15:06.000><c> else</c><02:15:06.320><c> and</c><02:15:06.400><c> i'll</c><02:15:06.639><c> explain</c>

02:15:06.950 --> 02:15:06.960 align:start position:0%
with something else and i'll explain
 

02:15:06.960 --> 02:15:09.189 align:start position:0%
with something else and i'll explain
that<02:15:07.119><c> later</c><02:15:07.599><c> and</c><02:15:07.760><c> then</c><02:15:08.000><c> we</c><02:15:08.159><c> will</c><02:15:08.400><c> increment</c><02:15:08.960><c> i</c>

02:15:09.189 --> 02:15:09.199 align:start position:0%
that later and then we will increment i
 

02:15:09.199 --> 02:15:12.149 align:start position:0%
that later and then we will increment i
by<02:15:09.440><c> one</c><02:15:10.079><c> so</c><02:15:10.239><c> then</c><02:15:10.560><c> during</c><02:15:10.960><c> each</c><02:15:11.280><c> iteration</c>

02:15:12.149 --> 02:15:12.159 align:start position:0%
by one so then during each iteration
 

02:15:12.159 --> 02:15:14.870 align:start position:0%
by one so then during each iteration
let's<02:15:12.400><c> use</c><02:15:12.800><c> this</c><02:15:13.040><c> print</c><02:15:13.280><c> statement</c><02:15:13.679><c> again</c>

02:15:14.870 --> 02:15:14.880 align:start position:0%
let's use this print statement again
 

02:15:14.880 --> 02:15:17.350 align:start position:0%
let's use this print statement again
and<02:15:15.119><c> make</c><02:15:15.360><c> one</c><02:15:15.679><c> change</c><02:15:16.320><c> instead</c><02:15:16.719><c> of</c><02:15:16.960><c> setting</c>

02:15:17.350 --> 02:15:17.360 align:start position:0%
and make one change instead of setting
 

02:15:17.360 --> 02:15:19.750 align:start position:0%
and make one change instead of setting
an<02:15:17.599><c> index</c><02:15:18.000><c> number</c><02:15:18.639><c> let's</c><02:15:18.880><c> use</c><02:15:19.119><c> our</c><02:15:19.360><c> index</c>

02:15:19.750 --> 02:15:19.760 align:start position:0%
an index number let's use our index
 

02:15:19.760 --> 02:15:21.669 align:start position:0%
an index number let's use our index
instead<02:15:20.400><c> then</c><02:15:20.560><c> i'm</c><02:15:20.719><c> just</c><02:15:20.880><c> going</c><02:15:21.040><c> to</c><02:15:21.119><c> add</c><02:15:21.360><c> a</c><02:15:21.520><c> new</c>

02:15:21.669 --> 02:15:21.679 align:start position:0%
instead then i'm just going to add a new
 

02:15:21.679 --> 02:15:23.750 align:start position:0%
instead then i'm just going to add a new
line<02:15:22.000><c> character</c><02:15:22.560><c> after</c><02:15:22.960><c> each</c><02:15:23.280><c> printf</c>

02:15:23.750 --> 02:15:23.760 align:start position:0%
line character after each printf
 

02:15:23.760 --> 02:15:24.870 align:start position:0%
line character after each printf
statement

02:15:24.870 --> 02:15:24.880 align:start position:0%
statement
 

02:15:24.880 --> 02:15:26.709 align:start position:0%
statement
so<02:15:25.040><c> here</c><02:15:25.199><c> we</c><02:15:25.360><c> go</c><02:15:25.599><c> this</c><02:15:25.920><c> for</c><02:15:26.159><c> loop</c><02:15:26.480><c> should</c>

02:15:26.709 --> 02:15:26.719 align:start position:0%
so here we go this for loop should
 

02:15:26.719 --> 02:15:28.709 align:start position:0%
so here we go this for loop should
iterate<02:15:27.199><c> five</c><02:15:27.520><c> times</c>

02:15:28.709 --> 02:15:28.719 align:start position:0%
iterate five times
 

02:15:28.719 --> 02:15:30.709 align:start position:0%
iterate five times
and<02:15:28.880><c> it</c><02:15:28.960><c> will</c><02:15:29.199><c> display</c><02:15:29.760><c> the</c><02:15:29.920><c> elements</c><02:15:30.320><c> within</c>

02:15:30.709 --> 02:15:30.719 align:start position:0%
and it will display the elements within
 

02:15:30.719 --> 02:15:31.990 align:start position:0%
and it will display the elements within
our<02:15:30.880><c> array</c>

02:15:31.990 --> 02:15:32.000 align:start position:0%
our array
 

02:15:32.000 --> 02:15:35.589 align:start position:0%
our array
so<02:15:32.159><c> we</c><02:15:32.320><c> have</c><02:15:32.639><c> 5</c><02:15:33.040><c> 10</c><02:15:33.360><c> 15</c><02:15:33.840><c> 25</c><02:15:34.400><c> 20.</c><02:15:35.040><c> maybe</c><02:15:35.280><c> i'll</c><02:15:35.440><c> add</c>

02:15:35.589 --> 02:15:35.599 align:start position:0%
so we have 5 10 15 25 20. maybe i'll add
 

02:15:35.599 --> 02:15:37.270 align:start position:0%
so we have 5 10 15 25 20. maybe i'll add
a<02:15:35.679><c> couple</c><02:15:36.000><c> extra</c><02:15:36.320><c> things</c><02:15:36.560><c> to</c><02:15:36.719><c> this</c><02:15:36.880><c> format</c>

02:15:37.270 --> 02:15:37.280 align:start position:0%
a couple extra things to this format
 

02:15:37.280 --> 02:15:39.990 align:start position:0%
a couple extra things to this format
specifier<02:15:38.000><c> let's</c><02:15:38.239><c> display</c><02:15:38.719><c> two</c><02:15:38.960><c> digits</c><02:15:39.679><c> and</c><02:15:39.920><c> a</c>

02:15:39.990 --> 02:15:40.000 align:start position:0%
specifier let's display two digits and a
 

02:15:40.000 --> 02:15:41.350 align:start position:0%
specifier let's display two digits and a
dollar<02:15:40.320><c> sign</c>

02:15:41.350 --> 02:15:41.360 align:start position:0%
dollar sign
 

02:15:41.360 --> 02:15:43.350 align:start position:0%
dollar sign
that's<02:15:41.599><c> much</c><02:15:41.920><c> better</c><02:15:42.719><c> so</c><02:15:42.880><c> this</c><02:15:43.119><c> kind</c><02:15:43.280><c> of</c>

02:15:43.350 --> 02:15:43.360 align:start position:0%
that's much better so this kind of
 

02:15:43.360 --> 02:15:45.589 align:start position:0%
that's much better so this kind of
resembles<02:15:43.840><c> maybe</c><02:15:44.239><c> a</c><02:15:44.480><c> receipt</c><02:15:44.880><c> of</c><02:15:44.960><c> some</c><02:15:45.199><c> sort</c>

02:15:45.589 --> 02:15:45.599 align:start position:0%
resembles maybe a receipt of some sort
 

02:15:45.599 --> 02:15:46.950 align:start position:0%
resembles maybe a receipt of some sort
like<02:15:45.840><c> somebody</c><02:15:46.159><c> just</c><02:15:46.320><c> bought</c><02:15:46.560><c> a</c><02:15:46.639><c> bunch</c><02:15:46.800><c> of</c>

02:15:46.950 --> 02:15:46.960 align:start position:0%
like somebody just bought a bunch of
 

02:15:46.960 --> 02:15:49.910 align:start position:0%
like somebody just bought a bunch of
items<02:15:47.599><c> okay</c><02:15:47.840><c> now</c><02:15:48.079><c> here's</c><02:15:48.400><c> one</c><02:15:48.639><c> situation</c><02:15:49.679><c> what</c>

02:15:49.910 --> 02:15:49.920 align:start position:0%
items okay now here's one situation what
 

02:15:49.920 --> 02:15:51.990 align:start position:0%
items okay now here's one situation what
if<02:15:50.079><c> we</c><02:15:50.320><c> add</c><02:15:50.639><c> or</c><02:15:50.800><c> remove</c><02:15:51.280><c> elements</c><02:15:51.679><c> from</c><02:15:51.840><c> this</c>

02:15:51.990 --> 02:15:52.000 align:start position:0%
if we add or remove elements from this
 

02:15:52.000 --> 02:15:54.709 align:start position:0%
if we add or remove elements from this
array<02:15:52.480><c> let's</c><02:15:52.719><c> say</c><02:15:52.960><c> that</c><02:15:53.360><c> a</c><02:15:53.599><c> user</c><02:15:54.079><c> purchases</c>

02:15:54.709 --> 02:15:54.719 align:start position:0%
array let's say that a user purchases
 

02:15:54.719 --> 02:15:57.510 align:start position:0%
array let's say that a user purchases
one<02:15:54.960><c> more</c><02:15:55.199><c> item</c><02:15:55.599><c> for</c><02:15:56.079><c> thirty</c><02:15:56.400><c> dollars</c><02:15:57.119><c> now</c><02:15:57.360><c> the</c>

02:15:57.510 --> 02:15:57.520 align:start position:0%
one more item for thirty dollars now the
 

02:15:57.520 --> 02:15:59.589 align:start position:0%
one more item for thirty dollars now the
way<02:15:57.760><c> that</c><02:15:57.920><c> this</c><02:15:58.159><c> for</c><02:15:58.480><c> loop</c><02:15:58.800><c> is</c><02:15:58.960><c> written</c><02:15:59.440><c> it's</c>

02:15:59.589 --> 02:15:59.599 align:start position:0%
way that this for loop is written it's
 

02:15:59.599 --> 02:16:02.229 align:start position:0%
way that this for loop is written it's
not<02:15:59.840><c> going</c><02:16:00.079><c> to</c><02:16:00.239><c> display</c><02:16:00.880><c> this</c><02:16:01.199><c> last</c><02:16:01.520><c> element</c>

02:16:02.229 --> 02:16:02.239 align:start position:0%
not going to display this last element
 

02:16:02.239 --> 02:16:05.189 align:start position:0%
not going to display this last element
because<02:16:02.800><c> we</c><02:16:03.119><c> set</c><02:16:03.440><c> this</c><02:16:03.679><c> for</c><02:16:04.000><c> loop</c><02:16:04.320><c> to</c><02:16:04.560><c> iterate</c>

02:16:05.189 --> 02:16:05.199 align:start position:0%
because we set this for loop to iterate
 

02:16:05.199 --> 02:16:07.589 align:start position:0%
because we set this for loop to iterate
as<02:16:05.520><c> long</c><02:16:05.760><c> as</c><02:16:05.920><c> i</c><02:16:06.239><c> is</c><02:16:06.400><c> less</c><02:16:06.639><c> than</c><02:16:06.880><c> or</c><02:16:07.119><c> equal</c><02:16:07.440><c> to</c>

02:16:07.589 --> 02:16:07.599 align:start position:0%
as long as i is less than or equal to
 

02:16:07.599 --> 02:16:09.990 align:start position:0%
as long as i is less than or equal to
five<02:16:08.159><c> it's</c><02:16:08.400><c> not</c><02:16:08.639><c> going</c><02:16:08.800><c> to</c><02:16:09.040><c> display</c><02:16:09.440><c> this</c><02:16:09.679><c> last</c>

02:16:09.990 --> 02:16:10.000 align:start position:0%
five it's not going to display this last
 

02:16:10.000 --> 02:16:12.550 align:start position:0%
five it's not going to display this last
element<02:16:10.800><c> so</c><02:16:11.040><c> we</c><02:16:11.199><c> would</c><02:16:11.360><c> need</c><02:16:11.760><c> some</c><02:16:11.920><c> way</c><02:16:12.239><c> to</c>

02:16:12.550 --> 02:16:12.560 align:start position:0%
element so we would need some way to
 

02:16:12.560 --> 02:16:14.310 align:start position:0%
element so we would need some way to
update<02:16:13.040><c> this</c><02:16:13.280><c> condition</c>

02:16:14.310 --> 02:16:14.320 align:start position:0%
update this condition
 

02:16:14.320 --> 02:16:16.310 align:start position:0%
update this condition
a<02:16:14.480><c> better</c><02:16:14.800><c> solution</c><02:16:15.360><c> instead</c><02:16:15.679><c> of</c><02:16:15.840><c> using</c><02:16:16.159><c> a</c>

02:16:16.310 --> 02:16:16.320 align:start position:0%
a better solution instead of using a
 

02:16:16.320 --> 02:16:18.950 align:start position:0%
a better solution instead of using a
number<02:16:16.639><c> here</c><02:16:17.280><c> is</c><02:16:17.440><c> that</c><02:16:17.599><c> we</c><02:16:17.920><c> could</c><02:16:18.239><c> calculate</c>

02:16:18.950 --> 02:16:18.960 align:start position:0%
number here is that we could calculate
 

02:16:18.960 --> 02:16:21.189 align:start position:0%
number here is that we could calculate
the<02:16:19.119><c> amount</c><02:16:19.360><c> of</c><02:16:19.520><c> elements</c><02:16:20.000><c> within</c><02:16:20.400><c> our</c><02:16:20.560><c> array</c>

02:16:21.189 --> 02:16:21.199 align:start position:0%
the amount of elements within our array
 

02:16:21.199 --> 02:16:23.910 align:start position:0%
the amount of elements within our array
and<02:16:21.520><c> loop</c><02:16:21.920><c> that</c><02:16:22.159><c> many</c><02:16:22.480><c> times</c><02:16:23.119><c> and</c><02:16:23.360><c> one</c><02:16:23.599><c> way</c><02:16:23.760><c> in</c>

02:16:23.910 --> 02:16:23.920 align:start position:0%
and loop that many times and one way in
 

02:16:23.920 --> 02:16:25.990 align:start position:0%
and loop that many times and one way in
which<02:16:24.159><c> we</c><02:16:24.320><c> could</c><02:16:24.560><c> do</c><02:16:24.719><c> that</c><02:16:24.960><c> is</c><02:16:25.119><c> to</c><02:16:25.280><c> use</c><02:16:25.679><c> the</c>

02:16:25.990 --> 02:16:26.000 align:start position:0%
which we could do that is to use the
 

02:16:26.000 --> 02:16:28.790 align:start position:0%
which we could do that is to use the
size<02:16:26.560><c> of</c><02:16:26.880><c> operator</c><02:16:27.760><c> so</c><02:16:27.920><c> let</c><02:16:28.079><c> me</c><02:16:28.239><c> demonstrate</c>

02:16:28.790 --> 02:16:28.800 align:start position:0%
size of operator so let me demonstrate
 

02:16:28.800 --> 02:16:30.950 align:start position:0%
size of operator so let me demonstrate
the<02:16:29.040><c> size</c><02:16:29.440><c> of</c><02:16:29.679><c> operator</c><02:16:30.079><c> real</c><02:16:30.320><c> quick</c><02:16:30.560><c> it</c><02:16:30.719><c> will</c>

02:16:30.950 --> 02:16:30.960 align:start position:0%
the size of operator real quick it will
 

02:16:30.960 --> 02:16:34.230 align:start position:0%
the size of operator real quick it will
return<02:16:31.520><c> the</c><02:16:31.679><c> size</c><02:16:32.080><c> of</c><02:16:32.240><c> an</c><02:16:32.399><c> operand</c><02:16:32.960><c> in</c><02:16:33.120><c> bytes</c>

02:16:34.230 --> 02:16:34.240 align:start position:0%
return the size of an operand in bytes
 

02:16:34.240 --> 02:16:35.910 align:start position:0%
return the size of an operand in bytes
so<02:16:34.399><c> let's</c><02:16:34.639><c> print</c><02:16:34.880><c> this</c>

02:16:35.910 --> 02:16:35.920 align:start position:0%
so let's print this
 

02:16:35.920 --> 02:16:37.669 align:start position:0%
so let's print this
so<02:16:36.080><c> this</c><02:16:36.240><c> will</c><02:16:36.399><c> be</c><02:16:36.559><c> an</c><02:16:36.719><c> integer</c>

02:16:37.669 --> 02:16:37.679 align:start position:0%
so this will be an integer
 

02:16:37.679 --> 02:16:41.030 align:start position:0%
so this will be an integer
and<02:16:37.920><c> we</c><02:16:38.080><c> will</c><02:16:38.240><c> use</c><02:16:38.639><c> the</c><02:16:38.880><c> size</c><02:16:39.439><c> of</c><02:16:39.679><c> operator</c><02:16:40.719><c> and</c>

02:16:41.030 --> 02:16:41.040 align:start position:0%
and we will use the size of operator and
 

02:16:41.040 --> 02:16:44.150 align:start position:0%
and we will use the size of operator and
pass<02:16:41.359><c> in</c><02:16:41.599><c> our</c><02:16:41.760><c> array</c><02:16:42.160><c> of</c><02:16:42.319><c> prices</c><02:16:43.280><c> so</c><02:16:43.599><c> this</c><02:16:43.840><c> size</c>

02:16:44.150 --> 02:16:44.160 align:start position:0%
pass in our array of prices so this size
 

02:16:44.160 --> 02:16:46.389 align:start position:0%
pass in our array of prices so this size
is<02:16:44.240><c> going</c><02:16:44.479><c> to</c><02:16:44.559><c> be</c><02:16:44.880><c> in</c><02:16:45.359><c> bytes</c>

02:16:46.389 --> 02:16:46.399 align:start position:0%
is going to be in bytes
 

02:16:46.399 --> 02:16:50.629 align:start position:0%
is going to be in bytes
so<02:16:46.639><c> the</c><02:16:46.800><c> size</c><02:16:47.280><c> of</c><02:16:47.519><c> our</c><02:16:47.760><c> ray</c><02:16:48.479><c> in</c><02:16:48.639><c> bytes</c><02:16:49.519><c> is</c><02:16:49.920><c> 48</c>

02:16:50.629 --> 02:16:50.639 align:start position:0%
so the size of our ray in bytes is 48
 

02:16:50.639 --> 02:16:53.589 align:start position:0%
so the size of our ray in bytes is 48
bytes<02:16:51.359><c> we</c><02:16:51.519><c> have</c><02:16:51.920><c> six</c><02:16:52.240><c> elements</c><02:16:52.800><c> made</c><02:16:53.040><c> up</c><02:16:53.280><c> of</c>

02:16:53.589 --> 02:16:53.599 align:start position:0%
bytes we have six elements made up of
 

02:16:53.599 --> 02:16:56.790 align:start position:0%
bytes we have six elements made up of
doubles<02:16:54.479><c> each</c><02:16:54.800><c> double</c><02:16:55.280><c> uses</c><02:16:55.679><c> up</c><02:16:55.920><c> eight</c><02:16:56.240><c> bytes</c>

02:16:56.790 --> 02:16:56.800 align:start position:0%
doubles each double uses up eight bytes
 

02:16:56.800 --> 02:16:59.990 align:start position:0%
doubles each double uses up eight bytes
so<02:16:57.120><c> six</c><02:16:57.359><c> times</c><02:16:57.760><c> eight</c><02:16:58.080><c> is</c><02:16:58.319><c> 48</c><02:16:59.200><c> so</c><02:16:59.439><c> now</c><02:16:59.760><c> let's</c>

02:16:59.990 --> 02:17:00.000 align:start position:0%
so six times eight is 48 so now let's
 

02:17:00.000 --> 02:17:04.389 align:start position:0%
so six times eight is 48 so now let's
use<02:17:00.399><c> the</c><02:17:00.639><c> size</c><02:17:01.120><c> of</c><02:17:01.359><c> operator</c><02:17:01.840><c> instead</c><02:17:02.559><c> size</c><02:17:02.960><c> of</c>

02:17:04.389 --> 02:17:04.399 align:start position:0%
use the size of operator instead size of
 

02:17:04.399 --> 02:17:05.669 align:start position:0%
use the size of operator instead size of
prices

02:17:05.669 --> 02:17:05.679 align:start position:0%
prices
 

02:17:05.679 --> 02:17:07.589 align:start position:0%
prices
but<02:17:05.840><c> we</c><02:17:06.000><c> are</c><02:17:06.160><c> going</c><02:17:06.319><c> to</c><02:17:06.399><c> divide</c><02:17:06.960><c> the</c><02:17:07.120><c> size</c><02:17:07.439><c> of</c>

02:17:07.589 --> 02:17:07.599 align:start position:0%
but we are going to divide the size of
 

02:17:07.599 --> 02:17:09.830 align:start position:0%
but we are going to divide the size of
our<02:17:07.679><c> array</c><02:17:08.399><c> by</c><02:17:08.559><c> the</c><02:17:08.719><c> size</c><02:17:09.120><c> of</c><02:17:09.359><c> one</c><02:17:09.519><c> of</c><02:17:09.599><c> these</c>

02:17:09.830 --> 02:17:09.840 align:start position:0%
our array by the size of one of these
 

02:17:09.840 --> 02:17:11.270 align:start position:0%
our array by the size of one of these
elements<02:17:10.399><c> they're</c><02:17:10.639><c> all</c><02:17:10.800><c> going</c><02:17:10.960><c> to</c><02:17:11.040><c> be</c>

02:17:11.270 --> 02:17:11.280 align:start position:0%
elements they're all going to be
 

02:17:11.280 --> 02:17:13.030 align:start position:0%
elements they're all going to be
consistent<02:17:11.840><c> because</c><02:17:12.319><c> they</c><02:17:12.479><c> all</c><02:17:12.639><c> have</c><02:17:12.880><c> the</c>

02:17:13.030 --> 02:17:13.040 align:start position:0%
consistent because they all have the
 

02:17:13.040 --> 02:17:16.070 align:start position:0%
consistent because they all have the
same<02:17:13.280><c> data</c><02:17:13.599><c> type</c><02:17:14.160><c> so</c><02:17:14.399><c> we</c><02:17:14.559><c> will</c><02:17:14.719><c> take</c><02:17:15.200><c> size</c><02:17:15.840><c> of</c>

02:17:16.070 --> 02:17:16.080 align:start position:0%
same data type so we will take size of
 

02:17:16.080 --> 02:17:18.309 align:start position:0%
same data type so we will take size of
prices<02:17:17.040><c> divided</c><02:17:17.519><c> by</c>

02:17:18.309 --> 02:17:18.319 align:start position:0%
prices divided by
 

02:17:18.319 --> 02:17:20.549 align:start position:0%
prices divided by
the<02:17:18.479><c> size</c><02:17:18.800><c> of</c><02:17:19.040><c> one</c><02:17:19.280><c> of</c><02:17:19.359><c> these</c><02:17:19.519><c> elements</c><02:17:20.319><c> let's</c>

02:17:20.549 --> 02:17:20.559 align:start position:0%
the size of one of these elements let's
 

02:17:20.559 --> 02:17:23.990 align:start position:0%
the size of one of these elements let's
say<02:17:20.960><c> prices</c><02:17:21.679><c> at</c><02:17:22.000><c> index</c><02:17:22.639><c> zero</c>

02:17:23.990 --> 02:17:24.000 align:start position:0%
say prices at index zero
 

02:17:24.000 --> 02:17:26.790 align:start position:0%
say prices at index zero
so<02:17:24.559><c> 48</c><02:17:25.519><c> divided</c><02:17:26.080><c> by</c>

02:17:26.790 --> 02:17:26.800 align:start position:0%
so 48 divided by
 

02:17:26.800 --> 02:17:29.589 align:start position:0%
so 48 divided by
eight<02:17:27.439><c> equals</c><02:17:28.000><c> six</c><02:17:28.559><c> we</c><02:17:28.719><c> will</c><02:17:28.960><c> iterate</c><02:17:29.359><c> through</c>

02:17:29.589 --> 02:17:29.599 align:start position:0%
eight equals six we will iterate through
 

02:17:29.599 --> 02:17:32.230 align:start position:0%
eight equals six we will iterate through
this<02:17:29.760><c> for</c><02:17:30.000><c> loop</c><02:17:30.399><c> six</c><02:17:30.719><c> times</c><02:17:31.439><c> and</c><02:17:31.679><c> here's</c><02:17:32.080><c> our</c>

02:17:32.230 --> 02:17:32.240 align:start position:0%
this for loop six times and here's our
 

02:17:32.240 --> 02:17:37.110 align:start position:0%
this for loop six times and here's our
array<02:17:33.040><c> we</c><02:17:33.200><c> have</c><02:17:33.679><c> 5</c><02:17:34.160><c> 10</c><02:17:34.559><c> 15</c><02:17:35.040><c> 25</c><02:17:35.599><c> 20</c><02:17:36.000><c> 30</c><02:17:36.800><c> and</c><02:17:36.960><c> we</c>

02:17:37.110 --> 02:17:37.120 align:start position:0%
array we have 5 10 15 25 20 30 and we
 

02:17:37.120 --> 02:17:39.589 align:start position:0%
array we have 5 10 15 25 20 30 and we
can<02:17:37.359><c> add</c><02:17:37.679><c> or</c><02:17:37.840><c> remove</c><02:17:38.319><c> elements</c><02:17:38.800><c> freely</c><02:17:39.439><c> and</c>

02:17:39.589 --> 02:17:39.599 align:start position:0%
can add or remove elements freely and
 

02:17:39.599 --> 02:17:41.509 align:start position:0%
can add or remove elements freely and
there's<02:17:39.840><c> no</c><02:17:40.080><c> need</c><02:17:40.319><c> to</c><02:17:40.559><c> update</c><02:17:40.880><c> our</c><02:17:40.960><c> code</c>

02:17:41.509 --> 02:17:41.519 align:start position:0%
there's no need to update our code
 

02:17:41.519 --> 02:17:43.270 align:start position:0%
there's no need to update our code
because<02:17:41.920><c> we</c><02:17:42.080><c> may</c><02:17:42.240><c> not</c><02:17:42.399><c> remember</c><02:17:42.800><c> to</c><02:17:42.960><c> do</c><02:17:43.120><c> that</c>

02:17:43.270 --> 02:17:43.280 align:start position:0%
because we may not remember to do that
 

02:17:43.280 --> 02:17:44.469 align:start position:0%
because we may not remember to do that
later<02:17:43.599><c> on</c>

02:17:44.469 --> 02:17:44.479 align:start position:0%
later on
 

02:17:44.479 --> 02:17:46.709 align:start position:0%
later on
so<02:17:44.719><c> yeah</c><02:17:44.960><c> that's</c><02:17:45.280><c> one</c><02:17:45.519><c> way</c><02:17:45.760><c> to</c><02:17:46.080><c> loop</c><02:17:46.399><c> through</c>

02:17:46.709 --> 02:17:46.719 align:start position:0%
so yeah that's one way to loop through
 

02:17:46.719 --> 02:17:48.870 align:start position:0%
so yeah that's one way to loop through
and<02:17:46.960><c> print</c><02:17:47.280><c> the</c><02:17:47.439><c> elements</c><02:17:47.840><c> of</c><02:17:48.000><c> an</c><02:17:48.160><c> array</c><02:17:48.719><c> you</c>

02:17:48.870 --> 02:17:48.880 align:start position:0%
and print the elements of an array you
 

02:17:48.880 --> 02:17:51.509 align:start position:0%
and print the elements of an array you
can<02:17:48.960><c> use</c><02:17:49.200><c> a</c><02:17:49.280><c> for</c><02:17:49.519><c> loop</c><02:17:50.160><c> then</c><02:17:50.399><c> use</c><02:17:50.719><c> a</c><02:17:50.880><c> printf</c>

02:17:51.509 --> 02:17:51.519 align:start position:0%
can use a for loop then use a printf
 

02:17:51.519 --> 02:17:53.669 align:start position:0%
can use a for loop then use a printf
statement<02:17:52.319><c> and</c><02:17:52.559><c> for</c><02:17:52.800><c> the</c><02:17:52.960><c> index</c><02:17:53.359><c> of</c><02:17:53.519><c> your</c>

02:17:53.669 --> 02:17:53.679 align:start position:0%
statement and for the index of your
 

02:17:53.679 --> 02:17:55.910 align:start position:0%
statement and for the index of your
array<02:17:54.080><c> you</c><02:17:54.240><c> can</c><02:17:54.399><c> use</c><02:17:54.800><c> the</c><02:17:54.960><c> index</c><02:17:55.359><c> of</c><02:17:55.439><c> your</c><02:17:55.679><c> for</c>

02:17:55.910 --> 02:17:55.920 align:start position:0%
array you can use the index of your for
 

02:17:55.920 --> 02:17:57.830 align:start position:0%
array you can use the index of your for
loop<02:17:56.479><c> then</c><02:17:56.719><c> if</c><02:17:56.880><c> you</c><02:17:57.040><c> would</c><02:17:57.120><c> like</c><02:17:57.359><c> your</c><02:17:57.519><c> for</c>

02:17:57.830 --> 02:17:57.840 align:start position:0%
loop then if you would like your for
 

02:17:57.840 --> 02:18:00.070 align:start position:0%
loop then if you would like your for
loop<02:17:58.160><c> to</c><02:17:58.399><c> calculate</c><02:17:58.960><c> how</c><02:17:59.120><c> many</c><02:17:59.439><c> times</c><02:17:59.840><c> it's</c>

02:18:00.070 --> 02:18:00.080 align:start position:0%
loop to calculate how many times it's
 

02:18:00.080 --> 02:18:02.150 align:start position:0%
loop to calculate how many times it's
going<02:18:00.240><c> to</c><02:18:00.559><c> iterate</c><02:18:00.960><c> through</c><02:18:01.200><c> this</c><02:18:01.439><c> array</c><02:18:02.000><c> you</c>

02:18:02.150 --> 02:18:02.160 align:start position:0%
going to iterate through this array you
 

02:18:02.160 --> 02:18:05.110 align:start position:0%
going to iterate through this array you
can<02:18:02.319><c> use</c><02:18:02.639><c> the</c><02:18:03.040><c> size</c><02:18:03.519><c> of</c><02:18:03.760><c> operator</c><02:18:04.639><c> pass</c><02:18:04.960><c> in</c>

02:18:05.110 --> 02:18:05.120 align:start position:0%
can use the size of operator pass in
 

02:18:05.120 --> 02:18:08.629 align:start position:0%
can use the size of operator pass in
prices<02:18:06.160><c> divided</c><02:18:06.639><c> by</c><02:18:07.280><c> the</c><02:18:07.439><c> size</c><02:18:07.840><c> of</c><02:18:08.240><c> one</c><02:18:08.399><c> of</c><02:18:08.479><c> the</c>

02:18:08.629 --> 02:18:08.639 align:start position:0%
prices divided by the size of one of the
 

02:18:08.639 --> 02:18:10.629 align:start position:0%
prices divided by the size of one of the
elements<02:18:09.439><c> and</c><02:18:09.599><c> that</c><02:18:09.760><c> will</c><02:18:09.920><c> calculate</c><02:18:10.479><c> how</c>

02:18:10.629 --> 02:18:10.639 align:start position:0%
elements and that will calculate how
 

02:18:10.639 --> 02:18:12.950 align:start position:0%
elements and that will calculate how
many<02:18:10.960><c> elements</c><02:18:11.439><c> are</c><02:18:11.519><c> within</c><02:18:11.920><c> your</c><02:18:12.080><c> array</c>

02:18:12.950 --> 02:18:12.960 align:start position:0%
many elements are within your array
 

02:18:12.960 --> 02:18:14.950 align:start position:0%
many elements are within your array
so<02:18:13.200><c> yeah</c><02:18:13.439><c> that's</c><02:18:13.760><c> one</c><02:18:14.000><c> way</c><02:18:14.240><c> to</c><02:18:14.479><c> loop</c><02:18:14.719><c> through</c>

02:18:14.950 --> 02:18:14.960 align:start position:0%
so yeah that's one way to loop through
 

02:18:14.960 --> 02:18:16.870 align:start position:0%
so yeah that's one way to loop through
the<02:18:15.120><c> elements</c><02:18:15.519><c> of</c><02:18:15.679><c> an</c><02:18:15.840><c> array</c><02:18:16.479><c> if</c><02:18:16.639><c> you</c><02:18:16.719><c> would</c>

02:18:16.870 --> 02:18:16.880 align:start position:0%
the elements of an array if you would
 

02:18:16.880 --> 02:18:18.709 align:start position:0%
the elements of an array if you would
like<02:18:17.040><c> a</c><02:18:17.120><c> copy</c><02:18:17.439><c> of</c><02:18:17.519><c> this</c><02:18:17.679><c> code</c><02:18:18.080><c> i'll</c><02:18:18.240><c> post</c><02:18:18.479><c> this</c>

02:18:18.709 --> 02:18:18.719 align:start position:0%
like a copy of this code i'll post this
 

02:18:18.719 --> 02:18:20.629 align:start position:0%
like a copy of this code i'll post this
to<02:18:18.800><c> the</c><02:18:18.960><c> comment</c><02:18:19.280><c> section</c><02:18:19.679><c> down</c><02:18:19.840><c> below</c><02:18:20.399><c> and</c>

02:18:20.629 --> 02:18:20.639 align:start position:0%
to the comment section down below and
 

02:18:20.639 --> 02:18:22.870 align:start position:0%
to the comment section down below and
well<02:18:21.120><c> yeah</c><02:18:21.439><c> that's</c><02:18:21.679><c> how</c><02:18:21.840><c> to</c><02:18:22.080><c> loop</c><02:18:22.319><c> through</c><02:18:22.719><c> and</c>

02:18:22.870 --> 02:18:22.880 align:start position:0%
well yeah that's how to loop through and
 

02:18:22.880 --> 02:18:28.150 align:start position:0%
well yeah that's how to loop through and
print<02:18:23.200><c> the</c><02:18:23.359><c> elements</c><02:18:23.760><c> of</c><02:18:23.920><c> an</c><02:18:24.080><c> array</c><02:18:24.559><c> in</c><02:18:24.800><c> c</c>

02:18:28.150 --> 02:18:28.160 align:start position:0%
 
 

02:18:28.160 --> 02:18:30.549 align:start position:0%
 
hey<02:18:28.479><c> everyone</c><02:18:29.120><c> two</c><02:18:29.280><c> dimensional</c><02:18:29.840><c> arrays</c><02:18:30.399><c> it's</c>

02:18:30.549 --> 02:18:30.559 align:start position:0%
hey everyone two dimensional arrays it's
 

02:18:30.559 --> 02:18:33.589 align:start position:0%
hey everyone two dimensional arrays it's
an<02:18:30.800><c> array</c><02:18:31.280><c> where</c><02:18:31.519><c> each</c><02:18:31.840><c> element</c><02:18:32.399><c> is</c><02:18:32.719><c> an</c><02:18:32.960><c> entire</c>

02:18:33.589 --> 02:18:33.599 align:start position:0%
an array where each element is an entire
 

02:18:33.599 --> 02:18:36.389 align:start position:0%
an array where each element is an entire
array<02:18:34.240><c> it's</c><02:18:34.479><c> useful</c><02:18:34.960><c> if</c><02:18:35.040><c> you</c><02:18:35.200><c> need</c><02:18:35.439><c> a</c><02:18:35.679><c> matrix</c>

02:18:36.389 --> 02:18:36.399 align:start position:0%
array it's useful if you need a matrix
 

02:18:36.399 --> 02:18:39.349 align:start position:0%
array it's useful if you need a matrix
grid<02:18:36.880><c> or</c><02:18:37.200><c> table</c><02:18:37.599><c> of</c><02:18:37.840><c> data</c><02:18:38.399><c> let's</c><02:18:38.639><c> begin</c><02:18:39.040><c> by</c>

02:18:39.349 --> 02:18:39.359 align:start position:0%
grid or table of data let's begin by
 

02:18:39.359 --> 02:18:41.750 align:start position:0%
grid or table of data let's begin by
creating<02:18:39.840><c> a</c><02:18:40.080><c> simple</c><02:18:40.639><c> one-dimensional</c><02:18:41.359><c> array</c>

02:18:41.750 --> 02:18:41.760 align:start position:0%
creating a simple one-dimensional array
 

02:18:41.760 --> 02:18:44.629 align:start position:0%
creating a simple one-dimensional array
of<02:18:41.920><c> maybe</c><02:18:42.240><c> some</c><02:18:42.399><c> numbers</c><02:18:43.359><c> so</c><02:18:43.760><c> the</c><02:18:43.920><c> data</c><02:18:44.240><c> type</c>

02:18:44.629 --> 02:18:44.639 align:start position:0%
of maybe some numbers so the data type
 

02:18:44.639 --> 02:18:45.669 align:start position:0%
of maybe some numbers so the data type
is<02:18:44.880><c> int</c>

02:18:45.669 --> 02:18:45.679 align:start position:0%
is int
 

02:18:45.679 --> 02:18:48.150 align:start position:0%
is int
the<02:18:45.840><c> array</c><02:18:46.160><c> name</c><02:18:46.319><c> will</c><02:18:46.479><c> be</c><02:18:46.639><c> numbers</c><02:18:47.599><c> and</c><02:18:47.920><c> let's</c>

02:18:48.150 --> 02:18:48.160 align:start position:0%
the array name will be numbers and let's
 

02:18:48.160 --> 02:18:50.469 align:start position:0%
the array name will be numbers and let's
initialize<02:18:48.880><c> this</c><02:18:49.120><c> array</c><02:18:49.439><c> with</c><02:18:49.679><c> a</c><02:18:49.760><c> few</c><02:18:50.000><c> numbers</c>

02:18:50.469 --> 02:18:50.479 align:start position:0%
initialize this array with a few numbers
 

02:18:50.479 --> 02:18:53.589 align:start position:0%
initialize this array with a few numbers
1<02:18:51.040><c> two</c><02:18:51.519><c> and</c><02:18:51.760><c> three</c><02:18:52.080><c> something</c><02:18:52.479><c> simple</c><02:18:53.120><c> so</c><02:18:53.359><c> if</c><02:18:53.519><c> i</c>

02:18:53.589 --> 02:18:53.599 align:start position:0%
1 two and three something simple so if i
 

02:18:53.599 --> 02:18:56.070 align:start position:0%
1 two and three something simple so if i
would<02:18:53.760><c> like</c><02:18:53.920><c> to</c><02:18:54.080><c> store</c><02:18:54.639><c> a</c><02:18:54.880><c> grid</c><02:18:55.280><c> or</c><02:18:55.519><c> matrix</c><02:18:56.000><c> of</c>

02:18:56.070 --> 02:18:56.080 align:start position:0%
would like to store a grid or matrix of
 

02:18:56.080 --> 02:18:58.389 align:start position:0%
would like to store a grid or matrix of
data<02:18:56.719><c> these</c><02:18:57.040><c> elements</c><02:18:57.519><c> will</c><02:18:57.679><c> be</c><02:18:57.840><c> the</c><02:18:58.000><c> first</c>

02:18:58.389 --> 02:18:58.399 align:start position:0%
data these elements will be the first
 

02:18:58.399 --> 02:19:01.349 align:start position:0%
data these elements will be the first
row<02:18:59.040><c> and</c><02:18:59.200><c> i</c><02:18:59.359><c> can</c><02:18:59.519><c> add</c><02:18:59.840><c> a</c><02:19:00.080><c> second</c><02:19:00.399><c> row</c>

02:19:01.349 --> 02:19:01.359 align:start position:0%
row and i can add a second row
 

02:19:01.359 --> 02:19:03.910 align:start position:0%
row and i can add a second row
so<02:19:01.840><c> separate</c><02:19:02.399><c> each</c><02:19:02.639><c> row</c><02:19:02.960><c> with</c><02:19:03.200><c> a</c><02:19:03.280><c> comma</c><02:19:03.760><c> then</c>

02:19:03.910 --> 02:19:03.920 align:start position:0%
so separate each row with a comma then
 

02:19:03.920 --> 02:19:06.150 align:start position:0%
so separate each row with a comma then
another<02:19:04.319><c> set</c><02:19:04.639><c> of</c><02:19:04.719><c> curly</c><02:19:05.040><c> braces</c><02:19:05.760><c> and</c><02:19:05.840><c> then</c><02:19:06.080><c> you</c>

02:19:06.150 --> 02:19:06.160 align:start position:0%
another set of curly braces and then you
 

02:19:06.160 --> 02:19:08.950 align:start position:0%
another set of curly braces and then you
can<02:19:06.319><c> add</c><02:19:06.639><c> more</c><02:19:06.880><c> values</c><02:19:07.760><c> so</c><02:19:07.920><c> let's</c><02:19:08.160><c> say</c><02:19:08.479><c> four</c>

02:19:08.950 --> 02:19:08.960 align:start position:0%
can add more values so let's say four
 

02:19:08.960 --> 02:19:11.669 align:start position:0%
can add more values so let's say four
five<02:19:09.439><c> and</c><02:19:09.760><c> six</c><02:19:10.399><c> and</c><02:19:10.559><c> we'll</c><02:19:10.719><c> stop</c><02:19:11.040><c> here</c><02:19:11.359><c> with</c>

02:19:11.669 --> 02:19:11.679 align:start position:0%
five and six and we'll stop here with
 

02:19:11.679 --> 02:19:13.830 align:start position:0%
five and six and we'll stop here with
these<02:19:12.160><c> separate</c><02:19:12.559><c> arrays</c><02:19:12.960><c> we</c><02:19:13.120><c> will</c><02:19:13.280><c> surround</c>

02:19:13.830 --> 02:19:13.840 align:start position:0%
these separate arrays we will surround
 

02:19:13.840 --> 02:19:16.150 align:start position:0%
these separate arrays we will surround
with<02:19:14.080><c> a</c><02:19:14.319><c> set</c><02:19:14.479><c> of</c><02:19:14.639><c> curly</c><02:19:14.960><c> braces</c>

02:19:16.150 --> 02:19:16.160 align:start position:0%
with a set of curly braces
 

02:19:16.160 --> 02:19:18.709 align:start position:0%
with a set of curly braces
and<02:19:16.559><c> preceding</c><02:19:17.439><c> the</c><02:19:17.599><c> first</c><02:19:18.080><c> set</c><02:19:18.240><c> of</c><02:19:18.399><c> straight</c>

02:19:18.709 --> 02:19:18.719 align:start position:0%
and preceding the first set of straight
 

02:19:18.719 --> 02:19:20.629 align:start position:0%
and preceding the first set of straight
brackets<02:19:19.200><c> we</c><02:19:19.359><c> will</c><02:19:19.599><c> add</c><02:19:19.920><c> a</c><02:19:20.080><c> second</c><02:19:20.399><c> set</c><02:19:20.559><c> of</c>

02:19:20.629 --> 02:19:20.639 align:start position:0%
brackets we will add a second set of
 

02:19:20.639 --> 02:19:23.270 align:start position:0%
brackets we will add a second set of
straight<02:19:20.960><c> brackets</c><02:19:21.679><c> so</c><02:19:21.920><c> this</c><02:19:22.160><c> is</c><02:19:22.319><c> now</c><02:19:22.639><c> a</c><02:19:23.040><c> two</c>

02:19:23.270 --> 02:19:23.280 align:start position:0%
straight brackets so this is now a two
 

02:19:23.280 --> 02:19:25.349 align:start position:0%
straight brackets so this is now a two
dimensional<02:19:23.840><c> array</c><02:19:24.240><c> however</c><02:19:24.719><c> with</c><02:19:24.960><c> a</c><02:19:25.200><c> two</c>

02:19:25.349 --> 02:19:25.359 align:start position:0%
dimensional array however with a two
 

02:19:25.359 --> 02:19:27.910 align:start position:0%
dimensional array however with a two
dimensional<02:19:25.920><c> array</c><02:19:26.479><c> we</c><02:19:26.719><c> have</c><02:19:26.880><c> to</c><02:19:27.040><c> specify</c><02:19:27.679><c> a</c>

02:19:27.910 --> 02:19:27.920 align:start position:0%
dimensional array we have to specify a
 

02:19:27.920 --> 02:19:30.709 align:start position:0%
dimensional array we have to specify a
maximum<02:19:28.479><c> size</c><02:19:29.200><c> of</c><02:19:29.439><c> elements</c><02:19:29.920><c> within</c><02:19:30.479><c> each</c><02:19:30.639><c> of</c>

02:19:30.709 --> 02:19:30.719 align:start position:0%
maximum size of elements within each of
 

02:19:30.719 --> 02:19:32.790 align:start position:0%
maximum size of elements within each of
these<02:19:30.960><c> arrays</c><02:19:31.679><c> let's</c><02:19:31.920><c> say</c><02:19:32.080><c> that</c><02:19:32.399><c> each</c><02:19:32.639><c> of</c>

02:19:32.790 --> 02:19:32.800 align:start position:0%
these arrays let's say that each of
 

02:19:32.800 --> 02:19:35.830 align:start position:0%
these arrays let's say that each of
these<02:19:33.120><c> arrays</c><02:19:33.599><c> will</c><02:19:33.840><c> have</c><02:19:34.160><c> a</c><02:19:34.399><c> maximum</c><02:19:35.040><c> size</c><02:19:35.519><c> of</c>

02:19:35.830 --> 02:19:35.840 align:start position:0%
these arrays will have a maximum size of
 

02:19:35.840 --> 02:19:38.389 align:start position:0%
these arrays will have a maximum size of
three<02:19:36.160><c> elements</c><02:19:36.559><c> a</c><02:19:36.639><c> piece</c><02:19:37.439><c> so</c><02:19:37.599><c> within</c><02:19:38.160><c> the</c>

02:19:38.389 --> 02:19:38.399 align:start position:0%
three elements a piece so within the
 

02:19:38.399 --> 02:19:40.469 align:start position:0%
three elements a piece so within the
second<02:19:38.800><c> set</c><02:19:39.120><c> of</c><02:19:39.280><c> straight</c><02:19:39.599><c> brackets</c><02:19:40.160><c> i</c><02:19:40.240><c> will</c>

02:19:40.469 --> 02:19:40.479 align:start position:0%
second set of straight brackets i will
 

02:19:40.479 --> 02:19:42.870 align:start position:0%
second set of straight brackets i will
list<02:19:40.880><c> three</c><02:19:41.439><c> and</c><02:19:41.599><c> you</c><02:19:41.760><c> can</c><02:19:42.160><c> although</c><02:19:42.479><c> it's</c><02:19:42.639><c> not</c>

02:19:42.870 --> 02:19:42.880 align:start position:0%
list three and you can although it's not
 

02:19:42.880 --> 02:19:46.230 align:start position:0%
list three and you can although it's not
necessary<02:19:43.840><c> set</c><02:19:44.160><c> a</c><02:19:44.399><c> maximum</c><02:19:45.040><c> amount</c><02:19:45.519><c> of</c><02:19:45.760><c> arrays</c>

02:19:46.230 --> 02:19:46.240 align:start position:0%
necessary set a maximum amount of arrays
 

02:19:46.240 --> 02:19:48.870 align:start position:0%
necessary set a maximum amount of arrays
within<02:19:46.800><c> your</c><02:19:47.040><c> two-dimensional</c><02:19:47.679><c> array</c>

02:19:48.870 --> 02:19:48.880 align:start position:0%
within your two-dimensional array
 

02:19:48.880 --> 02:19:51.110 align:start position:0%
within your two-dimensional array
so<02:19:49.040><c> let's</c><02:19:49.280><c> say</c><02:19:49.520><c> two</c><02:19:49.840><c> because</c><02:19:50.240><c> we</c><02:19:50.399><c> have</c><02:19:50.720><c> two</c>

02:19:51.110 --> 02:19:51.120 align:start position:0%
so let's say two because we have two
 

02:19:51.120 --> 02:19:52.630 align:start position:0%
so let's say two because we have two
separate<02:19:51.520><c> arrays</c><02:19:51.920><c> within</c><02:19:52.399><c> our</c>

02:19:52.630 --> 02:19:52.640 align:start position:0%
separate arrays within our
 

02:19:52.640 --> 02:19:54.630 align:start position:0%
separate arrays within our
two-dimensional<02:19:53.359><c> array</c><02:19:53.920><c> now</c><02:19:54.160><c> to</c><02:19:54.319><c> better</c>

02:19:54.630 --> 02:19:54.640 align:start position:0%
two-dimensional array now to better
 

02:19:54.640 --> 02:19:56.790 align:start position:0%
two-dimensional array now to better
visualize<02:19:55.200><c> how</c><02:19:55.439><c> this</c><02:19:55.680><c> is</c><02:19:55.840><c> more</c><02:19:56.080><c> or</c><02:19:56.240><c> less</c><02:19:56.560><c> a</c>

02:19:56.790 --> 02:19:56.800 align:start position:0%
visualize how this is more or less a
 

02:19:56.800 --> 02:19:58.870 align:start position:0%
visualize how this is more or less a
table<02:19:57.120><c> of</c><02:19:57.280><c> data</c><02:19:57.760><c> i'm</c><02:19:58.000><c> going</c><02:19:58.160><c> to</c><02:19:58.319><c> rearrange</c>

02:19:58.870 --> 02:19:58.880 align:start position:0%
table of data i'm going to rearrange
 

02:19:58.880 --> 02:20:02.389 align:start position:0%
table of data i'm going to rearrange
these

02:20:02.389 --> 02:20:02.399 align:start position:0%
 
 

02:20:02.399 --> 02:20:04.790 align:start position:0%
 
so<02:20:02.560><c> this</c><02:20:02.800><c> may</c><02:20:03.040><c> be</c><02:20:03.200><c> a</c><02:20:03.280><c> better</c><02:20:03.600><c> visualization</c>

02:20:04.790 --> 02:20:04.800 align:start position:0%
so this may be a better visualization
 

02:20:04.800 --> 02:20:06.550 align:start position:0%
so this may be a better visualization
this<02:20:05.120><c> first</c><02:20:05.359><c> set</c><02:20:05.520><c> of</c><02:20:05.600><c> straight</c><02:20:05.920><c> brackets</c><02:20:06.399><c> is</c>

02:20:06.550 --> 02:20:06.560 align:start position:0%
this first set of straight brackets is
 

02:20:06.560 --> 02:20:08.870 align:start position:0%
this first set of straight brackets is
for<02:20:06.720><c> the</c><02:20:06.880><c> number</c><02:20:07.280><c> of</c><02:20:07.520><c> rows</c><02:20:08.240><c> and</c><02:20:08.479><c> the</c><02:20:08.560><c> second</c>

02:20:08.870 --> 02:20:08.880 align:start position:0%
for the number of rows and the second
 

02:20:08.880 --> 02:20:10.550 align:start position:0%
for the number of rows and the second
set<02:20:09.040><c> of</c><02:20:09.120><c> straight</c><02:20:09.520><c> brackets</c><02:20:10.080><c> is</c><02:20:10.240><c> for</c><02:20:10.479><c> the</c>

02:20:10.550 --> 02:20:10.560 align:start position:0%
set of straight brackets is for the
 

02:20:10.560 --> 02:20:13.429 align:start position:0%
set of straight brackets is for the
number<02:20:10.800><c> of</c><02:20:10.960><c> columns</c><02:20:11.680><c> so</c><02:20:11.840><c> we</c><02:20:12.000><c> have</c><02:20:12.560><c> two</c><02:20:12.800><c> rows</c>

02:20:13.429 --> 02:20:13.439 align:start position:0%
number of columns so we have two rows
 

02:20:13.439 --> 02:20:15.030 align:start position:0%
number of columns so we have two rows
and<02:20:13.760><c> three</c><02:20:14.000><c> columns</c><02:20:14.479><c> within</c><02:20:14.880><c> our</c>

02:20:15.030 --> 02:20:15.040 align:start position:0%
and three columns within our
 

02:20:15.040 --> 02:20:17.030 align:start position:0%
and three columns within our
two-dimensional<02:20:15.760><c> array</c><02:20:16.399><c> now</c><02:20:16.640><c> you</c><02:20:16.800><c> can</c>

02:20:17.030 --> 02:20:17.040 align:start position:0%
two-dimensional array now you can
 

02:20:17.040 --> 02:20:19.110 align:start position:0%
two-dimensional array now you can
declare<02:20:17.600><c> a</c><02:20:17.760><c> two-dimensional</c><02:20:18.399><c> array</c><02:20:18.800><c> but</c><02:20:18.960><c> not</c>

02:20:19.110 --> 02:20:19.120 align:start position:0%
declare a two-dimensional array but not
 

02:20:19.120 --> 02:20:21.030 align:start position:0%
declare a two-dimensional array but not
assigned<02:20:19.520><c> values</c><02:20:20.000><c> quite</c><02:20:20.240><c> yet</c><02:20:20.640><c> but</c><02:20:20.800><c> you'll</c>

02:20:21.030 --> 02:20:21.040 align:start position:0%
assigned values quite yet but you'll
 

02:20:21.040 --> 02:20:23.590 align:start position:0%
assigned values quite yet but you'll
need<02:20:21.200><c> to</c><02:20:21.359><c> set</c><02:20:21.600><c> a</c><02:20:21.840><c> maximum</c><02:20:22.479><c> size</c><02:20:23.120><c> so</c><02:20:23.280><c> right</c><02:20:23.439><c> now</c>

02:20:23.590 --> 02:20:23.600 align:start position:0%
need to set a maximum size so right now
 

02:20:23.600 --> 02:20:25.190 align:start position:0%
need to set a maximum size so right now
i'm<02:20:23.680><c> just</c><02:20:23.840><c> going</c><02:20:24.000><c> to</c><02:20:24.080><c> turn</c><02:20:24.319><c> this</c><02:20:24.560><c> into</c><02:20:24.960><c> one</c>

02:20:25.190 --> 02:20:25.200 align:start position:0%
i'm just going to turn this into one
 

02:20:25.200 --> 02:20:26.950 align:start position:0%
i'm just going to turn this into one
giant<02:20:25.680><c> comment</c>

02:20:26.950 --> 02:20:26.960 align:start position:0%
giant comment
 

02:20:26.960 --> 02:20:29.030 align:start position:0%
giant comment
and<02:20:27.359><c> let's</c><02:20:27.600><c> declare</c><02:20:28.160><c> a</c><02:20:28.319><c> two-dimensional</c>

02:20:29.030 --> 02:20:29.040 align:start position:0%
and let's declare a two-dimensional
 

02:20:29.040 --> 02:20:33.030 align:start position:0%
and let's declare a two-dimensional
array<02:20:29.439><c> with</c><02:20:29.760><c> two</c><02:20:30.080><c> rows</c><02:20:30.479><c> and</c><02:20:30.800><c> three</c><02:20:31.120><c> columns</c>

02:20:33.030 --> 02:20:33.040 align:start position:0%
array with two rows and three columns
 

02:20:33.040 --> 02:20:35.270 align:start position:0%
array with two rows and three columns
and<02:20:33.280><c> here's</c><02:20:33.520><c> how</c><02:20:33.760><c> to</c><02:20:33.920><c> assign</c><02:20:34.240><c> some</c><02:20:34.399><c> values</c><02:20:35.120><c> we</c>

02:20:35.270 --> 02:20:35.280 align:start position:0%
and here's how to assign some values we
 

02:20:35.280 --> 02:20:37.429 align:start position:0%
and here's how to assign some values we
will<02:20:35.520><c> type</c><02:20:35.840><c> the</c><02:20:35.920><c> name</c><02:20:36.080><c> of</c><02:20:36.160><c> the</c><02:20:36.319><c> array</c><02:20:37.120><c> followed</c>

02:20:37.429 --> 02:20:37.439 align:start position:0%
will type the name of the array followed
 

02:20:37.439 --> 02:20:39.990 align:start position:0%
will type the name of the array followed
by<02:20:37.680><c> two</c><02:20:37.920><c> sets</c><02:20:38.160><c> of</c><02:20:38.319><c> straight</c><02:20:38.640><c> brackets</c><02:20:39.520><c> we</c><02:20:39.680><c> need</c>

02:20:39.990 --> 02:20:40.000 align:start position:0%
by two sets of straight brackets we need
 

02:20:40.000 --> 02:20:42.550 align:start position:0%
by two sets of straight brackets we need
a<02:20:40.240><c> row</c><02:20:40.479><c> number</c><02:20:40.880><c> and</c><02:20:41.120><c> a</c><02:20:41.280><c> column</c><02:20:41.600><c> number</c><02:20:42.240><c> so</c><02:20:42.399><c> the</c>

02:20:42.550 --> 02:20:42.560 align:start position:0%
a row number and a column number so the
 

02:20:42.560 --> 02:20:44.550 align:start position:0%
a row number and a column number so the
first<02:20:42.880><c> column</c><02:20:43.280><c> within</c><02:20:43.600><c> the</c><02:20:43.680><c> first</c><02:20:44.080><c> row</c><02:20:44.399><c> is</c>

02:20:44.550 --> 02:20:44.560 align:start position:0%
first column within the first row is
 

02:20:44.560 --> 02:20:47.590 align:start position:0%
first column within the first row is
going<02:20:44.720><c> to</c><02:20:44.880><c> be</c><02:20:45.520><c> zero</c><02:20:46.319><c> zero</c><02:20:46.800><c> because</c><02:20:47.120><c> computers</c>

02:20:47.590 --> 02:20:47.600 align:start position:0%
going to be zero zero because computers
 

02:20:47.600 --> 02:20:49.190 align:start position:0%
going to be zero zero because computers
always<02:20:47.840><c> start</c><02:20:48.000><c> with</c><02:20:48.160><c> zero</c>

02:20:49.190 --> 02:20:49.200 align:start position:0%
always start with zero
 

02:20:49.200 --> 02:20:51.910 align:start position:0%
always start with zero
and<02:20:49.520><c> let's</c><02:20:49.760><c> assign</c><02:20:50.080><c> this</c><02:20:50.319><c> a</c><02:20:50.479><c> value</c><02:20:50.960><c> of</c><02:20:51.200><c> one</c><02:20:51.760><c> the</c>

02:20:51.910 --> 02:20:51.920 align:start position:0%
and let's assign this a value of one the
 

02:20:51.920 --> 02:20:54.630 align:start position:0%
and let's assign this a value of one the
second<02:20:52.319><c> column</c><02:20:52.800><c> within</c><02:20:53.200><c> the</c><02:20:53.359><c> first</c><02:20:53.760><c> row</c>

02:20:54.630 --> 02:20:54.640 align:start position:0%
second column within the first row
 

02:20:54.640 --> 02:20:56.150 align:start position:0%
second column within the first row
would<02:20:54.880><c> be</c>

02:20:56.150 --> 02:20:56.160 align:start position:0%
would be
 

02:20:56.160 --> 02:20:59.510 align:start position:0%
would be
zero<02:20:56.960><c> one</c><02:20:57.760><c> and</c><02:20:57.920><c> let's</c><02:20:58.160><c> assign</c><02:20:58.560><c> two</c><02:20:58.800><c> there</c>

02:20:59.510 --> 02:20:59.520 align:start position:0%
zero one and let's assign two there
 

02:20:59.520 --> 02:21:02.230 align:start position:0%
zero one and let's assign two there
then<02:21:00.000><c> zero</c><02:21:00.640><c> two</c><02:21:01.120><c> and</c><02:21:01.280><c> that</c><02:21:01.439><c> will</c><02:21:01.600><c> be</c><02:21:02.000><c> number</c>

02:21:02.230 --> 02:21:02.240 align:start position:0%
then zero two and that will be number
 

02:21:02.240 --> 02:21:04.630 align:start position:0%
then zero two and that will be number
three<02:21:02.960><c> so</c><02:21:03.200><c> the</c><02:21:03.439><c> first</c><02:21:03.840><c> column</c><02:21:04.160><c> within</c><02:21:04.479><c> the</c>

02:21:04.630 --> 02:21:04.640 align:start position:0%
three so the first column within the
 

02:21:04.640 --> 02:21:08.630 align:start position:0%
three so the first column within the
second<02:21:04.960><c> row</c><02:21:05.760><c> would</c><02:21:06.000><c> be</c><02:21:06.640><c> numbers</c><02:21:07.439><c> one</c><02:21:07.920><c> zero</c><02:21:08.479><c> and</c>

02:21:08.630 --> 02:21:08.640 align:start position:0%
second row would be numbers one zero and
 

02:21:08.640 --> 02:21:10.710 align:start position:0%
second row would be numbers one zero and
this<02:21:08.880><c> will</c><02:21:09.040><c> be</c><02:21:09.280><c> four</c><02:21:09.840><c> then</c><02:21:10.000><c> we</c><02:21:10.160><c> will</c><02:21:10.399><c> follow</c>

02:21:10.710 --> 02:21:10.720 align:start position:0%
this will be four then we will follow
 

02:21:10.720 --> 02:21:13.110 align:start position:0%
this will be four then we will follow
the<02:21:10.800><c> same</c><02:21:11.040><c> pattern</c><02:21:11.680><c> so</c><02:21:12.000><c> where</c><02:21:12.319><c> five</c><02:21:12.560><c> was</c><02:21:12.960><c> that</c>

02:21:13.110 --> 02:21:13.120 align:start position:0%
the same pattern so where five was that
 

02:21:13.120 --> 02:21:16.870 align:start position:0%
the same pattern so where five was that
would<02:21:13.280><c> be</c><02:21:13.760><c> one</c><02:21:14.399><c> one</c>

02:21:16.870 --> 02:21:16.880 align:start position:0%
 
 

02:21:16.880 --> 02:21:20.389 align:start position:0%
 
and<02:21:17.280><c> six</c><02:21:17.760><c> is</c><02:21:18.240><c> one</c><02:21:18.960><c> two</c>

02:21:20.389 --> 02:21:20.399 align:start position:0%
and six is one two
 

02:21:20.399 --> 02:21:22.469 align:start position:0%
and six is one two
so<02:21:20.640><c> this</c><02:21:20.880><c> is</c><02:21:21.040><c> another</c><02:21:21.439><c> way</c><02:21:21.680><c> to</c><02:21:21.840><c> initialize</c><02:21:22.399><c> an</c>

02:21:22.469 --> 02:21:22.479 align:start position:0%
so this is another way to initialize an
 

02:21:22.479 --> 02:21:24.950 align:start position:0%
so this is another way to initialize an
array<02:21:22.800><c> you</c><02:21:22.960><c> can</c><02:21:23.200><c> set</c><02:21:23.439><c> a</c><02:21:23.600><c> maximum</c><02:21:24.240><c> size</c><02:21:24.880><c> and</c>

02:21:24.950 --> 02:21:24.960 align:start position:0%
array you can set a maximum size and
 

02:21:24.960 --> 02:21:27.030 align:start position:0%
array you can set a maximum size and
then<02:21:25.200><c> assign</c><02:21:25.520><c> some</c><02:21:25.760><c> values</c><02:21:26.240><c> later</c><02:21:26.720><c> or</c><02:21:26.880><c> you</c>

02:21:27.030 --> 02:21:27.040 align:start position:0%
then assign some values later or you
 

02:21:27.040 --> 02:21:28.630 align:start position:0%
then assign some values later or you
could<02:21:27.280><c> assign</c><02:21:27.600><c> all</c><02:21:27.760><c> of</c><02:21:27.840><c> the</c><02:21:27.920><c> values</c><02:21:28.399><c> right</c>

02:21:28.630 --> 02:21:28.640 align:start position:0%
could assign all of the values right
 

02:21:28.640 --> 02:21:30.070 align:start position:0%
could assign all of the values right
from<02:21:28.800><c> the</c><02:21:28.880><c> beginning</c><02:21:29.280><c> if</c><02:21:29.439><c> you</c><02:21:29.520><c> know</c><02:21:29.680><c> what</c><02:21:29.840><c> they</c>

02:21:30.070 --> 02:21:30.080 align:start position:0%
from the beginning if you know what they
 

02:21:30.080 --> 02:21:32.150 align:start position:0%
from the beginning if you know what they
are<02:21:30.479><c> okay</c><02:21:30.800><c> now</c><02:21:31.040><c> how</c><02:21:31.200><c> can</c><02:21:31.359><c> we</c><02:21:31.520><c> display</c><02:21:32.000><c> the</c>

02:21:32.150 --> 02:21:32.160 align:start position:0%
are okay now how can we display the
 

02:21:32.160 --> 02:21:34.389 align:start position:0%
are okay now how can we display the
elements<02:21:32.720><c> of</c><02:21:32.880><c> a</c><02:21:33.120><c> two-dimensional</c><02:21:33.840><c> array</c>

02:21:34.389 --> 02:21:34.399 align:start position:0%
elements of a two-dimensional array
 

02:21:34.399 --> 02:21:36.950 align:start position:0%
elements of a two-dimensional array
we'll<02:21:34.640><c> have</c><02:21:34.880><c> to</c><02:21:35.040><c> use</c><02:21:35.439><c> nested</c><02:21:35.920><c> loops</c>

02:21:36.950 --> 02:21:36.960 align:start position:0%
we'll have to use nested loops
 

02:21:36.960 --> 02:21:39.030 align:start position:0%
we'll have to use nested loops
so<02:21:37.120><c> let's</c><02:21:37.359><c> create</c><02:21:37.680><c> a</c><02:21:37.840><c> for</c><02:21:38.160><c> loop</c><02:21:38.560><c> and</c><02:21:38.720><c> i</c><02:21:38.880><c> will</c>

02:21:39.030 --> 02:21:39.040 align:start position:0%
so let's create a for loop and i will
 

02:21:39.040 --> 02:21:41.030 align:start position:0%
so let's create a for loop and i will
declare<02:21:39.520><c> an</c><02:21:39.680><c> index</c><02:21:40.000><c> of</c><02:21:40.160><c> i</c>

02:21:41.030 --> 02:21:41.040 align:start position:0%
declare an index of i
 

02:21:41.040 --> 02:21:43.349 align:start position:0%
declare an index of i
set<02:21:41.200><c> this</c><02:21:41.439><c> equal</c><02:21:41.680><c> to</c><02:21:41.920><c> zero</c><02:21:42.640><c> and</c><02:21:42.800><c> for</c><02:21:42.960><c> the</c><02:21:43.120><c> time</c>

02:21:43.349 --> 02:21:43.359 align:start position:0%
set this equal to zero and for the time
 

02:21:43.359 --> 02:21:45.270 align:start position:0%
set this equal to zero and for the time
being<02:21:43.680><c> i'm</c><02:21:43.840><c> going</c><02:21:44.000><c> to</c><02:21:44.160><c> say</c><02:21:44.479><c> i</c>

02:21:45.270 --> 02:21:45.280 align:start position:0%
being i'm going to say i
 

02:21:45.280 --> 02:21:47.830 align:start position:0%
being i'm going to say i
is<02:21:45.520><c> less</c><02:21:45.840><c> than</c><02:21:46.399><c> the</c><02:21:46.640><c> number</c><02:21:47.040><c> of</c><02:21:47.200><c> rows</c><02:21:47.520><c> that</c><02:21:47.680><c> we</c>

02:21:47.830 --> 02:21:47.840 align:start position:0%
is less than the number of rows that we
 

02:21:47.840 --> 02:21:50.230 align:start position:0%
is less than the number of rows that we
have<02:21:48.240><c> so</c><02:21:48.479><c> right</c><02:21:48.640><c> now</c><02:21:48.800><c> we</c><02:21:48.960><c> have</c><02:21:49.120><c> two</c><02:21:49.359><c> rows</c><02:21:50.080><c> but</c>

02:21:50.230 --> 02:21:50.240 align:start position:0%
have so right now we have two rows but
 

02:21:50.240 --> 02:21:51.910 align:start position:0%
have so right now we have two rows but
we're<02:21:50.399><c> going</c><02:21:50.560><c> to</c><02:21:50.720><c> change</c><02:21:50.960><c> this</c><02:21:51.200><c> value</c><02:21:51.520><c> later</c>

02:21:51.910 --> 02:21:51.920 align:start position:0%
we're going to change this value later
 

02:21:51.920 --> 02:21:53.590 align:start position:0%
we're going to change this value later
to<02:21:52.080><c> something</c><02:21:52.399><c> that's</c><02:21:52.640><c> more</c><02:21:52.880><c> flexible</c><02:21:53.439><c> that</c>

02:21:53.590 --> 02:21:53.600 align:start position:0%
to something that's more flexible that
 

02:21:53.600 --> 02:21:55.349 align:start position:0%
to something that's more flexible that
will<02:21:53.840><c> calculate</c><02:21:54.399><c> the</c><02:21:54.479><c> amount</c><02:21:54.720><c> of</c><02:21:54.880><c> rows</c><02:21:55.200><c> that</c>

02:21:55.349 --> 02:21:55.359 align:start position:0%
will calculate the amount of rows that
 

02:21:55.359 --> 02:21:57.830 align:start position:0%
will calculate the amount of rows that
we<02:21:55.439><c> have</c><02:21:56.000><c> and</c><02:21:56.080><c> then</c><02:21:56.319><c> i</c><02:21:56.399><c> will</c><02:21:56.640><c> increment</c><02:21:57.280><c> i</c><02:21:57.520><c> by</c>

02:21:57.830 --> 02:21:57.840 align:start position:0%
we have and then i will increment i by
 

02:21:57.840 --> 02:22:00.230 align:start position:0%
we have and then i will increment i by
one<02:21:58.319><c> now</c><02:21:58.560><c> let's</c><02:21:58.800><c> create</c><02:21:59.200><c> a</c><02:21:59.439><c> nested</c><02:21:59.920><c> loop</c>

02:22:00.230 --> 02:22:00.240 align:start position:0%
one now let's create a nested loop
 

02:22:00.240 --> 02:22:01.990 align:start position:0%
one now let's create a nested loop
that's<02:22:00.479><c> in</c><02:22:00.640><c> charge</c><02:22:00.960><c> of</c><02:22:01.120><c> keeping</c><02:22:01.439><c> track</c><02:22:01.760><c> of</c><02:22:01.840><c> the</c>

02:22:01.990 --> 02:22:02.000 align:start position:0%
that's in charge of keeping track of the
 

02:22:02.000 --> 02:22:03.670 align:start position:0%
that's in charge of keeping track of the
columns

02:22:03.670 --> 02:22:03.680 align:start position:0%
columns
 

02:22:03.680 --> 02:22:06.550 align:start position:0%
columns
and<02:22:04.000><c> let's</c><02:22:04.319><c> use</c><02:22:04.640><c> an</c><02:22:04.960><c> index</c><02:22:05.439><c> of</c><02:22:05.680><c> j</c><02:22:06.000><c> because</c><02:22:06.319><c> we</c>

02:22:06.550 --> 02:22:06.560 align:start position:0%
and let's use an index of j because we
 

02:22:06.560 --> 02:22:08.870 align:start position:0%
and let's use an index of j because we
do<02:22:06.720><c> not</c><02:22:06.880><c> want</c><02:22:07.120><c> to</c><02:22:07.280><c> reuse</c><02:22:07.680><c> i</c>

02:22:08.870 --> 02:22:08.880 align:start position:0%
do not want to reuse i
 

02:22:08.880 --> 02:22:12.070 align:start position:0%
do not want to reuse i
so<02:22:09.280><c> set</c><02:22:09.520><c> j</c><02:22:10.000><c> equal</c><02:22:10.319><c> to</c><02:22:10.479><c> zero</c><02:22:11.280><c> we</c><02:22:11.439><c> will</c><02:22:11.600><c> continue</c>

02:22:12.070 --> 02:22:12.080 align:start position:0%
so set j equal to zero we will continue
 

02:22:12.080 --> 02:22:13.990 align:start position:0%
so set j equal to zero we will continue
this<02:22:12.319><c> as</c><02:22:12.560><c> long</c><02:22:12.880><c> as</c><02:22:13.200><c> j</c>

02:22:13.990 --> 02:22:14.000 align:start position:0%
this as long as j
 

02:22:14.000 --> 02:22:16.389 align:start position:0%
this as long as j
is<02:22:14.240><c> less</c><02:22:14.479><c> than</c><02:22:15.120><c> however</c><02:22:15.520><c> many</c><02:22:15.840><c> columns</c><02:22:16.240><c> we</c>

02:22:16.389 --> 02:22:16.399 align:start position:0%
is less than however many columns we
 

02:22:16.399 --> 02:22:19.510 align:start position:0%
is less than however many columns we
have<02:22:16.960><c> three</c><02:22:17.680><c> a</c><02:22:17.840><c> maximum</c><02:22:18.319><c> of</c><02:22:18.479><c> three</c><02:22:19.120><c> and</c><02:22:19.280><c> then</c>

02:22:19.510 --> 02:22:19.520 align:start position:0%
have three a maximum of three and then
 

02:22:19.520 --> 02:22:22.070 align:start position:0%
have three a maximum of three and then
increment<02:22:20.160><c> j</c><02:22:20.399><c> by</c><02:22:20.640><c> one</c><02:22:21.120><c> so</c><02:22:21.439><c> during</c><02:22:21.840><c> each</c>

02:22:22.070 --> 02:22:22.080 align:start position:0%
increment j by one so during each
 

02:22:22.080 --> 02:22:24.070 align:start position:0%
increment j by one so during each
iteration<02:22:22.640><c> of</c><02:22:22.800><c> the</c><02:22:23.040><c> inner</c><02:22:23.280><c> for</c><02:22:23.520><c> loop</c><02:22:23.840><c> let's</c>

02:22:24.070 --> 02:22:24.080 align:start position:0%
iteration of the inner for loop let's
 

02:22:24.080 --> 02:22:26.389 align:start position:0%
iteration of the inner for loop let's
display<02:22:24.560><c> one</c><02:22:24.720><c> of</c><02:22:24.800><c> these</c><02:22:24.960><c> elements</c><02:22:25.760><c> so</c><02:22:26.000><c> we</c><02:22:26.160><c> will</c>

02:22:26.389 --> 02:22:26.399 align:start position:0%
display one of these elements so we will
 

02:22:26.399 --> 02:22:29.190 align:start position:0%
display one of these elements so we will
use<02:22:26.720><c> the</c><02:22:26.880><c> format</c><02:22:27.280><c> specifier</c><02:22:28.080><c> for</c><02:22:28.240><c> an</c><02:22:28.399><c> integer</c>

02:22:29.190 --> 02:22:29.200 align:start position:0%
use the format specifier for an integer
 

02:22:29.200 --> 02:22:30.790 align:start position:0%
use the format specifier for an integer
d<02:22:29.439><c> is</c><02:22:29.600><c> fine</c>

02:22:30.790 --> 02:22:30.800 align:start position:0%
d is fine
 

02:22:30.800 --> 02:22:33.830 align:start position:0%
d is fine
followed<02:22:31.200><c> by</c><02:22:31.840><c> our</c><02:22:32.080><c> array</c><02:22:32.640><c> numbers</c><02:22:33.520><c> and</c><02:22:33.600><c> then</c>

02:22:33.830 --> 02:22:33.840 align:start position:0%
followed by our array numbers and then
 

02:22:33.840 --> 02:22:36.870 align:start position:0%
followed by our array numbers and then
we<02:22:34.000><c> have</c><02:22:34.399><c> two</c><02:22:34.720><c> indices</c><02:22:35.680><c> so</c><02:22:35.920><c> the</c><02:22:36.080><c> row</c><02:22:36.560><c> is</c><02:22:36.720><c> going</c>

02:22:36.870 --> 02:22:36.880 align:start position:0%
we have two indices so the row is going
 

02:22:36.880 --> 02:22:38.150 align:start position:0%
we have two indices so the row is going
to<02:22:37.040><c> be</c><02:22:37.359><c> i</c>

02:22:38.150 --> 02:22:38.160 align:start position:0%
to be i
 

02:22:38.160 --> 02:22:40.150 align:start position:0%
to be i
and<02:22:38.319><c> this</c><02:22:38.479><c> will</c><02:22:38.720><c> begin</c><02:22:39.040><c> at</c><02:22:39.200><c> zero</c>

02:22:40.150 --> 02:22:40.160 align:start position:0%
and this will begin at zero
 

02:22:40.160 --> 02:22:42.710 align:start position:0%
and this will begin at zero
and<02:22:40.479><c> the</c><02:22:40.640><c> columns</c><02:22:41.280><c> is</c><02:22:41.600><c> j</c><02:22:42.080><c> this</c><02:22:42.319><c> will</c><02:22:42.479><c> also</c>

02:22:42.710 --> 02:22:42.720 align:start position:0%
and the columns is j this will also
 

02:22:42.720 --> 02:22:46.070 align:start position:0%
and the columns is j this will also
begin<02:22:43.040><c> at</c><02:22:43.200><c> zero</c><02:22:43.840><c> so</c><02:22:44.080><c> after</c><02:22:44.640><c> each</c><02:22:44.960><c> iteration</c><02:22:45.920><c> of</c>

02:22:46.070 --> 02:22:46.080 align:start position:0%
begin at zero so after each iteration of
 

02:22:46.080 --> 02:22:48.630 align:start position:0%
begin at zero so after each iteration of
the<02:22:46.319><c> inner</c><02:22:46.560><c> for</c><02:22:46.800><c> loop</c><02:22:47.120><c> we</c><02:22:47.280><c> will</c><02:22:47.600><c> increase</c><02:22:48.160><c> j</c>

02:22:48.630 --> 02:22:48.640 align:start position:0%
the inner for loop we will increase j
 

02:22:48.640 --> 02:22:50.630 align:start position:0%
the inner for loop we will increase j
when<02:22:48.880><c> we</c><02:22:49.040><c> finish</c><02:22:49.439><c> the</c><02:22:49.600><c> inner</c><02:22:49.920><c> for</c><02:22:50.160><c> loop</c><02:22:50.479><c> we</c>

02:22:50.630 --> 02:22:50.640 align:start position:0%
when we finish the inner for loop we
 

02:22:50.640 --> 02:22:53.429 align:start position:0%
when we finish the inner for loop we
will<02:22:50.880><c> increment</c><02:22:51.520><c> i</c><02:22:51.760><c> by</c><02:22:52.000><c> one</c><02:22:52.720><c> so</c><02:22:52.960><c> by</c><02:22:53.120><c> using</c>

02:22:53.429 --> 02:22:53.439 align:start position:0%
will increment i by one so by using
 

02:22:53.439 --> 02:22:55.670 align:start position:0%
will increment i by one so by using
nested<02:22:53.840><c> for</c><02:22:54.160><c> loops</c><02:22:54.479><c> we</c><02:22:54.640><c> can</c><02:22:54.800><c> iterate</c><02:22:55.280><c> over</c><02:22:55.520><c> all</c>

02:22:55.670 --> 02:22:55.680 align:start position:0%
nested for loops we can iterate over all
 

02:22:55.680 --> 02:22:57.590 align:start position:0%
nested for loops we can iterate over all
of<02:22:55.760><c> the</c><02:22:55.920><c> elements</c><02:22:56.319><c> of</c><02:22:56.399><c> this</c><02:22:56.640><c> array</c><02:22:57.359><c> so</c><02:22:57.520><c> i'm</c>

02:22:57.590 --> 02:22:57.600 align:start position:0%
of the elements of this array so i'm
 

02:22:57.600 --> 02:22:59.830 align:start position:0%
of the elements of this array so i'm
just<02:22:57.760><c> going</c><02:22:58.000><c> to</c><02:22:58.240><c> add</c><02:22:58.479><c> a</c><02:22:58.640><c> space</c><02:22:59.200><c> after</c><02:22:59.680><c> our</c>

02:22:59.830 --> 02:22:59.840 align:start position:0%
just going to add a space after our
 

02:22:59.840 --> 02:23:01.990 align:start position:0%
just going to add a space after our
number<02:23:00.479><c> and</c><02:23:00.640><c> we</c><02:23:00.800><c> should</c><02:23:00.960><c> probably</c><02:23:01.359><c> add</c><02:23:01.600><c> a</c><02:23:01.760><c> new</c>

02:23:01.990 --> 02:23:02.000 align:start position:0%
number and we should probably add a new
 

02:23:02.000 --> 02:23:04.389 align:start position:0%
number and we should probably add a new
line<02:23:02.319><c> after</c><02:23:02.640><c> each</c><02:23:02.880><c> row</c><02:23:03.439><c> so</c><02:23:03.600><c> i'll</c><02:23:03.760><c> add</c><02:23:04.000><c> a</c><02:23:04.160><c> new</c>

02:23:04.389 --> 02:23:04.399 align:start position:0%
line after each row so i'll add a new
 

02:23:04.399 --> 02:23:07.270 align:start position:0%
line after each row so i'll add a new
line<02:23:04.960><c> let's</c><02:23:05.280><c> test</c><02:23:05.600><c> this</c>

02:23:07.270 --> 02:23:07.280 align:start position:0%
line let's test this
 

02:23:07.280 --> 02:23:10.309 align:start position:0%
line let's test this
here<02:23:07.520><c> we</c><02:23:07.600><c> go</c><02:23:07.760><c> we</c><02:23:07.920><c> have</c><02:23:08.319><c> our</c><02:23:08.640><c> table</c><02:23:09.200><c> of</c><02:23:09.600><c> two</c><02:23:09.840><c> rows</c>

02:23:10.309 --> 02:23:10.319 align:start position:0%
here we go we have our table of two rows
 

02:23:10.319 --> 02:23:12.389 align:start position:0%
here we go we have our table of two rows
and<02:23:10.720><c> three</c><02:23:10.960><c> columns</c><02:23:11.760><c> now</c><02:23:11.920><c> there's</c><02:23:12.160><c> one</c>

02:23:12.389 --> 02:23:12.399 align:start position:0%
and three columns now there's one
 

02:23:12.399 --> 02:23:14.630 align:start position:0%
and three columns now there's one
situation<02:23:13.040><c> that</c><02:23:13.120><c> we</c><02:23:13.280><c> may</c><02:23:13.439><c> run</c><02:23:13.680><c> into</c><02:23:14.319><c> what</c><02:23:14.560><c> if</c>

02:23:14.630 --> 02:23:14.640 align:start position:0%
situation that we may run into what if
 

02:23:14.640 --> 02:23:17.030 align:start position:0%
situation that we may run into what if
we<02:23:14.880><c> change</c><02:23:15.359><c> the</c><02:23:15.439><c> amount</c><02:23:15.760><c> of</c><02:23:16.000><c> rows</c><02:23:16.399><c> and</c><02:23:16.640><c> columns</c>

02:23:17.030 --> 02:23:17.040 align:start position:0%
we change the amount of rows and columns
 

02:23:17.040 --> 02:23:19.510 align:start position:0%
we change the amount of rows and columns
that<02:23:17.200><c> we</c><02:23:17.359><c> have</c><02:23:17.920><c> so</c><02:23:18.160><c> let's</c><02:23:18.399><c> say</c><02:23:18.640><c> that</c><02:23:18.880><c> we</c><02:23:19.120><c> add</c>

02:23:19.510 --> 02:23:19.520 align:start position:0%
that we have so let's say that we add
 

02:23:19.520 --> 02:23:21.830 align:start position:0%
that we have so let's say that we add
one<02:23:19.760><c> more</c><02:23:20.000><c> row</c><02:23:20.560><c> our</c><02:23:20.800><c> 2d</c><02:23:21.120><c> array</c><02:23:21.359><c> of</c><02:23:21.439><c> numbers</c>

02:23:21.830 --> 02:23:21.840 align:start position:0%
one more row our 2d array of numbers
 

02:23:21.840 --> 02:23:25.910 align:start position:0%
one more row our 2d array of numbers
will<02:23:22.080><c> have</c><02:23:22.399><c> three</c><02:23:22.720><c> rows</c><02:23:23.120><c> and</c><02:23:23.359><c> three</c><02:23:23.680><c> columns</c>

02:23:25.910 --> 02:23:25.920 align:start position:0%
will have three rows and three columns
 

02:23:25.920 --> 02:23:28.870 align:start position:0%
will have three rows and three columns
row<02:23:26.240><c> two</c><02:23:26.560><c> column</c><02:23:26.960><c> zero</c><02:23:27.439><c> equals</c><02:23:28.000><c> seven</c>

02:23:28.870 --> 02:23:28.880 align:start position:0%
row two column zero equals seven
 

02:23:28.880 --> 02:23:32.710 align:start position:0%
row two column zero equals seven
row<02:23:29.200><c> two</c><02:23:29.760><c> column</c><02:23:30.160><c> one</c><02:23:30.560><c> will</c><02:23:30.880><c> equal</c><02:23:31.359><c> eight</c><02:23:32.240><c> and</c>

02:23:32.710 --> 02:23:32.720 align:start position:0%
row two column one will equal eight and
 

02:23:32.720 --> 02:23:35.910 align:start position:0%
row two column one will equal eight and
row<02:23:33.040><c> two</c><02:23:33.439><c> column</c><02:23:33.840><c> two</c><02:23:34.160><c> will</c><02:23:34.479><c> equal</c><02:23:34.960><c> nine</c><02:23:35.520><c> so</c><02:23:35.760><c> if</c>

02:23:35.910 --> 02:23:35.920 align:start position:0%
row two column two will equal nine so if
 

02:23:35.920 --> 02:23:37.830 align:start position:0%
row two column two will equal nine so if
i<02:23:36.000><c> were</c><02:23:36.160><c> to</c><02:23:36.240><c> run</c><02:23:36.399><c> this</c><02:23:36.640><c> again</c><02:23:37.040><c> well</c><02:23:37.280><c> this</c><02:23:37.520><c> last</c>

02:23:37.830 --> 02:23:37.840 align:start position:0%
i were to run this again well this last
 

02:23:37.840 --> 02:23:39.990 align:start position:0%
i were to run this again well this last
row<02:23:38.160><c> is</c><02:23:38.399><c> not</c><02:23:38.560><c> going</c><02:23:38.800><c> to</c><02:23:38.880><c> be</c><02:23:39.120><c> displayed</c><02:23:39.680><c> so</c><02:23:39.920><c> it</c>

02:23:39.990 --> 02:23:40.000 align:start position:0%
row is not going to be displayed so it
 

02:23:40.000 --> 02:23:42.150 align:start position:0%
row is not going to be displayed so it
would<02:23:40.160><c> be</c><02:23:40.399><c> better</c><02:23:40.800><c> if</c><02:23:40.960><c> we</c><02:23:41.120><c> can</c><02:23:41.359><c> calculate</c><02:23:42.000><c> how</c>

02:23:42.150 --> 02:23:42.160 align:start position:0%
would be better if we can calculate how
 

02:23:42.160 --> 02:23:44.150 align:start position:0%
would be better if we can calculate how
many<02:23:42.399><c> rows</c><02:23:42.800><c> and</c><02:23:43.040><c> columns</c><02:23:43.520><c> are</c><02:23:43.680><c> within</c><02:23:44.080><c> our</c>

02:23:44.150 --> 02:23:44.160 align:start position:0%
many rows and columns are within our
 

02:23:44.160 --> 02:23:46.309 align:start position:0%
many rows and columns are within our
two-dimensional<02:23:44.880><c> array</c><02:23:45.359><c> and</c><02:23:45.600><c> here's</c><02:23:45.920><c> one</c><02:23:46.160><c> way</c>

02:23:46.309 --> 02:23:46.319 align:start position:0%
two-dimensional array and here's one way
 

02:23:46.319 --> 02:23:48.550 align:start position:0%
two-dimensional array and here's one way
to<02:23:46.479><c> do</c><02:23:46.720><c> so</c><02:23:47.200><c> i'm</c><02:23:47.359><c> going</c><02:23:47.600><c> to</c><02:23:47.760><c> declare</c><02:23:48.160><c> two</c><02:23:48.399><c> new</c>

02:23:48.550 --> 02:23:48.560 align:start position:0%
to do so i'm going to declare two new
 

02:23:48.560 --> 02:23:50.710 align:start position:0%
to do so i'm going to declare two new
variables<02:23:49.280><c> int</c><02:23:49.760><c> rows</c>

02:23:50.710 --> 02:23:50.720 align:start position:0%
variables int rows
 

02:23:50.720 --> 02:23:53.190 align:start position:0%
variables int rows
and<02:23:51.200><c> into</c><02:23:51.520><c> columns</c><02:23:52.319><c> and</c><02:23:52.479><c> i</c><02:23:52.560><c> will</c><02:23:52.800><c> set</c><02:23:53.040><c> the</c>

02:23:53.190 --> 02:23:53.200 align:start position:0%
and into columns and i will set the
 

02:23:53.200 --> 02:23:55.830 align:start position:0%
and into columns and i will set the
condition<02:23:53.760><c> of</c><02:23:53.840><c> the</c><02:23:54.080><c> outer</c><02:23:54.319><c> for</c><02:23:54.640><c> loop</c><02:23:54.880><c> to</c><02:23:54.960><c> be</c><02:23:55.600><c> as</c>

02:23:55.830 --> 02:23:55.840 align:start position:0%
condition of the outer for loop to be as
 

02:23:55.840 --> 02:23:59.030 align:start position:0%
condition of the outer for loop to be as
long<02:23:56.080><c> as</c><02:23:56.319><c> i</c><02:23:56.800><c> is</c><02:23:57.040><c> less</c><02:23:57.359><c> than</c><02:23:57.840><c> rows</c><02:23:58.720><c> and</c><02:23:58.880><c> the</c>

02:23:59.030 --> 02:23:59.040 align:start position:0%
long as i is less than rows and the
 

02:23:59.040 --> 02:24:01.750 align:start position:0%
long as i is less than rows and the
inner<02:23:59.280><c> for</c><02:23:59.520><c> loop</c><02:23:59.840><c> will</c><02:24:00.000><c> be</c><02:24:00.399><c> j</c><02:24:00.880><c> is</c><02:24:01.120><c> less</c><02:24:01.520><c> than</c>

02:24:01.750 --> 02:24:01.760 align:start position:0%
inner for loop will be j is less than
 

02:24:01.760 --> 02:24:02.870 align:start position:0%
inner for loop will be j is less than
columns

02:24:02.870 --> 02:24:02.880 align:start position:0%
columns
 

02:24:02.880 --> 02:24:04.469 align:start position:0%
columns
now<02:24:03.040><c> we</c><02:24:03.200><c> just</c><02:24:03.359><c> need</c><02:24:03.520><c> to</c><02:24:03.680><c> calculate</c><02:24:04.160><c> what</c><02:24:04.319><c> these</c>

02:24:04.469 --> 02:24:04.479 align:start position:0%
now we just need to calculate what these
 

02:24:04.479 --> 02:24:06.469 align:start position:0%
now we just need to calculate what these
numbers<02:24:04.880><c> are</c><02:24:05.040><c> going</c><02:24:05.200><c> to</c><02:24:05.359><c> be</c><02:24:05.760><c> to</c><02:24:05.920><c> calculate</c>

02:24:06.469 --> 02:24:06.479 align:start position:0%
numbers are going to be to calculate
 

02:24:06.479 --> 02:24:09.590 align:start position:0%
numbers are going to be to calculate
rows<02:24:06.880><c> we</c><02:24:07.040><c> can</c><02:24:07.200><c> use</c><02:24:07.520><c> the</c><02:24:07.840><c> size</c><02:24:08.319><c> of</c><02:24:08.560><c> operator</c><02:24:09.520><c> and</c>

02:24:09.590 --> 02:24:09.600 align:start position:0%
rows we can use the size of operator and
 

02:24:09.600 --> 02:24:11.990 align:start position:0%
rows we can use the size of operator and
then<02:24:09.840><c> pass</c><02:24:10.160><c> in</c><02:24:10.479><c> the</c><02:24:10.640><c> entire</c><02:24:11.280><c> size</c><02:24:11.680><c> of</c><02:24:11.840><c> our</c>

02:24:11.990 --> 02:24:12.000 align:start position:0%
then pass in the entire size of our
 

02:24:12.000 --> 02:24:13.910 align:start position:0%
then pass in the entire size of our
two-dimensional<02:24:12.720><c> rib</c><02:24:13.200><c> and</c><02:24:13.359><c> we're</c><02:24:13.600><c> going</c><02:24:13.760><c> to</c>

02:24:13.910 --> 02:24:13.920 align:start position:0%
two-dimensional rib and we're going to
 

02:24:13.920 --> 02:24:16.630 align:start position:0%
two-dimensional rib and we're going to
divide<02:24:14.319><c> this</c><02:24:14.560><c> by</c><02:24:14.800><c> the</c><02:24:14.960><c> size</c><02:24:15.439><c> of</c><02:24:16.080><c> one</c><02:24:16.319><c> of</c><02:24:16.479><c> our</c>

02:24:16.630 --> 02:24:16.640 align:start position:0%
divide this by the size of one of our
 

02:24:16.640 --> 02:24:18.550 align:start position:0%
divide this by the size of one of our
rows<02:24:17.200><c> they're</c><02:24:17.359><c> all</c><02:24:17.520><c> going</c><02:24:17.680><c> to</c><02:24:17.840><c> have</c><02:24:18.080><c> the</c><02:24:18.240><c> same</c>

02:24:18.550 --> 02:24:18.560 align:start position:0%
rows they're all going to have the same
 

02:24:18.560 --> 02:24:21.510 align:start position:0%
rows they're all going to have the same
size<02:24:19.200><c> so</c><02:24:19.359><c> we</c><02:24:19.520><c> can</c><02:24:19.680><c> pass</c><02:24:20.000><c> in</c><02:24:20.240><c> our</c><02:24:20.399><c> rain</c><02:24:20.640><c> numbers</c>

02:24:21.510 --> 02:24:21.520 align:start position:0%
size so we can pass in our rain numbers
 

02:24:21.520 --> 02:24:23.750 align:start position:0%
size so we can pass in our rain numbers
and<02:24:21.600><c> then</c><02:24:21.840><c> specify</c><02:24:22.399><c> one</c><02:24:22.560><c> of</c><02:24:22.720><c> the</c><02:24:22.800><c> rows</c><02:24:23.520><c> let's</c>

02:24:23.750 --> 02:24:23.760 align:start position:0%
and then specify one of the rows let's
 

02:24:23.760 --> 02:24:25.190 align:start position:0%
and then specify one of the rows let's
say<02:24:23.920><c> the</c><02:24:24.080><c> first</c><02:24:24.399><c> row</c><02:24:24.720><c> they're</c><02:24:24.880><c> all</c><02:24:24.960><c> going</c><02:24:25.120><c> to</c>

02:24:25.190 --> 02:24:25.200 align:start position:0%
say the first row they're all going to
 

02:24:25.200 --> 02:24:27.190 align:start position:0%
say the first row they're all going to
be<02:24:25.359><c> the</c><02:24:25.520><c> same</c><02:24:26.160><c> okay</c><02:24:26.479><c> so</c><02:24:26.640><c> that's</c><02:24:26.880><c> how</c><02:24:26.960><c> we</c><02:24:27.120><c> can</c>

02:24:27.190 --> 02:24:27.200 align:start position:0%
be the same okay so that's how we can
 

02:24:27.200 --> 02:24:28.870 align:start position:0%
be the same okay so that's how we can
calculate<02:24:27.680><c> the</c><02:24:27.920><c> number</c><02:24:28.160><c> of</c><02:24:28.319><c> rows</c><02:24:28.640><c> that</c><02:24:28.800><c> we</c>

02:24:28.870 --> 02:24:28.880 align:start position:0%
calculate the number of rows that we
 

02:24:28.880 --> 02:24:30.790 align:start position:0%
calculate the number of rows that we
have<02:24:29.359><c> now</c><02:24:29.600><c> to</c><02:24:29.680><c> find</c><02:24:29.920><c> the</c><02:24:30.000><c> number</c><02:24:30.240><c> of</c><02:24:30.399><c> columns</c>

02:24:30.790 --> 02:24:30.800 align:start position:0%
have now to find the number of columns
 

02:24:30.800 --> 02:24:32.870 align:start position:0%
have now to find the number of columns
we<02:24:30.960><c> can</c><02:24:31.120><c> copy</c><02:24:31.520><c> what</c><02:24:31.680><c> we</c><02:24:31.840><c> have</c><02:24:32.000><c> here</c><02:24:32.640><c> and</c><02:24:32.720><c> then</c>

02:24:32.870 --> 02:24:32.880 align:start position:0%
we can copy what we have here and then
 

02:24:32.880 --> 02:24:34.469 align:start position:0%
we can copy what we have here and then
just<02:24:33.040><c> make</c><02:24:33.200><c> a</c><02:24:33.280><c> few</c><02:24:33.520><c> changes</c>

02:24:34.469 --> 02:24:34.479 align:start position:0%
just make a few changes
 

02:24:34.479 --> 02:24:36.070 align:start position:0%
just make a few changes
so<02:24:34.720><c> we</c><02:24:34.880><c> will</c><02:24:35.120><c> say</c>

02:24:36.070 --> 02:24:36.080 align:start position:0%
so we will say
 

02:24:36.080 --> 02:24:39.030 align:start position:0%
so we will say
the<02:24:36.240><c> size</c><02:24:36.640><c> of</c><02:24:36.720><c> the</c><02:24:36.880><c> first</c><02:24:37.200><c> row</c><02:24:37.760><c> row</c><02:24:38.000><c> 0</c>

02:24:39.030 --> 02:24:39.040 align:start position:0%
the size of the first row row 0
 

02:24:39.040 --> 02:24:41.030 align:start position:0%
the size of the first row row 0
divided<02:24:39.600><c> by</c><02:24:39.840><c> the</c><02:24:40.000><c> size</c><02:24:40.479><c> of</c><02:24:40.640><c> one</c><02:24:40.800><c> of</c><02:24:40.880><c> the</c>

02:24:41.030 --> 02:24:41.040 align:start position:0%
divided by the size of one of the
 

02:24:41.040 --> 02:24:44.710 align:start position:0%
divided by the size of one of the
elements<02:24:41.600><c> found</c><02:24:41.840><c> within</c><02:24:42.160><c> the</c><02:24:42.240><c> first</c><02:24:42.640><c> row</c>

02:24:44.710 --> 02:24:44.720 align:start position:0%
elements found within the first row
 

02:24:44.720 --> 02:24:47.510 align:start position:0%
elements found within the first row
so<02:24:44.880><c> we</c><02:24:45.040><c> can</c><02:24:45.200><c> say</c><02:24:45.600><c> zero</c><02:24:46.080><c> zero</c><02:24:46.800><c> and</c><02:24:47.040><c> let's</c><02:24:47.280><c> print</c>

02:24:47.510 --> 02:24:47.520 align:start position:0%
so we can say zero zero and let's print
 

02:24:47.520 --> 02:24:49.110 align:start position:0%
so we can say zero zero and let's print
the<02:24:47.680><c> amount</c><02:24:47.920><c> of</c><02:24:48.000><c> rows</c><02:24:48.319><c> and</c><02:24:48.479><c> columns</c><02:24:48.880><c> that</c><02:24:48.960><c> we</c>

02:24:49.110 --> 02:24:49.120 align:start position:0%
the amount of rows and columns that we
 

02:24:49.120 --> 02:24:54.230 align:start position:0%
the amount of rows and columns that we
have<02:24:49.280><c> just</c><02:24:49.439><c> to</c><02:24:49.600><c> test</c><02:24:49.920><c> it</c>

02:24:54.230 --> 02:24:54.240 align:start position:0%
 
 

02:24:54.240 --> 02:24:56.710 align:start position:0%
 
so<02:24:54.399><c> we</c><02:24:54.560><c> have</c><02:24:55.040><c> rows</c>

02:24:56.710 --> 02:24:56.720 align:start position:0%
so we have rows
 

02:24:56.720 --> 02:24:59.830 align:start position:0%
so we have rows
and<02:24:57.040><c> columns</c>

02:24:59.830 --> 02:24:59.840 align:start position:0%
 
 

02:24:59.840 --> 02:25:01.110 align:start position:0%
 
i'm<02:25:00.160><c> just</c><02:25:00.240><c> going</c><02:25:00.399><c> to</c><02:25:00.560><c> add</c><02:25:00.640><c> a</c><02:25:00.720><c> new</c><02:25:00.880><c> line</c>

02:25:01.110 --> 02:25:01.120 align:start position:0%
i'm just going to add a new line
 

02:25:01.120 --> 02:25:05.349 align:start position:0%
i'm just going to add a new line
character<02:25:01.520><c> real</c><02:25:01.760><c> quick</c>

02:25:05.349 --> 02:25:05.359 align:start position:0%
 
 

02:25:05.359 --> 02:25:08.230 align:start position:0%
 
okay<02:25:05.680><c> so</c><02:25:05.840><c> we</c><02:25:06.000><c> have</c><02:25:06.319><c> three</c><02:25:06.640><c> rows</c><02:25:07.120><c> three</c><02:25:07.359><c> columns</c>

02:25:08.230 --> 02:25:08.240 align:start position:0%
okay so we have three rows three columns
 

02:25:08.240 --> 02:25:10.630 align:start position:0%
okay so we have three rows three columns
and<02:25:08.399><c> here's</c><02:25:08.720><c> our</c><02:25:08.880><c> table</c><02:25:09.520><c> three</c><02:25:09.840><c> rows</c><02:25:10.319><c> with</c>

02:25:10.630 --> 02:25:10.640 align:start position:0%
and here's our table three rows with
 

02:25:10.640 --> 02:25:12.710 align:start position:0%
and here's our table three rows with
three<02:25:10.880><c> columns</c><02:25:11.280><c> a</c><02:25:11.359><c> piece</c><02:25:12.000><c> so</c><02:25:12.240><c> yeah</c><02:25:12.399><c> that's</c>

02:25:12.710 --> 02:25:12.720 align:start position:0%
three columns a piece so yeah that's
 

02:25:12.720 --> 02:25:14.630 align:start position:0%
three columns a piece so yeah that's
basically<02:25:13.120><c> a</c><02:25:13.280><c> two-dimensional</c><02:25:14.000><c> array</c><02:25:14.399><c> it's</c>

02:25:14.630 --> 02:25:14.640 align:start position:0%
basically a two-dimensional array it's
 

02:25:14.640 --> 02:25:17.429 align:start position:0%
basically a two-dimensional array it's
an<02:25:14.800><c> array</c><02:25:15.280><c> of</c><02:25:15.439><c> arrays</c><02:25:16.080><c> where</c><02:25:16.399><c> each</c><02:25:16.640><c> element</c><02:25:17.200><c> is</c>

02:25:17.429 --> 02:25:17.439 align:start position:0%
an array of arrays where each element is
 

02:25:17.439 --> 02:25:19.910 align:start position:0%
an array of arrays where each element is
an<02:25:17.680><c> entire</c><02:25:18.319><c> array</c><02:25:18.880><c> it's</c><02:25:19.120><c> useful</c><02:25:19.520><c> if</c><02:25:19.600><c> you</c><02:25:19.680><c> need</c>

02:25:19.910 --> 02:25:19.920 align:start position:0%
an entire array it's useful if you need
 

02:25:19.920 --> 02:25:23.030 align:start position:0%
an entire array it's useful if you need
a<02:25:20.080><c> matrix</c><02:25:20.720><c> grid</c><02:25:21.120><c> or</c><02:25:21.439><c> table</c><02:25:21.920><c> of</c><02:25:22.080><c> data</c><02:25:22.800><c> and</c><02:25:22.960><c> in</c>

02:25:23.030 --> 02:25:23.040 align:start position:0%
a matrix grid or table of data and in
 

02:25:23.040 --> 02:25:25.910 align:start position:0%
a matrix grid or table of data and in
this<02:25:23.280><c> example</c><02:25:23.760><c> we</c><02:25:24.000><c> made</c><02:25:24.319><c> a</c><02:25:24.640><c> table</c><02:25:25.120><c> of</c><02:25:25.359><c> integers</c>

02:25:25.910 --> 02:25:25.920 align:start position:0%
this example we made a table of integers
 

02:25:25.920 --> 02:25:27.750 align:start position:0%
this example we made a table of integers
just<02:25:26.160><c> the</c><02:25:26.240><c> numbers</c><02:25:26.640><c> one</c><02:25:26.880><c> through</c><02:25:27.120><c> nine</c><02:25:27.600><c> so</c>

02:25:27.750 --> 02:25:27.760 align:start position:0%
just the numbers one through nine so
 

02:25:27.760 --> 02:25:29.270 align:start position:0%
just the numbers one through nine so
there's<02:25:28.000><c> a</c><02:25:28.080><c> couple</c><02:25:28.319><c> different</c><02:25:28.640><c> ways</c><02:25:28.960><c> in</c><02:25:29.040><c> which</c>

02:25:29.270 --> 02:25:29.280 align:start position:0%
there's a couple different ways in which
 

02:25:29.280 --> 02:25:31.110 align:start position:0%
there's a couple different ways in which
you<02:25:29.439><c> can</c><02:25:29.600><c> initialize</c><02:25:30.319><c> a</c><02:25:30.479><c> two-dimensional</c>

02:25:31.110 --> 02:25:31.120 align:start position:0%
you can initialize a two-dimensional
 

02:25:31.120 --> 02:25:33.110 align:start position:0%
you can initialize a two-dimensional
array<02:25:31.680><c> but</c><02:25:31.840><c> you'll</c><02:25:32.000><c> need</c><02:25:32.479><c> two</c><02:25:32.720><c> sets</c><02:25:32.960><c> of</c>

02:25:33.110 --> 02:25:33.120 align:start position:0%
array but you'll need two sets of
 

02:25:33.120 --> 02:25:35.830 align:start position:0%
array but you'll need two sets of
straight<02:25:33.439><c> brackets</c><02:25:34.319><c> it's</c><02:25:34.640><c> optional</c><02:25:35.040><c> to</c><02:25:35.280><c> set</c><02:25:35.520><c> a</c>

02:25:35.830 --> 02:25:35.840 align:start position:0%
straight brackets it's optional to set a
 

02:25:35.840 --> 02:25:37.990 align:start position:0%
straight brackets it's optional to set a
maximum<02:25:36.479><c> number</c><02:25:36.880><c> of</c><02:25:37.040><c> rows</c><02:25:37.520><c> but</c><02:25:37.680><c> it</c><02:25:37.840><c> is</c>

02:25:37.990 --> 02:25:38.000 align:start position:0%
maximum number of rows but it is
 

02:25:38.000 --> 02:25:40.469 align:start position:0%
maximum number of rows but it is
necessary<02:25:38.640><c> to</c><02:25:38.800><c> set</c><02:25:39.120><c> a</c><02:25:39.359><c> maximum</c><02:25:39.920><c> number</c><02:25:40.319><c> of</c>

02:25:40.469 --> 02:25:40.479 align:start position:0%
necessary to set a maximum number of
 

02:25:40.479 --> 02:25:42.630 align:start position:0%
necessary to set a maximum number of
elements<02:25:41.040><c> within</c><02:25:41.439><c> each</c><02:25:41.680><c> row</c><02:25:42.080><c> and</c><02:25:42.240><c> then</c><02:25:42.399><c> to</c>

02:25:42.630 --> 02:25:42.640 align:start position:0%
elements within each row and then to
 

02:25:42.640 --> 02:25:44.790 align:start position:0%
elements within each row and then to
access<02:25:43.040><c> one</c><02:25:43.200><c> of</c><02:25:43.280><c> the</c><02:25:43.439><c> elements</c><02:25:43.920><c> you</c><02:25:44.160><c> use</c><02:25:44.560><c> two</c>

02:25:44.790 --> 02:25:44.800 align:start position:0%
access one of the elements you use two
 

02:25:44.800 --> 02:25:47.110 align:start position:0%
access one of the elements you use two
indices<02:25:45.760><c> one</c><02:25:45.920><c> for</c><02:25:46.080><c> the</c><02:25:46.240><c> row</c><02:25:46.640><c> one</c><02:25:46.800><c> for</c><02:25:46.960><c> the</c>

02:25:47.110 --> 02:25:47.120 align:start position:0%
indices one for the row one for the
 

02:25:47.120 --> 02:25:49.270 align:start position:0%
indices one for the row one for the
column<02:25:47.680><c> so</c><02:25:47.840><c> yeah</c><02:25:48.160><c> those</c><02:25:48.399><c> are</c><02:25:48.640><c> two</c><02:25:48.800><c> dimensional</c>

02:25:49.270 --> 02:25:49.280 align:start position:0%
column so yeah those are two dimensional
 

02:25:49.280 --> 02:25:50.870 align:start position:0%
column so yeah those are two dimensional
arrays<02:25:49.760><c> if</c><02:25:49.840><c> you</c><02:25:50.000><c> would</c><02:25:50.080><c> like</c><02:25:50.240><c> a</c><02:25:50.319><c> copy</c><02:25:50.640><c> of</c><02:25:50.720><c> this</c>

02:25:50.870 --> 02:25:50.880 align:start position:0%
arrays if you would like a copy of this
 

02:25:50.880 --> 02:25:52.469 align:start position:0%
arrays if you would like a copy of this
code<02:25:51.200><c> i'll</c><02:25:51.439><c> post</c><02:25:51.680><c> this</c><02:25:51.840><c> to</c><02:25:52.000><c> the</c><02:25:52.080><c> comment</c>

02:25:52.469 --> 02:25:52.479 align:start position:0%
code i'll post this to the comment
 

02:25:52.479 --> 02:25:54.790 align:start position:0%
code i'll post this to the comment
section<02:25:52.800><c> down</c><02:25:52.960><c> below</c><02:25:53.520><c> and</c><02:25:53.760><c> well</c><02:25:54.160><c> yeah</c><02:25:54.479><c> those</c>

02:25:54.790 --> 02:25:54.800 align:start position:0%
section down below and well yeah those
 

02:25:54.800 --> 02:26:00.550 align:start position:0%
section down below and well yeah those
are<02:25:54.960><c> two</c><02:25:55.120><c> dimensional</c><02:25:55.600><c> arrays</c><02:25:56.319><c> in</c><02:25:56.560><c> c</c>

02:26:00.550 --> 02:26:00.560 align:start position:0%
 
 

02:26:00.560 --> 02:26:02.630 align:start position:0%
 
hey<02:26:00.880><c> everyone</c><02:26:01.520><c> in</c><02:26:01.760><c> this</c><02:26:02.000><c> video</c><02:26:02.319><c> i'm</c><02:26:02.399><c> going</c><02:26:02.479><c> to</c>

02:26:02.630 --> 02:26:02.640 align:start position:0%
hey everyone in this video i'm going to
 

02:26:02.640 --> 02:26:04.550 align:start position:0%
hey everyone in this video i'm going to
show<02:26:02.800><c> you</c><02:26:02.960><c> how</c><02:26:03.120><c> we</c><02:26:03.280><c> can</c><02:26:03.439><c> create</c><02:26:03.760><c> an</c><02:26:03.920><c> array</c><02:26:04.399><c> of</c>

02:26:04.550 --> 02:26:04.560 align:start position:0%
show you how we can create an array of
 

02:26:04.560 --> 02:26:07.270 align:start position:0%
show you how we can create an array of
strings<02:26:05.280><c> let's</c><02:26:05.520><c> say</c><02:26:05.760><c> we</c><02:26:06.000><c> will</c><02:26:06.240><c> have</c><02:26:06.560><c> an</c><02:26:06.720><c> array</c>

02:26:07.270 --> 02:26:07.280 align:start position:0%
strings let's say we will have an array
 

02:26:07.280 --> 02:26:08.790 align:start position:0%
strings let's say we will have an array
named<02:26:07.840><c> cars</c>

02:26:08.790 --> 02:26:08.800 align:start position:0%
named cars
 

02:26:08.800 --> 02:26:11.110 align:start position:0%
named cars
so<02:26:09.040><c> we</c><02:26:09.200><c> will</c><02:26:09.359><c> need</c><02:26:09.680><c> a</c><02:26:09.920><c> two-dimensional</c><02:26:10.640><c> array</c>

02:26:11.110 --> 02:26:11.120 align:start position:0%
so we will need a two-dimensional array
 

02:26:11.120 --> 02:26:13.429 align:start position:0%
so we will need a two-dimensional array
so<02:26:11.280><c> we</c><02:26:11.439><c> need</c><02:26:11.840><c> two</c><02:26:12.000><c> sets</c><02:26:12.240><c> of</c><02:26:12.399><c> straight</c><02:26:12.720><c> brackets</c>

02:26:13.429 --> 02:26:13.439 align:start position:0%
so we need two sets of straight brackets
 

02:26:13.439 --> 02:26:15.349 align:start position:0%
so we need two sets of straight brackets
and<02:26:13.600><c> within</c><02:26:14.160><c> the</c><02:26:14.399><c> second</c><02:26:14.720><c> set</c><02:26:14.960><c> of</c><02:26:15.040><c> straight</c>

02:26:15.349 --> 02:26:15.359 align:start position:0%
and within the second set of straight
 

02:26:15.359 --> 02:26:18.230 align:start position:0%
and within the second set of straight
brackets<02:26:15.840><c> we</c><02:26:16.000><c> will</c><02:26:16.160><c> specify</c><02:26:16.960><c> a</c><02:26:17.200><c> maximum</c><02:26:17.760><c> size</c>

02:26:18.230 --> 02:26:18.240 align:start position:0%
brackets we will specify a maximum size
 

02:26:18.240 --> 02:26:20.070 align:start position:0%
brackets we will specify a maximum size
for<02:26:18.479><c> each</c><02:26:18.640><c> of</c><02:26:18.720><c> these</c><02:26:18.960><c> elements</c><02:26:19.600><c> let's</c><02:26:19.840><c> say</c>

02:26:20.070 --> 02:26:20.080 align:start position:0%
for each of these elements let's say
 

02:26:20.080 --> 02:26:22.790 align:start position:0%
for each of these elements let's say
maybe<02:26:20.399><c> 10</c><02:26:20.640><c> characters</c><02:26:21.439><c> so</c><02:26:21.760><c> a</c><02:26:22.000><c> string</c><02:26:22.640><c> is</c>

02:26:22.790 --> 02:26:22.800 align:start position:0%
maybe 10 characters so a string is
 

02:26:22.800 --> 02:26:25.110 align:start position:0%
maybe 10 characters so a string is
already<02:26:23.200><c> an</c><02:26:23.359><c> array</c><02:26:23.600><c> of</c><02:26:23.760><c> characters</c><02:26:24.399><c> let's</c><02:26:24.720><c> add</c>

02:26:25.110 --> 02:26:25.120 align:start position:0%
already an array of characters let's add
 

02:26:25.120 --> 02:26:27.429 align:start position:0%
already an array of characters let's add
our<02:26:25.280><c> first</c><02:26:25.520><c> string</c><02:26:25.840><c> maybe</c><02:26:26.240><c> we</c><02:26:26.399><c> have</c><02:26:26.560><c> a</c><02:26:26.720><c> mustang</c>

02:26:27.429 --> 02:26:27.439 align:start position:0%
our first string maybe we have a mustang
 

02:26:27.439 --> 02:26:29.510 align:start position:0%
our first string maybe we have a mustang
so<02:26:27.760><c> to</c><02:26:27.920><c> add</c><02:26:28.240><c> a</c><02:26:28.399><c> second</c><02:26:28.640><c> element</c><02:26:29.120><c> we</c><02:26:29.280><c> would</c>

02:26:29.510 --> 02:26:29.520 align:start position:0%
so to add a second element we would
 

02:26:29.520 --> 02:26:31.510 align:start position:0%
so to add a second element we would
separate<02:26:30.000><c> the</c><02:26:30.080><c> next</c><02:26:30.399><c> one</c><02:26:30.640><c> with</c><02:26:30.800><c> a</c><02:26:30.880><c> comma</c><02:26:31.359><c> then</c>

02:26:31.510 --> 02:26:31.520 align:start position:0%
separate the next one with a comma then
 

02:26:31.520 --> 02:26:33.429 align:start position:0%
separate the next one with a comma then
we<02:26:31.600><c> can</c><02:26:31.840><c> add</c><02:26:32.080><c> another</c><02:26:32.479><c> string</c>

02:26:33.429 --> 02:26:33.439 align:start position:0%
we can add another string
 

02:26:33.439 --> 02:26:35.270 align:start position:0%
we can add another string
let's<02:26:33.680><c> say</c><02:26:33.840><c> we</c><02:26:34.000><c> have</c><02:26:34.080><c> a</c><02:26:34.160><c> corvette</c><02:26:34.960><c> and</c><02:26:35.040><c> then</c>

02:26:35.270 --> 02:26:35.280 align:start position:0%
let's say we have a corvette and then
 

02:26:35.280 --> 02:26:38.550 align:start position:0%
let's say we have a corvette and then
one<02:26:35.520><c> more</c><02:26:35.760><c> how</c><02:26:36.000><c> about</c><02:26:36.560><c> a</c><02:26:37.200><c> maybe</c><02:26:37.439><c> camaro</c><02:26:38.240><c> okay</c>

02:26:38.550 --> 02:26:38.560 align:start position:0%
one more how about a maybe camaro okay
 

02:26:38.560 --> 02:26:40.309 align:start position:0%
one more how about a maybe camaro okay
so<02:26:38.800><c> with</c><02:26:39.040><c> all</c><02:26:39.280><c> of</c><02:26:39.359><c> these</c><02:26:39.600><c> different</c><02:26:39.920><c> strings</c>

02:26:40.309 --> 02:26:40.319 align:start position:0%
so with all of these different strings
 

02:26:40.319 --> 02:26:42.230 align:start position:0%
so with all of these different strings
i'm<02:26:40.560><c> going</c><02:26:40.720><c> to</c><02:26:40.880><c> surround</c><02:26:41.359><c> with</c><02:26:41.600><c> a</c><02:26:41.760><c> set</c><02:26:42.080><c> of</c>

02:26:42.230 --> 02:26:42.240 align:start position:0%
i'm going to surround with a set of
 

02:26:42.240 --> 02:26:44.630 align:start position:0%
i'm going to surround with a set of
curly<02:26:42.560><c> braces</c><02:26:43.439><c> and</c><02:26:43.600><c> here</c><02:26:43.760><c> we</c><02:26:43.840><c> go</c><02:26:44.080><c> we</c><02:26:44.240><c> have</c><02:26:44.479><c> an</c>

02:26:44.630 --> 02:26:44.640 align:start position:0%
curly braces and here we go we have an
 

02:26:44.640 --> 02:26:47.670 align:start position:0%
curly braces and here we go we have an
array<02:26:45.040><c> of</c><02:26:45.200><c> strings</c><02:26:46.000><c> it's</c><02:26:46.160><c> basically</c><02:26:46.800><c> a</c><02:26:47.280><c> 2d</c>

02:26:47.670 --> 02:26:47.680 align:start position:0%
array of strings it's basically a 2d
 

02:26:47.680 --> 02:26:50.389 align:start position:0%
array of strings it's basically a 2d
array<02:26:48.160><c> of</c><02:26:48.399><c> individual</c><02:26:48.960><c> characters</c><02:26:50.000><c> except</c>

02:26:50.389 --> 02:26:50.399 align:start position:0%
array of individual characters except
 

02:26:50.399 --> 02:26:52.630 align:start position:0%
array of individual characters except
each<02:26:50.640><c> element</c><02:26:51.200><c> is</c><02:26:51.439><c> a</c><02:26:51.680><c> string</c><02:26:52.240><c> now</c><02:26:52.399><c> one</c>

02:26:52.630 --> 02:26:52.640 align:start position:0%
each element is a string now one
 

02:26:52.640 --> 02:26:54.309 align:start position:0%
each element is a string now one
important<02:26:53.120><c> difference</c><02:26:53.600><c> with</c><02:26:53.840><c> an</c><02:26:53.920><c> array</c><02:26:54.160><c> of</c>

02:26:54.309 --> 02:26:54.319 align:start position:0%
important difference with an array of
 

02:26:54.319 --> 02:26:56.950 align:start position:0%
important difference with an array of
strings<02:26:54.800><c> is</c><02:26:54.960><c> that</c><02:26:55.200><c> we</c><02:26:55.439><c> can't</c><02:26:55.760><c> directly</c><02:26:56.560><c> change</c>

02:26:56.950 --> 02:26:56.960 align:start position:0%
strings is that we can't directly change
 

02:26:56.960 --> 02:26:58.309 align:start position:0%
strings is that we can't directly change
one<02:26:57.120><c> of</c><02:26:57.200><c> the</c><02:26:57.359><c> values</c>

02:26:58.309 --> 02:26:58.319 align:start position:0%
one of the values
 

02:26:58.319 --> 02:27:01.349 align:start position:0%
one of the values
let's<02:26:58.560><c> say</c><02:26:58.880><c> car's</c><02:26:59.200><c> at</c><02:26:59.359><c> index</c><02:26:59.680><c> zero</c><02:27:00.080><c> equals</c><02:27:01.120><c> a</c>

02:27:01.349 --> 02:27:01.359 align:start position:0%
let's say car's at index zero equals a
 

02:27:01.359 --> 02:27:02.870 align:start position:0%
let's say car's at index zero equals a
tesla

02:27:02.870 --> 02:27:02.880 align:start position:0%
tesla
 

02:27:02.880 --> 02:27:06.070 align:start position:0%
tesla
and<02:27:03.040><c> then</c><02:27:03.200><c> i'm</c><02:27:03.359><c> going</c><02:27:03.520><c> to</c><02:27:03.600><c> try</c><02:27:03.760><c> and</c><02:27:03.920><c> run</c><02:27:04.160><c> this</c>

02:27:06.070 --> 02:27:06.080 align:start position:0%
and then i'm going to try and run this
 

02:27:06.080 --> 02:27:08.469 align:start position:0%
and then i'm going to try and run this
so<02:27:06.319><c> we</c><02:27:06.479><c> can't</c><02:27:06.720><c> directly</c><02:27:07.280><c> assign</c><02:27:07.680><c> a</c><02:27:07.760><c> new</c><02:27:08.000><c> value</c>

02:27:08.469 --> 02:27:08.479 align:start position:0%
so we can't directly assign a new value
 

02:27:08.479 --> 02:27:10.870 align:start position:0%
so we can't directly assign a new value
one<02:27:08.720><c> way</c><02:27:08.880><c> in</c><02:27:08.960><c> which</c><02:27:09.200><c> we</c><02:27:09.439><c> can</c><02:27:09.680><c> do</c><02:27:09.920><c> so</c><02:27:10.240><c> is</c><02:27:10.319><c> to</c><02:27:10.560><c> use</c>

02:27:10.870 --> 02:27:10.880 align:start position:0%
one way in which we can do so is to use
 

02:27:10.880 --> 02:27:13.510 align:start position:0%
one way in which we can do so is to use
the<02:27:11.120><c> string</c><02:27:11.600><c> copy</c><02:27:12.000><c> function</c><02:27:12.880><c> so</c><02:27:13.200><c> if</c><02:27:13.359><c> you're</c>

02:27:13.510 --> 02:27:13.520 align:start position:0%
the string copy function so if you're
 

02:27:13.520 --> 02:27:15.349 align:start position:0%
the string copy function so if you're
going<02:27:13.680><c> to</c><02:27:13.760><c> use</c><02:27:14.000><c> the</c><02:27:14.160><c> string</c><02:27:14.479><c> copy</c><02:27:14.880><c> function</c>

02:27:15.349 --> 02:27:15.359 align:start position:0%
going to use the string copy function
 

02:27:15.359 --> 02:27:17.750 align:start position:0%
going to use the string copy function
include<02:27:15.760><c> this</c><02:27:16.000><c> import</c>

02:27:17.750 --> 02:27:17.760 align:start position:0%
include this import
 

02:27:17.760 --> 02:27:20.710 align:start position:0%
include this import
string<02:27:18.479><c> dot</c><02:27:18.800><c> h</c><02:27:19.359><c> okay</c><02:27:19.600><c> so</c><02:27:19.920><c> to</c><02:27:20.160><c> update</c><02:27:20.399><c> one</c><02:27:20.640><c> of</c>

02:27:20.710 --> 02:27:20.720 align:start position:0%
string dot h okay so to update one of
 

02:27:20.720 --> 02:27:23.750 align:start position:0%
string dot h okay so to update one of
the<02:27:20.800><c> values</c><02:27:21.439><c> i</c><02:27:21.520><c> will</c><02:27:21.760><c> use</c><02:27:22.399><c> string</c>

02:27:23.750 --> 02:27:23.760 align:start position:0%
the values i will use string
 

02:27:23.760 --> 02:27:25.590 align:start position:0%
the values i will use string
copy

02:27:25.590 --> 02:27:25.600 align:start position:0%
copy
 

02:27:25.600 --> 02:27:27.670 align:start position:0%
copy
pass<02:27:26.000><c> in</c><02:27:26.319><c> my</c><02:27:26.640><c> array</c>

02:27:27.670 --> 02:27:27.680 align:start position:0%
pass in my array
 

02:27:27.680 --> 02:27:29.349 align:start position:0%
pass in my array
and<02:27:27.920><c> an</c><02:27:28.080><c> index</c><02:27:28.399><c> number</c>

02:27:29.349 --> 02:27:29.359 align:start position:0%
and an index number
 

02:27:29.359 --> 02:27:32.150 align:start position:0%
and an index number
followed<02:27:29.680><c> by</c><02:27:30.319><c> a</c><02:27:30.479><c> string</c><02:27:31.200><c> so</c><02:27:31.439><c> let's</c><02:27:31.680><c> say</c><02:27:32.000><c> a</c>

02:27:32.150 --> 02:27:32.160 align:start position:0%
followed by a string so let's say a
 

02:27:32.160 --> 02:27:35.349 align:start position:0%
followed by a string so let's say a
tesla<02:27:33.040><c> and</c><02:27:33.359><c> this</c><02:27:33.520><c> would</c><02:27:33.760><c> work</c><02:27:34.319><c> now</c><02:27:34.640><c> to</c><02:27:34.800><c> display</c>

02:27:35.349 --> 02:27:35.359 align:start position:0%
tesla and this would work now to display
 

02:27:35.359 --> 02:27:37.270 align:start position:0%
tesla and this would work now to display
an<02:27:35.520><c> array</c><02:27:35.760><c> of</c><02:27:35.920><c> strings</c><02:27:36.319><c> we</c><02:27:36.399><c> can</c><02:27:36.560><c> use</c><02:27:36.880><c> a</c><02:27:37.040><c> for</c>

02:27:37.270 --> 02:27:37.280 align:start position:0%
an array of strings we can use a for
 

02:27:37.280 --> 02:27:38.630 align:start position:0%
an array of strings we can use a for
loop

02:27:38.630 --> 02:27:38.640 align:start position:0%
loop
 

02:27:38.640 --> 02:27:40.950 align:start position:0%
loop
and<02:27:38.720><c> there's</c><02:27:38.960><c> no</c><02:27:39.120><c> need</c><02:27:39.359><c> for</c><02:27:39.600><c> a</c><02:27:39.760><c> nested</c><02:27:40.160><c> loop</c><02:27:40.720><c> so</c>

02:27:40.950 --> 02:27:40.960 align:start position:0%
and there's no need for a nested loop so
 

02:27:40.960 --> 02:27:43.190 align:start position:0%
and there's no need for a nested loop so
we<02:27:41.120><c> will</c><02:27:41.280><c> create</c><02:27:41.600><c> an</c><02:27:41.760><c> index</c><02:27:42.240><c> i</c><02:27:42.560><c> set</c><02:27:42.720><c> this</c><02:27:42.960><c> equal</c>

02:27:43.190 --> 02:27:43.200 align:start position:0%
we will create an index i set this equal
 

02:27:43.200 --> 02:27:45.590 align:start position:0%
we will create an index i set this equal
to<02:27:43.359><c> zero</c><02:27:44.080><c> i</c><02:27:44.160><c> would</c><02:27:44.319><c> like</c><02:27:44.479><c> to</c><02:27:44.640><c> continue</c><02:27:45.040><c> this</c><02:27:45.359><c> as</c>

02:27:45.590 --> 02:27:45.600 align:start position:0%
to zero i would like to continue this as
 

02:27:45.600 --> 02:27:48.150 align:start position:0%
to zero i would like to continue this as
long<02:27:45.840><c> as</c><02:27:46.000><c> i</c><02:27:46.560><c> is</c><02:27:46.720><c> less</c><02:27:46.960><c> than</c><02:27:47.600><c> and</c><02:27:47.760><c> we</c><02:27:47.920><c> will</c>

02:27:48.150 --> 02:27:48.160 align:start position:0%
long as i is less than and we will
 

02:27:48.160 --> 02:27:49.990 align:start position:0%
long as i is less than and we will
calculate<02:27:48.720><c> how</c><02:27:48.880><c> many</c><02:27:49.040><c> elements</c><02:27:49.520><c> are</c><02:27:49.600><c> within</c>

02:27:49.990 --> 02:27:50.000 align:start position:0%
calculate how many elements are within
 

02:27:50.000 --> 02:27:52.630 align:start position:0%
calculate how many elements are within
our<02:27:50.160><c> array</c><02:27:50.800><c> so</c><02:27:51.040><c> we</c><02:27:51.200><c> will</c><02:27:51.359><c> use</c><02:27:51.760><c> the</c><02:27:51.920><c> size</c><02:27:52.399><c> of</c>

02:27:52.630 --> 02:27:52.640 align:start position:0%
our array so we will use the size of
 

02:27:52.640 --> 02:27:55.670 align:start position:0%
our array so we will use the size of
operator<02:27:53.439><c> pass</c><02:27:53.680><c> in</c><02:27:53.840><c> our</c><02:27:54.000><c> array</c><02:27:54.640><c> divided</c><02:27:55.200><c> by</c>

02:27:55.670 --> 02:27:55.680 align:start position:0%
operator pass in our array divided by
 

02:27:55.680 --> 02:27:57.349 align:start position:0%
operator pass in our array divided by
one<02:27:55.840><c> of</c><02:27:55.920><c> the</c><02:27:56.080><c> elements</c>

02:27:57.349 --> 02:27:57.359 align:start position:0%
one of the elements
 

02:27:57.359 --> 02:27:59.030 align:start position:0%
one of the elements
size<02:27:58.160><c> of</c>

02:27:59.030 --> 02:27:59.040 align:start position:0%
size of
 

02:27:59.040 --> 02:28:02.230 align:start position:0%
size of
cars<02:27:59.680><c> and</c><02:27:59.840><c> maybe</c><02:28:00.160><c> the</c><02:28:00.240><c> first</c><02:28:00.560><c> element</c><02:28:00.960><c> of</c><02:28:01.120><c> zero</c>

02:28:02.230 --> 02:28:02.240 align:start position:0%
cars and maybe the first element of zero
 

02:28:02.240 --> 02:28:04.630 align:start position:0%
cars and maybe the first element of zero
and<02:28:02.399><c> then</c><02:28:02.640><c> increment</c><02:28:03.280><c> i</c><02:28:03.520><c> by</c><02:28:03.760><c> one</c><02:28:04.160><c> during</c><02:28:04.399><c> each</c>

02:28:04.630 --> 02:28:04.640 align:start position:0%
and then increment i by one during each
 

02:28:04.640 --> 02:28:07.110 align:start position:0%
and then increment i by one during each
iteration<02:28:05.600><c> so</c><02:28:05.840><c> then</c><02:28:06.000><c> during</c><02:28:06.240><c> each</c><02:28:06.479><c> iteration</c>

02:28:07.110 --> 02:28:07.120 align:start position:0%
iteration so then during each iteration
 

02:28:07.120 --> 02:28:08.710 align:start position:0%
iteration so then during each iteration
let's<02:28:07.439><c> display</c><02:28:07.840><c> one</c><02:28:08.000><c> of</c><02:28:08.080><c> these</c><02:28:08.240><c> elements</c>

02:28:08.710 --> 02:28:08.720 align:start position:0%
let's display one of these elements
 

02:28:08.720 --> 02:28:10.870 align:start position:0%
let's display one of these elements
using<02:28:08.960><c> a</c><02:28:09.200><c> printf</c><02:28:09.760><c> statement</c>

02:28:10.870 --> 02:28:10.880 align:start position:0%
using a printf statement
 

02:28:10.880 --> 02:28:12.389 align:start position:0%
using a printf statement
let's<02:28:11.120><c> display</c><02:28:11.520><c> a</c><02:28:11.680><c> string</c>

02:28:12.389 --> 02:28:12.399 align:start position:0%
let's display a string
 

02:28:12.399 --> 02:28:14.710 align:start position:0%
let's display a string
i'll<02:28:12.640><c> add</c><02:28:12.800><c> a</c><02:28:12.880><c> new</c><02:28:13.120><c> line</c><02:28:13.520><c> after</c><02:28:13.920><c> each</c><02:28:14.240><c> printf</c>

02:28:14.710 --> 02:28:14.720 align:start position:0%
i'll add a new line after each printf
 

02:28:14.720 --> 02:28:15.670 align:start position:0%
i'll add a new line after each printf
statement

02:28:15.670 --> 02:28:15.680 align:start position:0%
statement
 

02:28:15.680 --> 02:28:18.230 align:start position:0%
statement
and<02:28:16.080><c> let's</c><02:28:16.319><c> display</c><02:28:17.040><c> our</c><02:28:17.200><c> array</c><02:28:17.600><c> cards</c><02:28:18.000><c> at</c>

02:28:18.230 --> 02:28:18.240 align:start position:0%
and let's display our array cards at
 

02:28:18.240 --> 02:28:19.510 align:start position:0%
and let's display our array cards at
index<02:28:18.640><c> of</c><02:28:18.800><c> i</c>

02:28:19.510 --> 02:28:19.520 align:start position:0%
index of i
 

02:28:19.520 --> 02:28:22.150 align:start position:0%
index of i
so<02:28:19.760><c> this</c><02:28:19.920><c> should</c><02:28:20.160><c> display</c><02:28:20.720><c> tesla</c><02:28:21.600><c> corvette</c>

02:28:22.150 --> 02:28:22.160 align:start position:0%
so this should display tesla corvette
 

02:28:22.160 --> 02:28:24.710 align:start position:0%
so this should display tesla corvette
and<02:28:22.319><c> camaro</c><02:28:22.960><c> in</c><02:28:23.040><c> that</c><02:28:23.200><c> order</c>

02:28:24.710 --> 02:28:24.720 align:start position:0%
and camaro in that order
 

02:28:24.720 --> 02:28:27.750 align:start position:0%
and camaro in that order
tesla<02:28:25.439><c> corvette</c><02:28:26.080><c> and</c><02:28:26.240><c> a</c><02:28:26.319><c> camaro</c><02:28:27.280><c> so</c><02:28:27.520><c> yeah</c>

02:28:27.750 --> 02:28:27.760 align:start position:0%
tesla corvette and a camaro so yeah
 

02:28:27.760 --> 02:28:29.910 align:start position:0%
tesla corvette and a camaro so yeah
that's<02:28:28.000><c> an</c><02:28:28.080><c> array</c><02:28:28.399><c> of</c><02:28:28.479><c> strings</c><02:28:28.960><c> it's</c><02:28:29.200><c> really</c><02:28:29.680><c> a</c>

02:28:29.910 --> 02:28:29.920 align:start position:0%
that's an array of strings it's really a
 

02:28:29.920 --> 02:28:32.230 align:start position:0%
that's an array of strings it's really a
two-dimensional<02:28:30.720><c> array</c><02:28:31.040><c> of</c><02:28:31.200><c> characters</c><02:28:32.000><c> but</c>

02:28:32.230 --> 02:28:32.240 align:start position:0%
two-dimensional array of characters but
 

02:28:32.240 --> 02:28:34.230 align:start position:0%
two-dimensional array of characters but
it<02:28:32.319><c> involves</c><02:28:32.800><c> less</c><02:28:33.040><c> steps</c><02:28:33.600><c> because</c><02:28:33.920><c> each</c><02:28:34.160><c> of</c>

02:28:34.230 --> 02:28:34.240 align:start position:0%
it involves less steps because each of
 

02:28:34.240 --> 02:28:36.469 align:start position:0%
it involves less steps because each of
these<02:28:34.479><c> strings</c><02:28:34.960><c> is</c><02:28:35.120><c> already</c><02:28:35.439><c> an</c><02:28:35.600><c> array</c><02:28:36.240><c> and</c><02:28:36.399><c> if</c>

02:28:36.469 --> 02:28:36.479 align:start position:0%
these strings is already an array and if
 

02:28:36.479 --> 02:28:38.309 align:start position:0%
these strings is already an array and if
you<02:28:36.640><c> need</c><02:28:36.880><c> to</c><02:28:37.120><c> update</c><02:28:37.520><c> or</c><02:28:37.680><c> edit</c><02:28:37.920><c> one</c><02:28:38.080><c> of</c><02:28:38.240><c> the</c>

02:28:38.309 --> 02:28:38.319 align:start position:0%
you need to update or edit one of the
 

02:28:38.319 --> 02:28:40.550 align:start position:0%
you need to update or edit one of the
values<02:28:38.880><c> you</c><02:28:38.960><c> can</c><02:28:39.120><c> use</c><02:28:39.439><c> the</c><02:28:39.600><c> string</c><02:28:40.160><c> copy</c>

02:28:40.550 --> 02:28:40.560 align:start position:0%
values you can use the string copy
 

02:28:40.560 --> 02:28:42.630 align:start position:0%
values you can use the string copy
function<02:28:41.280><c> so</c><02:28:41.520><c> yeah</c><02:28:41.760><c> that's</c><02:28:42.000><c> how</c><02:28:42.080><c> to</c><02:28:42.240><c> work</c><02:28:42.479><c> with</c>

02:28:42.630 --> 02:28:42.640 align:start position:0%
function so yeah that's how to work with
 

02:28:42.640 --> 02:28:44.389 align:start position:0%
function so yeah that's how to work with
an<02:28:42.800><c> array</c><02:28:43.120><c> of</c><02:28:43.200><c> strings</c><02:28:43.760><c> if</c><02:28:43.920><c> you</c><02:28:44.000><c> would</c><02:28:44.160><c> like</c><02:28:44.319><c> a</c>

02:28:44.389 --> 02:28:44.399 align:start position:0%
an array of strings if you would like a
 

02:28:44.399 --> 02:28:46.150 align:start position:0%
an array of strings if you would like a
copy<02:28:44.720><c> of</c><02:28:44.800><c> this</c><02:28:44.960><c> code</c><02:28:45.280><c> i'll</c><02:28:45.439><c> post</c><02:28:45.760><c> this</c><02:28:45.920><c> to</c><02:28:46.080><c> the</c>

02:28:46.150 --> 02:28:46.160 align:start position:0%
copy of this code i'll post this to the
 

02:28:46.160 --> 02:28:48.150 align:start position:0%
copy of this code i'll post this to the
comments<02:28:46.479><c> section</c><02:28:46.880><c> down</c><02:28:47.040><c> below</c><02:28:47.520><c> and</c><02:28:47.760><c> well</c>

02:28:48.150 --> 02:28:48.160 align:start position:0%
comments section down below and well
 

02:28:48.160 --> 02:28:49.990 align:start position:0%
comments section down below and well
yeah<02:28:48.479><c> that's</c><02:28:48.720><c> how</c><02:28:48.880><c> to</c><02:28:49.040><c> work</c><02:28:49.280><c> with</c><02:28:49.439><c> an</c><02:28:49.600><c> array</c><02:28:49.840><c> of</c>

02:28:49.990 --> 02:28:50.000 align:start position:0%
yeah that's how to work with an array of
 

02:28:50.000 --> 02:28:54.389 align:start position:0%
yeah that's how to work with an array of
strings<02:28:50.640><c> in</c><02:28:50.880><c> c</c>

02:28:54.389 --> 02:28:54.399 align:start position:0%
 
 

02:28:54.399 --> 02:28:56.309 align:start position:0%
 
all<02:28:54.560><c> right</c><02:28:54.880><c> what's</c><02:28:55.120><c> going</c><02:28:55.359><c> on</c><02:28:55.520><c> people</c><02:28:56.000><c> so</c><02:28:56.240><c> in</c>

02:28:56.309 --> 02:28:56.319 align:start position:0%
all right what's going on people so in
 

02:28:56.319 --> 02:28:57.750 align:start position:0%
all right what's going on people so in
this<02:28:56.479><c> video</c><02:28:56.800><c> i'm</c><02:28:56.880><c> going</c><02:28:56.960><c> to</c><02:28:57.120><c> show</c><02:28:57.280><c> you</c><02:28:57.520><c> how</c><02:28:57.680><c> we</c>

02:28:57.750 --> 02:28:57.760 align:start position:0%
this video i'm going to show you how we
 

02:28:57.760 --> 02:29:00.389 align:start position:0%
this video i'm going to show you how we
can<02:28:57.920><c> swap</c><02:28:58.319><c> the</c><02:28:58.479><c> values</c><02:28:59.040><c> of</c><02:28:59.280><c> two</c><02:28:59.520><c> variables</c><02:29:00.160><c> now</c>

02:29:00.389 --> 02:29:00.399 align:start position:0%
can swap the values of two variables now
 

02:29:00.399 --> 02:29:01.750 align:start position:0%
can swap the values of two variables now
you<02:29:00.479><c> may</c><02:29:00.640><c> be</c><02:29:00.720><c> wondering</c><02:29:01.120><c> why</c><02:29:01.280><c> the</c><02:29:01.359><c> heck</c><02:29:01.520><c> do</c><02:29:01.680><c> we</c>

02:29:01.750 --> 02:29:01.760 align:start position:0%
you may be wondering why the heck do we
 

02:29:01.760 --> 02:29:03.990 align:start position:0%
you may be wondering why the heck do we
need<02:29:01.920><c> to</c><02:29:02.000><c> know</c><02:29:02.240><c> this</c><02:29:02.640><c> so</c><02:29:02.960><c> swapping</c><02:29:03.359><c> variables</c>

02:29:03.990 --> 02:29:04.000 align:start position:0%
need to know this so swapping variables
 

02:29:04.000 --> 02:29:06.309 align:start position:0%
need to know this so swapping variables
is<02:29:04.240><c> actually</c><02:29:04.640><c> very</c><02:29:05.040><c> common</c><02:29:05.520><c> within</c><02:29:05.920><c> sorting</c>

02:29:06.309 --> 02:29:06.319 align:start position:0%
is actually very common within sorting
 

02:29:06.319 --> 02:29:08.469 align:start position:0%
is actually very common within sorting
algorithms<02:29:07.120><c> and</c><02:29:07.359><c> when</c><02:29:07.520><c> we</c><02:29:07.760><c> reach</c><02:29:08.000><c> the</c><02:29:08.160><c> next</c>

02:29:08.469 --> 02:29:08.479 align:start position:0%
algorithms and when we reach the next
 

02:29:08.479 --> 02:29:10.550 align:start position:0%
algorithms and when we reach the next
topic<02:29:09.040><c> on</c><02:29:09.200><c> sorting</c><02:29:09.680><c> arrays</c><02:29:10.080><c> we'll</c><02:29:10.240><c> need</c><02:29:10.399><c> to</c>

02:29:10.550 --> 02:29:10.560 align:start position:0%
topic on sorting arrays we'll need to
 

02:29:10.560 --> 02:29:12.550 align:start position:0%
topic on sorting arrays we'll need to
learn<02:29:10.720><c> how</c><02:29:10.880><c> to</c><02:29:10.960><c> do</c><02:29:11.200><c> this</c><02:29:11.760><c> so</c><02:29:11.920><c> let's</c><02:29:12.160><c> begin</c><02:29:12.479><c> i</c>

02:29:12.550 --> 02:29:12.560 align:start position:0%
learn how to do this so let's begin i
 

02:29:12.560 --> 02:29:15.510 align:start position:0%
learn how to do this so let's begin i
have<02:29:12.640><c> two</c><02:29:12.880><c> variables</c><02:29:13.439><c> x</c><02:29:13.760><c> and</c><02:29:14.000><c> y</c><02:29:14.720><c> x</c><02:29:14.960><c> contains</c>

02:29:15.510 --> 02:29:15.520 align:start position:0%
have two variables x and y x contains
 

02:29:15.520 --> 02:29:18.389 align:start position:0%
have two variables x and y x contains
the<02:29:15.600><c> letter</c><02:29:16.000><c> x</c><02:29:16.479><c> y</c><02:29:16.720><c> contains</c><02:29:17.200><c> the</c><02:29:17.280><c> letter</c><02:29:17.600><c> y</c><02:29:18.240><c> and</c>

02:29:18.389 --> 02:29:18.399 align:start position:0%
the letter x y contains the letter y and
 

02:29:18.399 --> 02:29:20.230 align:start position:0%
the letter x y contains the letter y and
let's<02:29:18.720><c> print</c><02:29:18.960><c> these</c><02:29:19.200><c> values</c><02:29:19.840><c> i'll</c><02:29:20.000><c> use</c><02:29:20.160><c> a</c>

02:29:20.230 --> 02:29:20.240 align:start position:0%
let's print these values i'll use a
 

02:29:20.240 --> 02:29:25.510 align:start position:0%
let's print these values i'll use a
printf<02:29:20.720><c> statement</c><02:29:21.280><c> let's</c><02:29:21.520><c> display</c><02:29:22.080><c> x</c>

02:29:25.510 --> 02:29:25.520 align:start position:0%
 
 

02:29:25.520 --> 02:29:29.990 align:start position:0%
 
and<02:29:25.840><c> y</c>

02:29:29.990 --> 02:29:30.000 align:start position:0%
 
 

02:29:30.000 --> 02:29:33.590 align:start position:0%
 
x<02:29:30.319><c> equals</c><02:29:30.800><c> x</c><02:29:31.359><c> y</c><02:29:31.680><c> equals</c><02:29:32.080><c> y</c><02:29:32.560><c> so</c><02:29:32.800><c> how</c><02:29:32.960><c> can</c><02:29:33.120><c> we</c><02:29:33.200><c> swap</c>

02:29:33.590 --> 02:29:33.600 align:start position:0%
x equals x y equals y so how can we swap
 

02:29:33.600 --> 02:29:36.389 align:start position:0%
x equals x y equals y so how can we swap
these<02:29:34.080><c> let's</c><02:29:34.399><c> try</c><02:29:34.960><c> x</c><02:29:35.359><c> equals</c><02:29:35.680><c> y</c><02:29:36.000><c> and</c><02:29:36.080><c> see</c><02:29:36.240><c> what</c>

02:29:36.389 --> 02:29:36.399 align:start position:0%
these let's try x equals y and see what
 

02:29:36.399 --> 02:29:39.270 align:start position:0%
these let's try x equals y and see what
happens<02:29:37.120><c> within</c><02:29:37.520><c> both</c><02:29:37.840><c> x</c><02:29:38.000><c> and</c><02:29:38.160><c> y</c><02:29:38.479><c> the</c><02:29:38.640><c> value</c><02:29:39.120><c> is</c>

02:29:39.270 --> 02:29:39.280 align:start position:0%
happens within both x and y the value is
 

02:29:39.280 --> 02:29:42.790 align:start position:0%
happens within both x and y the value is
y<02:29:39.920><c> what</c><02:29:40.080><c> about</c><02:29:40.640><c> y</c><02:29:41.120><c> equals</c><02:29:41.680><c> x</c>

02:29:42.790 --> 02:29:42.800 align:start position:0%
y what about y equals x
 

02:29:42.800 --> 02:29:44.630 align:start position:0%
y what about y equals x
well<02:29:43.040><c> then</c><02:29:43.359><c> both</c><02:29:43.600><c> variables</c><02:29:44.080><c> contain</c><02:29:44.479><c> the</c>

02:29:44.630 --> 02:29:44.640 align:start position:0%
well then both variables contain the
 

02:29:44.640 --> 02:29:46.790 align:start position:0%
well then both variables contain the
character<02:29:45.120><c> x</c><02:29:45.680><c> so</c><02:29:45.840><c> what</c><02:29:46.000><c> can</c><02:29:46.160><c> we</c><02:29:46.240><c> do</c><02:29:46.399><c> it</c><02:29:46.560><c> seems</c>

02:29:46.790 --> 02:29:46.800 align:start position:0%
character x so what can we do it seems
 

02:29:46.800 --> 02:29:48.630 align:start position:0%
character x so what can we do it seems
like<02:29:46.960><c> we're</c><02:29:47.120><c> stuck</c><02:29:47.680><c> what</c><02:29:47.840><c> we</c><02:29:48.000><c> could</c><02:29:48.240><c> do</c><02:29:48.560><c> is</c>

02:29:48.630 --> 02:29:48.640 align:start position:0%
like we're stuck what we could do is
 

02:29:48.640 --> 02:29:51.510 align:start position:0%
like we're stuck what we could do is
that<02:29:48.880><c> we</c><02:29:49.040><c> could</c><02:29:49.280><c> introduce</c><02:29:50.000><c> a</c><02:29:50.399><c> third</c><02:29:50.720><c> variable</c>

02:29:51.510 --> 02:29:51.520 align:start position:0%
that we could introduce a third variable
 

02:29:51.520 --> 02:29:53.510 align:start position:0%
that we could introduce a third variable
let's<02:29:51.760><c> say</c><02:29:52.080><c> char</c><02:29:52.399><c> and</c><02:29:52.560><c> let's</c><02:29:52.800><c> name</c><02:29:52.960><c> this</c><02:29:53.200><c> temp</c>

02:29:53.510 --> 02:29:53.520 align:start position:0%
let's say char and let's name this temp
 

02:29:53.520 --> 02:29:56.150 align:start position:0%
let's say char and let's name this temp
because<02:29:53.920><c> it's</c><02:29:54.160><c> a</c><02:29:54.319><c> temporary</c><02:29:54.800><c> variable</c><02:29:55.760><c> so</c><02:29:55.920><c> we</c>

02:29:56.150 --> 02:29:56.160 align:start position:0%
because it's a temporary variable so we
 

02:29:56.160 --> 02:29:58.550 align:start position:0%
because it's a temporary variable so we
have<02:29:56.560><c> a</c><02:29:56.800><c> third</c><02:29:57.040><c> variable</c><02:29:57.439><c> to</c><02:29:57.600><c> work</c><02:29:57.840><c> with</c><02:29:58.080><c> as</c>

02:29:58.550 --> 02:29:58.560 align:start position:0%
have a third variable to work with as
 

02:29:58.560 --> 02:30:01.270 align:start position:0%
have a third variable to work with as
temporary<02:29:59.040><c> storage</c><02:29:59.680><c> for</c><02:29:59.920><c> some</c><02:30:00.160><c> value</c><02:30:01.040><c> so</c>

02:30:01.270 --> 02:30:01.280 align:start position:0%
temporary storage for some value so
 

02:30:01.280 --> 02:30:02.790 align:start position:0%
temporary storage for some value so
let's<02:30:01.680><c> assign</c>

02:30:02.790 --> 02:30:02.800 align:start position:0%
let's assign
 

02:30:02.800 --> 02:30:05.510 align:start position:0%
let's assign
temp<02:30:03.439><c> is</c><02:30:03.680><c> equal</c><02:30:04.240><c> to</c><02:30:04.640><c> x</c>

02:30:05.510 --> 02:30:05.520 align:start position:0%
temp is equal to x
 

02:30:05.520 --> 02:30:07.270 align:start position:0%
temp is equal to x
and<02:30:05.680><c> then</c><02:30:05.920><c> we</c><02:30:06.080><c> will</c><02:30:06.319><c> assign</c>

02:30:07.270 --> 02:30:07.280 align:start position:0%
and then we will assign
 

02:30:07.280 --> 02:30:09.349 align:start position:0%
and then we will assign
x<02:30:07.840><c> equals</c><02:30:08.399><c> y</c>

02:30:09.349 --> 02:30:09.359 align:start position:0%
x equals y
 

02:30:09.359 --> 02:30:12.630 align:start position:0%
x equals y
and<02:30:09.520><c> then</c><02:30:09.760><c> lastly</c><02:30:10.640><c> y</c><02:30:11.200><c> equals</c><02:30:11.840><c> temp</c>

02:30:12.630 --> 02:30:12.640 align:start position:0%
and then lastly y equals temp
 

02:30:12.640 --> 02:30:15.349 align:start position:0%
and then lastly y equals temp
and<02:30:12.800><c> this</c><02:30:12.960><c> should</c><02:30:13.200><c> work</c><02:30:13.520><c> let's</c><02:30:13.760><c> try</c><02:30:14.080><c> it</c>

02:30:15.349 --> 02:30:15.359 align:start position:0%
and this should work let's try it
 

02:30:15.359 --> 02:30:18.870 align:start position:0%
and this should work let's try it
yep<02:30:15.920><c> x</c><02:30:16.240><c> equals</c><02:30:16.560><c> y</c><02:30:17.120><c> and</c><02:30:17.359><c> y</c><02:30:17.680><c> equals</c><02:30:18.080><c> x</c>

02:30:18.870 --> 02:30:18.880 align:start position:0%
yep x equals y and y equals x
 

02:30:18.880 --> 02:30:20.309 align:start position:0%
yep x equals y and y equals x
now<02:30:19.040><c> this</c><02:30:19.200><c> is</c><02:30:19.359><c> a</c><02:30:19.439><c> little</c><02:30:19.680><c> bit</c><02:30:19.840><c> different</c><02:30:20.240><c> if</c>

02:30:20.309 --> 02:30:20.319 align:start position:0%
now this is a little bit different if
 

02:30:20.319 --> 02:30:22.389 align:start position:0%
now this is a little bit different if
you're<02:30:20.479><c> working</c><02:30:20.800><c> with</c><02:30:21.040><c> strings</c><02:30:21.760><c> so</c><02:30:21.920><c> let's</c><02:30:22.160><c> say</c>

02:30:22.389 --> 02:30:22.399 align:start position:0%
you're working with strings so let's say
 

02:30:22.399 --> 02:30:26.150 align:start position:0%
you're working with strings so let's say
these<02:30:22.720><c> are</c><02:30:23.040><c> character</c><02:30:23.439><c> arrays</c>

02:30:26.150 --> 02:30:26.160 align:start position:0%
 
 

02:30:26.160 --> 02:30:27.910 align:start position:0%
 
and<02:30:26.399><c> we'll</c><02:30:26.560><c> pretend</c><02:30:26.960><c> that</c><02:30:27.120><c> these</c><02:30:27.439><c> are</c><02:30:27.600><c> maybe</c>

02:30:27.910 --> 02:30:27.920 align:start position:0%
and we'll pretend that these are maybe
 

02:30:27.920 --> 02:30:30.830 align:start position:0%
and we'll pretend that these are maybe
glasses<02:30:28.479><c> holding</c><02:30:28.880><c> some</c><02:30:29.040><c> fluid</c><02:30:29.920><c> x</c><02:30:30.160><c> contains</c>

02:30:30.830 --> 02:30:30.840 align:start position:0%
glasses holding some fluid x contains
 

02:30:30.840 --> 02:30:32.389 align:start position:0%
glasses holding some fluid x contains
water

02:30:32.389 --> 02:30:32.399 align:start position:0%
water
 

02:30:32.399 --> 02:30:35.910 align:start position:0%
water
and<02:30:32.720><c> y</c><02:30:33.040><c> contains</c><02:30:33.680><c> maybe</c><02:30:33.920><c> lemonade</c>

02:30:35.910 --> 02:30:35.920 align:start position:0%
and y contains maybe lemonade
 

02:30:35.920 --> 02:30:37.910 align:start position:0%
and y contains maybe lemonade
and<02:30:36.080><c> let's</c><02:30:36.319><c> make</c><02:30:36.560><c> temp</c><02:30:36.880><c> a</c><02:30:37.040><c> character</c><02:30:37.520><c> array</c><02:30:37.840><c> as</c>

02:30:37.910 --> 02:30:37.920 align:start position:0%
and let's make temp a character array as
 

02:30:37.920 --> 02:30:40.230 align:start position:0%
and let's make temp a character array as
well<02:30:38.080><c> but</c><02:30:38.240><c> we</c><02:30:38.399><c> need</c><02:30:38.560><c> to</c><02:30:38.640><c> declare</c><02:30:39.040><c> a</c><02:30:39.120><c> size</c><02:30:40.000><c> let's</c>

02:30:40.230 --> 02:30:40.240 align:start position:0%
well but we need to declare a size let's
 

02:30:40.240 --> 02:30:42.630 align:start position:0%
well but we need to declare a size let's
say<02:30:40.560><c> 15.</c><02:30:41.359><c> okay</c><02:30:41.600><c> so</c><02:30:41.840><c> this</c><02:30:42.000><c> isn't</c><02:30:42.240><c> gonna</c><02:30:42.399><c> work</c>

02:30:42.630 --> 02:30:42.640 align:start position:0%
say 15. okay so this isn't gonna work
 

02:30:42.640 --> 02:30:44.389 align:start position:0%
say 15. okay so this isn't gonna work
we're<02:30:42.800><c> already</c><02:30:43.040><c> receiving</c><02:30:43.439><c> problems</c>

02:30:44.389 --> 02:30:44.399 align:start position:0%
we're already receiving problems
 

02:30:44.399 --> 02:30:47.750 align:start position:0%
we're already receiving problems
expression<02:30:45.040><c> must</c><02:30:45.280><c> be</c><02:30:45.520><c> a</c><02:30:45.840><c> modifiable</c><02:30:46.640><c> l</c><02:30:46.800><c> value</c>

02:30:47.750 --> 02:30:47.760 align:start position:0%
expression must be a modifiable l value
 

02:30:47.760 --> 02:30:49.670 align:start position:0%
expression must be a modifiable l value
so<02:30:47.920><c> when</c><02:30:48.160><c> working</c><02:30:48.479><c> with</c><02:30:48.720><c> arrays</c><02:30:49.200><c> it's</c><02:30:49.439><c> not</c>

02:30:49.670 --> 02:30:49.680 align:start position:0%
so when working with arrays it's not
 

02:30:49.680 --> 02:30:52.630 align:start position:0%
so when working with arrays it's not
enough<02:30:50.160><c> to</c><02:30:50.479><c> simply</c><02:30:50.960><c> assign</c><02:30:51.600><c> values</c>

02:30:52.630 --> 02:30:52.640 align:start position:0%
enough to simply assign values
 

02:30:52.640 --> 02:30:55.670 align:start position:0%
enough to simply assign values
we<02:30:52.880><c> could</c><02:30:53.120><c> use</c><02:30:53.439><c> the</c><02:30:53.680><c> string</c><02:30:54.080><c> copy</c><02:30:54.479><c> function</c><02:30:55.439><c> so</c>

02:30:55.670 --> 02:30:55.680 align:start position:0%
we could use the string copy function so
 

02:30:55.680 --> 02:30:58.150 align:start position:0%
we could use the string copy function so
let's<02:30:55.840><c> get</c><02:30:56.000><c> rid</c><02:30:56.160><c> of</c><02:30:56.319><c> these</c><02:30:57.040><c> and</c><02:30:57.280><c> we</c><02:30:57.439><c> will</c><02:30:57.600><c> use</c>

02:30:58.150 --> 02:30:58.160 align:start position:0%
let's get rid of these and we will use
 

02:30:58.160 --> 02:31:00.950 align:start position:0%
let's get rid of these and we will use
string<02:30:59.120><c> copy</c><02:30:59.760><c> oh</c><02:31:00.000><c> also</c><02:31:00.319><c> make</c><02:31:00.479><c> sure</c><02:31:00.640><c> that</c><02:31:00.800><c> you</c>

02:31:00.950 --> 02:31:00.960 align:start position:0%
string copy oh also make sure that you
 

02:31:00.960 --> 02:31:03.510 align:start position:0%
string copy oh also make sure that you
include<02:31:01.359><c> this</c><02:31:01.600><c> header</c><02:31:01.920><c> file</c><02:31:02.560><c> okay</c><02:31:02.880><c> so</c><02:31:03.120><c> we</c><02:31:03.280><c> will</c>

02:31:03.510 --> 02:31:03.520 align:start position:0%
include this header file okay so we will
 

02:31:03.520 --> 02:31:05.510 align:start position:0%
include this header file okay so we will
copy<02:31:04.000><c> the</c><02:31:04.160><c> contents</c>

02:31:05.510 --> 02:31:05.520 align:start position:0%
copy the contents
 

02:31:05.520 --> 02:31:07.190 align:start position:0%
copy the contents
of<02:31:06.080><c> x</c>

02:31:07.190 --> 02:31:07.200 align:start position:0%
of x
 

02:31:07.200 --> 02:31:09.110 align:start position:0%
of x
over<02:31:07.920><c> to</c><02:31:08.240><c> temp</c>

02:31:09.110 --> 02:31:09.120 align:start position:0%
over to temp
 

02:31:09.120 --> 02:31:11.190 align:start position:0%
over to temp
and<02:31:09.280><c> it's</c><02:31:09.439><c> the</c><02:31:09.600><c> same</c><02:31:09.760><c> procedure</c><02:31:10.240><c> as</c><02:31:10.399><c> before</c>

02:31:11.190 --> 02:31:11.200 align:start position:0%
and it's the same procedure as before
 

02:31:11.200 --> 02:31:12.830 align:start position:0%
and it's the same procedure as before
string

02:31:12.830 --> 02:31:12.840 align:start position:0%
string
 

02:31:12.840 --> 02:31:15.270 align:start position:0%
string
copy<02:31:14.319><c> y</c>

02:31:15.270 --> 02:31:15.280 align:start position:0%
copy y
 

02:31:15.280 --> 02:31:16.950 align:start position:0%
copy y
over<02:31:15.600><c> to</c><02:31:15.840><c> x</c>

02:31:16.950 --> 02:31:16.960 align:start position:0%
over to x
 

02:31:16.960 --> 02:31:18.550 align:start position:0%
over to x
and<02:31:17.359><c> string</c>

02:31:18.550 --> 02:31:18.560 align:start position:0%
and string
 

02:31:18.560 --> 02:31:21.590 align:start position:0%
and string
copy

02:31:21.590 --> 02:31:21.600 align:start position:0%
 
 

02:31:21.600 --> 02:31:23.670 align:start position:0%
 
temp<02:31:22.240><c> over</c><02:31:22.560><c> to</c><02:31:22.800><c> y</c>

02:31:23.670 --> 02:31:23.680 align:start position:0%
temp over to y
 

02:31:23.680 --> 02:31:24.870 align:start position:0%
temp over to y
and<02:31:23.760><c> then</c><02:31:23.920><c> make</c><02:31:24.080><c> sure</c><02:31:24.240><c> you</c><02:31:24.399><c> change</c><02:31:24.720><c> these</c>

02:31:24.870 --> 02:31:24.880 align:start position:0%
and then make sure you change these
 

02:31:24.880 --> 02:31:27.670 align:start position:0%
and then make sure you change these
format<02:31:25.359><c> specifiers</c><02:31:26.000><c> to</c><02:31:26.160><c> strings</c>

02:31:27.670 --> 02:31:27.680 align:start position:0%
format specifiers to strings
 

02:31:27.680 --> 02:31:29.830 align:start position:0%
format specifiers to strings
x<02:31:28.080><c> did</c><02:31:28.240><c> contain</c><02:31:28.720><c> water</c><02:31:29.120><c> now</c><02:31:29.280><c> it</c><02:31:29.359><c> contains</c>

02:31:29.830 --> 02:31:29.840 align:start position:0%
x did contain water now it contains
 

02:31:29.840 --> 02:31:32.070 align:start position:0%
x did contain water now it contains
lemonade<02:31:30.479><c> y</c><02:31:30.800><c> did</c><02:31:30.960><c> contain</c><02:31:31.359><c> lemonade</c><02:31:31.840><c> and</c><02:31:31.920><c> now</c>

02:31:32.070 --> 02:31:32.080 align:start position:0%
lemonade y did contain lemonade and now
 

02:31:32.080 --> 02:31:33.590 align:start position:0%
lemonade y did contain lemonade and now
it<02:31:32.160><c> contains</c><02:31:32.640><c> water</c>

02:31:33.590 --> 02:31:33.600 align:start position:0%
it contains water
 

02:31:33.600 --> 02:31:35.270 align:start position:0%
it contains water
when<02:31:33.840><c> swapping</c><02:31:34.319><c> variables</c><02:31:34.880><c> i</c><02:31:34.960><c> like</c><02:31:35.120><c> to</c>

02:31:35.270 --> 02:31:35.280 align:start position:0%
when swapping variables i like to
 

02:31:35.280 --> 02:31:37.910 align:start position:0%
when swapping variables i like to
imagine<02:31:35.760><c> my</c><02:31:36.000><c> variables</c><02:31:36.720><c> as</c><02:31:36.960><c> glasses</c><02:31:37.680><c> and</c><02:31:37.760><c> they</c>

02:31:37.910 --> 02:31:37.920 align:start position:0%
imagine my variables as glasses and they
 

02:31:37.920 --> 02:31:40.150 align:start position:0%
imagine my variables as glasses and they
contain<02:31:38.399><c> some</c><02:31:38.560><c> fluid</c><02:31:39.439><c> if</c><02:31:39.600><c> we</c><02:31:39.760><c> pour</c><02:31:40.000><c> the</c>

02:31:40.150 --> 02:31:40.160 align:start position:0%
contain some fluid if we pour the
 

02:31:40.160 --> 02:31:42.389 align:start position:0%
contain some fluid if we pour the
contents<02:31:40.720><c> of</c><02:31:40.880><c> one</c><02:31:41.120><c> glass</c><02:31:41.439><c> into</c><02:31:41.680><c> the</c><02:31:41.920><c> other</c>

02:31:42.389 --> 02:31:42.399 align:start position:0%
contents of one glass into the other
 

02:31:42.399 --> 02:31:44.309 align:start position:0%
contents of one glass into the other
well<02:31:42.640><c> then</c><02:31:42.960><c> the</c><02:31:43.120><c> contents</c><02:31:43.680><c> will</c><02:31:43.840><c> be</c><02:31:44.000><c> pushed</c>

02:31:44.309 --> 02:31:44.319 align:start position:0%
well then the contents will be pushed
 

02:31:44.319 --> 02:31:46.710 align:start position:0%
well then the contents will be pushed
out<02:31:44.479><c> and</c><02:31:44.640><c> overflow</c><02:31:45.600><c> so</c><02:31:45.840><c> it</c><02:31:45.920><c> would</c><02:31:46.080><c> be</c><02:31:46.240><c> wise</c><02:31:46.560><c> of</c>

02:31:46.710 --> 02:31:46.720 align:start position:0%
out and overflow so it would be wise of
 

02:31:46.720 --> 02:31:48.950 align:start position:0%
out and overflow so it would be wise of
us<02:31:46.960><c> to</c><02:31:47.200><c> introduce</c><02:31:47.760><c> a</c><02:31:48.000><c> third</c><02:31:48.319><c> glass</c><02:31:48.640><c> that's</c>

02:31:48.950 --> 02:31:48.960 align:start position:0%
us to introduce a third glass that's
 

02:31:48.960 --> 02:31:51.429 align:start position:0%
us to introduce a third glass that's
empty<02:31:49.600><c> to</c><02:31:49.840><c> hold</c><02:31:50.160><c> one</c><02:31:50.399><c> of</c><02:31:50.479><c> these</c><02:31:50.640><c> fluids</c><02:31:51.280><c> so</c>

02:31:51.429 --> 02:31:51.439 align:start position:0%
empty to hold one of these fluids so
 

02:31:51.439 --> 02:31:53.190 align:start position:0%
empty to hold one of these fluids so
then<02:31:51.600><c> we</c><02:31:51.760><c> can</c><02:31:51.840><c> pour</c><02:31:52.080><c> the</c><02:31:52.240><c> contents</c><02:31:52.720><c> of</c><02:31:52.960><c> one</c>

02:31:53.190 --> 02:31:53.200 align:start position:0%
then we can pour the contents of one
 

02:31:53.200 --> 02:31:55.670 align:start position:0%
then we can pour the contents of one
variable<02:31:53.760><c> into</c><02:31:54.000><c> the</c><02:31:54.160><c> other</c><02:31:54.880><c> now</c><02:31:55.120><c> here's</c><02:31:55.439><c> one</c>

02:31:55.670 --> 02:31:55.680 align:start position:0%
variable into the other now here's one
 

02:31:55.680 --> 02:31:57.670 align:start position:0%
variable into the other now here's one
issue<02:31:55.920><c> that</c><02:31:56.080><c> you</c><02:31:56.240><c> may</c><02:31:56.399><c> run</c><02:31:56.640><c> into</c><02:31:57.120><c> when</c><02:31:57.359><c> using</c>

02:31:57.670 --> 02:31:57.680 align:start position:0%
issue that you may run into when using
 

02:31:57.680 --> 02:32:00.469 align:start position:0%
issue that you may run into when using
the<02:31:57.840><c> string</c><02:31:58.240><c> copy</c><02:31:58.640><c> function</c><02:31:59.439><c> if</c><02:31:59.680><c> the</c><02:32:00.000><c> length</c>

02:32:00.469 --> 02:32:00.479 align:start position:0%
the string copy function if the length
 

02:32:00.479 --> 02:32:03.030 align:start position:0%
the string copy function if the length
of<02:32:00.720><c> the</c><02:32:00.960><c> second</c><02:32:01.280><c> argument</c><02:32:02.000><c> is</c><02:32:02.319><c> less</c><02:32:02.720><c> than</c><02:32:02.880><c> the</c>

02:32:03.030 --> 02:32:03.040 align:start position:0%
of the second argument is less than the
 

02:32:03.040 --> 02:32:05.030 align:start position:0%
of the second argument is less than the
first<02:32:03.359><c> argument</c><02:32:04.240><c> this</c><02:32:04.479><c> can</c><02:32:04.640><c> lead</c><02:32:04.800><c> to</c>

02:32:05.030 --> 02:32:05.040 align:start position:0%
first argument this can lead to
 

02:32:05.040 --> 02:32:07.270 align:start position:0%
first argument this can lead to
unexpected<02:32:05.680><c> behavior</c><02:32:06.319><c> i'm</c><02:32:06.560><c> going</c><02:32:06.720><c> to</c><02:32:06.800><c> replace</c>

02:32:07.270 --> 02:32:07.280 align:start position:0%
unexpected behavior i'm going to replace
 

02:32:07.280 --> 02:32:09.670 align:start position:0%
unexpected behavior i'm going to replace
lemonade<02:32:07.760><c> with</c><02:32:08.160><c> soda</c><02:32:09.040><c> and</c><02:32:09.200><c> let's</c><02:32:09.359><c> see</c><02:32:09.520><c> what</c>

02:32:09.670 --> 02:32:09.680 align:start position:0%
lemonade with soda and let's see what
 

02:32:09.680 --> 02:32:10.630 align:start position:0%
lemonade with soda and let's see what
happens

02:32:10.630 --> 02:32:10.640 align:start position:0%
happens
 

02:32:10.640 --> 02:32:12.550 align:start position:0%
happens
so<02:32:10.880><c> x</c><02:32:11.120><c> doesn't</c><02:32:11.359><c> contain</c><02:32:11.680><c> anything</c><02:32:12.080><c> but</c><02:32:12.319><c> y</c>

02:32:12.550 --> 02:32:12.560 align:start position:0%
so x doesn't contain anything but y
 

02:32:12.560 --> 02:32:15.030 align:start position:0%
so x doesn't contain anything but y
contains<02:32:13.040><c> water</c><02:32:13.680><c> one</c><02:32:13.920><c> solution</c><02:32:14.560><c> is</c><02:32:14.720><c> that</c><02:32:14.880><c> we</c>

02:32:15.030 --> 02:32:15.040 align:start position:0%
contains water one solution is that we
 

02:32:15.040 --> 02:32:17.030 align:start position:0%
contains water one solution is that we
can<02:32:15.200><c> make</c><02:32:15.520><c> these</c><02:32:15.760><c> character</c><02:32:16.240><c> arrays</c><02:32:16.640><c> the</c><02:32:16.720><c> same</c>

02:32:17.030 --> 02:32:17.040 align:start position:0%
can make these character arrays the same
 

02:32:17.040 --> 02:32:17.910 align:start position:0%
can make these character arrays the same
size

02:32:17.910 --> 02:32:17.920 align:start position:0%
size
 

02:32:17.920 --> 02:32:20.469 align:start position:0%
size
let's<02:32:18.080><c> say</c><02:32:18.240><c> that</c><02:32:18.399><c> they're</c><02:32:18.560><c> both</c><02:32:18.880><c> 15</c>

02:32:20.469 --> 02:32:20.479 align:start position:0%
let's say that they're both 15
 

02:32:20.479 --> 02:32:21.990 align:start position:0%
let's say that they're both 15
and<02:32:20.640><c> that</c><02:32:20.880><c> should</c><02:32:21.040><c> solve</c><02:32:21.280><c> that</c><02:32:21.520><c> issue</c><02:32:21.840><c> so</c>

02:32:21.990 --> 02:32:22.000 align:start position:0%
and that should solve that issue so
 

02:32:22.000 --> 02:32:23.190 align:start position:0%
and that should solve that issue so
that's<02:32:22.240><c> something</c><02:32:22.479><c> you</c><02:32:22.560><c> may</c><02:32:22.720><c> need</c><02:32:22.880><c> to</c><02:32:22.960><c> take</c>

02:32:23.190 --> 02:32:23.200 align:start position:0%
that's something you may need to take
 

02:32:23.200 --> 02:32:25.030 align:start position:0%
that's something you may need to take
into<02:32:23.439><c> consideration</c><02:32:24.160><c> when</c><02:32:24.319><c> using</c><02:32:24.560><c> the</c><02:32:24.720><c> string</c>

02:32:25.030 --> 02:32:25.040 align:start position:0%
into consideration when using the string
 

02:32:25.040 --> 02:32:27.030 align:start position:0%
into consideration when using the string
copy<02:32:25.359><c> function</c><02:32:26.000><c> if</c><02:32:26.160><c> you're</c><02:32:26.319><c> going</c><02:32:26.479><c> to</c><02:32:26.640><c> swap</c>

02:32:27.030 --> 02:32:27.040 align:start position:0%
copy function if you're going to swap
 

02:32:27.040 --> 02:32:29.590 align:start position:0%
copy function if you're going to swap
strings<02:32:27.680><c> so</c><02:32:27.920><c> yeah</c><02:32:28.160><c> everybody</c><02:32:28.640><c> that's</c><02:32:28.960><c> how</c><02:32:29.200><c> to</c>

02:32:29.590 --> 02:32:29.600 align:start position:0%
strings so yeah everybody that's how to
 

02:32:29.600 --> 02:32:32.309 align:start position:0%
strings so yeah everybody that's how to
swap<02:32:29.920><c> the</c><02:32:30.080><c> values</c><02:32:30.640><c> of</c><02:32:30.880><c> two</c><02:32:31.120><c> variables</c><02:32:32.080><c> if</c><02:32:32.160><c> you</c>

02:32:32.309 --> 02:32:32.319 align:start position:0%
swap the values of two variables if you
 

02:32:32.319 --> 02:32:34.070 align:start position:0%
swap the values of two variables if you
would<02:32:32.399><c> like</c><02:32:32.560><c> a</c><02:32:32.640><c> copy</c><02:32:32.960><c> of</c><02:32:33.040><c> this</c><02:32:33.200><c> code</c><02:32:33.600><c> i'll</c><02:32:33.840><c> post</c>

02:32:34.070 --> 02:32:34.080 align:start position:0%
would like a copy of this code i'll post
 

02:32:34.080 --> 02:32:35.750 align:start position:0%
would like a copy of this code i'll post
this<02:32:34.240><c> to</c><02:32:34.399><c> the</c><02:32:34.479><c> comment</c><02:32:34.800><c> section</c><02:32:35.200><c> down</c><02:32:35.359><c> below</c>

02:32:35.750 --> 02:32:35.760 align:start position:0%
this to the comment section down below
 

02:32:35.760 --> 02:32:37.510 align:start position:0%
this to the comment section down below
and<02:32:36.000><c> in</c><02:32:36.080><c> the</c><02:32:36.160><c> next</c><02:32:36.479><c> video</c><02:32:36.800><c> i'm</c><02:32:36.960><c> gonna</c><02:32:37.120><c> show</c><02:32:37.359><c> you</c>

02:32:37.510 --> 02:32:37.520 align:start position:0%
and in the next video i'm gonna show you
 

02:32:37.520 --> 02:32:39.190 align:start position:0%
and in the next video i'm gonna show you
how<02:32:37.680><c> we</c><02:32:37.760><c> can</c><02:32:38.000><c> sort</c><02:32:38.240><c> the</c><02:32:38.399><c> elements</c><02:32:38.800><c> within</c><02:32:39.040><c> an</c>

02:32:39.190 --> 02:32:39.200 align:start position:0%
how we can sort the elements within an
 

02:32:39.200 --> 02:32:41.510 align:start position:0%
how we can sort the elements within an
array<02:32:39.760><c> and</c><02:32:39.920><c> well</c><02:32:40.319><c> yeah</c><02:32:40.640><c> that's</c><02:32:40.880><c> how</c><02:32:41.040><c> to</c><02:32:41.120><c> swap</c>

02:32:41.510 --> 02:32:41.520 align:start position:0%
array and well yeah that's how to swap
 

02:32:41.520 --> 02:32:47.270 align:start position:0%
array and well yeah that's how to swap
the<02:32:41.680><c> values</c><02:32:42.240><c> of</c><02:32:42.479><c> two</c><02:32:42.720><c> variables</c><02:32:43.439><c> in</c><02:32:43.680><c> c</c>

02:32:47.270 --> 02:32:47.280 align:start position:0%
 
 

02:32:47.280 --> 02:32:49.429 align:start position:0%
 
hey<02:32:47.600><c> uh</c><02:32:47.760><c> what's</c><02:32:48.000><c> going</c><02:32:48.240><c> on</c><02:32:48.399><c> people</c><02:32:48.880><c> so</c><02:32:49.120><c> in</c><02:32:49.200><c> this</c>

02:32:49.429 --> 02:32:49.439 align:start position:0%
hey uh what's going on people so in this
 

02:32:49.439 --> 02:32:50.790 align:start position:0%
hey uh what's going on people so in this
video<02:32:49.760><c> we're</c><02:32:49.920><c> going</c><02:32:50.080><c> to</c><02:32:50.240><c> write</c><02:32:50.399><c> a</c><02:32:50.479><c> small</c>

02:32:50.790 --> 02:32:50.800 align:start position:0%
video we're going to write a small
 

02:32:50.800 --> 02:32:53.270 align:start position:0%
video we're going to write a small
program<02:32:51.280><c> to</c><02:32:51.439><c> sort</c><02:32:51.760><c> the</c><02:32:51.920><c> elements</c><02:32:52.319><c> of</c><02:32:52.479><c> an</c><02:32:52.640><c> array</c>

02:32:53.270 --> 02:32:53.280 align:start position:0%
program to sort the elements of an array
 

02:32:53.280 --> 02:32:55.270 align:start position:0%
program to sort the elements of an array
let's<02:32:53.520><c> begin</c><02:32:53.840><c> with</c><02:32:54.000><c> an</c><02:32:54.160><c> array</c><02:32:54.399><c> of</c><02:32:54.560><c> integers</c>

02:32:55.270 --> 02:32:55.280 align:start position:0%
let's begin with an array of integers
 

02:32:55.280 --> 02:32:56.710 align:start position:0%
let's begin with an array of integers
and<02:32:55.359><c> then</c><02:32:55.520><c> later</c><02:32:55.840><c> we'll</c><02:32:56.000><c> create</c><02:32:56.240><c> an</c><02:32:56.399><c> array</c><02:32:56.640><c> of</c>

02:32:56.710 --> 02:32:56.720 align:start position:0%
and then later we'll create an array of
 

02:32:56.720 --> 02:32:59.190 align:start position:0%
and then later we'll create an array of
characters<02:32:57.520><c> the</c><02:32:57.680><c> data</c><02:32:58.000><c> type</c><02:32:58.319><c> will</c><02:32:58.479><c> be</c><02:32:58.720><c> int</c><02:32:59.040><c> and</c>

02:32:59.190 --> 02:32:59.200 align:start position:0%
characters the data type will be int and
 

02:32:59.200 --> 02:33:01.670 align:start position:0%
characters the data type will be int and
let's<02:32:59.439><c> name</c><02:32:59.680><c> this</c><02:33:00.000><c> array</c>

02:33:01.670 --> 02:33:01.680 align:start position:0%
let's name this array
 

02:33:01.680 --> 02:33:03.510 align:start position:0%
let's name this array
and<02:33:01.920><c> assign</c><02:33:02.240><c> some</c><02:33:02.399><c> values</c><02:33:02.960><c> make</c><02:33:03.120><c> sure</c><02:33:03.280><c> that</c>

02:33:03.510 --> 02:33:03.520 align:start position:0%
and assign some values make sure that
 

02:33:03.520 --> 02:33:05.030 align:start position:0%
and assign some values make sure that
they're<02:33:03.680><c> not</c><02:33:03.840><c> in</c><02:33:04.000><c> order</c><02:33:04.399><c> just</c><02:33:04.640><c> make</c><02:33:04.800><c> up</c><02:33:04.880><c> some</c>

02:33:05.030 --> 02:33:05.040 align:start position:0%
they're not in order just make up some
 

02:33:05.040 --> 02:33:08.150 align:start position:0%
they're not in order just make up some
numbers<02:33:05.359><c> that's</c><02:33:05.600><c> fine</c>

02:33:08.150 --> 02:33:08.160 align:start position:0%
 
 

02:33:08.160 --> 02:33:10.230 align:start position:0%
 
looks<02:33:08.399><c> good</c><02:33:08.640><c> to</c><02:33:08.720><c> me</c><02:33:09.040><c> now</c><02:33:09.200><c> let's</c><02:33:09.439><c> calculate</c><02:33:10.000><c> the</c>

02:33:10.230 --> 02:33:10.240 align:start position:0%
looks good to me now let's calculate the
 

02:33:10.240 --> 02:33:11.750 align:start position:0%
looks good to me now let's calculate the
size<02:33:10.560><c> of</c><02:33:10.720><c> our</c><02:33:10.800><c> array</c><02:33:11.120><c> because</c><02:33:11.280><c> we'll</c><02:33:11.439><c> need</c><02:33:11.600><c> to</c>

02:33:11.750 --> 02:33:11.760 align:start position:0%
size of our array because we'll need to
 

02:33:11.760 --> 02:33:13.349 align:start position:0%
size of our array because we'll need to
know<02:33:12.000><c> how</c><02:33:12.160><c> many</c><02:33:12.399><c> times</c><02:33:12.720><c> we're</c><02:33:12.880><c> going</c><02:33:13.040><c> to</c>

02:33:13.349 --> 02:33:13.359 align:start position:0%
know how many times we're going to
 

02:33:13.359 --> 02:33:16.870 align:start position:0%
know how many times we're going to
iterate<02:33:13.760><c> through</c><02:33:14.000><c> our</c><02:33:14.160><c> array</c><02:33:15.040><c> so</c><02:33:15.439><c> int</c><02:33:16.000><c> size</c><02:33:16.800><c> i</c>

02:33:16.870 --> 02:33:16.880 align:start position:0%
iterate through our array so int size i
 

02:33:16.880 --> 02:33:19.429 align:start position:0%
iterate through our array so int size i
will<02:33:17.040><c> set</c><02:33:17.200><c> this</c><02:33:17.439><c> equal</c><02:33:18.080><c> to</c><02:33:18.319><c> the</c><02:33:18.560><c> size</c><02:33:19.200><c> of</c>

02:33:19.429 --> 02:33:19.439 align:start position:0%
will set this equal to the size of
 

02:33:19.439 --> 02:33:22.150 align:start position:0%
will set this equal to the size of
operator<02:33:20.319><c> pass</c><02:33:20.640><c> in</c><02:33:20.800><c> our</c><02:33:20.960><c> array</c><02:33:21.760><c> this</c><02:33:22.000><c> will</c>

02:33:22.150 --> 02:33:22.160 align:start position:0%
operator pass in our array this will
 

02:33:22.160 --> 02:33:24.710 align:start position:0%
operator pass in our array this will
calculate<02:33:22.720><c> the</c><02:33:22.960><c> size</c><02:33:23.280><c> of</c><02:33:23.439><c> our</c><02:33:23.520><c> array</c><02:33:23.920><c> in</c><02:33:24.160><c> bytes</c>

02:33:24.710 --> 02:33:24.720 align:start position:0%
calculate the size of our array in bytes
 

02:33:24.720 --> 02:33:26.550 align:start position:0%
calculate the size of our array in bytes
and<02:33:24.880><c> to</c><02:33:25.040><c> find</c><02:33:25.359><c> the</c><02:33:25.439><c> number</c><02:33:25.680><c> of</c><02:33:25.840><c> elements</c><02:33:26.399><c> we</c>

02:33:26.550 --> 02:33:26.560 align:start position:0%
and to find the number of elements we
 

02:33:26.560 --> 02:33:29.349 align:start position:0%
and to find the number of elements we
can<02:33:26.720><c> divide</c><02:33:27.120><c> this</c><02:33:27.680><c> by</c><02:33:28.000><c> the</c><02:33:28.240><c> size</c><02:33:28.640><c> of</c><02:33:28.880><c> just</c><02:33:29.120><c> one</c>

02:33:29.349 --> 02:33:29.359 align:start position:0%
can divide this by the size of just one
 

02:33:29.359 --> 02:33:32.790 align:start position:0%
can divide this by the size of just one
element<02:33:30.000><c> so</c><02:33:30.319><c> size</c><02:33:30.880><c> of</c><02:33:31.120><c> array</c><02:33:31.680><c> divided</c><02:33:32.160><c> by</c><02:33:32.560><c> the</c>

02:33:32.790 --> 02:33:32.800 align:start position:0%
element so size of array divided by the
 

02:33:32.800 --> 02:33:35.990 align:start position:0%
element so size of array divided by the
size<02:33:33.280><c> of</c><02:33:33.439><c> array</c><02:33:34.160><c> at</c><02:33:34.399><c> index</c><02:33:34.880><c> of</c><02:33:35.120><c> zero</c>

02:33:35.990 --> 02:33:36.000 align:start position:0%
size of array at index of zero
 

02:33:36.000 --> 02:33:38.150 align:start position:0%
size of array at index of zero
size<02:33:36.479><c> will</c><02:33:36.720><c> equal</c><02:33:37.200><c> the</c><02:33:37.359><c> amount</c><02:33:37.600><c> of</c><02:33:37.760><c> elements</c>

02:33:38.150 --> 02:33:38.160 align:start position:0%
size will equal the amount of elements
 

02:33:38.160 --> 02:33:40.309 align:start position:0%
size will equal the amount of elements
within<02:33:38.640><c> our</c><02:33:38.800><c> array</c><02:33:39.520><c> and</c><02:33:39.680><c> just</c><02:33:39.920><c> to</c><02:33:40.000><c> keep</c><02:33:40.160><c> this</c>

02:33:40.309 --> 02:33:40.319 align:start position:0%
within our array and just to keep this
 

02:33:40.319 --> 02:33:42.630 align:start position:0%
within our array and just to keep this
code<02:33:40.640><c> more</c><02:33:40.880><c> organized</c><02:33:41.600><c> let's</c><02:33:41.920><c> declare</c><02:33:42.479><c> a</c>

02:33:42.630 --> 02:33:42.640 align:start position:0%
code more organized let's declare a
 

02:33:42.640 --> 02:33:44.790 align:start position:0%
code more organized let's declare a
function<02:33:43.280><c> to</c><02:33:43.520><c> actually</c><02:33:43.920><c> sort</c><02:33:44.319><c> all</c><02:33:44.479><c> of</c><02:33:44.560><c> this</c>

02:33:44.790 --> 02:33:44.800 align:start position:0%
function to actually sort all of this
 

02:33:44.800 --> 02:33:46.550 align:start position:0%
function to actually sort all of this
for<02:33:45.040><c> us</c><02:33:45.520><c> so</c><02:33:45.760><c> we</c><02:33:45.840><c> don't</c><02:33:46.000><c> have</c><02:33:46.160><c> to</c><02:33:46.240><c> do</c><02:33:46.399><c> that</c>

02:33:46.550 --> 02:33:46.560 align:start position:0%
for us so we don't have to do that
 

02:33:46.560 --> 02:33:48.389 align:start position:0%
for us so we don't have to do that
within<02:33:47.040><c> the</c><02:33:47.280><c> main</c><02:33:47.520><c> function</c>

02:33:48.389 --> 02:33:48.399 align:start position:0%
within the main function
 

02:33:48.399 --> 02:33:51.030 align:start position:0%
within the main function
so<02:33:48.560><c> let's</c><02:33:48.800><c> declare</c><02:33:49.520><c> a</c><02:33:49.920><c> sort</c><02:33:50.240><c> function</c><02:33:50.880><c> the</c>

02:33:51.030 --> 02:33:51.040 align:start position:0%
so let's declare a sort function the
 

02:33:51.040 --> 02:33:52.870 align:start position:0%
so let's declare a sort function the
return<02:33:51.439><c> type</c><02:33:51.680><c> is</c><02:33:51.840><c> void</c><02:33:52.080><c> we're</c><02:33:52.240><c> not</c><02:33:52.399><c> returning</c>

02:33:52.870 --> 02:33:52.880 align:start position:0%
return type is void we're not returning
 

02:33:52.880 --> 02:33:56.150 align:start position:0%
return type is void we're not returning
anything<02:33:53.680><c> and</c><02:33:53.840><c> let's</c><02:33:54.080><c> name</c><02:33:54.319><c> this</c><02:33:54.720><c> sort</c>

02:33:56.150 --> 02:33:56.160 align:start position:0%
anything and let's name this sort
 

02:33:56.160 --> 02:33:58.230 align:start position:0%
anything and let's name this sort
and<02:33:56.240><c> there</c><02:33:56.479><c> will</c><02:33:56.640><c> be</c><02:33:56.880><c> two</c><02:33:57.040><c> parameters</c>

02:33:58.230 --> 02:33:58.240 align:start position:0%
and there will be two parameters
 

02:33:58.240 --> 02:34:01.830 align:start position:0%
and there will be two parameters
an<02:33:58.479><c> array</c><02:33:59.040><c> of</c><02:33:59.280><c> integers</c>

02:34:01.830 --> 02:34:01.840 align:start position:0%
 
 

02:34:01.840 --> 02:34:05.030 align:start position:0%
 
and<02:34:02.399><c> integer</c><02:34:03.200><c> size</c>

02:34:05.030 --> 02:34:05.040 align:start position:0%
and integer size
 

02:34:05.040 --> 02:34:06.870 align:start position:0%
and integer size
and<02:34:05.280><c> let's</c><02:34:05.520><c> invoke</c><02:34:05.920><c> this</c><02:34:06.080><c> function</c><02:34:06.640><c> we're</c>

02:34:06.870 --> 02:34:06.880 align:start position:0%
and let's invoke this function we're
 

02:34:06.880 --> 02:34:08.710 align:start position:0%
and let's invoke this function we're
invoking<02:34:07.359><c> sort</c><02:34:07.680><c> and</c><02:34:07.840><c> then</c><02:34:08.000><c> we</c><02:34:08.160><c> need</c><02:34:08.319><c> to</c><02:34:08.399><c> pass</c>

02:34:08.710 --> 02:34:08.720 align:start position:0%
invoking sort and then we need to pass
 

02:34:08.720 --> 02:34:10.230 align:start position:0%
invoking sort and then we need to pass
in<02:34:08.960><c> two</c><02:34:09.200><c> arguments</c>

02:34:10.230 --> 02:34:10.240 align:start position:0%
in two arguments
 

02:34:10.240 --> 02:34:11.830 align:start position:0%
in two arguments
our<02:34:10.560><c> array</c>

02:34:11.830 --> 02:34:11.840 align:start position:0%
our array
 

02:34:11.840 --> 02:34:13.590 align:start position:0%
our array
and<02:34:12.160><c> a</c><02:34:12.319><c> size</c>

02:34:13.590 --> 02:34:13.600 align:start position:0%
and a size
 

02:34:13.600 --> 02:34:15.349 align:start position:0%
and a size
within<02:34:13.920><c> the</c><02:34:14.080><c> sort</c><02:34:14.319><c> function</c><02:34:14.800><c> we'll</c><02:34:14.960><c> need</c>

02:34:15.349 --> 02:34:15.359 align:start position:0%
within the sort function we'll need
 

02:34:15.359 --> 02:34:18.630 align:start position:0%
within the sort function we'll need
nested<02:34:15.840><c> loops</c><02:34:16.160><c> we</c><02:34:16.319><c> can</c><02:34:16.399><c> use</c><02:34:16.640><c> four</c><02:34:16.880><c> loops</c>

02:34:18.630 --> 02:34:18.640 align:start position:0%
nested loops we can use four loops
 

02:34:18.640 --> 02:34:21.510 align:start position:0%
nested loops we can use four loops
so<02:34:18.800><c> the</c><02:34:18.960><c> outer</c><02:34:19.200><c> for</c><02:34:19.439><c> loop</c><02:34:19.760><c> will</c><02:34:20.000><c> be</c><02:34:20.560><c> int</c><02:34:20.880><c> i</c><02:34:21.359><c> set</c>

02:34:21.510 --> 02:34:21.520 align:start position:0%
so the outer for loop will be int i set
 

02:34:21.520 --> 02:34:23.990 align:start position:0%
so the outer for loop will be int i set
this<02:34:21.760><c> equal</c><02:34:22.000><c> to</c><02:34:22.160><c> zero</c><02:34:23.040><c> and</c><02:34:23.200><c> we</c><02:34:23.359><c> will</c><02:34:23.600><c> continue</c>

02:34:23.990 --> 02:34:24.000 align:start position:0%
this equal to zero and we will continue
 

02:34:24.000 --> 02:34:27.190 align:start position:0%
this equal to zero and we will continue
this<02:34:24.160><c> for</c><02:34:24.399><c> loop</c><02:34:24.720><c> as</c><02:34:24.960><c> long</c><02:34:25.200><c> as</c><02:34:25.359><c> i</c><02:34:26.080><c> is</c><02:34:26.240><c> less</c><02:34:26.560><c> than</c>

02:34:27.190 --> 02:34:27.200 align:start position:0%
this for loop as long as i is less than
 

02:34:27.200 --> 02:34:30.230 align:start position:0%
this for loop as long as i is less than
the<02:34:27.439><c> size</c><02:34:27.680><c> of</c><02:34:27.840><c> our</c><02:34:28.000><c> array</c><02:34:28.720><c> minus</c><02:34:29.280><c> one</c><02:34:29.840><c> and</c><02:34:29.920><c> then</c>

02:34:30.230 --> 02:34:30.240 align:start position:0%
the size of our array minus one and then
 

02:34:30.240 --> 02:34:32.790 align:start position:0%
the size of our array minus one and then
increment<02:34:30.720><c> i</c><02:34:31.040><c> by</c><02:34:31.280><c> one</c><02:34:32.000><c> and</c><02:34:32.080><c> then</c><02:34:32.319><c> we</c><02:34:32.479><c> need</c><02:34:32.640><c> an</c>

02:34:32.790 --> 02:34:32.800 align:start position:0%
increment i by one and then we need an
 

02:34:32.800 --> 02:34:34.950 align:start position:0%
increment i by one and then we need an
inner<02:34:33.040><c> for</c><02:34:33.280><c> loop</c><02:34:33.600><c> so</c><02:34:33.760><c> let's</c><02:34:34.000><c> copy</c><02:34:34.479><c> our</c><02:34:34.640><c> outer</c>

02:34:34.950 --> 02:34:34.960 align:start position:0%
inner for loop so let's copy our outer
 

02:34:34.960 --> 02:34:38.309 align:start position:0%
inner for loop so let's copy our outer
for<02:34:35.200><c> loop</c><02:34:35.760><c> paste</c><02:34:36.160><c> it</c><02:34:36.640><c> and</c><02:34:36.800><c> make</c><02:34:36.960><c> a</c><02:34:37.040><c> few</c><02:34:37.280><c> changes</c>

02:34:38.309 --> 02:34:38.319 align:start position:0%
for loop paste it and make a few changes
 

02:34:38.319 --> 02:34:40.630 align:start position:0%
for loop paste it and make a few changes
so<02:34:38.560><c> the</c><02:34:38.720><c> index</c><02:34:39.120><c> for</c><02:34:39.280><c> the</c><02:34:39.520><c> inner</c><02:34:39.840><c> loop</c><02:34:40.160><c> will</c><02:34:40.399><c> be</c>

02:34:40.630 --> 02:34:40.640 align:start position:0%
so the index for the inner loop will be
 

02:34:40.640 --> 02:34:41.429 align:start position:0%
so the index for the inner loop will be
j

02:34:41.429 --> 02:34:41.439 align:start position:0%
j
 

02:34:41.439 --> 02:34:44.070 align:start position:0%
j
and<02:34:41.600><c> we'll</c><02:34:41.760><c> continue</c><02:34:42.160><c> this</c><02:34:42.399><c> as</c><02:34:42.640><c> long</c><02:34:42.960><c> as</c><02:34:43.200><c> j</c><02:34:43.840><c> is</c>

02:34:44.070 --> 02:34:44.080 align:start position:0%
and we'll continue this as long as j is
 

02:34:44.080 --> 02:34:46.389 align:start position:0%
and we'll continue this as long as j is
less<02:34:44.319><c> than</c><02:34:44.720><c> the</c><02:34:44.880><c> size</c><02:34:45.200><c> of</c><02:34:45.359><c> our</c><02:34:45.439><c> array</c><02:34:46.000><c> minus</c>

02:34:46.389 --> 02:34:46.399 align:start position:0%
less than the size of our array minus
 

02:34:46.399 --> 02:34:49.110 align:start position:0%
less than the size of our array minus
one<02:34:47.120><c> then</c><02:34:47.520><c> j</c><02:34:47.920><c> plus</c><02:34:48.240><c> plus</c>

02:34:49.110 --> 02:34:49.120 align:start position:0%
one then j plus plus
 

02:34:49.120 --> 02:34:50.630 align:start position:0%
one then j plus plus
here's<02:34:49.359><c> what</c><02:34:49.439><c> we're</c><02:34:49.600><c> doing</c><02:34:49.840><c> within</c><02:34:50.240><c> our</c><02:34:50.319><c> array</c>

02:34:50.630 --> 02:34:50.640 align:start position:0%
here's what we're doing within our array
 

02:34:50.640 --> 02:34:52.950 align:start position:0%
here's what we're doing within our array
so<02:34:50.800><c> we</c><02:34:50.960><c> will</c><02:34:51.120><c> begin</c><02:34:51.520><c> at</c><02:34:51.760><c> our</c><02:34:51.920><c> first</c><02:34:52.319><c> index</c>

02:34:52.950 --> 02:34:52.960 align:start position:0%
so we will begin at our first index
 

02:34:52.960 --> 02:34:54.630 align:start position:0%
so we will begin at our first index
we're<02:34:53.200><c> checking</c><02:34:53.520><c> to</c><02:34:53.680><c> see</c><02:34:53.840><c> if</c><02:34:54.000><c> the</c><02:34:54.080><c> element</c><02:34:54.479><c> on</c>

02:34:54.630 --> 02:34:54.640 align:start position:0%
we're checking to see if the element on
 

02:34:54.640 --> 02:34:56.630 align:start position:0%
we're checking to see if the element on
the<02:34:54.720><c> left</c><02:34:55.280><c> is</c><02:34:55.520><c> greater</c><02:34:55.840><c> than</c><02:34:56.000><c> the</c><02:34:56.160><c> element</c><02:34:56.560><c> on</c>

02:34:56.630 --> 02:34:56.640 align:start position:0%
the left is greater than the element on
 

02:34:56.640 --> 02:34:58.630 align:start position:0%
the left is greater than the element on
the<02:34:56.720><c> right</c><02:34:57.280><c> if</c><02:34:57.520><c> so</c><02:34:57.760><c> we're</c><02:34:57.920><c> going</c><02:34:58.080><c> to</c><02:34:58.240><c> swap</c>

02:34:58.630 --> 02:34:58.640 align:start position:0%
the right if so we're going to swap
 

02:34:58.640 --> 02:35:00.469 align:start position:0%
the right if so we're going to swap
these<02:34:58.880><c> two</c><02:34:59.120><c> values</c><02:34:59.680><c> and</c><02:34:59.760><c> we'll</c><02:34:59.920><c> need</c><02:35:00.080><c> the</c><02:35:00.160><c> help</c>

02:35:00.469 --> 02:35:00.479 align:start position:0%
these two values and we'll need the help
 

02:35:00.479 --> 02:35:02.790 align:start position:0%
these two values and we'll need the help
of<02:35:00.640><c> a</c><02:35:00.800><c> temporary</c><02:35:01.359><c> variable</c><02:35:02.160><c> much</c><02:35:02.399><c> like</c><02:35:02.640><c> what</c>

02:35:02.790 --> 02:35:02.800 align:start position:0%
of a temporary variable much like what
 

02:35:02.800 --> 02:35:05.190 align:start position:0%
of a temporary variable much like what
we<02:35:02.960><c> learned</c><02:35:03.280><c> in</c><02:35:03.359><c> the</c><02:35:03.439><c> last</c><02:35:03.840><c> topic</c><02:35:04.720><c> so</c><02:35:04.880><c> let's</c>

02:35:05.190 --> 02:35:05.200 align:start position:0%
we learned in the last topic so let's
 

02:35:05.200 --> 02:35:06.710 align:start position:0%
we learned in the last topic so let's
check<02:35:05.359><c> to</c><02:35:05.520><c> see</c><02:35:05.600><c> if</c><02:35:05.760><c> the</c><02:35:05.840><c> element</c><02:35:06.240><c> on</c><02:35:06.319><c> the</c><02:35:06.399><c> left</c>

02:35:06.710 --> 02:35:06.720 align:start position:0%
check to see if the element on the left
 

02:35:06.720 --> 02:35:08.550 align:start position:0%
check to see if the element on the left
is<02:35:06.880><c> greater</c><02:35:07.280><c> than</c><02:35:07.439><c> the</c><02:35:07.520><c> element</c><02:35:07.920><c> on</c><02:35:08.000><c> the</c><02:35:08.080><c> right</c>

02:35:08.550 --> 02:35:08.560 align:start position:0%
is greater than the element on the right
 

02:35:08.560 --> 02:35:10.790 align:start position:0%
is greater than the element on the right
if<02:35:08.720><c> it</c><02:35:08.880><c> isn't</c><02:35:09.120><c> we</c><02:35:09.280><c> do</c><02:35:09.439><c> nothing</c>

02:35:10.790 --> 02:35:10.800 align:start position:0%
if it isn't we do nothing
 

02:35:10.800 --> 02:35:13.830 align:start position:0%
if it isn't we do nothing
so<02:35:10.960><c> we</c><02:35:11.040><c> need</c><02:35:11.200><c> an</c><02:35:11.359><c> if</c><02:35:11.520><c> statement</c>

02:35:13.830 --> 02:35:13.840 align:start position:0%
so we need an if statement
 

02:35:13.840 --> 02:35:15.830 align:start position:0%
so we need an if statement
if<02:35:14.479><c> array</c>

02:35:15.830 --> 02:35:15.840 align:start position:0%
if array
 

02:35:15.840 --> 02:35:18.469 align:start position:0%
if array
at<02:35:16.160><c> index</c><02:35:16.960><c> of</c><02:35:17.120><c> j</c>

02:35:18.469 --> 02:35:18.479 align:start position:0%
at index of j
 

02:35:18.479 --> 02:35:23.110 align:start position:0%
at index of j
is<02:35:18.800><c> greater</c><02:35:19.359><c> than</c><02:35:20.080><c> array</c><02:35:21.040><c> at</c><02:35:21.359><c> index</c><02:35:21.920><c> of</c><02:35:22.160><c> j</c><02:35:22.640><c> plus</c>

02:35:23.110 --> 02:35:23.120 align:start position:0%
is greater than array at index of j plus
 

02:35:23.120 --> 02:35:23.990 align:start position:0%
is greater than array at index of j plus
one

02:35:23.990 --> 02:35:24.000 align:start position:0%
one
 

02:35:24.000 --> 02:35:25.670 align:start position:0%
one
we're<02:35:24.160><c> adding</c><02:35:24.479><c> plus</c><02:35:24.800><c> one</c><02:35:25.040><c> because</c><02:35:25.439><c> we're</c>

02:35:25.670 --> 02:35:25.680 align:start position:0%
we're adding plus one because we're
 

02:35:25.680 --> 02:35:27.510 align:start position:0%
we're adding plus one because we're
checking<02:35:26.000><c> the</c><02:35:26.160><c> element</c><02:35:26.640><c> directly</c><02:35:27.120><c> next</c><02:35:27.359><c> to</c>

02:35:27.510 --> 02:35:27.520 align:start position:0%
checking the element directly next to
 

02:35:27.520 --> 02:35:29.910 align:start position:0%
checking the element directly next to
the<02:35:27.680><c> one</c><02:35:28.160><c> that</c><02:35:28.319><c> we're</c><02:35:28.479><c> currently</c><02:35:28.960><c> examining</c>

02:35:29.910 --> 02:35:29.920 align:start position:0%
the one that we're currently examining
 

02:35:29.920 --> 02:35:31.910 align:start position:0%
the one that we're currently examining
so<02:35:30.160><c> if</c><02:35:30.319><c> the</c><02:35:30.399><c> number</c><02:35:30.720><c> on</c><02:35:30.800><c> the</c><02:35:30.880><c> left</c><02:35:31.280><c> is</c><02:35:31.520><c> greater</c>

02:35:31.910 --> 02:35:31.920 align:start position:0%
so if the number on the left is greater
 

02:35:31.920 --> 02:35:33.590 align:start position:0%
so if the number on the left is greater
than<02:35:32.080><c> the</c><02:35:32.160><c> number</c><02:35:32.479><c> on</c><02:35:32.560><c> the</c><02:35:32.720><c> right</c><02:35:33.200><c> we</c><02:35:33.359><c> will</c>

02:35:33.590 --> 02:35:33.600 align:start position:0%
than the number on the right we will
 

02:35:33.600 --> 02:35:36.309 align:start position:0%
than the number on the right we will
perform<02:35:34.080><c> a</c><02:35:34.319><c> basic</c><02:35:34.800><c> variable</c><02:35:35.200><c> swap</c>

02:35:36.309 --> 02:35:36.319 align:start position:0%
perform a basic variable swap
 

02:35:36.319 --> 02:35:39.349 align:start position:0%
perform a basic variable swap
so<02:35:36.479><c> let's</c><02:35:36.800><c> declare</c><02:35:37.359><c> a</c><02:35:37.520><c> variable</c><02:35:38.240><c> in</c><02:35:38.720><c> temp</c><02:35:39.120><c> to</c>

02:35:39.349 --> 02:35:39.359 align:start position:0%
so let's declare a variable in temp to
 

02:35:39.359 --> 02:35:41.670 align:start position:0%
so let's declare a variable in temp to
temporarily<02:35:40.080><c> store</c><02:35:40.399><c> some</c><02:35:40.640><c> value</c><02:35:41.280><c> and</c><02:35:41.439><c> i</c><02:35:41.520><c> will</c>

02:35:41.670 --> 02:35:41.680 align:start position:0%
temporarily store some value and i will
 

02:35:41.680 --> 02:35:45.510 align:start position:0%
temporarily store some value and i will
set<02:35:41.920><c> the</c><02:35:42.000><c> sequel</c><02:35:42.479><c> to</c><02:35:42.720><c> array</c><02:35:43.600><c> at</c><02:35:43.920><c> index</c><02:35:44.560><c> of</c><02:35:44.800><c> j</c>

02:35:45.510 --> 02:35:45.520 align:start position:0%
set the sequel to array at index of j
 

02:35:45.520 --> 02:35:47.510 align:start position:0%
set the sequel to array at index of j
now<02:35:45.760><c> i</c><02:35:45.920><c> need</c><02:35:46.080><c> to</c><02:35:46.240><c> move</c><02:35:46.560><c> the</c><02:35:46.720><c> element</c><02:35:47.200><c> on</c><02:35:47.359><c> the</c>

02:35:47.510 --> 02:35:47.520 align:start position:0%
now i need to move the element on the
 

02:35:47.520 --> 02:35:50.150 align:start position:0%
now i need to move the element on the
right<02:35:48.080><c> over</c><02:35:48.399><c> to</c><02:35:48.560><c> the</c><02:35:48.640><c> element</c><02:35:49.040><c> on</c><02:35:49.200><c> the</c><02:35:49.280><c> left</c>

02:35:50.150 --> 02:35:50.160 align:start position:0%
right over to the element on the left
 

02:35:50.160 --> 02:35:51.110 align:start position:0%
right over to the element on the left
array

02:35:51.110 --> 02:35:51.120 align:start position:0%
array
 

02:35:51.120 --> 02:35:53.110 align:start position:0%
array
at<02:35:51.439><c> index</c><02:35:51.920><c> of</c><02:35:52.160><c> j</c>

02:35:53.110 --> 02:35:53.120 align:start position:0%
at index of j
 

02:35:53.120 --> 02:35:56.550 align:start position:0%
at index of j
equals<02:35:54.080><c> array</c><02:35:54.880><c> at</c><02:35:55.200><c> index</c><02:35:55.600><c> of</c><02:35:55.760><c> j</c>

02:35:56.550 --> 02:35:56.560 align:start position:0%
equals array at index of j
 

02:35:56.560 --> 02:35:58.790 align:start position:0%
equals array at index of j
plus<02:35:56.960><c> one</c><02:35:57.600><c> and</c><02:35:57.760><c> then</c><02:35:57.920><c> lastly</c><02:35:58.319><c> whatever's</c>

02:35:58.790 --> 02:35:58.800 align:start position:0%
plus one and then lastly whatever's
 

02:35:58.800 --> 02:36:00.710 align:start position:0%
plus one and then lastly whatever's
within<02:35:59.120><c> temp</c><02:35:59.680><c> i'm</c><02:35:59.840><c> moving</c><02:36:00.160><c> that</c><02:36:00.399><c> to</c><02:36:00.560><c> the</c>

02:36:00.710 --> 02:36:00.720 align:start position:0%
within temp i'm moving that to the
 

02:36:00.720 --> 02:36:04.150 align:start position:0%
within temp i'm moving that to the
element<02:36:01.200><c> on</c><02:36:01.359><c> the</c><02:36:01.520><c> right</c><02:36:02.240><c> so</c><02:36:02.560><c> array</c><02:36:03.439><c> at</c><02:36:03.760><c> index</c>

02:36:04.150 --> 02:36:04.160 align:start position:0%
element on the right so array at index
 

02:36:04.160 --> 02:36:06.830 align:start position:0%
element on the right so array at index
of<02:36:04.399><c> j</c><02:36:05.120><c> plus</c><02:36:05.520><c> one</c>

02:36:06.830 --> 02:36:06.840 align:start position:0%
of j plus one
 

02:36:06.840 --> 02:36:10.150 align:start position:0%
of j plus one
equals<02:36:07.920><c> temp</c><02:36:08.640><c> and</c><02:36:08.800><c> that's</c><02:36:09.120><c> it</c><02:36:09.760><c> so</c><02:36:09.920><c> if</c><02:36:10.080><c> you</c>

02:36:10.150 --> 02:36:10.160 align:start position:0%
equals temp and that's it so if you
 

02:36:10.160 --> 02:36:12.309 align:start position:0%
equals temp and that's it so if you
would<02:36:10.399><c> like</c><02:36:10.560><c> to</c><02:36:10.720><c> optimize</c><02:36:11.280><c> this</c><02:36:11.520><c> you</c><02:36:11.760><c> can</c><02:36:12.000><c> set</c>

02:36:12.309 --> 02:36:12.319 align:start position:0%
would like to optimize this you can set
 

02:36:12.319 --> 02:36:13.270 align:start position:0%
would like to optimize this you can set
size

02:36:13.270 --> 02:36:13.280 align:start position:0%
size
 

02:36:13.280 --> 02:36:14.630 align:start position:0%
size
minus<02:36:13.920><c> i</c>

02:36:14.630 --> 02:36:14.640 align:start position:0%
minus i
 

02:36:14.640 --> 02:36:17.110 align:start position:0%
minus i
minus<02:36:15.120><c> one</c><02:36:15.680><c> basically</c><02:36:16.160><c> this</c><02:36:16.399><c> is</c><02:36:16.560><c> a</c><02:36:16.800><c> bubble</c>

02:36:17.110 --> 02:36:17.120 align:start position:0%
minus one basically this is a bubble
 

02:36:17.120 --> 02:36:19.270 align:start position:0%
minus one basically this is a bubble
sort<02:36:17.760><c> so</c><02:36:18.000><c> depending</c><02:36:18.399><c> on</c><02:36:18.560><c> the</c><02:36:18.640><c> size</c><02:36:18.960><c> of</c><02:36:19.040><c> this</c>

02:36:19.270 --> 02:36:19.280 align:start position:0%
sort so depending on the size of this
 

02:36:19.280 --> 02:36:20.950 align:start position:0%
sort so depending on the size of this
number<02:36:19.600><c> it's</c><02:36:19.760><c> going</c><02:36:19.920><c> to</c><02:36:20.080><c> find</c><02:36:20.399><c> a</c><02:36:20.640><c> final</c>

02:36:20.950 --> 02:36:20.960 align:start position:0%
number it's going to find a final
 

02:36:20.960 --> 02:36:23.190 align:start position:0%
number it's going to find a final
resting<02:36:21.439><c> place</c><02:36:22.080><c> since</c><02:36:22.399><c> 9</c><02:36:22.640><c> is</c><02:36:22.720><c> going</c><02:36:22.880><c> to</c><02:36:22.960><c> be</c><02:36:23.120><c> the</c>

02:36:23.190 --> 02:36:23.200 align:start position:0%
resting place since 9 is going to be the
 

02:36:23.200 --> 02:36:25.030 align:start position:0%
resting place since 9 is going to be the
largest<02:36:23.760><c> it's</c><02:36:23.920><c> going</c><02:36:24.080><c> to</c><02:36:24.240><c> be</c><02:36:24.399><c> pushed</c><02:36:24.800><c> all</c><02:36:24.960><c> the</c>

02:36:25.030 --> 02:36:25.040 align:start position:0%
largest it's going to be pushed all the
 

02:36:25.040 --> 02:36:27.349 align:start position:0%
largest it's going to be pushed all the
way<02:36:25.200><c> to</c><02:36:25.359><c> the</c><02:36:25.439><c> right</c><02:36:25.760><c> because</c><02:36:26.080><c> we</c><02:36:26.240><c> will</c><02:36:26.479><c> examine</c>

02:36:27.349 --> 02:36:27.359 align:start position:0%
way to the right because we will examine
 

02:36:27.359 --> 02:36:30.150 align:start position:0%
way to the right because we will examine
9<02:36:28.000><c> against</c><02:36:28.399><c> each</c><02:36:28.560><c> of</c><02:36:28.640><c> these</c><02:36:28.880><c> numbers</c><02:36:29.600><c> so</c><02:36:29.760><c> once</c>

02:36:30.150 --> 02:36:30.160 align:start position:0%
9 against each of these numbers so once
 

02:36:30.160 --> 02:36:32.469 align:start position:0%
9 against each of these numbers so once
9<02:36:30.560><c> is</c><02:36:30.720><c> pushed</c><02:36:31.120><c> all</c><02:36:31.200><c> the</c><02:36:31.280><c> way</c><02:36:31.439><c> to</c><02:36:31.600><c> the</c><02:36:31.680><c> right</c><02:36:32.240><c> all</c>

02:36:32.469 --> 02:36:32.479 align:start position:0%
9 is pushed all the way to the right all
 

02:36:32.479 --> 02:36:34.309 align:start position:0%
9 is pushed all the way to the right all
these<02:36:32.800><c> other</c><02:36:32.960><c> numbers</c><02:36:33.359><c> that</c><02:36:33.520><c> are</c><02:36:33.680><c> less</c><02:36:33.840><c> than</c><02:36:34.000><c> 9</c>

02:36:34.309 --> 02:36:34.319 align:start position:0%
these other numbers that are less than 9
 

02:36:34.319 --> 02:36:36.150 align:start position:0%
these other numbers that are less than 9
will<02:36:34.479><c> be</c><02:36:34.640><c> on</c><02:36:34.720><c> the</c><02:36:34.880><c> left</c><02:36:35.439><c> so</c><02:36:35.600><c> it's</c><02:36:35.840><c> already</c>

02:36:36.150 --> 02:36:36.160 align:start position:0%
will be on the left so it's already
 

02:36:36.160 --> 02:36:38.150 align:start position:0%
will be on the left so it's already
partially<02:36:36.640><c> organized</c><02:36:37.280><c> and</c><02:36:37.439><c> now</c><02:36:37.600><c> we</c><02:36:37.760><c> just</c><02:36:37.920><c> need</c>

02:36:38.150 --> 02:36:38.160 align:start position:0%
partially organized and now we just need
 

02:36:38.160 --> 02:36:39.990 align:start position:0%
partially organized and now we just need
some<02:36:38.319><c> way</c><02:36:38.560><c> to</c><02:36:38.800><c> display</c><02:36:39.200><c> the</c><02:36:39.359><c> elements</c><02:36:39.680><c> of</c><02:36:39.840><c> our</c>

02:36:39.990 --> 02:36:40.000 align:start position:0%
some way to display the elements of our
 

02:36:40.000 --> 02:36:43.270 align:start position:0%
some way to display the elements of our
array<02:36:40.640><c> so</c><02:36:40.880><c> let's</c><02:36:41.120><c> declare</c><02:36:41.680><c> a</c><02:36:41.840><c> print</c><02:36:42.160><c> function</c>

02:36:43.270 --> 02:36:43.280 align:start position:0%
array so let's declare a print function
 

02:36:43.280 --> 02:36:47.190 align:start position:0%
array so let's declare a print function
void<02:36:44.000><c> and</c><02:36:44.160><c> let's</c><02:36:44.399><c> name</c><02:36:44.640><c> this</c><02:36:44.880><c> print</c><02:36:45.600><c> array</c>

02:36:47.190 --> 02:36:47.200 align:start position:0%
void and let's name this print array
 

02:36:47.200 --> 02:36:49.349 align:start position:0%
void and let's name this print array
and<02:36:47.359><c> these</c><02:36:47.600><c> will</c><02:36:47.760><c> have</c><02:36:47.920><c> the</c><02:36:48.080><c> same</c><02:36:48.399><c> parameters</c>

02:36:49.349 --> 02:36:49.359 align:start position:0%
and these will have the same parameters
 

02:36:49.359 --> 02:36:52.550 align:start position:0%
and these will have the same parameters
an<02:36:49.520><c> array</c><02:36:49.760><c> of</c><02:36:49.920><c> integers</c><02:36:50.479><c> and</c><02:36:50.800><c> into</c><02:36:51.200><c> size</c>

02:36:52.550 --> 02:36:52.560 align:start position:0%
an array of integers and into size
 

02:36:52.560 --> 02:36:55.270 align:start position:0%
an array of integers and into size
and<02:36:52.720><c> this</c><02:36:52.880><c> is</c><02:36:52.960><c> a</c><02:36:53.120><c> basic</c><02:36:53.520><c> for</c><02:36:53.840><c> loop</c>

02:36:55.270 --> 02:36:55.280 align:start position:0%
and this is a basic for loop
 

02:36:55.280 --> 02:36:56.630 align:start position:0%
and this is a basic for loop
so<02:36:55.600><c> for</c>

02:36:56.630 --> 02:36:56.640 align:start position:0%
so for
 

02:36:56.640 --> 02:36:59.030 align:start position:0%
so for
and<02:36:56.960><c> i</c><02:36:57.359><c> set</c><02:36:57.520><c> this</c><02:36:57.760><c> equal</c><02:36:58.000><c> to</c><02:36:58.160><c> zero</c>

02:36:59.030 --> 02:36:59.040 align:start position:0%
and i set this equal to zero
 

02:36:59.040 --> 02:37:01.429 align:start position:0%
and i set this equal to zero
we<02:36:59.280><c> will</c><02:36:59.600><c> continue</c><02:37:00.080><c> this</c><02:37:00.240><c> loop</c><02:37:00.479><c> as</c><02:37:00.720><c> long</c><02:37:00.880><c> as</c><02:37:01.120><c> i</c>

02:37:01.429 --> 02:37:01.439 align:start position:0%
we will continue this loop as long as i
 

02:37:01.439 --> 02:37:04.389 align:start position:0%
we will continue this loop as long as i
is<02:37:01.680><c> less</c><02:37:01.920><c> than</c><02:37:02.319><c> the</c><02:37:02.560><c> size</c><02:37:02.800><c> of</c><02:37:02.960><c> our</c><02:37:03.120><c> array</c><02:37:04.080><c> and</c>

02:37:04.389 --> 02:37:04.399 align:start position:0%
is less than the size of our array and
 

02:37:04.399 --> 02:37:06.469 align:start position:0%
is less than the size of our array and
increment<02:37:04.880><c> i</c><02:37:05.120><c> by</c><02:37:05.439><c> one</c>

02:37:06.469 --> 02:37:06.479 align:start position:0%
increment i by one
 

02:37:06.479 --> 02:37:09.190 align:start position:0%
increment i by one
and<02:37:06.640><c> i</c><02:37:06.720><c> would</c><02:37:06.880><c> like</c><02:37:07.040><c> to</c><02:37:07.120><c> display</c><02:37:07.920><c> each</c><02:37:08.160><c> integer</c>

02:37:09.190 --> 02:37:09.200 align:start position:0%
and i would like to display each integer
 

02:37:09.200 --> 02:37:10.630 align:start position:0%
and i would like to display each integer
and<02:37:09.359><c> maybe</c><02:37:09.680><c> i'll</c><02:37:09.760><c> separate</c><02:37:10.160><c> these</c><02:37:10.319><c> with</c><02:37:10.560><c> the</c>

02:37:10.630 --> 02:37:10.640 align:start position:0%
and maybe i'll separate these with the
 

02:37:10.640 --> 02:37:13.590 align:start position:0%
and maybe i'll separate these with the
space<02:37:11.200><c> and</c><02:37:11.359><c> we</c><02:37:11.520><c> are</c><02:37:11.600><c> displaying</c><02:37:12.319><c> our</c><02:37:12.560><c> array</c><02:37:13.280><c> at</c>

02:37:13.590 --> 02:37:13.600 align:start position:0%
space and we are displaying our array at
 

02:37:13.600 --> 02:37:16.710 align:start position:0%
space and we are displaying our array at
index<02:37:14.479><c> of</c><02:37:14.880><c> i</c><02:37:15.520><c> and</c><02:37:15.680><c> all</c><02:37:15.840><c> we</c><02:37:16.000><c> have</c><02:37:16.080><c> to</c><02:37:16.160><c> do</c><02:37:16.479><c> is</c>

02:37:16.710 --> 02:37:16.720 align:start position:0%
index of i and all we have to do is
 

02:37:16.720 --> 02:37:19.830 align:start position:0%
index of i and all we have to do is
invoke<02:37:17.200><c> the</c><02:37:17.439><c> print</c><02:37:17.760><c> array</c><02:37:18.080><c> function</c>

02:37:19.830 --> 02:37:19.840 align:start position:0%
invoke the print array function
 

02:37:19.840 --> 02:37:23.030 align:start position:0%
invoke the print array function
and<02:37:20.000><c> then</c><02:37:20.240><c> pass</c><02:37:20.560><c> in</c><02:37:20.800><c> our</c><02:37:21.040><c> array</c><02:37:21.840><c> and</c><02:37:22.080><c> our</c><02:37:22.240><c> size</c>

02:37:23.030 --> 02:37:23.040 align:start position:0%
and then pass in our array and our size
 

02:37:23.040 --> 02:37:24.870 align:start position:0%
and then pass in our array and our size
and<02:37:23.280><c> let's</c><02:37:23.520><c> take</c><02:37:23.760><c> a</c><02:37:23.840><c> look</c><02:37:24.399><c> fingers</c><02:37:24.800><c> are</c>

02:37:24.870 --> 02:37:24.880 align:start position:0%
and let's take a look fingers are
 

02:37:24.880 --> 02:37:26.309 align:start position:0%
and let's take a look fingers are
crossed

02:37:26.309 --> 02:37:26.319 align:start position:0%
crossed
 

02:37:26.319 --> 02:37:28.790 align:start position:0%
crossed
oh<02:37:26.560><c> yeah</c><02:37:26.880><c> there</c><02:37:27.040><c> we</c><02:37:27.200><c> go</c><02:37:27.840><c> our</c><02:37:28.080><c> array</c><02:37:28.399><c> is</c><02:37:28.560><c> now</c>

02:37:28.790 --> 02:37:28.800 align:start position:0%
oh yeah there we go our array is now
 

02:37:28.800 --> 02:37:31.030 align:start position:0%
oh yeah there we go our array is now
sorted<02:37:29.600><c> now</c><02:37:29.760><c> if</c><02:37:29.920><c> you</c><02:37:30.000><c> would</c><02:37:30.160><c> like</c><02:37:30.479><c> this</c><02:37:30.880><c> in</c>

02:37:31.030 --> 02:37:31.040 align:start position:0%
sorted now if you would like this in
 

02:37:31.040 --> 02:37:33.110 align:start position:0%
sorted now if you would like this in
descending<02:37:31.600><c> order</c><02:37:32.160><c> all</c><02:37:32.319><c> we</c><02:37:32.479><c> have</c><02:37:32.560><c> to</c><02:37:32.720><c> do</c><02:37:32.960><c> is</c>

02:37:33.110 --> 02:37:33.120 align:start position:0%
descending order all we have to do is
 

02:37:33.120 --> 02:37:35.349 align:start position:0%
descending order all we have to do is
switch<02:37:33.439><c> this</c><02:37:33.680><c> if</c><02:37:33.840><c> statement</c><02:37:34.160><c> around</c><02:37:34.960><c> from</c>

02:37:35.349 --> 02:37:35.359 align:start position:0%
switch this if statement around from
 

02:37:35.359 --> 02:37:37.990 align:start position:0%
switch this if statement around from
greater<02:37:35.680><c> than</c><02:37:36.160><c> to</c><02:37:36.640><c> less</c><02:37:36.880><c> than</c>

02:37:37.990 --> 02:37:38.000 align:start position:0%
greater than to less than
 

02:37:38.000 --> 02:37:40.870 align:start position:0%
greater than to less than
and<02:37:38.240><c> our</c><02:37:38.399><c> array</c><02:37:38.800><c> is</c><02:37:38.960><c> sorted</c><02:37:39.439><c> in</c><02:37:39.520><c> reverse</c><02:37:40.000><c> order</c>

02:37:40.870 --> 02:37:40.880 align:start position:0%
and our array is sorted in reverse order
 

02:37:40.880 --> 02:37:42.790 align:start position:0%
and our array is sorted in reverse order
and<02:37:41.040><c> we</c><02:37:41.200><c> could</c><02:37:41.439><c> sort</c><02:37:41.760><c> an</c><02:37:41.920><c> array</c><02:37:42.160><c> of</c><02:37:42.319><c> other</c><02:37:42.479><c> data</c>

02:37:42.790 --> 02:37:42.800 align:start position:0%
and we could sort an array of other data
 

02:37:42.800 --> 02:37:44.710 align:start position:0%
and we could sort an array of other data
types<02:37:43.040><c> too</c><02:37:43.359><c> this</c><02:37:43.520><c> time</c><02:37:43.840><c> let's</c><02:37:44.080><c> sort</c><02:37:44.399><c> an</c><02:37:44.479><c> array</c>

02:37:44.710 --> 02:37:44.720 align:start position:0%
types too this time let's sort an array
 

02:37:44.720 --> 02:37:47.030 align:start position:0%
types too this time let's sort an array
of<02:37:44.880><c> characters</c><02:37:45.680><c> so</c><02:37:45.920><c> let's</c><02:37:46.160><c> declare</c><02:37:46.640><c> an</c><02:37:46.800><c> array</c>

02:37:47.030 --> 02:37:47.040 align:start position:0%
of characters so let's declare an array
 

02:37:47.040 --> 02:37:50.710 align:start position:0%
of characters so let's declare an array
of<02:37:47.120><c> characters</c><02:37:47.600><c> this</c><02:37:47.760><c> time</c>

02:37:50.710 --> 02:37:50.720 align:start position:0%
 
 

02:37:50.720 --> 02:37:57.270 align:start position:0%
 
and<02:37:50.880><c> make</c><02:37:51.120><c> up</c><02:37:51.280><c> some</c><02:37:51.439><c> characters</c>

02:37:57.270 --> 02:37:57.280 align:start position:0%
 
 

02:37:57.280 --> 02:37:59.190 align:start position:0%
 
so<02:37:57.439><c> then</c><02:37:57.680><c> to</c><02:37:57.840><c> sort</c><02:37:58.160><c> an</c><02:37:58.240><c> array</c><02:37:58.479><c> of</c><02:37:58.640><c> characters</c>

02:37:59.190 --> 02:37:59.200 align:start position:0%
so then to sort an array of characters
 

02:37:59.200 --> 02:38:01.990 align:start position:0%
so then to sort an array of characters
let's<02:37:59.520><c> change</c><02:38:00.000><c> the</c><02:38:00.319><c> data</c><02:38:00.640><c> type</c><02:38:01.040><c> of</c><02:38:01.200><c> our</c><02:38:01.439><c> array</c>

02:38:01.990 --> 02:38:02.000 align:start position:0%
let's change the data type of our array
 

02:38:02.000 --> 02:38:06.309 align:start position:0%
let's change the data type of our array
to<02:38:02.319><c> characters</c>

02:38:06.309 --> 02:38:06.319 align:start position:0%
 
 

02:38:06.319 --> 02:38:08.309 align:start position:0%
 
and<02:38:06.399><c> then</c><02:38:06.640><c> when</c><02:38:06.880><c> we</c><02:38:07.040><c> display</c><02:38:07.520><c> each</c><02:38:07.760><c> character</c>

02:38:08.309 --> 02:38:08.319 align:start position:0%
and then when we display each character
 

02:38:08.319 --> 02:38:10.230 align:start position:0%
and then when we display each character
make<02:38:08.479><c> sure</c><02:38:08.640><c> that</c><02:38:08.800><c> we're</c><02:38:08.960><c> using</c><02:38:09.280><c> the</c><02:38:09.520><c> c</c><02:38:09.840><c> format</c>

02:38:10.230 --> 02:38:10.240 align:start position:0%
make sure that we're using the c format
 

02:38:10.240 --> 02:38:13.270 align:start position:0%
make sure that we're using the c format
specifier<02:38:11.200><c> because</c><02:38:11.520><c> we</c><02:38:11.680><c> were</c><02:38:11.920><c> using</c><02:38:12.240><c> d</c><02:38:12.479><c> before</c>

02:38:13.270 --> 02:38:13.280 align:start position:0%
specifier because we were using d before
 

02:38:13.280 --> 02:38:17.429 align:start position:0%
specifier because we were using d before
and<02:38:13.520><c> this</c><02:38:13.680><c> should</c><02:38:13.840><c> now</c><02:38:14.080><c> be</c><02:38:14.240><c> sorted</c>

02:38:17.429 --> 02:38:17.439 align:start position:0%
 
 

02:38:17.439 --> 02:38:19.429 align:start position:0%
 
yep<02:38:17.680><c> so</c><02:38:17.840><c> that's</c><02:38:18.080><c> currently</c><02:38:18.479><c> in</c><02:38:18.640><c> reverse</c><02:38:19.120><c> order</c>

02:38:19.429 --> 02:38:19.439 align:start position:0%
yep so that's currently in reverse order
 

02:38:19.439 --> 02:38:21.429 align:start position:0%
yep so that's currently in reverse order
so<02:38:19.600><c> then</c><02:38:19.840><c> to</c><02:38:20.000><c> switch</c><02:38:20.399><c> that</c><02:38:20.560><c> around</c><02:38:21.040><c> just</c>

02:38:21.429 --> 02:38:21.439 align:start position:0%
so then to switch that around just
 

02:38:21.439 --> 02:38:23.590 align:start position:0%
so then to switch that around just
change<02:38:21.760><c> the</c><02:38:21.920><c> sign</c>

02:38:23.590 --> 02:38:23.600 align:start position:0%
change the sign
 

02:38:23.600 --> 02:38:25.830 align:start position:0%
change the sign
all<02:38:23.760><c> right</c><02:38:24.080><c> there</c><02:38:24.319><c> you</c><02:38:24.399><c> go</c><02:38:24.880><c> so</c><02:38:25.120><c> yeah</c><02:38:25.439><c> everybody</c>

02:38:25.830 --> 02:38:25.840 align:start position:0%
all right there you go so yeah everybody
 

02:38:25.840 --> 02:38:28.309 align:start position:0%
all right there you go so yeah everybody
that<02:38:26.160><c> is</c><02:38:26.399><c> a</c><02:38:26.640><c> simple</c><02:38:27.040><c> program</c><02:38:27.520><c> to</c><02:38:27.760><c> sort</c><02:38:28.160><c> the</c>

02:38:28.309 --> 02:38:28.319 align:start position:0%
that is a simple program to sort the
 

02:38:28.319 --> 02:38:31.030 align:start position:0%
that is a simple program to sort the
elements<02:38:28.800><c> of</c><02:38:28.880><c> an</c><02:38:29.040><c> array</c><02:38:29.760><c> this</c><02:38:30.000><c> is</c><02:38:30.160><c> a</c><02:38:30.399><c> basic</c>

02:38:31.030 --> 02:38:31.040 align:start position:0%
elements of an array this is a basic
 

02:38:31.040 --> 02:38:32.790 align:start position:0%
elements of an array this is a basic
bubble<02:38:31.359><c> sort</c><02:38:31.920><c> and</c><02:38:32.080><c> if</c><02:38:32.160><c> you're</c><02:38:32.319><c> interested</c><02:38:32.720><c> in</c>

02:38:32.790 --> 02:38:32.800 align:start position:0%
bubble sort and if you're interested in
 

02:38:32.800 --> 02:38:34.550 align:start position:0%
bubble sort and if you're interested in
learning<02:38:33.040><c> more</c><02:38:33.280><c> about</c><02:38:33.520><c> sorting</c><02:38:33.920><c> algorithms</c><02:38:34.399><c> i</c>

02:38:34.550 --> 02:38:34.560 align:start position:0%
learning more about sorting algorithms i
 

02:38:34.560 --> 02:38:36.790 align:start position:0%
learning more about sorting algorithms i
do<02:38:34.800><c> have</c><02:38:35.040><c> a</c><02:38:35.200><c> playlist</c><02:38:35.760><c> on</c><02:38:36.000><c> data</c><02:38:36.240><c> structures</c>

02:38:36.790 --> 02:38:36.800 align:start position:0%
do have a playlist on data structures
 

02:38:36.800 --> 02:38:38.950 align:start position:0%
do have a playlist on data structures
and<02:38:37.040><c> algorithms</c><02:38:38.080><c> if</c><02:38:38.240><c> you</c><02:38:38.319><c> would</c><02:38:38.399><c> like</c><02:38:38.560><c> a</c><02:38:38.640><c> copy</c>

02:38:38.950 --> 02:38:38.960 align:start position:0%
and algorithms if you would like a copy
 

02:38:38.960 --> 02:38:40.469 align:start position:0%
and algorithms if you would like a copy
of<02:38:39.040><c> this</c><02:38:39.200><c> code</c><02:38:39.600><c> i'll</c><02:38:39.840><c> post</c><02:38:40.080><c> this</c><02:38:40.319><c> in</c><02:38:40.399><c> the</c>

02:38:40.469 --> 02:38:40.479 align:start position:0%
of this code i'll post this in the
 

02:38:40.479 --> 02:38:42.469 align:start position:0%
of this code i'll post this in the
comments<02:38:40.880><c> section</c><02:38:41.200><c> down</c><02:38:41.359><c> below</c><02:38:41.840><c> and</c><02:38:42.080><c> well</c>

02:38:42.469 --> 02:38:42.479 align:start position:0%
comments section down below and well
 

02:38:42.479 --> 02:38:45.270 align:start position:0%
comments section down below and well
yeah<02:38:42.880><c> that's</c><02:38:43.120><c> how</c><02:38:43.359><c> to</c><02:38:43.520><c> sort</c><02:38:43.920><c> a</c><02:38:44.080><c> simple</c><02:38:44.560><c> array</c>

02:38:45.270 --> 02:38:45.280 align:start position:0%
yeah that's how to sort a simple array
 

02:38:45.280 --> 02:38:49.270 align:start position:0%
yeah that's how to sort a simple array
in<02:38:45.520><c> c</c>

02:38:49.270 --> 02:38:49.280 align:start position:0%
 
 

02:38:49.280 --> 02:38:51.670 align:start position:0%
 
okay<02:38:49.840><c> everybody</c><02:38:50.479><c> so</c><02:38:50.960><c> let's</c><02:38:51.200><c> talk</c><02:38:51.439><c> about</c>

02:38:51.670 --> 02:38:51.680 align:start position:0%
okay everybody so let's talk about
 

02:38:51.680 --> 02:38:54.469 align:start position:0%
okay everybody so let's talk about
structs<02:38:52.240><c> a</c><02:38:52.479><c> struct</c><02:38:52.960><c> is</c><02:38:53.200><c> short</c><02:38:53.439><c> for</c><02:38:53.680><c> structure</c>

02:38:54.469 --> 02:38:54.479 align:start position:0%
structs a struct is short for structure
 

02:38:54.479 --> 02:38:57.030 align:start position:0%
structs a struct is short for structure
think<02:38:54.640><c> of</c><02:38:54.800><c> it</c><02:38:55.040><c> as</c><02:38:55.280><c> a</c><02:38:55.520><c> collection</c><02:38:56.240><c> of</c><02:38:56.560><c> related</c>

02:38:57.030 --> 02:38:57.040 align:start position:0%
think of it as a collection of related
 

02:38:57.040 --> 02:38:59.429 align:start position:0%
think of it as a collection of related
members<02:38:57.600><c> kind</c><02:38:57.840><c> of</c><02:38:57.920><c> like</c><02:38:58.160><c> variables</c><02:38:58.960><c> they</c><02:38:59.200><c> can</c>

02:38:59.429 --> 02:38:59.439 align:start position:0%
members kind of like variables they can
 

02:38:59.439 --> 02:39:01.670 align:start position:0%
members kind of like variables they can
be<02:38:59.680><c> of</c><02:38:59.840><c> different</c><02:39:00.240><c> data</c><02:39:00.560><c> types</c><02:39:01.040><c> unlike</c><02:39:01.439><c> with</c>

02:39:01.670 --> 02:39:01.680 align:start position:0%
be of different data types unlike with
 

02:39:01.680 --> 02:39:04.630 align:start position:0%
be of different data types unlike with
arrays<02:39:02.399><c> structs</c><02:39:02.960><c> are</c><02:39:03.200><c> listed</c><02:39:03.680><c> under</c><02:39:04.080><c> one</c><02:39:04.319><c> name</c>

02:39:04.630 --> 02:39:04.640 align:start position:0%
arrays structs are listed under one name
 

02:39:04.640 --> 02:39:06.790 align:start position:0%
arrays structs are listed under one name
in<02:39:04.800><c> a</c><02:39:04.880><c> block</c><02:39:05.200><c> of</c><02:39:05.280><c> memory</c><02:39:05.920><c> in</c><02:39:06.080><c> order</c><02:39:06.319><c> to</c><02:39:06.479><c> refer</c>

02:39:06.790 --> 02:39:06.800 align:start position:0%
in a block of memory in order to refer
 

02:39:06.800 --> 02:39:08.870 align:start position:0%
in a block of memory in order to refer
to<02:39:06.960><c> that</c><02:39:07.200><c> struct</c><02:39:07.680><c> we</c><02:39:07.840><c> can</c><02:39:08.000><c> refer</c><02:39:08.399><c> to</c><02:39:08.640><c> a</c>

02:39:08.870 --> 02:39:08.880 align:start position:0%
to that struct we can refer to a
 

02:39:08.880 --> 02:39:10.790 align:start position:0%
to that struct we can refer to a
variable<02:39:09.439><c> name</c><02:39:09.760><c> and</c><02:39:09.840><c> then</c><02:39:10.000><c> we</c><02:39:10.160><c> have</c><02:39:10.319><c> access</c><02:39:10.640><c> to</c>

02:39:10.790 --> 02:39:10.800 align:start position:0%
variable name and then we have access to
 

02:39:10.800 --> 02:39:12.710 align:start position:0%
variable name and then we have access to
that<02:39:10.960><c> block</c><02:39:11.280><c> of</c><02:39:11.359><c> memory</c><02:39:11.920><c> that</c><02:39:12.080><c> contains</c>

02:39:12.710 --> 02:39:12.720 align:start position:0%
that block of memory that contains
 

02:39:12.720 --> 02:39:15.990 align:start position:0%
that block of memory that contains
related<02:39:13.280><c> members</c><02:39:14.000><c> and</c><02:39:14.399><c> lastly</c><02:39:14.880><c> structs</c><02:39:15.439><c> are</c>

02:39:15.990 --> 02:39:16.000 align:start position:0%
related members and lastly structs are
 

02:39:16.000 --> 02:39:18.389 align:start position:0%
related members and lastly structs are
very<02:39:16.479><c> similar</c><02:39:17.040><c> to</c><02:39:17.359><c> classes</c><02:39:18.000><c> in</c><02:39:18.160><c> other</c>

02:39:18.389 --> 02:39:18.399 align:start position:0%
very similar to classes in other
 

02:39:18.399 --> 02:39:20.389 align:start position:0%
very similar to classes in other
languages<02:39:19.280><c> if</c><02:39:19.359><c> you're</c><02:39:19.600><c> familiar</c><02:39:20.000><c> with</c><02:39:20.240><c> more</c>

02:39:20.389 --> 02:39:20.399 align:start position:0%
languages if you're familiar with more
 

02:39:20.399 --> 02:39:22.389 align:start position:0%
languages if you're familiar with more
than<02:39:20.640><c> just</c><02:39:20.960><c> c</c><02:39:21.280><c> you'll</c><02:39:21.520><c> probably</c><02:39:21.920><c> know</c><02:39:22.080><c> what</c><02:39:22.240><c> a</c>

02:39:22.389 --> 02:39:22.399 align:start position:0%
than just c you'll probably know what a
 

02:39:22.399 --> 02:39:24.790 align:start position:0%
than just c you'll probably know what a
class<02:39:22.800><c> is</c><02:39:23.200><c> but</c><02:39:23.359><c> there</c><02:39:23.600><c> are</c><02:39:23.680><c> no</c><02:39:24.000><c> methods</c><02:39:24.399><c> within</c>

02:39:24.790 --> 02:39:24.800 align:start position:0%
class is but there are no methods within
 

02:39:24.800 --> 02:39:27.110 align:start position:0%
class is but there are no methods within
a<02:39:24.960><c> struct</c><02:39:25.520><c> it's</c><02:39:25.760><c> only</c><02:39:26.000><c> members</c><02:39:26.560><c> so</c><02:39:26.720><c> we</c><02:39:26.880><c> can</c>

02:39:27.110 --> 02:39:27.120 align:start position:0%
a struct it's only members so we can
 

02:39:27.120 --> 02:39:29.270 align:start position:0%
a struct it's only members so we can
actually<02:39:27.439><c> use</c><02:39:27.600><c> structs</c><02:39:28.000><c> to</c><02:39:28.160><c> mimic</c><02:39:28.560><c> real</c><02:39:28.880><c> world</c>

02:39:29.270 --> 02:39:29.280 align:start position:0%
actually use structs to mimic real world
 

02:39:29.280 --> 02:39:31.590 align:start position:0%
actually use structs to mimic real world
objects<02:39:30.160><c> let's</c><02:39:30.399><c> say</c><02:39:30.640><c> that</c><02:39:30.960><c> maybe</c><02:39:31.280><c> we're</c>

02:39:31.590 --> 02:39:31.600 align:start position:0%
objects let's say that maybe we're
 

02:39:31.600 --> 02:39:34.150 align:start position:0%
objects let's say that maybe we're
playing<02:39:31.840><c> a</c><02:39:31.920><c> game</c><02:39:32.240><c> and</c><02:39:32.479><c> we</c><02:39:32.720><c> need</c><02:39:33.040><c> two</c><02:39:33.280><c> players</c>

02:39:34.150 --> 02:39:34.160 align:start position:0%
playing a game and we need two players
 

02:39:34.160 --> 02:39:37.110 align:start position:0%
playing a game and we need two players
each<02:39:34.399><c> player</c><02:39:34.720><c> will</c><02:39:34.960><c> have</c><02:39:35.200><c> a</c><02:39:35.520><c> name</c><02:39:36.160><c> and</c><02:39:36.319><c> a</c><02:39:36.399><c> score</c>

02:39:37.110 --> 02:39:37.120 align:start position:0%
each player will have a name and a score
 

02:39:37.120 --> 02:39:39.349 align:start position:0%
each player will have a name and a score
these<02:39:37.359><c> will</c><02:39:37.520><c> be</c><02:39:37.680><c> the</c><02:39:37.840><c> members</c><02:39:38.720><c> so</c><02:39:38.880><c> to</c><02:39:39.040><c> create</c><02:39:39.280><c> a</c>

02:39:39.349 --> 02:39:39.359 align:start position:0%
these will be the members so to create a
 

02:39:39.359 --> 02:39:41.590 align:start position:0%
these will be the members so to create a
struct<02:39:39.920><c> outside</c><02:39:40.319><c> of</c><02:39:40.399><c> our</c><02:39:40.560><c> main</c><02:39:40.800><c> function</c><02:39:41.439><c> we</c>

02:39:41.590 --> 02:39:41.600 align:start position:0%
struct outside of our main function we
 

02:39:41.600 --> 02:39:44.309 align:start position:0%
struct outside of our main function we
will<02:39:41.760><c> type</c><02:39:42.160><c> the</c><02:39:42.319><c> keyword</c><02:39:42.880><c> struct</c><02:39:43.680><c> followed</c><02:39:44.080><c> by</c>

02:39:44.309 --> 02:39:44.319 align:start position:0%
will type the keyword struct followed by
 

02:39:44.319 --> 02:39:46.870 align:start position:0%
will type the keyword struct followed by
a<02:39:44.560><c> tag</c><02:39:44.880><c> name</c><02:39:45.359><c> let's</c><02:39:45.600><c> say</c><02:39:45.840><c> we</c><02:39:46.000><c> are</c><02:39:46.080><c> working</c><02:39:46.479><c> with</c>

02:39:46.870 --> 02:39:46.880 align:start position:0%
a tag name let's say we are working with
 

02:39:46.880 --> 02:39:49.190 align:start position:0%
a tag name let's say we are working with
players<02:39:47.600><c> then</c><02:39:47.840><c> we</c><02:39:47.920><c> need</c><02:39:48.240><c> a</c><02:39:48.399><c> set</c><02:39:48.640><c> of</c><02:39:48.800><c> curly</c>

02:39:49.190 --> 02:39:49.200 align:start position:0%
players then we need a set of curly
 

02:39:49.200 --> 02:39:52.230 align:start position:0%
players then we need a set of curly
braces<02:39:50.000><c> then</c><02:39:50.240><c> end</c><02:39:50.399><c> it</c><02:39:50.479><c> with</c><02:39:50.640><c> a</c><02:39:50.840><c> semicolon</c><02:39:51.920><c> so</c>

02:39:52.230 --> 02:39:52.240 align:start position:0%
braces then end it with a semicolon so
 

02:39:52.240 --> 02:39:53.830 align:start position:0%
braces then end it with a semicolon so
any<02:39:52.479><c> members</c><02:39:53.120><c> think</c><02:39:53.280><c> of</c><02:39:53.359><c> these</c><02:39:53.600><c> like</c>

02:39:53.830 --> 02:39:53.840 align:start position:0%
any members think of these like
 

02:39:53.840 --> 02:39:55.830 align:start position:0%
any members think of these like
variables<02:39:54.560><c> so</c><02:39:54.720><c> let's</c><02:39:54.960><c> say</c><02:39:55.120><c> we</c><02:39:55.280><c> have</c><02:39:55.600><c> a</c>

02:39:55.830 --> 02:39:55.840 align:start position:0%
variables so let's say we have a
 

02:39:55.840 --> 02:39:58.710 align:start position:0%
variables so let's say we have a
character<02:39:56.399><c> array</c><02:39:57.280><c> named</c><02:39:57.760><c> name</c><02:39:58.240><c> and</c><02:39:58.399><c> i'll</c><02:39:58.560><c> give</c>

02:39:58.710 --> 02:39:58.720 align:start position:0%
character array named name and i'll give
 

02:39:58.720 --> 02:40:00.870 align:start position:0%
character array named name and i'll give
this<02:39:58.880><c> a</c><02:39:59.040><c> size</c><02:39:59.359><c> of</c><02:39:59.439><c> maybe</c><02:39:59.840><c> 12.</c>

02:40:00.870 --> 02:40:00.880 align:start position:0%
this a size of maybe 12.
 

02:40:00.880 --> 02:40:02.790 align:start position:0%
this a size of maybe 12.
so<02:40:01.120><c> we</c><02:40:01.280><c> will</c><02:40:01.439><c> declare</c><02:40:01.840><c> these</c><02:40:02.080><c> but</c><02:40:02.240><c> not</c><02:40:02.479><c> assign</c>

02:40:02.790 --> 02:40:02.800 align:start position:0%
so we will declare these but not assign
 

02:40:02.800 --> 02:40:05.030 align:start position:0%
so we will declare these but not assign
them<02:40:03.040><c> we'll</c><02:40:03.200><c> do</c><02:40:03.359><c> that</c><02:40:03.520><c> later</c><02:40:04.160><c> and</c><02:40:04.399><c> we</c><02:40:04.560><c> have</c><02:40:04.800><c> an</c>

02:40:05.030 --> 02:40:05.040 align:start position:0%
them we'll do that later and we have an
 

02:40:05.040 --> 02:40:08.469 align:start position:0%
them we'll do that later and we have an
int<02:40:05.760><c> named</c><02:40:06.160><c> score</c><02:40:06.960><c> so</c><02:40:07.200><c> each</c><02:40:07.600><c> player</c><02:40:08.160><c> is</c><02:40:08.319><c> going</c>

02:40:08.469 --> 02:40:08.479 align:start position:0%
int named score so each player is going
 

02:40:08.479 --> 02:40:11.590 align:start position:0%
int named score so each player is going
to<02:40:08.640><c> have</c><02:40:08.960><c> a</c><02:40:09.359><c> name</c><02:40:10.000><c> and</c><02:40:10.160><c> a</c><02:40:10.240><c> score</c><02:40:11.120><c> kind</c><02:40:11.280><c> of</c><02:40:11.439><c> like</c>

02:40:11.590 --> 02:40:11.600 align:start position:0%
to have a name and a score kind of like
 

02:40:11.600 --> 02:40:13.269 align:start position:0%
to have a name and a score kind of like
we're<02:40:11.760><c> playing</c><02:40:12.000><c> an</c><02:40:12.080><c> arcade</c><02:40:12.479><c> game</c><02:40:12.880><c> now</c><02:40:13.040><c> to</c>

02:40:13.269 --> 02:40:13.279 align:start position:0%
we're playing an arcade game now to
 

02:40:13.279 --> 02:40:14.950 align:start position:0%
we're playing an arcade game now to
assign<02:40:13.680><c> some</c><02:40:13.840><c> of</c><02:40:14.000><c> these</c><02:40:14.160><c> values</c><02:40:14.640><c> we're</c><02:40:14.800><c> going</c>

02:40:14.950 --> 02:40:14.960 align:start position:0%
assign some of these values we're going
 

02:40:14.960 --> 02:40:17.269 align:start position:0%
assign some of these values we're going
to<02:40:15.120><c> create</c><02:40:15.439><c> a</c><02:40:15.680><c> type</c><02:40:15.920><c> of</c><02:40:16.080><c> variable</c><02:40:16.960><c> and</c><02:40:17.200><c> a</c>

02:40:17.269 --> 02:40:17.279 align:start position:0%
to create a type of variable and a
 

02:40:17.279 --> 02:40:19.349 align:start position:0%
to create a type of variable and a
player<02:40:17.760><c> is</c><02:40:17.920><c> going</c><02:40:18.080><c> to</c><02:40:18.240><c> be</c><02:40:18.560><c> kind</c><02:40:18.720><c> of</c><02:40:18.880><c> the</c><02:40:19.040><c> data</c>

02:40:19.349 --> 02:40:19.359 align:start position:0%
player is going to be kind of the data
 

02:40:19.359 --> 02:40:22.309 align:start position:0%
player is going to be kind of the data
type<02:40:19.840><c> so</c><02:40:20.080><c> we</c><02:40:20.240><c> will</c><02:40:20.399><c> type</c><02:40:21.040><c> struct</c>

02:40:22.309 --> 02:40:22.319 align:start position:0%
type so we will type struct
 

02:40:22.319 --> 02:40:23.750 align:start position:0%
type so we will type struct
then<02:40:22.560><c> the</c><02:40:22.720><c> tag</c><02:40:22.960><c> name</c>

02:40:23.750 --> 02:40:23.760 align:start position:0%
then the tag name
 

02:40:23.760 --> 02:40:26.150 align:start position:0%
then the tag name
which<02:40:24.160><c> was</c><02:40:24.479><c> player</c>

02:40:26.150 --> 02:40:26.160 align:start position:0%
which was player
 

02:40:26.160 --> 02:40:27.990 align:start position:0%
which was player
and<02:40:26.479><c> then</c><02:40:26.720><c> a</c><02:40:26.800><c> variable</c><02:40:27.200><c> name</c><02:40:27.520><c> let's</c><02:40:27.680><c> say</c><02:40:27.840><c> we</c>

02:40:27.990 --> 02:40:28.000 align:start position:0%
and then a variable name let's say we
 

02:40:28.000 --> 02:40:30.469 align:start position:0%
and then a variable name let's say we
have<02:40:28.240><c> player</c><02:40:28.560><c> 1</c><02:40:28.960><c> and</c><02:40:29.200><c> player</c><02:40:29.600><c> 2.</c><02:40:30.160><c> so</c><02:40:30.319><c> with</c>

02:40:30.469 --> 02:40:30.479 align:start position:0%
have player 1 and player 2. so with
 

02:40:30.479 --> 02:40:32.950 align:start position:0%
have player 1 and player 2. so with
these<02:40:30.720><c> structs</c><02:40:31.120><c> you</c><02:40:31.359><c> can</c><02:40:31.520><c> reuse</c><02:40:32.000><c> them</c><02:40:32.640><c> so</c><02:40:32.800><c> we</c>

02:40:32.950 --> 02:40:32.960 align:start position:0%
these structs you can reuse them so we
 

02:40:32.960 --> 02:40:35.910 align:start position:0%
these structs you can reuse them so we
have<02:40:33.279><c> struct</c><02:40:33.840><c> player</c><02:40:34.319><c> player</c><02:40:34.640><c> 1</c><02:40:35.040><c> and</c><02:40:35.359><c> struct</c>

02:40:35.910 --> 02:40:35.920 align:start position:0%
have struct player player 1 and struct
 

02:40:35.920 --> 02:40:38.790 align:start position:0%
have struct player player 1 and struct
player<02:40:36.399><c> player</c><02:40:36.720><c> 2.</c><02:40:37.200><c> so</c><02:40:37.359><c> we</c><02:40:37.520><c> can</c><02:40:37.840><c> assign</c><02:40:38.319><c> values</c>

02:40:38.790 --> 02:40:38.800 align:start position:0%
player player 2. so we can assign values
 

02:40:38.800 --> 02:40:40.790 align:start position:0%
player player 2. so we can assign values
to<02:40:38.960><c> these</c><02:40:39.200><c> members</c><02:40:39.760><c> however</c><02:40:40.240><c> if</c><02:40:40.319><c> we</c><02:40:40.479><c> have</c><02:40:40.640><c> an</c>

02:40:40.790 --> 02:40:40.800 align:start position:0%
to these members however if we have an
 

02:40:40.800 --> 02:40:42.469 align:start position:0%
to these members however if we have an
array<02:40:41.040><c> of</c><02:40:41.120><c> characters</c><02:40:41.680><c> we're</c><02:40:41.840><c> going</c><02:40:42.000><c> to</c><02:40:42.160><c> use</c>

02:40:42.469 --> 02:40:42.479 align:start position:0%
array of characters we're going to use
 

02:40:42.479 --> 02:40:44.389 align:start position:0%
array of characters we're going to use
the<02:40:42.640><c> string</c><02:40:42.960><c> copy</c><02:40:43.359><c> function</c>

02:40:44.389 --> 02:40:44.399 align:start position:0%
the string copy function
 

02:40:44.399 --> 02:40:48.230 align:start position:0%
the string copy function
so<02:40:44.560><c> let's</c><02:40:44.880><c> use</c><02:40:45.200><c> the</c><02:40:45.359><c> string</c><02:40:45.760><c> copy</c><02:40:46.160><c> function</c>

02:40:48.230 --> 02:40:48.240 align:start position:0%
so let's use the string copy function
 

02:40:48.240 --> 02:40:50.150 align:start position:0%
so let's use the string copy function
then<02:40:48.640><c> to</c><02:40:48.880><c> access</c><02:40:49.200><c> one</c><02:40:49.359><c> of</c><02:40:49.439><c> the</c><02:40:49.520><c> members</c><02:40:50.000><c> you</c>

02:40:50.150 --> 02:40:50.160 align:start position:0%
then to access one of the members you
 

02:40:50.160 --> 02:40:52.550 align:start position:0%
then to access one of the members you
will<02:40:50.399><c> type</c><02:40:50.720><c> the</c><02:40:50.880><c> name</c><02:40:51.359><c> of</c><02:40:51.520><c> that</c><02:40:51.680><c> struct</c><02:40:52.399><c> so</c>

02:40:52.550 --> 02:40:52.560 align:start position:0%
will type the name of that struct so
 

02:40:52.560 --> 02:40:54.550 align:start position:0%
will type the name of that struct so
let's<02:40:52.800><c> say</c><02:40:53.120><c> player</c><02:40:53.439><c> one</c><02:40:53.920><c> and</c><02:40:54.000><c> then</c><02:40:54.240><c> follow</c>

02:40:54.550 --> 02:40:54.560 align:start position:0%
let's say player one and then follow
 

02:40:54.560 --> 02:40:58.469 align:start position:0%
let's say player one and then follow
this<02:40:54.800><c> with</c><02:40:55.040><c> a</c><02:40:55.279><c> dot</c><02:40:55.760><c> the</c><02:40:56.000><c> dot</c><02:40:56.399><c> is</c><02:40:56.720><c> a</c><02:40:57.200><c> member</c><02:40:57.760><c> axis</c>

02:40:58.469 --> 02:40:58.479 align:start position:0%
this with a dot the dot is a member axis
 

02:40:58.479 --> 02:41:01.110 align:start position:0%
this with a dot the dot is a member axis
operator<02:40:59.279><c> so</c><02:40:59.520><c> after</c><02:40:59.840><c> typing</c><02:41:00.160><c> the</c><02:41:00.319><c> dot</c><02:41:00.720><c> we</c><02:41:00.880><c> have</c>

02:41:01.110 --> 02:41:01.120 align:start position:0%
operator so after typing the dot we have
 

02:41:01.120 --> 02:41:04.389 align:start position:0%
operator so after typing the dot we have
access<02:41:01.520><c> to</c><02:41:01.760><c> a</c><02:41:02.080><c> name</c><02:41:02.479><c> and</c><02:41:02.800><c> score</c><02:41:03.359><c> member</c><02:41:04.160><c> so</c>

02:41:04.389 --> 02:41:04.399 align:start position:0%
access to a name and score member so
 

02:41:04.399 --> 02:41:06.550 align:start position:0%
access to a name and score member so
let's<02:41:04.640><c> set</c><02:41:04.880><c> the</c><02:41:05.040><c> player's</c><02:41:05.520><c> name</c><02:41:05.840><c> equal</c><02:41:06.319><c> to</c>

02:41:06.550 --> 02:41:06.560 align:start position:0%
let's set the player's name equal to
 

02:41:06.560 --> 02:41:08.309 align:start position:0%
let's set the player's name equal to
whatever<02:41:06.880><c> your</c><02:41:07.040><c> first</c><02:41:07.279><c> name</c><02:41:07.520><c> is</c><02:41:08.000><c> now</c><02:41:08.240><c> if</c>

02:41:08.309 --> 02:41:08.319 align:start position:0%
whatever your first name is now if
 

02:41:08.319 --> 02:41:09.590 align:start position:0%
whatever your first name is now if
you're<02:41:08.479><c> not</c><02:41:08.640><c> working</c><02:41:08.960><c> with</c><02:41:09.120><c> an</c><02:41:09.279><c> array</c><02:41:09.520><c> of</c>

02:41:09.590 --> 02:41:09.600 align:start position:0%
you're not working with an array of
 

02:41:09.600 --> 02:41:11.349 align:start position:0%
you're not working with an array of
characters<02:41:10.240><c> such</c><02:41:10.479><c> as</c><02:41:10.640><c> an</c><02:41:10.800><c> integer</c><02:41:11.200><c> you</c><02:41:11.279><c> can</c>

02:41:11.349 --> 02:41:11.359 align:start position:0%
characters such as an integer you can
 

02:41:11.359 --> 02:41:14.070 align:start position:0%
characters such as an integer you can
just<02:41:11.600><c> access</c><02:41:11.920><c> these</c><02:41:12.160><c> directly</c><02:41:13.120><c> so</c><02:41:13.439><c> let's</c><02:41:13.680><c> set</c>

02:41:14.070 --> 02:41:14.080 align:start position:0%
just access these directly so let's set
 

02:41:14.080 --> 02:41:17.750 align:start position:0%
just access these directly so let's set
player<02:41:14.560><c> one's</c><02:41:15.520><c> score</c><02:41:16.240><c> two</c><02:41:16.560><c> equal</c><02:41:17.040><c> maybe</c><02:41:17.439><c> four</c>

02:41:17.750 --> 02:41:17.760 align:start position:0%
player one's score two equal maybe four
 

02:41:17.760 --> 02:41:19.910 align:start position:0%
player one's score two equal maybe four
points<02:41:18.399><c> and</c><02:41:18.560><c> we</c><02:41:18.720><c> also</c><02:41:19.040><c> have</c><02:41:19.200><c> player</c><02:41:19.520><c> two</c><02:41:19.760><c> but</c>

02:41:19.910 --> 02:41:19.920 align:start position:0%
points and we also have player two but
 

02:41:19.920 --> 02:41:21.910 align:start position:0%
points and we also have player two but
we<02:41:20.080><c> have</c><02:41:20.240><c> not</c><02:41:20.479><c> assigned</c><02:41:21.040><c> values</c><02:41:21.520><c> to</c><02:41:21.760><c> its</c>

02:41:21.910 --> 02:41:21.920 align:start position:0%
we have not assigned values to its
 

02:41:21.920 --> 02:41:22.950 align:start position:0%
we have not assigned values to its
members

02:41:22.950 --> 02:41:22.960 align:start position:0%
members
 

02:41:22.960 --> 02:41:25.830 align:start position:0%
members
so<02:41:23.200><c> this</c><02:41:23.439><c> time</c><02:41:23.760><c> let's</c><02:41:24.080><c> assign</c><02:41:24.720><c> player</c><02:41:25.200><c> two's</c>

02:41:25.830 --> 02:41:25.840 align:start position:0%
so this time let's assign player two's
 

02:41:25.840 --> 02:41:27.670 align:start position:0%
so this time let's assign player two's
name<02:41:26.240><c> and</c><02:41:26.479><c> score</c>

02:41:27.670 --> 02:41:27.680 align:start position:0%
name and score
 

02:41:27.680 --> 02:41:29.349 align:start position:0%
name and score
so<02:41:27.840><c> we</c><02:41:28.000><c> can</c><02:41:28.080><c> just</c><02:41:28.240><c> copy</c><02:41:28.560><c> what</c><02:41:28.720><c> we</c><02:41:28.800><c> have</c><02:41:29.120><c> but</c>

02:41:29.349 --> 02:41:29.359 align:start position:0%
so we can just copy what we have but
 

02:41:29.359 --> 02:41:32.389 align:start position:0%
so we can just copy what we have but
change<02:41:29.760><c> player</c><02:41:30.160><c> 1</c><02:41:30.560><c> to</c><02:41:30.800><c> player</c><02:41:31.200><c> 2.</c><02:41:31.840><c> player</c><02:41:32.160><c> 2</c>

02:41:32.389 --> 02:41:32.399 align:start position:0%
change player 1 to player 2. player 2
 

02:41:32.399 --> 02:41:36.070 align:start position:0%
change player 1 to player 2. player 2
let's<02:41:32.640><c> say</c><02:41:33.040><c> is</c><02:41:33.439><c> bra</c><02:41:34.240><c> and</c><02:41:34.479><c> player</c><02:41:34.800><c> 2's</c><02:41:35.120><c> score</c><02:41:35.680><c> is</c>

02:41:36.070 --> 02:41:36.080 align:start position:0%
let's say is bra and player 2's score is
 

02:41:36.080 --> 02:41:38.389 align:start position:0%
let's say is bra and player 2's score is
5.<02:41:36.720><c> now</c><02:41:36.960><c> if</c><02:41:37.040><c> i</c><02:41:37.120><c> would</c><02:41:37.279><c> like</c><02:41:37.520><c> to</c><02:41:37.680><c> display</c><02:41:38.160><c> these</c>

02:41:38.389 --> 02:41:38.399 align:start position:0%
5. now if i would like to display these
 

02:41:38.399 --> 02:41:40.309 align:start position:0%
5. now if i would like to display these
members<02:41:38.960><c> i</c><02:41:39.040><c> can</c><02:41:39.200><c> do</c><02:41:39.439><c> so</c><02:41:39.600><c> with</c><02:41:39.840><c> a</c><02:41:40.000><c> print</c>

02:41:40.309 --> 02:41:40.319 align:start position:0%
members i can do so with a print
 

02:41:40.319 --> 02:41:43.349 align:start position:0%
members i can do so with a print
statement<02:41:41.120><c> so</c><02:41:41.439><c> printf</c><02:41:42.319><c> let's</c><02:41:42.560><c> display</c><02:41:43.200><c> our</c>

02:41:43.349 --> 02:41:43.359 align:start position:0%
statement so printf let's display our
 

02:41:43.359 --> 02:41:45.910 align:start position:0%
statement so printf let's display our
name<02:41:43.600><c> first</c><02:41:44.080><c> so</c><02:41:44.240><c> i</c><02:41:44.399><c> will</c><02:41:44.640><c> use</c><02:41:44.960><c> the</c><02:41:45.279><c> s</c><02:41:45.520><c> format</c>

02:41:45.910 --> 02:41:45.920 align:start position:0%
name first so i will use the s format
 

02:41:45.920 --> 02:41:47.269 align:start position:0%
name first so i will use the s format
specifier

02:41:47.269 --> 02:41:47.279 align:start position:0%
specifier
 

02:41:47.279 --> 02:41:49.910 align:start position:0%
specifier
player<02:41:47.920><c> one</c><02:41:48.479><c> dot</c><02:41:48.960><c> name</c><02:41:49.279><c> and</c><02:41:49.359><c> then</c><02:41:49.600><c> i'll</c><02:41:49.680><c> add</c><02:41:49.840><c> a</c>

02:41:49.910 --> 02:41:49.920 align:start position:0%
player one dot name and then i'll add a
 

02:41:49.920 --> 02:41:52.230 align:start position:0%
player one dot name and then i'll add a
new<02:41:50.160><c> line</c><02:41:50.640><c> then</c><02:41:50.800><c> to</c><02:41:51.040><c> access</c><02:41:51.439><c> player</c><02:41:51.840><c> one's</c>

02:41:52.230 --> 02:41:52.240 align:start position:0%
new line then to access player one's
 

02:41:52.240 --> 02:41:54.309 align:start position:0%
new line then to access player one's
score<02:41:52.800><c> well</c><02:41:52.960><c> that's</c><02:41:53.200><c> an</c><02:41:53.359><c> integer</c><02:41:53.840><c> so</c><02:41:54.000><c> i</c><02:41:54.160><c> will</c>

02:41:54.309 --> 02:41:54.319 align:start position:0%
score well that's an integer so i will
 

02:41:54.319 --> 02:41:57.510 align:start position:0%
score well that's an integer so i will
use<02:41:54.640><c> the</c><02:41:55.040><c> d</c><02:41:55.279><c> format</c><02:41:55.680><c> specifier</c><02:41:56.560><c> player</c><02:41:56.960><c> one</c>

02:41:57.510 --> 02:41:57.520 align:start position:0%
use the d format specifier player one
 

02:41:57.520 --> 02:42:00.070 align:start position:0%
use the d format specifier player one
dot<02:41:58.319><c> score</c><02:41:59.120><c> and</c><02:41:59.200><c> then</c><02:41:59.439><c> let's</c><02:41:59.680><c> do</c><02:41:59.840><c> the</c><02:41:59.920><c> same</c>

02:42:00.070 --> 02:42:00.080 align:start position:0%
dot score and then let's do the same
 

02:42:00.080 --> 02:42:01.990 align:start position:0%
dot score and then let's do the same
thing<02:42:00.240><c> with</c><02:42:00.479><c> player</c><02:42:00.800><c> two</c>

02:42:01.990 --> 02:42:02.000 align:start position:0%
thing with player two
 

02:42:02.000 --> 02:42:05.429 align:start position:0%
thing with player two
so<02:42:02.399><c> player</c><02:42:03.040><c> two</c><02:42:03.600><c> dot</c><02:42:03.920><c> name</c><02:42:04.240><c> and</c><02:42:04.479><c> player</c><02:42:04.960><c> two</c>

02:42:05.429 --> 02:42:05.439 align:start position:0%
so player two dot name and player two
 

02:42:05.439 --> 02:42:07.990 align:start position:0%
so player two dot name and player two
dot<02:42:05.760><c> score</c><02:42:06.399><c> so</c><02:42:06.560><c> we</c><02:42:06.720><c> have</c><02:42:06.960><c> our</c><02:42:07.200><c> player</c><02:42:07.680><c> one</c>

02:42:07.990 --> 02:42:08.000 align:start position:0%
dot score so we have our player one
 

02:42:08.000 --> 02:42:11.190 align:start position:0%
dot score so we have our player one
strucks<02:42:08.800><c> name</c><02:42:09.040><c> member</c><02:42:09.600><c> as</c><02:42:10.000><c> bro</c><02:42:10.640><c> and</c><02:42:10.880><c> score</c>

02:42:11.190 --> 02:42:11.200 align:start position:0%
strucks name member as bro and score
 

02:42:11.200 --> 02:42:13.670 align:start position:0%
strucks name member as bro and score
member<02:42:11.680><c> set</c><02:42:11.920><c> to</c><02:42:12.080><c> four</c><02:42:12.720><c> and</c><02:42:12.800><c> then</c><02:42:13.040><c> our</c><02:42:13.279><c> player</c>

02:42:13.670 --> 02:42:13.680 align:start position:0%
member set to four and then our player
 

02:42:13.680 --> 02:42:17.349 align:start position:0%
member set to four and then our player
two<02:42:13.920><c> struct</c><02:42:14.720><c> has</c><02:42:15.120><c> a</c><02:42:15.359><c> name</c><02:42:15.680><c> member</c><02:42:16.160><c> of</c><02:42:16.399><c> bra</c>

02:42:17.349 --> 02:42:17.359 align:start position:0%
two struct has a name member of bra
 

02:42:17.359 --> 02:42:20.070 align:start position:0%
two struct has a name member of bra
and<02:42:17.600><c> a</c><02:42:17.760><c> score</c><02:42:18.160><c> member</c><02:42:18.640><c> of</c><02:42:18.960><c> five</c><02:42:19.600><c> so</c><02:42:19.840><c> yeah</c>

02:42:20.070 --> 02:42:20.080 align:start position:0%
and a score member of five so yeah
 

02:42:20.080 --> 02:42:22.070 align:start position:0%
and a score member of five so yeah
that's<02:42:20.319><c> basically</c><02:42:20.880><c> a</c><02:42:21.120><c> struct</c><02:42:21.600><c> it's</c><02:42:21.920><c> a</c>

02:42:22.070 --> 02:42:22.080 align:start position:0%
that's basically a struct it's a
 

02:42:22.080 --> 02:42:24.710 align:start position:0%
that's basically a struct it's a
collection<02:42:22.720><c> of</c><02:42:23.120><c> related</c><02:42:23.760><c> members</c><02:42:24.399><c> think</c><02:42:24.640><c> of</c>

02:42:24.710 --> 02:42:24.720 align:start position:0%
collection of related members think of
 

02:42:24.720 --> 02:42:27.190 align:start position:0%
collection of related members think of
these<02:42:24.960><c> kind</c><02:42:25.200><c> of</c><02:42:25.279><c> like</c><02:42:25.520><c> variables</c><02:42:26.560><c> they</c><02:42:26.800><c> can</c><02:42:27.040><c> be</c>

02:42:27.190 --> 02:42:27.200 align:start position:0%
these kind of like variables they can be
 

02:42:27.200 --> 02:42:29.670 align:start position:0%
these kind of like variables they can be
of<02:42:27.359><c> different</c><02:42:27.760><c> data</c><02:42:28.080><c> types</c><02:42:28.560><c> unlike</c><02:42:29.040><c> arrays</c>

02:42:29.670 --> 02:42:29.680 align:start position:0%
of different data types unlike arrays
 

02:42:29.680 --> 02:42:31.750 align:start position:0%
of different data types unlike arrays
and<02:42:29.840><c> they</c><02:42:30.080><c> are</c><02:42:30.240><c> listed</c><02:42:30.640><c> under</c><02:42:31.040><c> one</c><02:42:31.279><c> name</c><02:42:31.520><c> in</c><02:42:31.680><c> a</c>

02:42:31.750 --> 02:42:31.760 align:start position:0%
and they are listed under one name in a
 

02:42:31.760 --> 02:42:33.830 align:start position:0%
and they are listed under one name in a
block<02:42:32.080><c> of</c><02:42:32.160><c> memory</c><02:42:32.800><c> so</c><02:42:32.960><c> in</c><02:42:33.040><c> this</c><02:42:33.279><c> example</c><02:42:33.680><c> we</c>

02:42:33.830 --> 02:42:33.840 align:start position:0%
block of memory so in this example we
 

02:42:33.840 --> 02:42:36.309 align:start position:0%
block of memory so in this example we
have<02:42:34.000><c> player</c><02:42:34.319><c> 1</c><02:42:34.640><c> and</c><02:42:34.880><c> player</c><02:42:35.279><c> 2.</c><02:42:35.600><c> player</c><02:42:35.920><c> 1</c><02:42:36.160><c> and</c>

02:42:36.309 --> 02:42:36.319 align:start position:0%
have player 1 and player 2. player 1 and
 

02:42:36.319 --> 02:42:38.790 align:start position:0%
have player 1 and player 2. player 1 and
player<02:42:36.640><c> 2</c><02:42:37.040><c> refer</c><02:42:37.439><c> to</c><02:42:37.760><c> different</c><02:42:38.240><c> blocks</c><02:42:38.640><c> of</c>

02:42:38.790 --> 02:42:38.800 align:start position:0%
player 2 refer to different blocks of
 

02:42:38.800 --> 02:42:41.349 align:start position:0%
player 2 refer to different blocks of
memory<02:42:39.439><c> which</c><02:42:39.680><c> contain</c><02:42:40.240><c> their</c><02:42:40.560><c> own</c><02:42:40.880><c> unique</c>

02:42:41.349 --> 02:42:41.359 align:start position:0%
memory which contain their own unique
 

02:42:41.359 --> 02:42:43.670 align:start position:0%
memory which contain their own unique
members<02:42:42.160><c> if</c><02:42:42.319><c> you're</c><02:42:42.560><c> familiar</c><02:42:43.120><c> with</c><02:42:43.359><c> other</c>

02:42:43.670 --> 02:42:43.680 align:start position:0%
members if you're familiar with other
 

02:42:43.680 --> 02:42:45.750 align:start position:0%
members if you're familiar with other
programming<02:42:44.160><c> languages</c><02:42:44.800><c> they're</c><02:42:45.279><c> very</c>

02:42:45.750 --> 02:42:45.760 align:start position:0%
programming languages they're very
 

02:42:45.760 --> 02:42:48.150 align:start position:0%
programming languages they're very
similar<02:42:46.319><c> to</c><02:42:46.560><c> classes</c><02:42:47.520><c> but</c><02:42:47.680><c> they</c><02:42:47.840><c> cannot</c>

02:42:48.150 --> 02:42:48.160 align:start position:0%
similar to classes but they cannot
 

02:42:48.160 --> 02:42:50.550 align:start position:0%
similar to classes but they cannot
contain<02:42:48.640><c> any</c><02:42:48.880><c> methods</c><02:42:49.600><c> so</c><02:42:49.840><c> yeah</c><02:42:50.160><c> those</c><02:42:50.479><c> are</c>

02:42:50.550 --> 02:42:50.560 align:start position:0%
contain any methods so yeah those are
 

02:42:50.560 --> 02:42:52.230 align:start position:0%
contain any methods so yeah those are
structs<02:42:51.120><c> if</c><02:42:51.279><c> you</c><02:42:51.359><c> would</c><02:42:51.439><c> like</c><02:42:51.600><c> a</c><02:42:51.680><c> copy</c><02:42:52.000><c> of</c><02:42:52.080><c> this</c>

02:42:52.230 --> 02:42:52.240 align:start position:0%
structs if you would like a copy of this
 

02:42:52.240 --> 02:42:53.750 align:start position:0%
structs if you would like a copy of this
code<02:42:52.560><c> i'll</c><02:42:52.720><c> post</c><02:42:53.040><c> this</c><02:42:53.200><c> to</c><02:42:53.279><c> the</c><02:42:53.439><c> comment</c>

02:42:53.750 --> 02:42:53.760 align:start position:0%
code i'll post this to the comment
 

02:42:53.760 --> 02:42:56.070 align:start position:0%
code i'll post this to the comment
section<02:42:54.080><c> down</c><02:42:54.319><c> below</c><02:42:54.720><c> and</c><02:42:54.960><c> well</c><02:42:55.359><c> yeah</c><02:42:55.760><c> those</c>

02:42:56.070 --> 02:42:56.080 align:start position:0%
section down below and well yeah those
 

02:42:56.080 --> 02:43:01.110 align:start position:0%
section down below and well yeah those
are<02:42:56.240><c> structs</c><02:42:56.960><c> in</c><02:42:57.200><c> c</c>

02:43:01.110 --> 02:43:01.120 align:start position:0%
 
 

02:43:01.120 --> 02:43:04.550 align:start position:0%
 
all<02:43:01.279><c> right</c><02:43:02.080><c> typedef</c><02:43:02.880><c> typedef</c><02:43:03.600><c> is</c><02:43:03.840><c> a</c><02:43:04.000><c> reserved</c>

02:43:04.550 --> 02:43:04.560 align:start position:0%
all right typedef typedef is a reserved
 

02:43:04.560 --> 02:43:07.269 align:start position:0%
all right typedef typedef is a reserved
keyword<02:43:05.200><c> that</c><02:43:05.439><c> gives</c><02:43:05.760><c> an</c><02:43:06.000><c> existing</c><02:43:06.560><c> data</c><02:43:06.960><c> type</c>

02:43:07.269 --> 02:43:07.279 align:start position:0%
keyword that gives an existing data type
 

02:43:07.279 --> 02:43:09.910 align:start position:0%
keyword that gives an existing data type
a<02:43:07.520><c> nickname</c><02:43:08.240><c> here's</c><02:43:08.560><c> an</c><02:43:08.720><c> example</c><02:43:09.600><c> let's</c>

02:43:09.910 --> 02:43:09.920 align:start position:0%
a nickname here's an example let's
 

02:43:09.920 --> 02:43:13.429 align:start position:0%
a nickname here's an example let's
create<02:43:10.240><c> a</c><02:43:10.560><c> character</c><02:43:11.120><c> array</c><02:43:11.600><c> of</c><02:43:11.760><c> 25</c><02:43:12.319><c> bytes</c><02:43:13.200><c> and</c>

02:43:13.429 --> 02:43:13.439 align:start position:0%
create a character array of 25 bytes and
 

02:43:13.439 --> 02:43:15.670 align:start position:0%
create a character array of 25 bytes and
we'll<02:43:13.680><c> say</c><02:43:14.000><c> that</c><02:43:14.160><c> this</c><02:43:14.399><c> is</c><02:43:14.560><c> user</c><02:43:14.960><c> one</c><02:43:15.359><c> so</c>

02:43:15.670 --> 02:43:15.680 align:start position:0%
we'll say that this is user one so
 

02:43:15.680 --> 02:43:16.710 align:start position:0%
we'll say that this is user one so
character

02:43:16.710 --> 02:43:16.720 align:start position:0%
character
 

02:43:16.720 --> 02:43:20.630 align:start position:0%
character
user<02:43:17.200><c> one</c><02:43:17.920><c> and</c><02:43:18.160><c> the</c><02:43:18.319><c> size</c><02:43:18.800><c> is</c><02:43:19.040><c> 25</c><02:43:19.600><c> bytes</c>

02:43:20.630 --> 02:43:20.640 align:start position:0%
user one and the size is 25 bytes
 

02:43:20.640 --> 02:43:23.110 align:start position:0%
user one and the size is 25 bytes
and<02:43:20.720><c> then</c><02:43:20.960><c> make</c><02:43:21.200><c> up</c><02:43:21.439><c> some</c><02:43:21.760><c> username</c>

02:43:23.110 --> 02:43:23.120 align:start position:0%
and then make up some username
 

02:43:23.120 --> 02:43:25.269 align:start position:0%
and then make up some username
okay<02:43:23.439><c> so</c><02:43:23.680><c> writing</c><02:43:24.000><c> some</c><02:43:24.160><c> of</c><02:43:24.240><c> the</c><02:43:24.479><c> syntax</c><02:43:25.040><c> can</c>

02:43:25.269 --> 02:43:25.279 align:start position:0%
okay so writing some of the syntax can
 

02:43:25.279 --> 02:43:27.510 align:start position:0%
okay so writing some of the syntax can
be<02:43:25.520><c> somewhat</c><02:43:26.000><c> tedious</c><02:43:26.720><c> what</c><02:43:26.880><c> a</c><02:43:26.960><c> lot</c><02:43:27.120><c> of</c><02:43:27.279><c> c</c>

02:43:27.510 --> 02:43:27.520 align:start position:0%
be somewhat tedious what a lot of c
 

02:43:27.520 --> 02:43:29.349 align:start position:0%
be somewhat tedious what a lot of c
programmers<02:43:28.160><c> will</c><02:43:28.319><c> do</c><02:43:28.720><c> is</c><02:43:28.800><c> that</c><02:43:29.040><c> they</c><02:43:29.200><c> will</c>

02:43:29.349 --> 02:43:29.359 align:start position:0%
programmers will do is that they will
 

02:43:29.359 --> 02:43:32.309 align:start position:0%
programmers will do is that they will
use<02:43:29.760><c> this</c><02:43:30.000><c> type</c><02:43:30.319><c> def</c><02:43:30.640><c> keyword</c><02:43:31.359><c> to</c><02:43:31.600><c> give</c><02:43:32.080><c> some</c>

02:43:32.309 --> 02:43:32.319 align:start position:0%
use this type def keyword to give some
 

02:43:32.319 --> 02:43:35.349 align:start position:0%
use this type def keyword to give some
data<02:43:32.640><c> type</c><02:43:33.040><c> a</c><02:43:33.279><c> nickname</c><02:43:34.160><c> let's</c><02:43:34.479><c> use</c><02:43:34.800><c> this</c><02:43:35.040><c> type</c>

02:43:35.349 --> 02:43:35.359 align:start position:0%
data type a nickname let's use this type
 

02:43:35.359 --> 02:43:38.150 align:start position:0%
data type a nickname let's use this type
def<02:43:35.600><c> keyword</c><02:43:36.160><c> to</c><02:43:36.319><c> give</c><02:43:36.800><c> a</c><02:43:37.120><c> character</c><02:43:37.600><c> array</c><02:43:38.000><c> of</c>

02:43:38.150 --> 02:43:38.160 align:start position:0%
def keyword to give a character array of
 

02:43:38.160 --> 02:43:40.710 align:start position:0%
def keyword to give a character array of
25<02:43:38.640><c> bytes</c><02:43:39.120><c> some</c><02:43:39.359><c> nickname</c><02:43:40.080><c> so</c><02:43:40.240><c> i'll</c><02:43:40.399><c> do</c><02:43:40.560><c> this</c>

02:43:40.710 --> 02:43:40.720 align:start position:0%
25 bytes some nickname so i'll do this
 

02:43:40.720 --> 02:43:42.550 align:start position:0%
25 bytes some nickname so i'll do this
outside<02:43:41.120><c> of</c><02:43:41.200><c> the</c><02:43:41.279><c> main</c><02:43:41.600><c> function</c><02:43:42.080><c> we</c><02:43:42.319><c> will</c>

02:43:42.550 --> 02:43:42.560 align:start position:0%
outside of the main function we will
 

02:43:42.560 --> 02:43:44.950 align:start position:0%
outside of the main function we will
type<02:43:43.120><c> type</c><02:43:43.439><c> def</c>

02:43:44.950 --> 02:43:44.960 align:start position:0%
type type def
 

02:43:44.960 --> 02:43:46.950 align:start position:0%
type type def
then<02:43:45.200><c> our</c><02:43:45.439><c> data</c><02:43:45.760><c> type</c>

02:43:46.950 --> 02:43:46.960 align:start position:0%
then our data type
 

02:43:46.960 --> 02:43:49.990 align:start position:0%
then our data type
so<02:43:47.120><c> this</c><02:43:47.359><c> is</c><02:43:47.520><c> a</c><02:43:47.680><c> character</c><02:43:48.160><c> array</c><02:43:48.560><c> of</c><02:43:48.720><c> 25</c><02:43:49.279><c> bytes</c>

02:43:49.990 --> 02:43:50.000 align:start position:0%
so this is a character array of 25 bytes
 

02:43:50.000 --> 02:43:51.910 align:start position:0%
so this is a character array of 25 bytes
and<02:43:50.240><c> we</c><02:43:50.399><c> need</c><02:43:50.560><c> some</c><02:43:50.720><c> sort</c><02:43:50.960><c> of</c><02:43:51.040><c> nickname</c><02:43:51.680><c> so</c>

02:43:51.910 --> 02:43:51.920 align:start position:0%
and we need some sort of nickname so
 

02:43:51.920 --> 02:43:54.469 align:start position:0%
and we need some sort of nickname so
let's<02:43:52.160><c> say</c><02:43:52.399><c> that</c><02:43:52.640><c> a</c><02:43:52.800><c> character</c><02:43:53.359><c> array</c><02:43:53.760><c> of</c><02:43:53.920><c> 25</c>

02:43:54.469 --> 02:43:54.479 align:start position:0%
let's say that a character array of 25
 

02:43:54.479 --> 02:43:58.070 align:start position:0%
let's say that a character array of 25
bytes<02:43:55.040><c> will</c><02:43:55.279><c> be</c><02:43:55.439><c> known</c><02:43:55.840><c> as</c><02:43:56.160><c> a</c><02:43:56.479><c> user</c>

02:43:58.070 --> 02:43:58.080 align:start position:0%
bytes will be known as a user
 

02:43:58.080 --> 02:44:00.309 align:start position:0%
bytes will be known as a user
now<02:43:58.319><c> i</c><02:43:58.479><c> don't</c><02:43:58.720><c> need</c><02:43:58.960><c> all</c><02:43:59.120><c> of</c><02:43:59.200><c> the</c><02:43:59.359><c> syntax</c><02:43:59.920><c> now</c><02:44:00.240><c> i</c>

02:44:00.309 --> 02:44:00.319 align:start position:0%
now i don't need all of the syntax now i
 

02:44:00.319 --> 02:44:02.550 align:start position:0%
now i don't need all of the syntax now i
can<02:44:00.560><c> type</c><02:44:01.040><c> my</c><02:44:01.359><c> data</c><02:44:01.680><c> type</c>

02:44:02.550 --> 02:44:02.560 align:start position:0%
can type my data type
 

02:44:02.560 --> 02:44:04.790 align:start position:0%
can type my data type
user<02:44:03.200><c> and</c><02:44:03.279><c> then</c><02:44:03.520><c> some</c><02:44:03.760><c> variable</c><02:44:04.240><c> name</c><02:44:04.560><c> let's</c>

02:44:04.790 --> 02:44:04.800 align:start position:0%
user and then some variable name let's
 

02:44:04.800 --> 02:44:07.510 align:start position:0%
user and then some variable name let's
say<02:44:05.040><c> user</c><02:44:05.439><c> one</c><02:44:06.160><c> from</c><02:44:06.319><c> this</c><02:44:06.560><c> point</c><02:44:06.880><c> forward</c><02:44:07.359><c> if</c>

02:44:07.510 --> 02:44:07.520 align:start position:0%
say user one from this point forward if
 

02:44:07.520 --> 02:44:10.630 align:start position:0%
say user one from this point forward if
i<02:44:07.680><c> need</c><02:44:08.000><c> a</c><02:44:08.240><c> character</c><02:44:08.720><c> array</c><02:44:09.040><c> of</c><02:44:09.200><c> 25</c><02:44:09.680><c> bytes</c><02:44:10.479><c> i</c>

02:44:10.630 --> 02:44:10.640 align:start position:0%
i need a character array of 25 bytes i
 

02:44:10.640 --> 02:44:13.590 align:start position:0%
i need a character array of 25 bytes i
can<02:44:10.880><c> call</c><02:44:11.120><c> that</c><02:44:11.520><c> a</c><02:44:11.760><c> user</c><02:44:12.319><c> that's</c><02:44:12.640><c> my</c><02:44:12.800><c> nickname</c>

02:44:13.590 --> 02:44:13.600 align:start position:0%
can call that a user that's my nickname
 

02:44:13.600 --> 02:44:15.349 align:start position:0%
can call that a user that's my nickname
now<02:44:13.840><c> one</c><02:44:14.080><c> place</c><02:44:14.319><c> where</c><02:44:14.479><c> you</c><02:44:14.640><c> see</c><02:44:14.800><c> this</c><02:44:15.040><c> used</c><02:44:15.279><c> a</c>

02:44:15.349 --> 02:44:15.359 align:start position:0%
now one place where you see this used a
 

02:44:15.359 --> 02:44:17.590 align:start position:0%
now one place where you see this used a
lot<02:44:15.680><c> is</c><02:44:15.840><c> with</c><02:44:16.000><c> structs</c><02:44:16.960><c> this</c><02:44:17.200><c> time</c><02:44:17.359><c> let's</c>

02:44:17.590 --> 02:44:17.600 align:start position:0%
lot is with structs this time let's
 

02:44:17.600 --> 02:44:20.150 align:start position:0%
lot is with structs this time let's
create<02:44:17.840><c> a</c><02:44:17.920><c> struct</c><02:44:18.800><c> at</c><02:44:19.040><c> first</c><02:44:19.359><c> we</c><02:44:19.600><c> won't</c><02:44:19.920><c> use</c>

02:44:20.150 --> 02:44:20.160 align:start position:0%
create a struct at first we won't use
 

02:44:20.160 --> 02:44:21.750 align:start position:0%
create a struct at first we won't use
the<02:44:20.399><c> typedef</c><02:44:20.880><c> keyword</c><02:44:21.279><c> and</c><02:44:21.359><c> then</c><02:44:21.520><c> i'll</c><02:44:21.600><c> show</c>

02:44:21.750 --> 02:44:21.760 align:start position:0%
the typedef keyword and then i'll show
 

02:44:21.760 --> 02:44:24.070 align:start position:0%
the typedef keyword and then i'll show
you<02:44:21.840><c> the</c><02:44:22.000><c> benefits</c><02:44:22.399><c> later</c><02:44:23.279><c> so</c><02:44:23.439><c> let's</c><02:44:23.680><c> say</c><02:44:23.920><c> this</c>

02:44:24.070 --> 02:44:24.080 align:start position:0%
you the benefits later so let's say this
 

02:44:24.080 --> 02:44:25.590 align:start position:0%
you the benefits later so let's say this
is<02:44:24.160><c> a</c><02:44:24.319><c> struct</c>

02:44:25.590 --> 02:44:25.600 align:start position:0%
is a struct
 

02:44:25.600 --> 02:44:27.750 align:start position:0%
is a struct
and<02:44:25.760><c> the</c><02:44:25.920><c> tag</c><02:44:26.160><c> name</c><02:44:26.479><c> is</c><02:44:26.800><c> user</c>

02:44:27.750 --> 02:44:27.760 align:start position:0%
and the tag name is user
 

02:44:27.760 --> 02:44:30.469 align:start position:0%
and the tag name is user
users<02:44:28.240><c> will</c><02:44:28.479><c> have</c><02:44:28.880><c> let's</c><02:44:29.200><c> say</c><02:44:29.520><c> three</c><02:44:29.840><c> members</c>

02:44:30.469 --> 02:44:30.479 align:start position:0%
users will have let's say three members
 

02:44:30.479 --> 02:44:35.750 align:start position:0%
users will have let's say three members
a<02:44:30.640><c> character</c><02:44:31.200><c> array</c><02:44:31.760><c> named</c><02:44:32.240><c> name</c><02:44:32.880><c> of</c><02:44:33.200><c> 25</c><02:44:33.680><c> bytes</c>

02:44:35.750 --> 02:44:35.760 align:start position:0%
a character array named name of 25 bytes
 

02:44:35.760 --> 02:44:40.150 align:start position:0%
a character array named name of 25 bytes
a<02:44:35.920><c> password</c><02:44:36.399><c> of</c><02:44:36.479><c> 12</c><02:44:36.880><c> bytes</c>

02:44:40.150 --> 02:44:40.160 align:start position:0%
 
 

02:44:40.160 --> 02:44:43.670 align:start position:0%
 
and<02:44:40.640><c> int</c><02:44:41.359><c> id</c><02:44:41.840><c> like</c><02:44:42.000><c> an</c><02:44:42.160><c> id</c><02:44:42.479><c> number</c>

02:44:43.670 --> 02:44:43.680 align:start position:0%
and int id like an id number
 

02:44:43.680 --> 02:44:45.590 align:start position:0%
and int id like an id number
so<02:44:44.000><c> to</c><02:44:44.160><c> create</c><02:44:44.399><c> a</c><02:44:44.479><c> struct</c><02:44:44.960><c> we</c><02:44:45.120><c> would</c><02:44:45.279><c> have</c><02:44:45.439><c> to</c>

02:44:45.590 --> 02:44:45.600 align:start position:0%
so to create a struct we would have to
 

02:44:45.600 --> 02:44:47.269 align:start position:0%
so to create a struct we would have to
type<02:44:46.160><c> struct</c>

02:44:47.269 --> 02:44:47.279 align:start position:0%
type struct
 

02:44:47.279 --> 02:44:48.710 align:start position:0%
type struct
then<02:44:47.520><c> the</c><02:44:47.680><c> tag</c><02:44:48.000><c> name</c>

02:44:48.710 --> 02:44:48.720 align:start position:0%
then the tag name
 

02:44:48.720 --> 02:44:49.830 align:start position:0%
then the tag name
user

02:44:49.830 --> 02:44:49.840 align:start position:0%
user
 

02:44:49.840 --> 02:44:51.510 align:start position:0%
user
and<02:44:50.080><c> a</c><02:44:50.240><c> variable</c><02:44:50.720><c> name</c>

02:44:51.510 --> 02:44:51.520 align:start position:0%
and a variable name
 

02:44:51.520 --> 02:44:53.670 align:start position:0%
and a variable name
and<02:44:51.760><c> let's</c><02:44:52.000><c> assign</c><02:44:52.319><c> some</c><02:44:52.479><c> of</c><02:44:52.560><c> these</c><02:44:52.800><c> values</c>

02:44:53.670 --> 02:44:53.680 align:start position:0%
and let's assign some of these values
 

02:44:53.680 --> 02:44:59.349 align:start position:0%
and let's assign some of these values
i'll<02:44:53.920><c> assign</c><02:44:54.720><c> a</c><02:44:54.960><c> name</c><02:44:55.359><c> password</c><02:44:56.000><c> and</c><02:44:56.240><c> id</c>

02:44:59.349 --> 02:44:59.359 align:start position:0%
 
 

02:44:59.359 --> 02:45:01.429 align:start position:0%
 
looks<02:44:59.680><c> good</c><02:44:59.840><c> to</c><02:44:59.920><c> me</c><02:45:00.399><c> okay</c><02:45:00.720><c> then</c><02:45:00.880><c> if</c><02:45:01.040><c> i</c><02:45:01.120><c> need</c><02:45:01.279><c> to</c>

02:45:01.429 --> 02:45:01.439 align:start position:0%
looks good to me okay then if i need to
 

02:45:01.439 --> 02:45:03.990 align:start position:0%
looks good to me okay then if i need to
create<02:45:01.920><c> user</c><02:45:02.399><c> two</c>

02:45:03.990 --> 02:45:04.000 align:start position:0%
create user two
 

02:45:04.000 --> 02:45:06.790 align:start position:0%
create user two
i<02:45:04.160><c> would</c><02:45:04.399><c> type</c><02:45:04.640><c> again</c><02:45:05.120><c> struct</c><02:45:05.680><c> user</c><02:45:06.560><c> some</c>

02:45:06.790 --> 02:45:06.800 align:start position:0%
i would type again struct user some
 

02:45:06.800 --> 02:45:08.710 align:start position:0%
i would type again struct user some
unique<02:45:07.120><c> variable</c><02:45:07.520><c> name</c><02:45:07.920><c> and</c><02:45:08.160><c> make</c><02:45:08.399><c> up</c><02:45:08.479><c> some</c>

02:45:08.710 --> 02:45:08.720 align:start position:0%
unique variable name and make up some
 

02:45:08.720 --> 02:45:11.349 align:start position:0%
unique variable name and make up some
values

02:45:11.349 --> 02:45:11.359 align:start position:0%
 
 

02:45:11.359 --> 02:45:13.830 align:start position:0%
 
okay<02:45:11.680><c> so</c><02:45:11.920><c> with</c><02:45:12.160><c> a</c><02:45:12.319><c> strut</c><02:45:13.040><c> if</c><02:45:13.279><c> i</c><02:45:13.359><c> would</c><02:45:13.520><c> like</c><02:45:13.680><c> to</c>

02:45:13.830 --> 02:45:13.840 align:start position:0%
okay so with a strut if i would like to
 

02:45:13.840 --> 02:45:16.790 align:start position:0%
okay so with a strut if i would like to
use<02:45:14.240><c> the</c><02:45:14.479><c> typedef</c><02:45:14.960><c> keyword</c><02:45:15.600><c> i</c><02:45:15.760><c> will</c><02:45:16.000><c> precede</c>

02:45:16.790 --> 02:45:16.800 align:start position:0%
use the typedef keyword i will precede
 

02:45:16.800 --> 02:45:20.469 align:start position:0%
use the typedef keyword i will precede
the<02:45:17.040><c> struct</c><02:45:17.439><c> keyword</c><02:45:18.160><c> with</c><02:45:18.560><c> typedef</c>

02:45:20.469 --> 02:45:20.479 align:start position:0%
the struct keyword with typedef
 

02:45:20.479 --> 02:45:22.630 align:start position:0%
the struct keyword with typedef
and<02:45:20.720><c> i</c><02:45:20.880><c> don't</c><02:45:21.120><c> necessarily</c><02:45:21.840><c> need</c><02:45:22.160><c> this</c><02:45:22.319><c> tag</c>

02:45:22.630 --> 02:45:22.640 align:start position:0%
and i don't necessarily need this tag
 

02:45:22.640 --> 02:45:25.590 align:start position:0%
and i don't necessarily need this tag
name<02:45:23.279><c> and</c><02:45:23.600><c> after</c><02:45:23.920><c> the</c><02:45:24.080><c> last</c><02:45:24.399><c> curly</c><02:45:24.720><c> brace</c><02:45:25.279><c> here</c>

02:45:25.590 --> 02:45:25.600 align:start position:0%
name and after the last curly brace here
 

02:45:25.600 --> 02:45:27.910 align:start position:0%
name and after the last curly brace here
i<02:45:25.680><c> will</c><02:45:25.840><c> add</c><02:45:26.240><c> my</c><02:45:26.399><c> nickname</c><02:45:27.200><c> i'll</c><02:45:27.359><c> call</c><02:45:27.600><c> this</c><02:45:27.760><c> a</c>

02:45:27.910 --> 02:45:27.920 align:start position:0%
i will add my nickname i'll call this a
 

02:45:27.920 --> 02:45:30.469 align:start position:0%
i will add my nickname i'll call this a
user<02:45:28.720><c> if</c><02:45:28.960><c> we</c><02:45:29.040><c> need</c><02:45:29.200><c> to</c><02:45:29.279><c> create</c><02:45:29.600><c> a</c><02:45:29.760><c> user</c><02:45:30.080><c> struct</c>

02:45:30.469 --> 02:45:30.479 align:start position:0%
user if we need to create a user struct
 

02:45:30.479 --> 02:45:32.550 align:start position:0%
user if we need to create a user struct
we<02:45:30.640><c> no</c><02:45:30.800><c> longer</c><02:45:31.200><c> need</c><02:45:31.359><c> to</c><02:45:31.520><c> use</c><02:45:31.920><c> the</c><02:45:32.080><c> struct</c>

02:45:32.550 --> 02:45:32.560 align:start position:0%
we no longer need to use the struct
 

02:45:32.560 --> 02:45:35.349 align:start position:0%
we no longer need to use the struct
keyword<02:45:33.439><c> we</c><02:45:33.600><c> can</c><02:45:33.680><c> remove</c><02:45:34.080><c> this</c>

02:45:35.349 --> 02:45:35.359 align:start position:0%
keyword we can remove this
 

02:45:35.359 --> 02:45:37.110 align:start position:0%
keyword we can remove this
and<02:45:35.520><c> this</c><02:45:35.680><c> should</c><02:45:35.920><c> work</c><02:45:36.240><c> so</c><02:45:36.399><c> let's</c><02:45:36.640><c> print</c><02:45:36.960><c> some</c>

02:45:37.110 --> 02:45:37.120 align:start position:0%
and this should work so let's print some
 

02:45:37.120 --> 02:45:54.630 align:start position:0%
and this should work so let's print some
of<02:45:37.200><c> these</c><02:45:37.439><c> members</c>

02:45:54.630 --> 02:45:54.640 align:start position:0%
 
 

02:45:54.640 --> 02:45:57.030 align:start position:0%
 
and<02:45:54.960><c> here</c><02:45:55.359><c> are</c><02:45:55.600><c> the</c><02:45:55.920><c> two</c><02:45:56.160><c> users</c><02:45:56.640><c> that</c><02:45:56.800><c> we</c>

02:45:57.030 --> 02:45:57.040 align:start position:0%
and here are the two users that we
 

02:45:57.040 --> 02:46:00.550 align:start position:0%
and here are the two users that we
created<02:45:57.920><c> yeah</c><02:45:58.160><c> so</c><02:45:58.560><c> in</c><02:45:58.720><c> conclusion</c><02:45:59.600><c> typedef</c><02:46:00.319><c> is</c>

02:46:00.550 --> 02:46:00.560 align:start position:0%
created yeah so in conclusion typedef is
 

02:46:00.560 --> 02:46:02.630 align:start position:0%
created yeah so in conclusion typedef is
a<02:46:00.720><c> reserved</c><02:46:01.279><c> keyword</c><02:46:01.840><c> that</c><02:46:02.080><c> gives</c><02:46:02.479><c> an</c>

02:46:02.630 --> 02:46:02.640 align:start position:0%
a reserved keyword that gives an
 

02:46:02.640 --> 02:46:05.269 align:start position:0%
a reserved keyword that gives an
existing<02:46:03.200><c> data</c><02:46:03.520><c> type</c><02:46:03.920><c> a</c><02:46:04.160><c> nickname</c><02:46:04.880><c> and</c><02:46:05.120><c> it's</c>

02:46:05.269 --> 02:46:05.279 align:start position:0%
existing data type a nickname and it's
 

02:46:05.279 --> 02:46:07.910 align:start position:0%
existing data type a nickname and it's
mostly<02:46:05.680><c> used</c><02:46:06.000><c> for</c><02:46:06.160><c> convenience</c><02:46:07.279><c> if</c><02:46:07.439><c> we</c><02:46:07.600><c> use</c>

02:46:07.910 --> 02:46:07.920 align:start position:0%
mostly used for convenience if we use
 

02:46:07.920 --> 02:46:09.910 align:start position:0%
mostly used for convenience if we use
the<02:46:08.160><c> typed</c><02:46:08.479><c> up</c><02:46:08.640><c> keyword</c><02:46:09.120><c> when</c><02:46:09.359><c> declaring</c><02:46:09.840><c> a</c>

02:46:09.910 --> 02:46:09.920 align:start position:0%
the typed up keyword when declaring a
 

02:46:09.920 --> 02:46:12.469 align:start position:0%
the typed up keyword when declaring a
struct<02:46:10.560><c> we</c><02:46:10.720><c> no</c><02:46:10.960><c> longer</c><02:46:11.279><c> need</c><02:46:11.680><c> to</c><02:46:11.840><c> use</c><02:46:12.240><c> that</c>

02:46:12.469 --> 02:46:12.479 align:start position:0%
struct we no longer need to use that
 

02:46:12.479 --> 02:46:14.870 align:start position:0%
struct we no longer need to use that
struct<02:46:12.960><c> keyword</c><02:46:13.600><c> to</c><02:46:13.840><c> create</c><02:46:14.160><c> a</c><02:46:14.240><c> struct</c><02:46:14.640><c> we</c><02:46:14.800><c> can</c>

02:46:14.870 --> 02:46:14.880 align:start position:0%
struct keyword to create a struct we can
 

02:46:14.880 --> 02:46:17.510 align:start position:0%
struct keyword to create a struct we can
just<02:46:15.120><c> use</c><02:46:15.439><c> this</c><02:46:15.680><c> nickname</c><02:46:16.319><c> as</c><02:46:16.560><c> the</c><02:46:16.720><c> data</c><02:46:17.040><c> type</c>

02:46:17.510 --> 02:46:17.520 align:start position:0%
just use this nickname as the data type
 

02:46:17.520 --> 02:46:19.030 align:start position:0%
just use this nickname as the data type
and<02:46:17.600><c> then</c><02:46:17.760><c> come</c><02:46:18.000><c> up</c><02:46:18.160><c> with</c><02:46:18.399><c> some</c><02:46:18.640><c> unique</c>

02:46:19.030 --> 02:46:19.040 align:start position:0%
and then come up with some unique
 

02:46:19.040 --> 02:46:21.349 align:start position:0%
and then come up with some unique
variable<02:46:19.520><c> name</c><02:46:20.000><c> so</c><02:46:20.240><c> yeah</c><02:46:20.479><c> that</c><02:46:20.800><c> is</c><02:46:21.040><c> the</c>

02:46:21.349 --> 02:46:21.359 align:start position:0%
variable name so yeah that is the
 

02:46:21.359 --> 02:46:23.110 align:start position:0%
variable name so yeah that is the
typedef<02:46:21.840><c> keyword</c><02:46:22.319><c> if</c><02:46:22.399><c> you</c><02:46:22.560><c> found</c><02:46:22.800><c> this</c><02:46:22.880><c> video</c>

02:46:23.110 --> 02:46:23.120 align:start position:0%
typedef keyword if you found this video
 

02:46:23.120 --> 02:46:24.550 align:start position:0%
typedef keyword if you found this video
helpful<02:46:23.600><c> please</c><02:46:23.760><c> be</c><02:46:23.920><c> sure</c><02:46:24.080><c> to</c><02:46:24.240><c> give</c><02:46:24.399><c> this</c>

02:46:24.550 --> 02:46:24.560 align:start position:0%
helpful please be sure to give this
 

02:46:24.560 --> 02:46:26.550 align:start position:0%
helpful please be sure to give this
video<02:46:24.880><c> a</c><02:46:24.960><c> thumbs</c><02:46:25.279><c> up</c><02:46:25.600><c> leave</c><02:46:25.840><c> a</c><02:46:25.920><c> random</c><02:46:26.240><c> comment</c>

02:46:26.550 --> 02:46:26.560 align:start position:0%
video a thumbs up leave a random comment
 

02:46:26.560 --> 02:46:28.309 align:start position:0%
video a thumbs up leave a random comment
down<02:46:26.720><c> below</c><02:46:27.200><c> and</c><02:46:27.439><c> subscribe</c><02:46:27.920><c> if</c><02:46:28.000><c> you'd</c><02:46:28.160><c> like</c>

02:46:28.309 --> 02:46:28.319 align:start position:0%
down below and subscribe if you'd like
 

02:46:28.319 --> 02:46:32.870 align:start position:0%
down below and subscribe if you'd like
to<02:46:28.399><c> become</c><02:46:28.720><c> a</c><02:46:28.800><c> fellow</c><02:46:29.120><c> bro</c>

02:46:32.870 --> 02:46:32.880 align:start position:0%
 
 

02:46:32.880 --> 02:46:34.710 align:start position:0%
 
hey<02:46:33.200><c> everybody</c><02:46:33.760><c> so</c><02:46:34.000><c> in</c><02:46:34.080><c> this</c><02:46:34.240><c> video</c><02:46:34.479><c> i'm</c><02:46:34.640><c> going</c>

02:46:34.710 --> 02:46:34.720 align:start position:0%
hey everybody so in this video i'm going
 

02:46:34.720 --> 02:46:36.550 align:start position:0%
hey everybody so in this video i'm going
to<02:46:34.800><c> show</c><02:46:35.040><c> you</c><02:46:35.200><c> how</c><02:46:35.359><c> we</c><02:46:35.439><c> can</c><02:46:35.600><c> create</c><02:46:35.920><c> an</c><02:46:36.160><c> array</c>

02:46:36.550 --> 02:46:36.560 align:start position:0%
to show you how we can create an array
 

02:46:36.560 --> 02:46:38.870 align:start position:0%
to show you how we can create an array
of<02:46:36.800><c> structs</c><02:46:37.680><c> let's</c><02:46:37.920><c> say</c><02:46:38.080><c> we're</c><02:46:38.319><c> working</c><02:46:38.640><c> with</c>

02:46:38.870 --> 02:46:38.880 align:start position:0%
of structs let's say we're working with
 

02:46:38.880 --> 02:46:40.710 align:start position:0%
of structs let's say we're working with
students<02:46:39.359><c> and</c><02:46:39.520><c> we</c><02:46:39.680><c> need</c><02:46:39.840><c> to</c><02:46:40.000><c> print</c><02:46:40.479><c> each</c>

02:46:40.710 --> 02:46:40.720 align:start position:0%
students and we need to print each
 

02:46:40.720 --> 02:46:43.830 align:start position:0%
students and we need to print each
student's<02:46:41.359><c> name</c><02:46:41.840><c> and</c><02:46:42.240><c> gpa</c><02:46:43.120><c> so</c><02:46:43.279><c> let's</c><02:46:43.520><c> create</c><02:46:43.760><c> a</c>

02:46:43.830 --> 02:46:43.840 align:start position:0%
student's name and gpa so let's create a
 

02:46:43.840 --> 02:46:45.990 align:start position:0%
student's name and gpa so let's create a
struct<02:46:44.399><c> outside</c><02:46:44.720><c> of</c><02:46:44.880><c> our</c><02:46:44.960><c> main</c><02:46:45.200><c> function</c><02:46:45.680><c> type</c>

02:46:45.990 --> 02:46:46.000 align:start position:0%
struct outside of our main function type
 

02:46:46.000 --> 02:46:48.469 align:start position:0%
struct outside of our main function type
struct<02:46:46.800><c> and</c><02:46:46.960><c> then</c><02:46:47.200><c> a</c><02:46:47.359><c> tag</c><02:46:47.680><c> name</c><02:46:48.080><c> for</c><02:46:48.319><c> the</c>

02:46:48.469 --> 02:46:48.479 align:start position:0%
struct and then a tag name for the
 

02:46:48.479 --> 02:46:51.110 align:start position:0%
struct and then a tag name for the
struct<02:46:48.960><c> let's</c><02:46:49.200><c> say</c><02:46:49.439><c> student</c><02:46:50.319><c> so</c><02:46:50.479><c> each</c><02:46:50.800><c> student</c>

02:46:51.110 --> 02:46:51.120 align:start position:0%
struct let's say student so each student
 

02:46:51.120 --> 02:46:53.590 align:start position:0%
struct let's say student so each student
will<02:46:51.279><c> have</c><02:46:51.520><c> a</c><02:46:51.840><c> name</c><02:46:52.240><c> and</c><02:46:52.479><c> a</c><02:46:52.560><c> gpa</c>

02:46:53.590 --> 02:46:53.600 align:start position:0%
will have a name and a gpa
 

02:46:53.600 --> 02:46:56.230 align:start position:0%
will have a name and a gpa
so<02:46:53.840><c> let's</c><02:46:54.080><c> create</c><02:46:54.399><c> a</c><02:46:54.560><c> character</c><02:46:55.040><c> array</c><02:46:55.680><c> named</c>

02:46:56.230 --> 02:46:56.240 align:start position:0%
so let's create a character array named
 

02:46:56.240 --> 02:46:58.710 align:start position:0%
so let's create a character array named
name<02:46:56.720><c> i'll</c><02:46:56.880><c> set</c><02:46:57.040><c> a</c><02:46:57.120><c> maximum</c><02:46:57.600><c> size</c><02:46:58.000><c> of</c><02:46:58.160><c> maybe</c><02:46:58.479><c> 12</c>

02:46:58.710 --> 02:46:58.720 align:start position:0%
name i'll set a maximum size of maybe 12
 

02:46:58.720 --> 02:47:00.070 align:start position:0%
name i'll set a maximum size of maybe 12
characters

02:47:00.070 --> 02:47:00.080 align:start position:0%
characters
 

02:47:00.080 --> 02:47:03.110 align:start position:0%
characters
and<02:47:00.399><c> a</c><02:47:00.560><c> gpa</c><02:47:01.040><c> that</c><02:47:01.200><c> could</c><02:47:01.439><c> be</c><02:47:01.680><c> a</c><02:47:01.840><c> float</c>

02:47:03.110 --> 02:47:03.120 align:start position:0%
and a gpa that could be a float
 

02:47:03.120 --> 02:47:06.389 align:start position:0%
and a gpa that could be a float
so<02:47:03.439><c> float</c><02:47:04.240><c> gpa</c><02:47:05.120><c> now</c><02:47:05.359><c> let's</c><02:47:05.600><c> initialize</c><02:47:06.240><c> some</c>

02:47:06.389 --> 02:47:06.399 align:start position:0%
so float gpa now let's initialize some
 

02:47:06.399 --> 02:47:09.030 align:start position:0%
so float gpa now let's initialize some
structs<02:47:06.960><c> we</c><02:47:07.120><c> type</c><02:47:07.359><c> struct</c><02:47:08.240><c> followed</c><02:47:08.560><c> by</c><02:47:08.880><c> the</c>

02:47:09.030 --> 02:47:09.040 align:start position:0%
structs we type struct followed by the
 

02:47:09.040 --> 02:47:11.510 align:start position:0%
structs we type struct followed by the
tag<02:47:09.359><c> name</c><02:47:09.920><c> and</c><02:47:10.080><c> then</c><02:47:10.319><c> some</c><02:47:10.560><c> variable</c><02:47:10.960><c> name</c><02:47:11.279><c> to</c>

02:47:11.510 --> 02:47:11.520 align:start position:0%
tag name and then some variable name to
 

02:47:11.520 --> 02:47:13.750 align:start position:0%
tag name and then some variable name to
identify<02:47:12.240><c> each</c><02:47:12.479><c> struct</c><02:47:13.120><c> so</c><02:47:13.279><c> let's</c><02:47:13.439><c> say</c><02:47:13.680><c> we</c>

02:47:13.750 --> 02:47:13.760 align:start position:0%
identify each struct so let's say we
 

02:47:13.760 --> 02:47:15.990 align:start position:0%
identify each struct so let's say we
will<02:47:13.920><c> have</c><02:47:14.319><c> four</c><02:47:14.560><c> students</c><02:47:14.960><c> overall</c><02:47:15.680><c> and</c><02:47:15.840><c> i'll</c>

02:47:15.990 --> 02:47:16.000 align:start position:0%
will have four students overall and i'll
 

02:47:16.000 --> 02:47:17.670 align:start position:0%
will have four students overall and i'll
go<02:47:16.160><c> ahead</c><02:47:16.479><c> and</c><02:47:16.640><c> assign</c><02:47:16.960><c> some</c><02:47:17.120><c> values</c><02:47:17.520><c> right</c>

02:47:17.670 --> 02:47:17.680 align:start position:0%
go ahead and assign some values right
 

02:47:17.680 --> 02:47:20.150 align:start position:0%
go ahead and assign some values right
away<02:47:17.920><c> when</c><02:47:18.080><c> we</c><02:47:18.240><c> initialize</c><02:47:18.800><c> the</c><02:47:19.040><c> struct</c><02:47:19.920><c> so</c><02:47:20.080><c> we</c>

02:47:20.150 --> 02:47:20.160 align:start position:0%
away when we initialize the struct so we
 

02:47:20.160 --> 02:47:22.790 align:start position:0%
away when we initialize the struct so we
need<02:47:20.399><c> a</c><02:47:20.640><c> name</c><02:47:21.120><c> and</c><02:47:21.359><c> a</c><02:47:21.439><c> gpa</c><02:47:22.240><c> so</c><02:47:22.399><c> the</c><02:47:22.560><c> first</c>

02:47:22.790 --> 02:47:22.800 align:start position:0%
need a name and a gpa so the first
 

02:47:22.800 --> 02:47:25.030 align:start position:0%
need a name and a gpa so the first
student<02:47:23.120><c> let's</c><02:47:23.359><c> say</c><02:47:23.600><c> is</c><02:47:23.760><c> spongebob</c>

02:47:25.030 --> 02:47:25.040 align:start position:0%
student let's say is spongebob
 

02:47:25.040 --> 02:47:28.950 align:start position:0%
student let's say is spongebob
and<02:47:25.279><c> spongebob</c><02:47:26.000><c> has</c><02:47:26.240><c> a</c><02:47:26.479><c> gpa</c><02:47:27.200><c> of</c><02:47:27.439><c> 3.0</c>

02:47:28.950 --> 02:47:28.960 align:start position:0%
and spongebob has a gpa of 3.0
 

02:47:28.960 --> 02:47:31.030 align:start position:0%
and spongebob has a gpa of 3.0
so<02:47:29.120><c> we</c><02:47:29.279><c> can</c><02:47:29.359><c> copy</c><02:47:29.760><c> this</c><02:47:30.080><c> and</c><02:47:30.319><c> create</c><02:47:30.720><c> a</c><02:47:30.880><c> few</c>

02:47:31.030 --> 02:47:31.040 align:start position:0%
so we can copy this and create a few
 

02:47:31.040 --> 02:47:34.550 align:start position:0%
so we can copy this and create a few
more<02:47:31.279><c> students</c><02:47:32.240><c> so</c><02:47:32.479><c> student</c><02:47:32.880><c> one</c><02:47:33.279><c> student</c><02:47:33.600><c> two</c>

02:47:34.550 --> 02:47:34.560 align:start position:0%
more students so student one student two
 

02:47:34.560 --> 02:47:37.110 align:start position:0%
more students so student one student two
student<02:47:34.960><c> three</c><02:47:35.359><c> and</c><02:47:35.760><c> student</c><02:47:36.080><c> four</c>

02:47:37.110 --> 02:47:37.120 align:start position:0%
student three and student four
 

02:47:37.120 --> 02:47:39.030 align:start position:0%
student three and student four
next<02:47:37.439><c> we</c><02:47:37.600><c> have</c><02:47:38.000><c> patrick</c>

02:47:39.030 --> 02:47:39.040 align:start position:0%
next we have patrick
 

02:47:39.040 --> 02:47:42.790 align:start position:0%
next we have patrick
patrick<02:47:39.600><c> has</c><02:47:40.000><c> a</c><02:47:40.319><c> 2.5</c>

02:47:42.790 --> 02:47:42.800 align:start position:0%
patrick has a 2.5
 

02:47:42.800 --> 02:47:45.590 align:start position:0%
patrick has a 2.5
then<02:47:43.120><c> sandy</c><02:47:44.000><c> sandy</c><02:47:44.319><c> is</c><02:47:44.399><c> smart</c><02:47:44.800><c> so</c><02:47:44.960><c> she</c><02:47:45.200><c> has</c><02:47:45.439><c> a</c>

02:47:45.590 --> 02:47:45.600 align:start position:0%
then sandy sandy is smart so she has a
 

02:47:45.600 --> 02:47:49.429 align:start position:0%
then sandy sandy is smart so she has a
4.0<02:47:46.720><c> and</c><02:47:47.040><c> squidward</c>

02:47:49.429 --> 02:47:49.439 align:start position:0%
4.0 and squidward
 

02:47:49.439 --> 02:47:52.550 align:start position:0%
4.0 and squidward
squidward<02:47:50.000><c> has</c><02:47:50.319><c> a</c><02:47:50.560><c> 2.0</c><02:47:51.680><c> so</c><02:47:51.840><c> we</c><02:47:52.000><c> have</c><02:47:52.319><c> four</c>

02:47:52.550 --> 02:47:52.560 align:start position:0%
squidward has a 2.0 so we have four
 

02:47:52.560 --> 02:47:55.030 align:start position:0%
squidward has a 2.0 so we have four
students<02:47:53.120><c> now</c><02:47:53.279><c> we</c><02:47:53.520><c> will</c><02:47:53.680><c> create</c><02:47:54.000><c> an</c><02:47:54.240><c> array</c><02:47:54.800><c> so</c>

02:47:55.030 --> 02:47:55.040 align:start position:0%
students now we will create an array so
 

02:47:55.040 --> 02:47:56.950 align:start position:0%
students now we will create an array so
the<02:47:55.200><c> data</c><02:47:55.520><c> type</c><02:47:55.760><c> of</c><02:47:55.920><c> our</c><02:47:56.080><c> array</c><02:47:56.640><c> what</c><02:47:56.800><c> it's</c>

02:47:56.950 --> 02:47:56.960 align:start position:0%
the data type of our array what it's
 

02:47:56.960 --> 02:47:59.750 align:start position:0%
the data type of our array what it's
containing<02:47:57.600><c> will</c><02:47:57.840><c> be</c><02:47:58.240><c> struxx</c><02:47:59.120><c> it</c><02:47:59.279><c> will</c><02:47:59.439><c> be</c>

02:47:59.750 --> 02:47:59.760 align:start position:0%
containing will be struxx it will be
 

02:47:59.760 --> 02:48:01.429 align:start position:0%
containing will be struxx it will be
struct<02:48:00.560><c> student</c><02:48:00.880><c> it's</c><02:48:01.040><c> kind</c><02:48:01.120><c> of</c><02:48:01.200><c> like</c><02:48:01.359><c> the</c>

02:48:01.429 --> 02:48:01.439 align:start position:0%
struct student it's kind of like the
 

02:48:01.439 --> 02:48:03.190 align:start position:0%
struct student it's kind of like the
data<02:48:01.840><c> type</c><02:48:02.160><c> so</c><02:48:02.319><c> with</c><02:48:02.479><c> an</c><02:48:02.640><c> array</c><02:48:02.960><c> you</c><02:48:03.040><c> have</c><02:48:03.120><c> to</c>

02:48:03.190 --> 02:48:03.200 align:start position:0%
data type so with an array you have to
 

02:48:03.200 --> 02:48:04.710 align:start position:0%
data type so with an array you have to
declare<02:48:03.760><c> what</c><02:48:03.920><c> you're</c><02:48:04.080><c> going</c><02:48:04.240><c> to</c><02:48:04.319><c> be</c><02:48:04.479><c> putting</c>

02:48:04.710 --> 02:48:04.720 align:start position:0%
declare what you're going to be putting
 

02:48:04.720 --> 02:48:07.590 align:start position:0%
declare what you're going to be putting
within<02:48:05.040><c> the</c><02:48:05.200><c> array</c><02:48:05.920><c> struct</c><02:48:06.720><c> students</c><02:48:07.520><c> and</c>

02:48:07.590 --> 02:48:07.600 align:start position:0%
within the array struct students and
 

02:48:07.600 --> 02:48:09.910 align:start position:0%
within the array struct students and
then<02:48:07.840><c> we</c><02:48:08.000><c> need</c><02:48:08.240><c> an</c><02:48:08.479><c> array</c><02:48:08.800><c> name</c><02:48:09.359><c> so</c><02:48:09.600><c> this</c><02:48:09.760><c> will</c>

02:48:09.910 --> 02:48:09.920 align:start position:0%
then we need an array name so this will
 

02:48:09.920 --> 02:48:12.630 align:start position:0%
then we need an array name so this will
be<02:48:10.399><c> students</c><02:48:11.200><c> and</c><02:48:11.359><c> then</c><02:48:11.520><c> specify</c><02:48:12.000><c> a</c><02:48:12.160><c> maximum</c>

02:48:12.630 --> 02:48:12.640 align:start position:0%
be students and then specify a maximum
 

02:48:12.640 --> 02:48:14.389 align:start position:0%
be students and then specify a maximum
size<02:48:12.960><c> if</c><02:48:13.040><c> you</c><02:48:13.120><c> need</c><02:48:13.359><c> one</c><02:48:13.760><c> but</c><02:48:14.000><c> i'm</c><02:48:14.080><c> just</c><02:48:14.240><c> going</c>

02:48:14.389 --> 02:48:14.399 align:start position:0%
size if you need one but i'm just going
 

02:48:14.399 --> 02:48:16.389 align:start position:0%
size if you need one but i'm just going
to<02:48:14.560><c> initialize</c><02:48:15.200><c> this</c><02:48:15.439><c> array</c><02:48:15.840><c> with</c><02:48:16.080><c> some</c>

02:48:16.389 --> 02:48:16.399 align:start position:0%
to initialize this array with some
 

02:48:16.399 --> 02:48:19.510 align:start position:0%
to initialize this array with some
students<02:48:17.200><c> so</c><02:48:17.439><c> let's</c><02:48:17.680><c> add</c><02:48:18.080><c> student</c><02:48:18.479><c> 1</c>

02:48:19.510 --> 02:48:19.520 align:start position:0%
students so let's add student 1
 

02:48:19.520 --> 02:48:22.150 align:start position:0%
students so let's add student 1
student<02:48:20.000><c> 2</c>

02:48:22.150 --> 02:48:22.160 align:start position:0%
student 2
 

02:48:22.160 --> 02:48:23.590 align:start position:0%
student 2
student<02:48:22.640><c> 3</c>

02:48:23.590 --> 02:48:23.600 align:start position:0%
student 3
 

02:48:23.600 --> 02:48:26.710 align:start position:0%
student 3
and<02:48:24.000><c> student</c><02:48:24.720><c> 4</c><02:48:25.279><c> and</c><02:48:25.600><c> there</c><02:48:25.760><c> we</c><02:48:25.920><c> go</c><02:48:26.160><c> we</c><02:48:26.319><c> have</c><02:48:26.560><c> an</c>

02:48:26.710 --> 02:48:26.720 align:start position:0%
and student 4 and there we go we have an
 

02:48:26.720 --> 02:48:28.550 align:start position:0%
and student 4 and there we go we have an
array<02:48:27.200><c> of</c><02:48:27.439><c> structs</c>

02:48:28.550 --> 02:48:28.560 align:start position:0%
array of structs
 

02:48:28.560 --> 02:48:30.230 align:start position:0%
array of structs
now<02:48:28.800><c> if</c><02:48:28.960><c> i</c><02:48:29.040><c> would</c><02:48:29.200><c> like</c><02:48:29.359><c> to</c><02:48:29.520><c> display</c><02:48:30.000><c> each</c>

02:48:30.230 --> 02:48:30.240 align:start position:0%
now if i would like to display each
 

02:48:30.240 --> 02:48:32.630 align:start position:0%
now if i would like to display each
student's<02:48:30.720><c> name</c><02:48:31.120><c> i</c><02:48:31.200><c> can</c><02:48:31.359><c> use</c><02:48:31.600><c> a</c><02:48:31.760><c> for</c><02:48:32.080><c> loop</c><02:48:32.399><c> to</c>

02:48:32.630 --> 02:48:32.640 align:start position:0%
student's name i can use a for loop to
 

02:48:32.640 --> 02:48:34.870 align:start position:0%
student's name i can use a for loop to
loop<02:48:33.040><c> through</c><02:48:33.359><c> our</c><02:48:33.600><c> array</c>

02:48:34.870 --> 02:48:34.880 align:start position:0%
loop through our array
 

02:48:34.880 --> 02:48:36.230 align:start position:0%
loop through our array
so<02:48:35.279><c> for</c>

02:48:36.230 --> 02:48:36.240 align:start position:0%
so for
 

02:48:36.240 --> 02:48:38.790 align:start position:0%
so for
curly<02:48:36.640><c> braces</c><02:48:37.520><c> we</c><02:48:37.680><c> will</c><02:48:37.840><c> create</c><02:48:38.160><c> an</c><02:48:38.319><c> index</c>

02:48:38.790 --> 02:48:38.800 align:start position:0%
curly braces we will create an index
 

02:48:38.800 --> 02:48:41.349 align:start position:0%
curly braces we will create an index
into<02:48:39.200><c> i</c><02:48:39.600><c> set</c><02:48:39.760><c> this</c><02:48:39.920><c> equal</c><02:48:40.160><c> to</c><02:48:40.399><c> zero</c>

02:48:41.349 --> 02:48:41.359 align:start position:0%
into i set this equal to zero
 

02:48:41.359 --> 02:48:43.750 align:start position:0%
into i set this equal to zero
we<02:48:41.520><c> will</c><02:48:41.760><c> loop</c><02:48:42.080><c> through</c><02:48:42.319><c> this</c><02:48:42.640><c> as</c><02:48:42.880><c> long</c><02:48:43.120><c> as</c><02:48:43.359><c> i</c>

02:48:43.750 --> 02:48:43.760 align:start position:0%
we will loop through this as long as i
 

02:48:43.760 --> 02:48:45.510 align:start position:0%
we will loop through this as long as i
is<02:48:44.000><c> less</c><02:48:44.240><c> than</c><02:48:44.800><c> and</c><02:48:44.880><c> then</c><02:48:45.040><c> we</c><02:48:45.200><c> need</c><02:48:45.359><c> to</c>

02:48:45.510 --> 02:48:45.520 align:start position:0%
is less than and then we need to
 

02:48:45.520 --> 02:48:47.349 align:start position:0%
is less than and then we need to
calculate<02:48:46.000><c> how</c><02:48:46.160><c> many</c><02:48:46.399><c> elements</c><02:48:46.800><c> are</c><02:48:46.880><c> within</c>

02:48:47.349 --> 02:48:47.359 align:start position:0%
calculate how many elements are within
 

02:48:47.359 --> 02:48:49.830 align:start position:0%
calculate how many elements are within
our<02:48:47.600><c> array</c><02:48:48.160><c> so</c><02:48:48.319><c> we</c><02:48:48.479><c> have</c><02:48:48.720><c> four</c><02:48:48.960><c> elements</c><02:48:49.680><c> but</c>

02:48:49.830 --> 02:48:49.840 align:start position:0%
our array so we have four elements but
 

02:48:49.840 --> 02:48:51.910 align:start position:0%
our array so we have four elements but
we<02:48:50.000><c> can</c><02:48:50.080><c> do</c><02:48:50.240><c> that</c><02:48:50.399><c> by</c><02:48:50.640><c> using</c><02:48:50.880><c> the</c><02:48:51.120><c> size</c><02:48:51.680><c> of</c>

02:48:51.910 --> 02:48:51.920 align:start position:0%
we can do that by using the size of
 

02:48:51.920 --> 02:48:54.469 align:start position:0%
we can do that by using the size of
operator<02:48:52.800><c> passing</c><02:48:53.279><c> our</c><02:48:53.439><c> array</c><02:48:54.160><c> and</c><02:48:54.319><c> then</c>

02:48:54.469 --> 02:48:54.479 align:start position:0%
operator passing our array and then
 

02:48:54.479 --> 02:48:56.710 align:start position:0%
operator passing our array and then
divide<02:48:54.880><c> this</c><02:48:55.200><c> by</c><02:48:55.439><c> the</c><02:48:55.680><c> size</c><02:48:56.080><c> of</c><02:48:56.319><c> one</c><02:48:56.479><c> of</c><02:48:56.560><c> these</c>

02:48:56.710 --> 02:48:56.720 align:start position:0%
divide this by the size of one of these
 

02:48:56.720 --> 02:48:58.389 align:start position:0%
divide this by the size of one of these
elements

02:48:58.389 --> 02:48:58.399 align:start position:0%
elements
 

02:48:58.399 --> 02:49:00.550 align:start position:0%
elements
size<02:48:58.720><c> of</c><02:48:58.880><c> students</c><02:48:59.520><c> and</c><02:48:59.680><c> then</c><02:48:59.920><c> pick</c><02:49:00.160><c> maybe</c><02:49:00.479><c> the</c>

02:49:00.550 --> 02:49:00.560 align:start position:0%
size of students and then pick maybe the
 

02:49:00.560 --> 02:49:02.550 align:start position:0%
size of students and then pick maybe the
first<02:49:00.880><c> element</c><02:49:01.279><c> of</c><02:49:01.439><c> zero</c><02:49:02.080><c> after</c><02:49:02.319><c> each</c>

02:49:02.550 --> 02:49:02.560 align:start position:0%
first element of zero after each
 

02:49:02.560 --> 02:49:05.349 align:start position:0%
first element of zero after each
iteration<02:49:03.200><c> we</c><02:49:03.359><c> will</c><02:49:03.600><c> increment</c><02:49:04.080><c> i</c><02:49:04.319><c> by</c><02:49:04.560><c> one</c><02:49:05.200><c> so</c>

02:49:05.349 --> 02:49:05.359 align:start position:0%
iteration we will increment i by one so
 

02:49:05.359 --> 02:49:07.190 align:start position:0%
iteration we will increment i by one so
then<02:49:05.600><c> within</c><02:49:05.840><c> our</c><02:49:06.000><c> for</c><02:49:06.240><c> loop</c><02:49:06.560><c> let's</c><02:49:06.800><c> print</c>

02:49:07.190 --> 02:49:07.200 align:start position:0%
then within our for loop let's print
 

02:49:07.200 --> 02:49:09.670 align:start position:0%
then within our for loop let's print
each<02:49:07.439><c> student's</c><02:49:07.840><c> name</c>

02:49:09.670 --> 02:49:09.680 align:start position:0%
each student's name
 

02:49:09.680 --> 02:49:12.469 align:start position:0%
each student's name
so<02:49:09.840><c> let's</c><02:49:10.160><c> use</c><02:49:10.560><c> the</c><02:49:10.880><c> s</c><02:49:11.120><c> format</c><02:49:11.520><c> specifier</c><02:49:12.319><c> to</c>

02:49:12.469 --> 02:49:12.479 align:start position:0%
so let's use the s format specifier to
 

02:49:12.479 --> 02:49:15.349 align:start position:0%
so let's use the s format specifier to
display<02:49:12.880><c> a</c><02:49:12.960><c> string</c><02:49:13.680><c> and</c><02:49:13.920><c> we</c><02:49:14.080><c> will</c><02:49:14.240><c> display</c><02:49:15.200><c> our</c>

02:49:15.349 --> 02:49:15.359 align:start position:0%
display a string and we will display our
 

02:49:15.359 --> 02:49:19.349 align:start position:0%
display a string and we will display our
array<02:49:16.080><c> at</c><02:49:16.399><c> index</c><02:49:17.279><c> of</c><02:49:17.600><c> i</c><02:49:18.240><c> whatever</c><02:49:18.720><c> our</c><02:49:18.960><c> counter</c>

02:49:19.349 --> 02:49:19.359 align:start position:0%
array at index of i whatever our counter
 

02:49:19.359 --> 02:49:20.230 align:start position:0%
array at index of i whatever our counter
is

02:49:20.230 --> 02:49:20.240 align:start position:0%
is
 

02:49:20.240 --> 02:49:23.349 align:start position:0%
is
and<02:49:20.479><c> we</c><02:49:20.640><c> will</c><02:49:20.880><c> use</c><02:49:21.200><c> the</c><02:49:21.600><c> member</c><02:49:22.240><c> axis</c><02:49:22.720><c> operator</c>

02:49:23.349 --> 02:49:23.359 align:start position:0%
and we will use the member axis operator
 

02:49:23.359 --> 02:49:26.469 align:start position:0%
and we will use the member axis operator
of<02:49:23.600><c> dot</c><02:49:24.080><c> so</c><02:49:24.319><c> follow</c><02:49:24.800><c> students</c><02:49:25.200><c> at</c><02:49:25.439><c> index</c><02:49:25.760><c> of</c><02:49:25.920><c> i</c>

02:49:26.469 --> 02:49:26.479 align:start position:0%
of dot so follow students at index of i
 

02:49:26.479 --> 02:49:29.510 align:start position:0%
of dot so follow students at index of i
with<02:49:26.720><c> a</c><02:49:26.960><c> dot</c><02:49:27.600><c> then</c><02:49:27.840><c> we</c><02:49:27.920><c> have</c><02:49:28.160><c> access</c><02:49:28.479><c> to</c><02:49:28.640><c> a</c><02:49:28.880><c> name</c>

02:49:29.510 --> 02:49:29.520 align:start position:0%
with a dot then we have access to a name
 

02:49:29.520 --> 02:49:31.910 align:start position:0%
with a dot then we have access to a name
and<02:49:29.760><c> a</c><02:49:29.840><c> gpa</c><02:49:30.800><c> so</c><02:49:30.960><c> let's</c><02:49:31.200><c> display</c><02:49:31.680><c> each</c>

02:49:31.910 --> 02:49:31.920 align:start position:0%
and a gpa so let's display each
 

02:49:31.920 --> 02:49:33.750 align:start position:0%
and a gpa so let's display each
student's<02:49:32.319><c> name</c><02:49:32.720><c> and</c><02:49:32.800><c> then</c><02:49:33.040><c> i'll</c><02:49:33.200><c> add</c><02:49:33.359><c> a</c><02:49:33.520><c> new</c>

02:49:33.750 --> 02:49:33.760 align:start position:0%
student's name and then i'll add a new
 

02:49:33.760 --> 02:49:36.389 align:start position:0%
student's name and then i'll add a new
line<02:49:34.000><c> after</c><02:49:34.399><c> each</c><02:49:34.720><c> printf</c><02:49:35.200><c> statement</c>

02:49:36.389 --> 02:49:36.399 align:start position:0%
line after each printf statement
 

02:49:36.399 --> 02:49:38.710 align:start position:0%
line after each printf statement
so<02:49:36.720><c> there</c><02:49:36.960><c> we</c><02:49:37.040><c> go</c><02:49:37.200><c> we</c><02:49:37.359><c> have</c><02:49:37.439><c> spongebob</c><02:49:38.160><c> patrick</c>

02:49:38.710 --> 02:49:38.720 align:start position:0%
so there we go we have spongebob patrick
 

02:49:38.720 --> 02:49:41.190 align:start position:0%
so there we go we have spongebob patrick
sandy<02:49:39.200><c> and</c><02:49:39.359><c> squidward</c><02:49:40.240><c> now</c><02:49:40.399><c> let's</c><02:49:40.720><c> display</c>

02:49:41.190 --> 02:49:41.200 align:start position:0%
sandy and squidward now let's display
 

02:49:41.200 --> 02:49:43.910 align:start position:0%
sandy and squidward now let's display
each<02:49:41.439><c> student's</c><02:49:41.920><c> gpa</c><02:49:42.800><c> so</c><02:49:42.960><c> let's</c><02:49:43.200><c> copy</c><02:49:43.600><c> this</c>

02:49:43.910 --> 02:49:43.920 align:start position:0%
each student's gpa so let's copy this
 

02:49:43.920 --> 02:49:44.710 align:start position:0%
each student's gpa so let's copy this
line

02:49:44.710 --> 02:49:44.720 align:start position:0%
line
 

02:49:44.720 --> 02:49:47.110 align:start position:0%
line
we<02:49:44.960><c> are</c><02:49:45.120><c> displaying</c><02:49:45.680><c> a</c><02:49:45.920><c> float</c><02:49:46.319><c> so</c><02:49:46.560><c> the</c><02:49:46.640><c> format</c>

02:49:47.110 --> 02:49:47.120 align:start position:0%
we are displaying a float so the format
 

02:49:47.120 --> 02:49:49.830 align:start position:0%
we are displaying a float so the format
specifier<02:49:47.760><c> for</c><02:49:48.000><c> a</c><02:49:48.080><c> float</c><02:49:48.560><c> is</c><02:49:48.960><c> f</c>

02:49:49.830 --> 02:49:49.840 align:start position:0%
specifier for a float is f
 

02:49:49.840 --> 02:49:51.990 align:start position:0%
specifier for a float is f
students<02:49:50.560><c> at</c><02:49:50.720><c> index</c><02:49:51.120><c> of</c><02:49:51.279><c> i</c>

02:49:51.990 --> 02:49:52.000 align:start position:0%
students at index of i
 

02:49:52.000 --> 02:49:52.830 align:start position:0%
students at index of i
dot

02:49:52.830 --> 02:49:52.840 align:start position:0%
dot
 

02:49:52.840 --> 02:49:55.590 align:start position:0%
dot
gpa<02:49:54.240><c> then</c><02:49:54.479><c> i'll</c><02:49:54.640><c> get</c><02:49:54.800><c> rid</c><02:49:54.960><c> of</c><02:49:55.040><c> that</c><02:49:55.120><c> new</c><02:49:55.359><c> line</c>

02:49:55.590 --> 02:49:55.600 align:start position:0%
gpa then i'll get rid of that new line
 

02:49:55.600 --> 02:49:57.429 align:start position:0%
gpa then i'll get rid of that new line
character<02:49:56.319><c> and</c><02:49:56.560><c> let's</c><02:49:56.800><c> take</c><02:49:56.960><c> a</c><02:49:56.960><c> look</c><02:49:57.200><c> to</c><02:49:57.279><c> see</c>

02:49:57.429 --> 02:49:57.439 align:start position:0%
character and let's take a look to see
 

02:49:57.439 --> 02:49:58.790 align:start position:0%
character and let's take a look to see
what<02:49:57.600><c> we</c><02:49:57.760><c> have</c>

02:49:58.790 --> 02:49:58.800 align:start position:0%
what we have
 

02:49:58.800 --> 02:50:00.870 align:start position:0%
what we have
okay<02:49:59.040><c> we</c><02:49:59.200><c> can</c><02:49:59.279><c> see</c><02:49:59.520><c> each</c><02:49:59.760><c> student's</c><02:50:00.240><c> name</c><02:50:00.640><c> and</c>

02:50:00.870 --> 02:50:00.880 align:start position:0%
okay we can see each student's name and
 

02:50:00.880 --> 02:50:03.510 align:start position:0%
okay we can see each student's name and
gpa<02:50:01.359><c> but</c><02:50:01.520><c> we</c><02:50:01.680><c> may</c><02:50:01.920><c> want</c><02:50:02.080><c> to</c><02:50:02.240><c> format</c><02:50:02.640><c> this</c>

02:50:03.510 --> 02:50:03.520 align:start position:0%
gpa but we may want to format this
 

02:50:03.520 --> 02:50:05.830 align:start position:0%
gpa but we may want to format this
so<02:50:03.680><c> after</c><02:50:04.160><c> each</c><02:50:04.399><c> student's</c><02:50:04.800><c> name</c><02:50:05.120><c> i'll</c><02:50:05.359><c> add</c><02:50:05.600><c> a</c>

02:50:05.830 --> 02:50:05.840 align:start position:0%
so after each student's name i'll add a
 

02:50:05.840 --> 02:50:08.550 align:start position:0%
so after each student's name i'll add a
tab<02:50:06.640><c> and</c><02:50:06.800><c> i'll</c><02:50:06.960><c> allocate</c><02:50:07.439><c> maybe</c><02:50:08.160><c> 12</c>

02:50:08.550 --> 02:50:08.560 align:start position:0%
tab and i'll allocate maybe 12
 

02:50:08.560 --> 02:50:10.469 align:start position:0%
tab and i'll allocate maybe 12
characters<02:50:09.120><c> to</c><02:50:09.279><c> display</c><02:50:09.760><c> each</c><02:50:10.000><c> student's</c>

02:50:10.469 --> 02:50:10.479 align:start position:0%
characters to display each student's
 

02:50:10.479 --> 02:50:13.110 align:start position:0%
characters to display each student's
name<02:50:11.120><c> and</c><02:50:11.279><c> then</c><02:50:11.439><c> left</c><02:50:11.760><c> justify</c><02:50:12.319><c> it</c><02:50:12.880><c> and</c><02:50:12.960><c> then</c>

02:50:13.110 --> 02:50:13.120 align:start position:0%
name and then left justify it and then
 

02:50:13.120 --> 02:50:15.590 align:start position:0%
name and then left justify it and then
with<02:50:13.359><c> our</c><02:50:13.520><c> gpa</c><02:50:14.160><c> let's</c><02:50:14.399><c> display</c><02:50:14.960><c> two</c><02:50:15.200><c> digits</c>

02:50:15.590 --> 02:50:15.600 align:start position:0%
with our gpa let's display two digits
 

02:50:15.600 --> 02:50:17.830 align:start position:0%
with our gpa let's display two digits
after<02:50:15.840><c> the</c><02:50:16.000><c> decimal</c><02:50:16.479><c> so</c><02:50:16.640><c> i</c><02:50:16.720><c> will</c><02:50:16.960><c> add</c>

02:50:17.830 --> 02:50:17.840 align:start position:0%
after the decimal so i will add
 

02:50:17.840 --> 02:50:19.349 align:start position:0%
after the decimal so i will add
dot<02:50:18.399><c> 2</c>

02:50:19.349 --> 02:50:19.359 align:start position:0%
dot 2
 

02:50:19.359 --> 02:50:20.950 align:start position:0%
dot 2
so<02:50:19.520><c> this</c><02:50:19.760><c> should</c><02:50:19.920><c> look</c><02:50:20.160><c> better</c>

02:50:20.950 --> 02:50:20.960 align:start position:0%
so this should look better
 

02:50:20.960 --> 02:50:22.870 align:start position:0%
so this should look better
yeah<02:50:21.200><c> that's</c><02:50:21.359><c> much</c><02:50:21.600><c> more</c><02:50:21.840><c> organized</c><02:50:22.560><c> so</c><02:50:22.720><c> we</c>

02:50:22.870 --> 02:50:22.880 align:start position:0%
yeah that's much more organized so we
 

02:50:22.880 --> 02:50:25.910 align:start position:0%
yeah that's much more organized so we
have<02:50:22.960><c> spongebob</c><02:50:23.680><c> with</c><02:50:23.840><c> the</c><02:50:24.000><c> gpa</c><02:50:24.720><c> of</c><02:50:24.960><c> 3.0</c>

02:50:25.910 --> 02:50:25.920 align:start position:0%
have spongebob with the gpa of 3.0
 

02:50:25.920 --> 02:50:29.670 align:start position:0%
have spongebob with the gpa of 3.0
patrick<02:50:26.399><c> with</c><02:50:26.560><c> 2.5</c><02:50:27.840><c> sandy</c><02:50:28.160><c> with</c><02:50:28.399><c> 4.0</c><02:50:29.439><c> and</c>

02:50:29.670 --> 02:50:29.680 align:start position:0%
patrick with 2.5 sandy with 4.0 and
 

02:50:29.680 --> 02:50:32.389 align:start position:0%
patrick with 2.5 sandy with 4.0 and
squidward<02:50:30.160><c> with</c><02:50:30.399><c> a</c><02:50:30.560><c> 2.0</c><02:50:31.520><c> so</c><02:50:31.760><c> yeah</c><02:50:32.000><c> that's</c><02:50:32.240><c> how</c>

02:50:32.389 --> 02:50:32.399 align:start position:0%
squidward with a 2.0 so yeah that's how
 

02:50:32.399 --> 02:50:34.230 align:start position:0%
squidward with a 2.0 so yeah that's how
to<02:50:32.479><c> create</c><02:50:32.800><c> an</c><02:50:32.960><c> array</c><02:50:33.359><c> of</c><02:50:33.520><c> structs</c><02:50:34.000><c> if</c><02:50:34.080><c> you</c>

02:50:34.230 --> 02:50:34.240 align:start position:0%
to create an array of structs if you
 

02:50:34.240 --> 02:50:35.830 align:start position:0%
to create an array of structs if you
would<02:50:34.319><c> like</c><02:50:34.479><c> a</c><02:50:34.560><c> copy</c><02:50:34.880><c> of</c><02:50:34.960><c> this</c><02:50:35.120><c> code</c><02:50:35.439><c> i'll</c><02:50:35.600><c> post</c>

02:50:35.830 --> 02:50:35.840 align:start position:0%
would like a copy of this code i'll post
 

02:50:35.840 --> 02:50:37.590 align:start position:0%
would like a copy of this code i'll post
this<02:50:36.000><c> to</c><02:50:36.160><c> the</c><02:50:36.319><c> comment</c><02:50:36.640><c> section</c><02:50:36.960><c> down</c><02:50:37.120><c> below</c>

02:50:37.590 --> 02:50:37.600 align:start position:0%
this to the comment section down below
 

02:50:37.600 --> 02:50:39.429 align:start position:0%
this to the comment section down below
and<02:50:37.760><c> well</c><02:50:38.240><c> yeah</c><02:50:38.560><c> that's</c><02:50:38.800><c> how</c><02:50:38.880><c> to</c><02:50:39.040><c> create</c><02:50:39.279><c> an</c>

02:50:39.429 --> 02:50:39.439 align:start position:0%
and well yeah that's how to create an
 

02:50:39.439 --> 02:50:44.550 align:start position:0%
and well yeah that's how to create an
array<02:50:39.840><c> of</c><02:50:40.000><c> structs</c><02:50:40.640><c> in</c><02:50:40.880><c> c</c>

02:50:44.550 --> 02:50:44.560 align:start position:0%
 
 

02:50:44.560 --> 02:50:47.349 align:start position:0%
 
well<02:50:44.880><c> well</c><02:50:45.120><c> well</c><02:50:45.520><c> welcome</c><02:50:45.920><c> back</c><02:50:46.319><c> so</c><02:50:46.640><c> enums</c>

02:50:47.349 --> 02:50:47.359 align:start position:0%
well well well welcome back so enums
 

02:50:47.359 --> 02:50:49.990 align:start position:0%
well well well welcome back so enums
short<02:50:47.600><c> for</c><02:50:47.840><c> enumerations</c><02:50:48.960><c> they</c><02:50:49.359><c> are</c><02:50:49.600><c> a</c>

02:50:49.990 --> 02:50:50.000 align:start position:0%
short for enumerations they are a
 

02:50:50.000 --> 02:50:53.269 align:start position:0%
short for enumerations they are a
user-defined<02:50:51.040><c> type</c><02:50:51.760><c> of</c><02:50:52.240><c> named</c><02:50:52.800><c> integer</c>

02:50:53.269 --> 02:50:53.279 align:start position:0%
user-defined type of named integer
 

02:50:53.279 --> 02:50:56.070 align:start position:0%
user-defined type of named integer
identifiers<02:50:54.319><c> a</c><02:50:54.560><c> benefit</c><02:50:55.200><c> is</c><02:50:55.279><c> that</c><02:50:55.520><c> they</c><02:50:55.760><c> help</c>

02:50:56.070 --> 02:50:56.080 align:start position:0%
identifiers a benefit is that they help
 

02:50:56.080 --> 02:50:58.790 align:start position:0%
identifiers a benefit is that they help
make<02:50:56.399><c> a</c><02:50:56.640><c> program</c><02:50:57.120><c> more</c><02:50:57.439><c> readable</c><02:50:58.160><c> either</c><02:50:58.479><c> for</c>

02:50:58.790 --> 02:50:58.800 align:start position:0%
make a program more readable either for
 

02:50:58.800 --> 02:51:00.710 align:start position:0%
make a program more readable either for
us<02:50:59.040><c> or</c><02:50:59.279><c> for</c><02:50:59.520><c> somebody</c><02:50:59.920><c> else</c><02:51:00.160><c> that's</c><02:51:00.399><c> looking</c>

02:51:00.710 --> 02:51:00.720 align:start position:0%
us or for somebody else that's looking
 

02:51:00.720 --> 02:51:02.710 align:start position:0%
us or for somebody else that's looking
over<02:51:00.960><c> our</c><02:51:01.200><c> code</c><02:51:01.680><c> so</c><02:51:02.000><c> here's</c><02:51:02.240><c> how</c><02:51:02.399><c> to</c><02:51:02.479><c> create</c>

02:51:02.710 --> 02:51:02.720 align:start position:0%
over our code so here's how to create
 

02:51:02.720 --> 02:51:04.389 align:start position:0%
over our code so here's how to create
some<02:51:02.880><c> enums</c><02:51:03.359><c> you</c><02:51:03.439><c> can</c><02:51:03.520><c> either</c><02:51:03.760><c> declare</c><02:51:04.160><c> these</c>

02:51:04.389 --> 02:51:04.399 align:start position:0%
some enums you can either declare these
 

02:51:04.399 --> 02:51:06.309 align:start position:0%
some enums you can either declare these
within<02:51:04.640><c> the</c><02:51:04.800><c> main</c><02:51:05.040><c> function</c><02:51:05.680><c> or</c><02:51:05.920><c> outside</c><02:51:06.240><c> of</c>

02:51:06.309 --> 02:51:06.319 align:start position:0%
within the main function or outside of
 

02:51:06.319 --> 02:51:08.309 align:start position:0%
within the main function or outside of
the<02:51:06.399><c> main</c><02:51:06.640><c> function</c><02:51:07.359><c> let's</c><02:51:07.600><c> do</c><02:51:07.760><c> so</c><02:51:08.000><c> outside</c><02:51:08.240><c> of</c>

02:51:08.309 --> 02:51:08.319 align:start position:0%
the main function let's do so outside of
 

02:51:08.319 --> 02:51:10.070 align:start position:0%
the main function let's do so outside of
the<02:51:08.399><c> main</c><02:51:08.640><c> function</c><02:51:09.359><c> so</c><02:51:09.600><c> to</c><02:51:09.760><c> create</c><02:51:09.920><c> some</c>

02:51:10.070 --> 02:51:10.080 align:start position:0%
the main function so to create some
 

02:51:10.080 --> 02:51:13.110 align:start position:0%
the main function so to create some
enums<02:51:10.640><c> type</c><02:51:10.960><c> the</c><02:51:11.120><c> keyword</c><02:51:11.600><c> enum</c><02:51:12.399><c> followed</c><02:51:12.800><c> by</c>

02:51:13.110 --> 02:51:13.120 align:start position:0%
enums type the keyword enum followed by
 

02:51:13.120 --> 02:51:14.950 align:start position:0%
enums type the keyword enum followed by
a<02:51:13.279><c> unique</c><02:51:13.600><c> identifier</c><02:51:14.399><c> let's</c><02:51:14.560><c> say</c><02:51:14.720><c> we're</c>

02:51:14.950 --> 02:51:14.960 align:start position:0%
a unique identifier let's say we're
 

02:51:14.960 --> 02:51:17.349 align:start position:0%
a unique identifier let's say we're
working<02:51:15.279><c> with</c><02:51:15.680><c> days</c><02:51:15.920><c> of</c><02:51:16.080><c> the</c><02:51:16.160><c> week</c><02:51:16.880><c> so</c><02:51:17.040><c> let's</c>

02:51:17.349 --> 02:51:17.359 align:start position:0%
working with days of the week so let's
 

02:51:17.359 --> 02:51:18.870 align:start position:0%
working with days of the week so let's
say<02:51:18.000><c> day</c>

02:51:18.870 --> 02:51:18.880 align:start position:0%
say day
 

02:51:18.880 --> 02:51:21.190 align:start position:0%
say day
curly<02:51:19.200><c> braces</c><02:51:20.000><c> and</c><02:51:20.319><c> then</c><02:51:20.560><c> end</c><02:51:20.640><c> this</c><02:51:20.800><c> with</c><02:51:21.040><c> a</c>

02:51:21.190 --> 02:51:21.200 align:start position:0%
curly braces and then end this with a
 

02:51:21.200 --> 02:51:24.070 align:start position:0%
curly braces and then end this with a
semicolon<02:51:22.160><c> so</c><02:51:22.399><c> enums</c><02:51:22.960><c> are</c><02:51:23.200><c> constants</c><02:51:23.840><c> and</c>

02:51:24.070 --> 02:51:24.080 align:start position:0%
semicolon so enums are constants and
 

02:51:24.080 --> 02:51:26.230 align:start position:0%
semicolon so enums are constants and
let's<02:51:24.319><c> declare</c><02:51:24.800><c> some</c><02:51:25.040><c> constant</c><02:51:25.520><c> names</c><02:51:26.000><c> let's</c>

02:51:26.230 --> 02:51:26.240 align:start position:0%
let's declare some constant names let's
 

02:51:26.240 --> 02:51:28.150 align:start position:0%
let's declare some constant names let's
say<02:51:26.479><c> the</c><02:51:26.560><c> seven</c><02:51:26.800><c> days</c><02:51:27.120><c> of</c><02:51:27.200><c> the</c><02:51:27.279><c> week</c><02:51:27.840><c> so</c>

02:51:28.150 --> 02:51:28.160 align:start position:0%
say the seven days of the week so
 

02:51:28.160 --> 02:51:30.309 align:start position:0%
say the seven days of the week so
separate<02:51:28.640><c> each</c><02:51:28.880><c> constant</c><02:51:29.359><c> with</c><02:51:29.600><c> a</c><02:51:29.840><c> comma</c><02:51:30.240><c> and</c>

02:51:30.309 --> 02:51:30.319 align:start position:0%
separate each constant with a comma and
 

02:51:30.319 --> 02:51:31.590 align:start position:0%
separate each constant with a comma and
we<02:51:30.479><c> will</c><02:51:30.640><c> just</c><02:51:30.800><c> go</c><02:51:30.960><c> through</c><02:51:31.120><c> the</c><02:51:31.200><c> days</c><02:51:31.439><c> of</c><02:51:31.520><c> the</c>

02:51:31.590 --> 02:51:31.600 align:start position:0%
we will just go through the days of the
 

02:51:31.600 --> 02:51:36.230 align:start position:0%
we will just go through the days of the
week

02:51:36.230 --> 02:51:36.240 align:start position:0%
 
 

02:51:36.240 --> 02:51:37.910 align:start position:0%
 
here<02:51:36.560><c> are</c><02:51:36.640><c> the</c><02:51:36.880><c> enumerations</c><02:51:37.600><c> that</c><02:51:37.760><c> we</c>

02:51:37.910 --> 02:51:37.920 align:start position:0%
here are the enumerations that we
 

02:51:37.920 --> 02:51:40.070 align:start position:0%
here are the enumerations that we
declared<02:51:38.640><c> the</c><02:51:38.800><c> days</c><02:51:39.200><c> sunday</c><02:51:39.760><c> through</c>

02:51:40.070 --> 02:51:40.080 align:start position:0%
declared the days sunday through
 

02:51:40.080 --> 02:51:42.389 align:start position:0%
declared the days sunday through
saturday<02:51:40.720><c> the</c><02:51:40.800><c> days</c><02:51:41.120><c> of</c><02:51:41.200><c> the</c><02:51:41.359><c> week</c><02:51:41.920><c> now</c><02:51:42.160><c> each</c>

02:51:42.389 --> 02:51:42.399 align:start position:0%
saturday the days of the week now each
 

02:51:42.399 --> 02:51:44.469 align:start position:0%
saturday the days of the week now each
of<02:51:42.479><c> these</c><02:51:42.720><c> constants</c><02:51:43.279><c> has</c><02:51:43.520><c> an</c><02:51:43.680><c> associated</c>

02:51:44.469 --> 02:51:44.479 align:start position:0%
of these constants has an associated
 

02:51:44.479 --> 02:51:46.630 align:start position:0%
of these constants has an associated
integer<02:51:45.279><c> so</c><02:51:45.520><c> beginning</c><02:51:45.920><c> with</c><02:51:46.080><c> your</c><02:51:46.319><c> first</c>

02:51:46.630 --> 02:51:46.640 align:start position:0%
integer so beginning with your first
 

02:51:46.640 --> 02:51:50.230 align:start position:0%
integer so beginning with your first
constant<02:51:47.200><c> this</c><02:51:47.439><c> will</c><02:51:47.600><c> have</c><02:51:48.080><c> a</c><02:51:48.399><c> value</c><02:51:48.960><c> of</c><02:51:49.200><c> zero</c>

02:51:50.230 --> 02:51:50.240 align:start position:0%
constant this will have a value of zero
 

02:51:50.240 --> 02:51:52.230 align:start position:0%
constant this will have a value of zero
then<02:51:50.399><c> the</c><02:51:50.560><c> next</c><02:51:50.880><c> will</c><02:51:51.120><c> have</c><02:51:51.439><c> one</c>

02:51:52.230 --> 02:51:52.240 align:start position:0%
then the next will have one
 

02:51:52.240 --> 02:51:54.950 align:start position:0%
then the next will have one
then<02:51:52.560><c> two</c><02:51:53.279><c> then</c><02:51:53.520><c> three</c><02:51:54.160><c> then</c><02:51:54.319><c> you</c><02:51:54.399><c> continue</c><02:51:54.800><c> on</c>

02:51:54.950 --> 02:51:54.960 align:start position:0%
then two then three then you continue on
 

02:51:54.960 --> 02:51:57.030 align:start position:0%
then two then three then you continue on
in<02:51:55.040><c> that</c><02:51:55.200><c> pattern</c><02:51:55.920><c> but</c><02:51:56.080><c> you</c><02:51:56.240><c> can</c><02:51:56.479><c> give</c><02:51:56.640><c> these</c><02:51:56.880><c> a</c>

02:51:57.030 --> 02:51:57.040 align:start position:0%
in that pattern but you can give these a
 

02:51:57.040 --> 02:51:59.269 align:start position:0%
in that pattern but you can give these a
unique<02:51:57.359><c> value</c><02:51:57.840><c> let's</c><02:51:58.080><c> change</c><02:51:58.399><c> it</c><02:51:58.479><c> sunday</c><02:51:58.960><c> to</c>

02:51:59.269 --> 02:51:59.279 align:start position:0%
unique value let's change it sunday to
 

02:51:59.279 --> 02:52:00.710 align:start position:0%
unique value let's change it sunday to
one<02:51:59.520><c> because</c><02:51:59.920><c> it's</c><02:52:00.080><c> the</c><02:52:00.160><c> first</c><02:52:00.399><c> day</c><02:52:00.560><c> of</c><02:52:00.640><c> the</c>

02:52:00.710 --> 02:52:00.720 align:start position:0%
one because it's the first day of the
 

02:52:00.720 --> 02:52:03.349 align:start position:0%
one because it's the first day of the
week<02:52:01.359><c> then</c><02:52:01.600><c> monday</c><02:52:02.000><c> will</c><02:52:02.160><c> be</c><02:52:02.399><c> two</c><02:52:02.960><c> and</c><02:52:03.040><c> then</c><02:52:03.200><c> we</c>

02:52:03.349 --> 02:52:03.359 align:start position:0%
week then monday will be two and then we
 

02:52:03.359 --> 02:52:06.550 align:start position:0%
week then monday will be two and then we
will<02:52:03.520><c> just</c><02:52:03.680><c> continue</c><02:52:04.160><c> with</c><02:52:04.319><c> these</c>

02:52:06.550 --> 02:52:06.560 align:start position:0%
will just continue with these
 

02:52:06.560 --> 02:52:08.309 align:start position:0%
will just continue with these
now<02:52:06.800><c> to</c><02:52:06.880><c> use</c><02:52:07.120><c> one</c><02:52:07.279><c> of</c><02:52:07.359><c> these</c><02:52:07.520><c> enums</c><02:52:07.920><c> we</c><02:52:08.080><c> would</c>

02:52:08.309 --> 02:52:08.319 align:start position:0%
now to use one of these enums we would
 

02:52:08.319 --> 02:52:12.150 align:start position:0%
now to use one of these enums we would
type<02:52:09.040><c> enum</c><02:52:09.920><c> then</c><02:52:10.160><c> our</c><02:52:10.399><c> identifier</c><02:52:11.040><c> name</c><02:52:11.760><c> day</c>

02:52:12.150 --> 02:52:12.160 align:start position:0%
type enum then our identifier name day
 

02:52:12.160 --> 02:52:14.309 align:start position:0%
type enum then our identifier name day
it's<02:52:12.240><c> kind</c><02:52:12.399><c> of</c><02:52:12.479><c> like</c><02:52:12.640><c> a</c><02:52:12.720><c> data</c><02:52:13.040><c> type</c><02:52:13.840><c> and</c><02:52:14.000><c> then</c>

02:52:14.309 --> 02:52:14.319 align:start position:0%
it's kind of like a data type and then
 

02:52:14.319 --> 02:52:16.469 align:start position:0%
it's kind of like a data type and then
some<02:52:14.560><c> variable</c><02:52:14.960><c> name</c><02:52:15.279><c> let's</c><02:52:15.520><c> say</c><02:52:15.680><c> today</c><02:52:16.399><c> and</c>

02:52:16.469 --> 02:52:16.479 align:start position:0%
some variable name let's say today and
 

02:52:16.479 --> 02:52:17.990 align:start position:0%
some variable name let's say today and
then<02:52:16.640><c> you</c><02:52:16.720><c> can</c><02:52:16.880><c> set</c><02:52:17.040><c> the</c><02:52:17.120><c> sequel</c><02:52:17.520><c> to</c><02:52:17.760><c> one</c><02:52:17.920><c> of</c>

02:52:17.990 --> 02:52:18.000 align:start position:0%
then you can set the sequel to one of
 

02:52:18.000 --> 02:52:19.510 align:start position:0%
then you can set the sequel to one of
these<02:52:18.160><c> constant</c><02:52:18.640><c> names</c><02:52:18.960><c> let's</c><02:52:19.120><c> say</c><02:52:19.359><c> that</c>

02:52:19.510 --> 02:52:19.520 align:start position:0%
these constant names let's say that
 

02:52:19.520 --> 02:52:21.269 align:start position:0%
these constant names let's say that
today<02:52:20.080><c> is</c><02:52:20.240><c> sunday</c>

02:52:21.269 --> 02:52:21.279 align:start position:0%
today is sunday
 

02:52:21.279 --> 02:52:22.710 align:start position:0%
today is sunday
so<02:52:21.439><c> an</c><02:52:21.600><c> important</c><02:52:22.000><c> note</c><02:52:22.240><c> with</c><02:52:22.479><c> these</c>

02:52:22.710 --> 02:52:22.720 align:start position:0%
so an important note with these
 

02:52:22.720 --> 02:52:25.510 align:start position:0%
so an important note with these
enumerations<02:52:23.680><c> they're</c><02:52:23.920><c> treated</c><02:52:24.479><c> as</c><02:52:24.880><c> integers</c>

02:52:25.510 --> 02:52:25.520 align:start position:0%
enumerations they're treated as integers
 

02:52:25.520 --> 02:52:27.670 align:start position:0%
enumerations they're treated as integers
and<02:52:25.840><c> not</c><02:52:26.080><c> strings</c><02:52:26.800><c> if</c><02:52:26.960><c> i</c><02:52:27.040><c> need</c><02:52:27.200><c> to</c><02:52:27.279><c> work</c><02:52:27.520><c> with</c>

02:52:27.670 --> 02:52:27.680 align:start position:0%
and not strings if i need to work with
 

02:52:27.680 --> 02:52:29.590 align:start position:0%
and not strings if i need to work with
one<02:52:27.840><c> of</c><02:52:27.920><c> these</c><02:52:28.160><c> enums</c><02:52:28.800><c> we're</c><02:52:29.040><c> going</c><02:52:29.200><c> to</c><02:52:29.359><c> treat</c>

02:52:29.590 --> 02:52:29.600 align:start position:0%
one of these enums we're going to treat
 

02:52:29.600 --> 02:52:31.750 align:start position:0%
one of these enums we're going to treat
them<02:52:29.840><c> as</c><02:52:30.080><c> if</c><02:52:30.240><c> they</c><02:52:30.399><c> were</c><02:52:30.560><c> an</c><02:52:30.720><c> integer</c><02:52:31.359><c> so</c><02:52:31.600><c> just</c>

02:52:31.750 --> 02:52:31.760 align:start position:0%
them as if they were an integer so just
 

02:52:31.760 --> 02:52:34.070 align:start position:0%
them as if they were an integer so just
for<02:52:31.920><c> an</c><02:52:32.080><c> example</c><02:52:32.560><c> i'm</c><02:52:32.720><c> going</c><02:52:32.960><c> to</c><02:52:33.279><c> print</c><02:52:33.920><c> the</c>

02:52:34.070 --> 02:52:34.080 align:start position:0%
for an example i'm going to print the
 

02:52:34.080 --> 02:52:36.630 align:start position:0%
for an example i'm going to print the
value<02:52:34.479><c> contained</c><02:52:34.880><c> within</c><02:52:35.279><c> today</c><02:52:36.160><c> so</c><02:52:36.319><c> this</c><02:52:36.560><c> is</c>

02:52:36.630 --> 02:52:36.640 align:start position:0%
value contained within today so this is
 

02:52:36.640 --> 02:52:38.550 align:start position:0%
value contained within today so this is
going<02:52:36.800><c> to</c><02:52:36.960><c> be</c><02:52:37.120><c> an</c><02:52:37.279><c> integer</c><02:52:37.680><c> so</c><02:52:37.840><c> we</c><02:52:38.000><c> will</c><02:52:38.240><c> use</c>

02:52:38.550 --> 02:52:38.560 align:start position:0%
going to be an integer so we will use
 

02:52:38.560 --> 02:52:41.030 align:start position:0%
going to be an integer so we will use
the<02:52:38.960><c> d</c><02:52:39.200><c> format</c><02:52:39.520><c> specifier</c><02:52:40.479><c> and</c><02:52:40.720><c> we</c><02:52:40.880><c> will</c>

02:52:41.030 --> 02:52:41.040 align:start position:0%
the d format specifier and we will
 

02:52:41.040 --> 02:52:42.469 align:start position:0%
the d format specifier and we will
display<02:52:41.600><c> today</c>

02:52:42.469 --> 02:52:42.479 align:start position:0%
display today
 

02:52:42.479 --> 02:52:45.670 align:start position:0%
display today
so<02:52:42.800><c> since</c><02:52:43.200><c> today</c><02:52:44.000><c> is</c><02:52:44.240><c> equal</c><02:52:44.560><c> to</c><02:52:44.720><c> sunday</c><02:52:45.439><c> this</c>

02:52:45.670 --> 02:52:45.680 align:start position:0%
so since today is equal to sunday this
 

02:52:45.680 --> 02:52:48.469 align:start position:0%
so since today is equal to sunday this
has<02:52:45.840><c> an</c><02:52:46.000><c> associated</c><02:52:46.800><c> integer</c><02:52:47.279><c> value</c><02:52:47.760><c> of</c><02:52:48.000><c> one</c>

02:52:48.469 --> 02:52:48.479 align:start position:0%
has an associated integer value of one
 

02:52:48.479 --> 02:52:50.070 align:start position:0%
has an associated integer value of one
and<02:52:48.640><c> if</c><02:52:48.800><c> i</c><02:52:48.880><c> display</c><02:52:49.279><c> that</c>

02:52:50.070 --> 02:52:50.080 align:start position:0%
and if i display that
 

02:52:50.080 --> 02:52:52.389 align:start position:0%
and if i display that
this<02:52:50.319><c> will</c><02:52:50.560><c> print</c><02:52:50.960><c> the</c><02:52:51.120><c> number</c><02:52:51.520><c> one</c><02:52:52.080><c> if</c><02:52:52.240><c> i</c>

02:52:52.389 --> 02:52:52.399 align:start position:0%
this will print the number one if i
 

02:52:52.399 --> 02:52:54.870 align:start position:0%
this will print the number one if i
change<02:52:52.800><c> this</c><02:52:53.120><c> to</c><02:52:53.520><c> saturday</c><02:52:54.240><c> well</c><02:52:54.479><c> then</c><02:52:54.800><c> it</c>

02:52:54.870 --> 02:52:54.880 align:start position:0%
change this to saturday well then it
 

02:52:54.880 --> 02:52:57.670 align:start position:0%
change this to saturday well then it
will<02:52:55.120><c> print</c><02:52:55.439><c> the</c><02:52:55.600><c> number</c><02:52:56.080><c> seven</c>

02:52:57.670 --> 02:52:57.680 align:start position:0%
will print the number seven
 

02:52:57.680 --> 02:53:00.230 align:start position:0%
will print the number seven
so<02:52:57.840><c> an</c><02:52:58.000><c> important</c><02:52:58.399><c> note</c><02:52:58.720><c> is</c><02:52:58.880><c> that</c><02:52:59.200><c> enums</c><02:52:59.760><c> are</c>

02:53:00.230 --> 02:53:00.240 align:start position:0%
so an important note is that enums are
 

02:53:00.240 --> 02:53:02.950 align:start position:0%
so an important note is that enums are
not<02:53:00.640><c> strings</c><02:53:01.439><c> but</c><02:53:01.600><c> they</c><02:53:01.760><c> can</c><02:53:02.000><c> be</c><02:53:02.240><c> treated</c><02:53:02.720><c> as</c>

02:53:02.950 --> 02:53:02.960 align:start position:0%
not strings but they can be treated as
 

02:53:02.960 --> 02:53:05.030 align:start position:0%
not strings but they can be treated as
integers<02:53:04.000><c> now</c><02:53:04.160><c> how</c><02:53:04.399><c> does</c><02:53:04.560><c> this</c><02:53:04.720><c> make</c><02:53:04.960><c> a</c>

02:53:05.030 --> 02:53:05.040 align:start position:0%
integers now how does this make a
 

02:53:05.040 --> 02:53:07.349 align:start position:0%
integers now how does this make a
program<02:53:05.520><c> more</c><02:53:05.760><c> readable</c><02:53:06.640><c> so</c><02:53:06.800><c> let's</c><02:53:07.040><c> write</c><02:53:07.200><c> an</c>

02:53:07.349 --> 02:53:07.359 align:start position:0%
program more readable so let's write an
 

02:53:07.359 --> 02:53:08.950 align:start position:0%
program more readable so let's write an
if-else<02:53:07.760><c> statement</c><02:53:08.160><c> that's</c><02:53:08.399><c> going</c><02:53:08.560><c> to</c><02:53:08.720><c> check</c>

02:53:08.950 --> 02:53:08.960 align:start position:0%
if-else statement that's going to check
 

02:53:08.960 --> 02:53:11.190 align:start position:0%
if-else statement that's going to check
what<02:53:09.200><c> today</c><02:53:09.600><c> is</c>

02:53:11.190 --> 02:53:11.200 align:start position:0%
what today is
 

02:53:11.200 --> 02:53:12.630 align:start position:0%
what today is
first<02:53:11.439><c> we'll</c><02:53:11.680><c> begin</c><02:53:12.000><c> with</c><02:53:12.160><c> using</c><02:53:12.479><c> the</c>

02:53:12.630 --> 02:53:12.640 align:start position:0%
first we'll begin with using the
 

02:53:12.640 --> 02:53:16.469 align:start position:0%
first we'll begin with using the
associated<02:53:13.279><c> integer</c><02:53:13.680><c> value</c><02:53:14.560><c> so</c><02:53:14.880><c> if</c><02:53:15.520><c> today</c>

02:53:16.469 --> 02:53:16.479 align:start position:0%
associated integer value so if today
 

02:53:16.479 --> 02:53:18.230 align:start position:0%
associated integer value so if today
is<02:53:16.720><c> equal</c><02:53:17.120><c> to</c><02:53:17.359><c> 1</c>

02:53:18.230 --> 02:53:18.240 align:start position:0%
is equal to 1
 

02:53:18.240 --> 02:53:19.110 align:start position:0%
is equal to 1
or

02:53:19.110 --> 02:53:19.120 align:start position:0%
or
 

02:53:19.120 --> 02:53:20.150 align:start position:0%
or
today

02:53:20.150 --> 02:53:20.160 align:start position:0%
today
 

02:53:20.160 --> 02:53:22.230 align:start position:0%
today
is<02:53:20.399><c> equal</c><02:53:20.960><c> to</c><02:53:21.359><c> 7</c>

02:53:22.230 --> 02:53:22.240 align:start position:0%
is equal to 7
 

02:53:22.240 --> 02:53:24.070 align:start position:0%
is equal to 7
then<02:53:22.399><c> that</c><02:53:22.640><c> means</c><02:53:22.880><c> it's</c><02:53:23.120><c> either</c><02:53:23.439><c> sunday</c><02:53:23.840><c> or</c>

02:53:24.070 --> 02:53:24.080 align:start position:0%
then that means it's either sunday or
 

02:53:24.080 --> 02:53:26.790 align:start position:0%
then that means it's either sunday or
saturday<02:53:24.880><c> and</c><02:53:25.200><c> let's</c><02:53:25.439><c> print</c><02:53:25.680><c> a</c><02:53:25.760><c> message</c>

02:53:26.790 --> 02:53:26.800 align:start position:0%
saturday and let's print a message
 

02:53:26.800 --> 02:53:30.150 align:start position:0%
saturday and let's print a message
let's<02:53:27.040><c> say</c><02:53:27.760><c> it's</c><02:53:28.080><c> the</c><02:53:28.240><c> weekend</c>

02:53:30.150 --> 02:53:30.160 align:start position:0%
let's say it's the weekend
 

02:53:30.160 --> 02:53:31.590 align:start position:0%
let's say it's the weekend
party<02:53:30.560><c> time</c>

02:53:31.590 --> 02:53:31.600 align:start position:0%
party time
 

02:53:31.600 --> 02:53:35.190 align:start position:0%
party time
else<02:53:32.160><c> we</c><02:53:32.399><c> will</c><02:53:32.560><c> print</c><02:53:33.040><c> something</c><02:53:33.439><c> else</c>

02:53:35.190 --> 02:53:35.200 align:start position:0%
else we will print something else
 

02:53:35.200 --> 02:53:38.550 align:start position:0%
else we will print something else
i<02:53:35.520><c> have</c><02:53:35.840><c> to</c><02:53:36.240><c> work</c><02:53:36.560><c> today</c>

02:53:38.550 --> 02:53:38.560 align:start position:0%
i have to work today
 

02:53:38.560 --> 02:53:41.110 align:start position:0%
i have to work today
so<02:53:38.880><c> today</c><02:53:39.279><c> is</c><02:53:39.439><c> set</c><02:53:39.600><c> to</c><02:53:39.760><c> saturday</c><02:53:40.640><c> that</c><02:53:40.800><c> means</c>

02:53:41.110 --> 02:53:41.120 align:start position:0%
so today is set to saturday that means
 

02:53:41.120 --> 02:53:43.670 align:start position:0%
so today is set to saturday that means
that<02:53:41.359><c> saturday</c><02:53:41.920><c> has</c><02:53:42.160><c> an</c><02:53:42.319><c> associated</c><02:53:43.040><c> integer</c>

02:53:43.670 --> 02:53:43.680 align:start position:0%
that saturday has an associated integer
 

02:53:43.680 --> 02:53:44.870 align:start position:0%
that saturday has an associated integer
of<02:53:44.000><c> seven</c>

02:53:44.870 --> 02:53:44.880 align:start position:0%
of seven
 

02:53:44.880 --> 02:53:48.790 align:start position:0%
of seven
so<02:53:45.200><c> if</c><02:53:45.520><c> today</c><02:53:46.000><c> is</c><02:53:46.160><c> equal</c><02:53:46.479><c> to</c><02:53:46.720><c> one</c><02:53:47.439><c> or</c><02:53:47.920><c> seven</c>

02:53:48.790 --> 02:53:48.800 align:start position:0%
so if today is equal to one or seven
 

02:53:48.800 --> 02:53:50.630 align:start position:0%
so if today is equal to one or seven
well<02:53:48.960><c> then</c><02:53:49.200><c> we</c><02:53:49.359><c> will</c><02:53:49.600><c> execute</c><02:53:50.080><c> this</c><02:53:50.399><c> if</c>

02:53:50.630 --> 02:53:50.640 align:start position:0%
well then we will execute this if
 

02:53:50.640 --> 02:53:53.990 align:start position:0%
well then we will execute this if
statement<02:53:52.000><c> it's</c><02:53:52.240><c> the</c><02:53:52.319><c> weekend</c><02:53:53.120><c> party</c><02:53:53.439><c> time</c><02:53:53.920><c> i</c>

02:53:53.990 --> 02:53:54.000 align:start position:0%
statement it's the weekend party time i
 

02:53:54.000 --> 02:53:55.269 align:start position:0%
statement it's the weekend party time i
think<02:53:54.240><c> i'm</c><02:53:54.319><c> just</c><02:53:54.399><c> going</c><02:53:54.560><c> to</c><02:53:54.640><c> add</c><02:53:54.720><c> a</c><02:53:54.800><c> new</c><02:53:55.040><c> line</c>

02:53:55.269 --> 02:53:55.279 align:start position:0%
think i'm just going to add a new line
 

02:53:55.279 --> 02:53:57.030 align:start position:0%
think i'm just going to add a new line
real<02:53:55.520><c> quick</c>

02:53:57.030 --> 02:53:57.040 align:start position:0%
real quick
 

02:53:57.040 --> 02:53:58.630 align:start position:0%
real quick
now<02:53:57.200><c> if</c><02:53:57.359><c> i</c><02:53:57.439><c> set</c><02:53:57.600><c> this</c><02:53:57.840><c> to</c><02:53:58.000><c> a</c><02:53:58.240><c> different</c><02:53:58.399><c> day</c><02:53:58.560><c> of</c>

02:53:58.630 --> 02:53:58.640 align:start position:0%
now if i set this to a different day of
 

02:53:58.640 --> 02:54:00.870 align:start position:0%
now if i set this to a different day of
the<02:53:58.720><c> week</c><02:53:59.120><c> let's</c><02:53:59.359><c> say</c><02:53:59.680><c> monday</c>

02:54:00.870 --> 02:54:00.880 align:start position:0%
the week let's say monday
 

02:54:00.880 --> 02:54:03.349 align:start position:0%
the week let's say monday
well<02:54:01.120><c> then</c><02:54:01.520><c> i</c><02:54:01.680><c> have</c><02:54:01.840><c> to</c><02:54:01.920><c> work</c><02:54:02.160><c> today</c><02:54:03.040><c> so</c><02:54:03.279><c> the</c>

02:54:03.349 --> 02:54:03.359 align:start position:0%
well then i have to work today so the
 

02:54:03.359 --> 02:54:05.269 align:start position:0%
well then i have to work today so the
way<02:54:03.520><c> that</c><02:54:03.680><c> this</c><02:54:03.920><c> is</c><02:54:04.080><c> written</c><02:54:04.399><c> now</c>

02:54:05.269 --> 02:54:05.279 align:start position:0%
way that this is written now
 

02:54:05.279 --> 02:54:07.590 align:start position:0%
way that this is written now
it's<02:54:05.439><c> not</c><02:54:05.680><c> too</c><02:54:05.920><c> readable</c><02:54:06.800><c> so</c><02:54:07.040><c> instead</c><02:54:07.439><c> of</c>

02:54:07.590 --> 02:54:07.600 align:start position:0%
it's not too readable so instead of
 

02:54:07.600 --> 02:54:10.230 align:start position:0%
it's not too readable so instead of
using<02:54:08.080><c> an</c><02:54:08.319><c> integer</c><02:54:08.800><c> value</c><02:54:09.439><c> let's</c><02:54:09.760><c> use</c><02:54:10.080><c> the</c>

02:54:10.230 --> 02:54:10.240 align:start position:0%
using an integer value let's use the
 

02:54:10.240 --> 02:54:11.990 align:start position:0%
using an integer value let's use the
associated<02:54:11.040><c> name</c><02:54:11.279><c> with</c><02:54:11.520><c> each</c><02:54:11.680><c> of</c><02:54:11.760><c> these</c>

02:54:11.990 --> 02:54:12.000 align:start position:0%
associated name with each of these
 

02:54:12.000 --> 02:54:14.550 align:start position:0%
associated name with each of these
constants<02:54:13.040><c> so</c><02:54:13.279><c> let's</c><02:54:13.520><c> replace</c>

02:54:14.550 --> 02:54:14.560 align:start position:0%
constants so let's replace
 

02:54:14.560 --> 02:54:16.630 align:start position:0%
constants so let's replace
one<02:54:15.120><c> with</c><02:54:15.520><c> sunday</c>

02:54:16.630 --> 02:54:16.640 align:start position:0%
one with sunday
 

02:54:16.640 --> 02:54:19.590 align:start position:0%
one with sunday
and<02:54:17.040><c> seven</c><02:54:17.600><c> with</c><02:54:18.000><c> saturday</c><02:54:19.040><c> and</c><02:54:19.200><c> i'll</c><02:54:19.359><c> change</c>

02:54:19.590 --> 02:54:19.600 align:start position:0%
and seven with saturday and i'll change
 

02:54:19.600 --> 02:54:21.349 align:start position:0%
and seven with saturday and i'll change
this<02:54:19.760><c> to</c><02:54:19.920><c> maybe</c><02:54:20.240><c> sunday</c>

02:54:21.349 --> 02:54:21.359 align:start position:0%
this to maybe sunday
 

02:54:21.359 --> 02:54:23.429 align:start position:0%
this to maybe sunday
so<02:54:21.680><c> this</c><02:54:21.920><c> is</c><02:54:22.000><c> a</c><02:54:22.080><c> lot</c><02:54:22.319><c> more</c><02:54:22.560><c> readable</c>

02:54:23.429 --> 02:54:23.439 align:start position:0%
so this is a lot more readable
 

02:54:23.439 --> 02:54:25.429 align:start position:0%
so this is a lot more readable
especially<02:54:23.920><c> if</c><02:54:24.080><c> somebody</c><02:54:24.479><c> else</c><02:54:24.800><c> is</c><02:54:24.960><c> reviewing</c>

02:54:25.429 --> 02:54:25.439 align:start position:0%
especially if somebody else is reviewing
 

02:54:25.439 --> 02:54:27.590 align:start position:0%
especially if somebody else is reviewing
your<02:54:25.600><c> code</c><02:54:26.240><c> they</c><02:54:26.399><c> may</c><02:54:26.560><c> not</c><02:54:26.800><c> understand</c><02:54:27.359><c> why</c>

02:54:27.590 --> 02:54:27.600 align:start position:0%
your code they may not understand why
 

02:54:27.600 --> 02:54:30.389 align:start position:0%
your code they may not understand why
today<02:54:28.080><c> is</c><02:54:28.240><c> equal</c><02:54:28.560><c> to</c><02:54:28.720><c> one</c><02:54:29.279><c> or</c><02:54:29.520><c> today</c><02:54:29.840><c> is</c><02:54:30.000><c> equal</c>

02:54:30.389 --> 02:54:30.399 align:start position:0%
today is equal to one or today is equal
 

02:54:30.399 --> 02:54:33.190 align:start position:0%
today is equal to one or today is equal
to<02:54:30.640><c> seven</c><02:54:31.279><c> but</c><02:54:31.439><c> this</c><02:54:31.680><c> makes</c><02:54:31.920><c> a</c><02:54:32.000><c> lot</c><02:54:32.160><c> more</c><02:54:32.479><c> sense</c>

02:54:33.190 --> 02:54:33.200 align:start position:0%
to seven but this makes a lot more sense
 

02:54:33.200 --> 02:54:37.110 align:start position:0%
to seven but this makes a lot more sense
oh<02:54:34.080><c> so</c><02:54:34.319><c> if</c><02:54:34.479><c> today</c><02:54:35.040><c> is</c><02:54:35.200><c> equal</c><02:54:35.520><c> to</c><02:54:35.840><c> sunday</c><02:54:36.640><c> or</c><02:54:36.880><c> if</c>

02:54:37.110 --> 02:54:37.120 align:start position:0%
oh so if today is equal to sunday or if
 

02:54:37.120 --> 02:54:40.230 align:start position:0%
oh so if today is equal to sunday or if
today<02:54:37.600><c> is</c><02:54:37.760><c> equal</c><02:54:38.000><c> to</c><02:54:38.240><c> saturday</c><02:54:39.359><c> then</c><02:54:39.600><c> we</c><02:54:39.840><c> print</c>

02:54:40.230 --> 02:54:40.240 align:start position:0%
today is equal to saturday then we print
 

02:54:40.240 --> 02:54:43.190 align:start position:0%
today is equal to saturday then we print
it's<02:54:40.479><c> the</c><02:54:40.640><c> weekend</c><02:54:41.279><c> party</c><02:54:41.600><c> time</c><02:54:42.399><c> so</c><02:54:42.640><c> that's</c><02:54:42.960><c> a</c>

02:54:43.190 --> 02:54:43.200 align:start position:0%
it's the weekend party time so that's a
 

02:54:43.200 --> 02:54:45.830 align:start position:0%
it's the weekend party time so that's a
huge<02:54:43.600><c> benefit</c><02:54:44.160><c> with</c><02:54:44.479><c> enums</c><02:54:45.279><c> is</c><02:54:45.520><c> that</c><02:54:45.680><c> they</c>

02:54:45.830 --> 02:54:45.840 align:start position:0%
huge benefit with enums is that they
 

02:54:45.840 --> 02:54:48.710 align:start position:0%
huge benefit with enums is that they
help<02:54:46.160><c> make</c><02:54:46.479><c> a</c><02:54:46.720><c> program</c><02:54:47.200><c> more</c><02:54:47.439><c> readable</c><02:54:48.319><c> so</c><02:54:48.560><c> to</c>

02:54:48.710 --> 02:54:48.720 align:start position:0%
help make a program more readable so to
 

02:54:48.720 --> 02:54:51.110 align:start position:0%
help make a program more readable so to
declare<02:54:49.120><c> enums</c><02:54:49.520><c> you</c><02:54:49.680><c> type</c><02:54:50.000><c> enum</c><02:54:50.720><c> then</c><02:54:50.960><c> an</c>

02:54:51.110 --> 02:54:51.120 align:start position:0%
declare enums you type enum then an
 

02:54:51.120 --> 02:54:53.830 align:start position:0%
declare enums you type enum then an
identifier<02:54:52.240><c> and</c><02:54:52.399><c> then</c><02:54:52.720><c> you</c><02:54:52.880><c> can</c><02:54:53.040><c> list</c><02:54:53.439><c> as</c><02:54:53.600><c> many</c>

02:54:53.830 --> 02:54:53.840 align:start position:0%
identifier and then you can list as many
 

02:54:53.840 --> 02:54:56.070 align:start position:0%
identifier and then you can list as many
constants<02:54:54.479><c> as</c><02:54:54.640><c> you</c><02:54:54.720><c> would</c><02:54:54.880><c> like</c><02:54:55.439><c> and</c><02:54:55.680><c> you</c><02:54:55.840><c> can</c>

02:54:56.070 --> 02:54:56.080 align:start position:0%
constants as you would like and you can
 

02:54:56.080 --> 02:54:58.469 align:start position:0%
constants as you would like and you can
give<02:54:56.319><c> them</c><02:54:56.560><c> an</c><02:54:56.720><c> associated</c><02:54:57.520><c> integer</c><02:54:58.000><c> value</c>

02:54:58.469 --> 02:54:58.479 align:start position:0%
give them an associated integer value
 

02:54:58.479 --> 02:55:00.950 align:start position:0%
give them an associated integer value
too<02:54:59.200><c> so</c><02:54:59.439><c> yeah</c><02:54:59.760><c> those</c><02:55:00.000><c> are</c><02:55:00.080><c> enums</c><02:55:00.640><c> if</c><02:55:00.720><c> you'd</c>

02:55:00.950 --> 02:55:00.960 align:start position:0%
too so yeah those are enums if you'd
 

02:55:00.960 --> 02:55:02.710 align:start position:0%
too so yeah those are enums if you'd
like<02:55:01.120><c> a</c><02:55:01.200><c> copy</c><02:55:01.520><c> of</c><02:55:01.600><c> this</c><02:55:01.680><c> code</c><02:55:02.080><c> i'll</c><02:55:02.319><c> post</c><02:55:02.560><c> this</c>

02:55:02.710 --> 02:55:02.720 align:start position:0%
like a copy of this code i'll post this
 

02:55:02.720 --> 02:55:04.469 align:start position:0%
like a copy of this code i'll post this
to<02:55:02.880><c> the</c><02:55:02.960><c> comments</c><02:55:03.279><c> section</c><02:55:03.600><c> down</c><02:55:03.840><c> below</c><02:55:04.319><c> and</c>

02:55:04.469 --> 02:55:04.479 align:start position:0%
to the comments section down below and
 

02:55:04.479 --> 02:55:10.550 align:start position:0%
to the comments section down below and
well<02:55:04.960><c> yeah</c><02:55:05.359><c> those</c><02:55:05.680><c> are</c><02:55:05.840><c> enums</c><02:55:06.640><c> in</c><02:55:06.880><c> c</c>

02:55:10.550 --> 02:55:10.560 align:start position:0%
 
 

02:55:10.560 --> 02:55:12.630 align:start position:0%
 
hey<02:55:10.880><c> uh</c><02:55:11.120><c> what's</c><02:55:11.439><c> going</c><02:55:11.600><c> on</c><02:55:11.760><c> everybody</c><02:55:12.319><c> so</c><02:55:12.560><c> in</c>

02:55:12.630 --> 02:55:12.640 align:start position:0%
hey uh what's going on everybody so in
 

02:55:12.640 --> 02:55:14.070 align:start position:0%
hey uh what's going on everybody so in
this<02:55:12.880><c> video</c><02:55:13.120><c> i'm</c><02:55:13.279><c> going</c><02:55:13.359><c> to</c><02:55:13.520><c> show</c><02:55:13.680><c> you</c><02:55:13.840><c> how</c><02:55:14.000><c> we</c>

02:55:14.070 --> 02:55:14.080 align:start position:0%
this video i'm going to show you how we
 

02:55:14.080 --> 02:55:16.469 align:start position:0%
this video i'm going to show you how we
can<02:55:14.240><c> generate</c><02:55:14.720><c> some</c><02:55:14.960><c> random</c><02:55:15.279><c> numbers</c><02:55:15.760><c> in</c><02:55:16.000><c> c</c>

02:55:16.469 --> 02:55:16.479 align:start position:0%
can generate some random numbers in c
 

02:55:16.479 --> 02:55:18.309 align:start position:0%
can generate some random numbers in c
just<02:55:16.720><c> as</c><02:55:16.880><c> a</c><02:55:16.960><c> disclaimer</c><02:55:17.680><c> these</c><02:55:18.000><c> are</c>

02:55:18.309 --> 02:55:18.319 align:start position:0%
just as a disclaimer these are
 

02:55:18.319 --> 02:55:20.710 align:start position:0%
just as a disclaimer these are
pseudorandom<02:55:19.040><c> numbers</c><02:55:19.680><c> they</c><02:55:19.920><c> are</c><02:55:20.160><c> a</c><02:55:20.399><c> set</c><02:55:20.640><c> of</c>

02:55:20.710 --> 02:55:20.720 align:start position:0%
pseudorandom numbers they are a set of
 

02:55:20.720 --> 02:55:22.790 align:start position:0%
pseudorandom numbers they are a set of
values<02:55:21.359><c> or</c><02:55:21.600><c> elements</c><02:55:22.240><c> that</c><02:55:22.479><c> are</c>

02:55:22.790 --> 02:55:22.800 align:start position:0%
values or elements that are
 

02:55:22.800 --> 02:55:25.190 align:start position:0%
values or elements that are
statistically<02:55:23.760><c> random</c><02:55:24.399><c> so</c><02:55:24.640><c> don't</c><02:55:24.800><c> use</c><02:55:24.960><c> these</c>

02:55:25.190 --> 02:55:25.200 align:start position:0%
statistically random so don't use these
 

02:55:25.200 --> 02:55:27.269 align:start position:0%
statistically random so don't use these
for<02:55:25.359><c> any</c><02:55:25.520><c> sort</c><02:55:25.760><c> of</c><02:55:25.920><c> cryptographic</c><02:55:26.560><c> security</c>

02:55:27.269 --> 02:55:27.279 align:start position:0%
for any sort of cryptographic security
 

02:55:27.279 --> 02:55:29.269 align:start position:0%
for any sort of cryptographic security
now<02:55:27.520><c> before</c><02:55:27.760><c> we</c><02:55:27.920><c> begin</c><02:55:28.399><c> include</c><02:55:28.800><c> these</c><02:55:29.040><c> two</c>

02:55:29.269 --> 02:55:29.279 align:start position:0%
now before we begin include these two
 

02:55:29.279 --> 02:55:31.030 align:start position:0%
now before we begin include these two
header<02:55:29.600><c> files</c><02:55:29.920><c> at</c><02:55:30.000><c> the</c><02:55:30.160><c> top</c>

02:55:31.030 --> 02:55:31.040 align:start position:0%
header files at the top
 

02:55:31.040 --> 02:55:33.670 align:start position:0%
header files at the top
stdlib<02:55:32.160><c> and</c><02:55:32.560><c> time</c><02:55:33.040><c> the</c><02:55:33.200><c> first</c><02:55:33.439><c> thing</c><02:55:33.600><c> that</c>

02:55:33.670 --> 02:55:33.680 align:start position:0%
stdlib and time the first thing that
 

02:55:33.680 --> 02:55:35.349 align:start position:0%
stdlib and time the first thing that
we're<02:55:33.840><c> going</c><02:55:33.920><c> to</c><02:55:34.080><c> do</c><02:55:34.319><c> is</c><02:55:34.560><c> use</c><02:55:34.800><c> the</c><02:55:34.960><c> current</c>

02:55:35.349 --> 02:55:35.359 align:start position:0%
we're going to do is use the current
 

02:55:35.359 --> 02:55:37.750 align:start position:0%
we're going to do is use the current
time<02:55:35.760><c> to</c><02:55:36.000><c> generate</c><02:55:36.479><c> a</c><02:55:36.720><c> seed</c><02:55:37.120><c> which</c><02:55:37.359><c> we</c><02:55:37.520><c> need</c>

02:55:37.750 --> 02:55:37.760 align:start position:0%
time to generate a seed which we need
 

02:55:37.760 --> 02:55:40.950 align:start position:0%
time to generate a seed which we need
for<02:55:37.920><c> random</c><02:55:38.240><c> numbers</c><02:55:39.040><c> so</c><02:55:39.200><c> we</c><02:55:39.359><c> can</c><02:55:39.600><c> use</c><02:55:40.000><c> the</c><02:55:40.319><c> s</c>

02:55:40.950 --> 02:55:40.960 align:start position:0%
for random numbers so we can use the s
 

02:55:40.960 --> 02:55:44.870 align:start position:0%
for random numbers so we can use the s
rand<02:55:41.439><c> function</c><02:55:42.319><c> s</c><02:55:42.720><c> for</c><02:55:42.960><c> seed</c><02:55:43.600><c> rand</c><02:55:44.000><c> for</c><02:55:44.240><c> random</c>

02:55:44.870 --> 02:55:44.880 align:start position:0%
rand function s for seed rand for random
 

02:55:44.880 --> 02:55:46.630 align:start position:0%
rand function s for seed rand for random
and<02:55:44.960><c> then</c><02:55:45.200><c> we</c><02:55:45.359><c> will</c><02:55:45.520><c> pass</c><02:55:45.840><c> in</c><02:55:46.080><c> the</c><02:55:46.240><c> current</c>

02:55:46.630 --> 02:55:46.640 align:start position:0%
and then we will pass in the current
 

02:55:46.640 --> 02:55:47.510 align:start position:0%
and then we will pass in the current
time

02:55:47.510 --> 02:55:47.520 align:start position:0%
time
 

02:55:47.520 --> 02:55:50.790 align:start position:0%
time
time<02:55:48.080><c> function</c><02:55:48.800><c> pass</c><02:55:49.120><c> and</c><02:55:49.359><c> zero</c><02:55:50.160><c> so</c><02:55:50.479><c> we</c><02:55:50.640><c> will</c>

02:55:50.790 --> 02:55:50.800 align:start position:0%
time function pass and zero so we will
 

02:55:50.800 --> 02:55:53.429 align:start position:0%
time function pass and zero so we will
use<02:55:51.200><c> the</c><02:55:51.359><c> current</c><02:55:51.680><c> time</c><02:55:52.319><c> as</c><02:55:52.640><c> a</c><02:55:52.800><c> seed</c><02:55:53.200><c> for</c>

02:55:53.429 --> 02:55:53.439 align:start position:0%
use the current time as a seed for
 

02:55:53.439 --> 02:55:55.190 align:start position:0%
use the current time as a seed for
random<02:55:53.760><c> numbers</c><02:55:54.399><c> and</c><02:55:54.560><c> then</c><02:55:54.720><c> the</c><02:55:54.880><c> function</c>

02:55:55.190 --> 02:55:55.200 align:start position:0%
random numbers and then the function
 

02:55:55.200 --> 02:55:56.870 align:start position:0%
random numbers and then the function
that<02:55:55.359><c> you</c><02:55:55.520><c> need</c><02:55:55.840><c> to</c><02:55:56.080><c> generate</c><02:55:56.479><c> a</c><02:55:56.560><c> random</c>

02:55:56.870 --> 02:55:56.880 align:start position:0%
that you need to generate a random
 

02:55:56.880 --> 02:55:59.030 align:start position:0%
that you need to generate a random
number<02:55:57.279><c> using</c><02:55:57.680><c> this</c><02:55:57.920><c> seed</c><02:55:58.319><c> is</c><02:55:58.560><c> the</c><02:55:58.720><c> rand</c>

02:55:59.030 --> 02:55:59.040 align:start position:0%
number using this seed is the rand
 

02:55:59.040 --> 02:56:01.429 align:start position:0%
number using this seed is the rand
function<02:55:59.840><c> so</c><02:56:00.080><c> let's</c><02:56:00.319><c> store</c><02:56:00.800><c> our</c><02:56:01.040><c> number</c>

02:56:01.429 --> 02:56:01.439 align:start position:0%
function so let's store our number
 

02:56:01.439 --> 02:56:04.150 align:start position:0%
function so let's store our number
within<02:56:01.920><c> a</c><02:56:02.080><c> variable</c><02:56:02.640><c> maybe</c><02:56:02.960><c> number</c><02:56:03.279><c> one</c><02:56:03.760><c> int</c>

02:56:04.150 --> 02:56:04.160 align:start position:0%
within a variable maybe number one int
 

02:56:04.160 --> 02:56:06.550 align:start position:0%
within a variable maybe number one int
number<02:56:04.399><c> one</c><02:56:04.880><c> and</c><02:56:05.040><c> i</c><02:56:05.120><c> will</c><02:56:05.279><c> set</c><02:56:05.439><c> the</c><02:56:05.600><c> sequel</c><02:56:06.080><c> to</c>

02:56:06.550 --> 02:56:06.560 align:start position:0%
number one and i will set the sequel to
 

02:56:06.560 --> 02:56:08.630 align:start position:0%
number one and i will set the sequel to
then<02:56:06.800><c> invoke</c><02:56:07.200><c> the</c><02:56:07.359><c> rand</c><02:56:07.680><c> function</c><02:56:08.319><c> now</c><02:56:08.479><c> the</c>

02:56:08.630 --> 02:56:08.640 align:start position:0%
then invoke the rand function now the
 

02:56:08.640 --> 02:56:10.630 align:start position:0%
then invoke the rand function now the
rand<02:56:08.960><c> function</c><02:56:09.520><c> will</c><02:56:09.680><c> give</c><02:56:09.920><c> you</c><02:56:10.080><c> a</c><02:56:10.240><c> random</c>

02:56:10.630 --> 02:56:10.640 align:start position:0%
rand function will give you a random
 

02:56:10.640 --> 02:56:14.790 align:start position:0%
rand function will give you a random
number<02:56:10.960><c> between</c><02:56:11.520><c> 0</c><02:56:12.000><c> and</c><02:56:12.319><c> 32</c><02:56:13.279><c> 767.</c>

02:56:14.790 --> 02:56:14.800 align:start position:0%
number between 0 and 32 767.
 

02:56:14.800 --> 02:56:16.710 align:start position:0%
number between 0 and 32 767.
so<02:56:15.040><c> i'm</c><02:56:15.200><c> guessing</c><02:56:15.600><c> we</c><02:56:15.840><c> probably</c><02:56:16.160><c> don't</c><02:56:16.399><c> need</c><02:56:16.560><c> a</c>

02:56:16.710 --> 02:56:16.720 align:start position:0%
so i'm guessing we probably don't need a
 

02:56:16.720 --> 02:56:18.870 align:start position:0%
so i'm guessing we probably don't need a
number<02:56:17.040><c> that</c><02:56:17.279><c> large</c><02:56:17.840><c> so</c><02:56:18.000><c> depending</c><02:56:18.560><c> on</c><02:56:18.720><c> the</c>

02:56:18.870 --> 02:56:18.880 align:start position:0%
number that large so depending on the
 

02:56:18.880 --> 02:56:20.950 align:start position:0%
number that large so depending on the
range<02:56:19.120><c> of</c><02:56:19.279><c> numbers</c><02:56:19.600><c> that</c><02:56:19.760><c> we</c><02:56:19.920><c> need</c><02:56:20.240><c> we</c><02:56:20.319><c> can</c><02:56:20.560><c> use</c>

02:56:20.950 --> 02:56:20.960 align:start position:0%
range of numbers that we need we can use
 

02:56:20.960 --> 02:56:23.190 align:start position:0%
range of numbers that we need we can use
modulus<02:56:21.600><c> and</c><02:56:21.680><c> then</c><02:56:21.920><c> the</c><02:56:22.000><c> maximum</c><02:56:22.560><c> number</c><02:56:22.960><c> that</c>

02:56:23.190 --> 02:56:23.200 align:start position:0%
modulus and then the maximum number that
 

02:56:23.200 --> 02:56:25.269 align:start position:0%
modulus and then the maximum number that
you<02:56:23.279><c> would</c><02:56:23.520><c> like</c><02:56:24.000><c> so</c><02:56:24.240><c> if</c><02:56:24.399><c> i'm</c><02:56:24.479><c> rolling</c><02:56:24.880><c> a</c><02:56:25.040><c> six</c>

02:56:25.269 --> 02:56:25.279 align:start position:0%
you would like so if i'm rolling a six
 

02:56:25.279 --> 02:56:28.469 align:start position:0%
you would like so if i'm rolling a six
sided<02:56:25.600><c> dice</c><02:56:26.080><c> i</c><02:56:26.240><c> can</c><02:56:26.399><c> say</c><02:56:26.800><c> modulus</c><02:56:27.520><c> six</c><02:56:28.160><c> so</c><02:56:28.319><c> the</c>

02:56:28.469 --> 02:56:28.479 align:start position:0%
sided dice i can say modulus six so the
 

02:56:28.479 --> 02:56:30.230 align:start position:0%
sided dice i can say modulus six so the
modulus<02:56:29.040><c> operator</c><02:56:29.439><c> gives</c><02:56:29.680><c> you</c><02:56:29.760><c> the</c><02:56:29.920><c> remainder</c>

02:56:30.230 --> 02:56:30.240 align:start position:0%
modulus operator gives you the remainder
 

02:56:30.240 --> 02:56:32.230 align:start position:0%
modulus operator gives you the remainder
of<02:56:30.399><c> any</c><02:56:30.560><c> division</c><02:56:31.359><c> so</c><02:56:31.520><c> technically</c><02:56:32.080><c> this</c>

02:56:32.230 --> 02:56:32.240 align:start position:0%
of any division so technically this
 

02:56:32.240 --> 02:56:34.389 align:start position:0%
of any division so technically this
gives<02:56:32.560><c> us</c><02:56:32.720><c> a</c><02:56:32.880><c> random</c><02:56:33.200><c> number</c><02:56:33.520><c> between</c><02:56:34.000><c> zero</c>

02:56:34.389 --> 02:56:34.399 align:start position:0%
gives us a random number between zero
 

02:56:34.399 --> 02:56:36.230 align:start position:0%
gives us a random number between zero
and<02:56:34.640><c> five</c><02:56:34.960><c> because</c><02:56:35.279><c> computers</c><02:56:35.840><c> always</c><02:56:36.080><c> start</c>

02:56:36.230 --> 02:56:36.240 align:start position:0%
and five because computers always start
 

02:56:36.240 --> 02:56:38.389 align:start position:0%
and five because computers always start
with<02:56:36.399><c> zero</c><02:56:36.880><c> but</c><02:56:37.040><c> you</c><02:56:37.200><c> can</c><02:56:37.359><c> add</c><02:56:37.600><c> an</c><02:56:37.680><c> offset</c><02:56:38.240><c> so</c>

02:56:38.389 --> 02:56:38.399 align:start position:0%
with zero but you can add an offset so
 

02:56:38.399 --> 02:56:40.630 align:start position:0%
with zero but you can add an offset so
if<02:56:38.560><c> i</c><02:56:38.640><c> need</c><02:56:38.800><c> the</c><02:56:38.880><c> numbers</c><02:56:39.520><c> one</c><02:56:39.760><c> through</c><02:56:40.080><c> six</c><02:56:40.560><c> i</c>

02:56:40.630 --> 02:56:40.640 align:start position:0%
if i need the numbers one through six i
 

02:56:40.640 --> 02:56:42.230 align:start position:0%
if i need the numbers one through six i
can<02:56:40.800><c> just</c><02:56:40.960><c> add</c><02:56:41.120><c> plus</c><02:56:41.359><c> one</c><02:56:41.600><c> to</c><02:56:41.680><c> the</c><02:56:41.840><c> end</c><02:56:42.160><c> and</c>

02:56:42.230 --> 02:56:42.240 align:start position:0%
can just add plus one to the end and
 

02:56:42.240 --> 02:56:43.830 align:start position:0%
can just add plus one to the end and
then<02:56:42.399><c> maybe</c><02:56:42.720><c> i'll</c><02:56:42.880><c> surround</c><02:56:43.359><c> this</c><02:56:43.520><c> section</c>

02:56:43.830 --> 02:56:43.840 align:start position:0%
then maybe i'll surround this section
 

02:56:43.840 --> 02:56:45.590 align:start position:0%
then maybe i'll surround this section
with<02:56:44.080><c> a</c><02:56:44.240><c> set</c><02:56:44.399><c> of</c><02:56:44.560><c> parentheses</c><02:56:45.200><c> just</c><02:56:45.359><c> to</c><02:56:45.439><c> make</c>

02:56:45.590 --> 02:56:45.600 align:start position:0%
with a set of parentheses just to make
 

02:56:45.600 --> 02:56:47.750 align:start position:0%
with a set of parentheses just to make
this<02:56:45.760><c> more</c><02:56:45.920><c> readable</c><02:56:46.560><c> so</c><02:56:46.800><c> generate</c><02:56:47.279><c> a</c><02:56:47.439><c> random</c>

02:56:47.750 --> 02:56:47.760 align:start position:0%
this more readable so generate a random
 

02:56:47.760 --> 02:56:50.710 align:start position:0%
this more readable so generate a random
number<02:56:48.080><c> between</c><02:56:48.640><c> zero</c><02:56:48.960><c> and</c><02:56:49.120><c> five</c><02:56:49.840><c> add</c><02:56:50.160><c> one</c>

02:56:50.710 --> 02:56:50.720 align:start position:0%
number between zero and five add one
 

02:56:50.720 --> 02:56:52.550 align:start position:0%
number between zero and five add one
that<02:56:50.960><c> gives</c><02:56:51.200><c> us</c><02:56:51.359><c> a</c><02:56:51.520><c> random</c><02:56:51.840><c> number</c><02:56:52.080><c> between</c>

02:56:52.550 --> 02:56:52.560 align:start position:0%
that gives us a random number between
 

02:56:52.560 --> 02:56:54.790 align:start position:0%
that gives us a random number between
one<02:56:52.800><c> and</c><02:56:52.960><c> six</c><02:56:53.600><c> and</c><02:56:53.840><c> let's</c><02:56:54.080><c> just</c><02:56:54.240><c> test</c><02:56:54.560><c> that</c>

02:56:54.790 --> 02:56:54.800 align:start position:0%
one and six and let's just test that
 

02:56:54.800 --> 02:56:57.510 align:start position:0%
one and six and let's just test that
theory<02:56:55.439><c> so</c><02:56:55.600><c> i'm</c><02:56:55.760><c> going</c><02:56:55.920><c> to</c><02:56:56.080><c> use</c><02:56:56.319><c> printf</c><02:56:57.120><c> and</c><02:56:57.359><c> we</c>

02:56:57.510 --> 02:56:57.520 align:start position:0%
theory so i'm going to use printf and we
 

02:56:57.520 --> 02:56:59.910 align:start position:0%
theory so i'm going to use printf and we
are<02:56:57.680><c> displaying</c><02:56:58.399><c> an</c><02:56:58.640><c> integer</c>

02:56:59.910 --> 02:56:59.920 align:start position:0%
are displaying an integer
 

02:56:59.920 --> 02:57:02.309 align:start position:0%
are displaying an integer
and<02:57:00.240><c> let's</c><02:57:00.479><c> display</c><02:57:01.040><c> number</c><02:57:01.439><c> one</c><02:57:02.000><c> so</c><02:57:02.160><c> we</c>

02:57:02.309 --> 02:57:02.319 align:start position:0%
and let's display number one so we
 

02:57:02.319 --> 02:57:04.550 align:start position:0%
and let's display number one so we
should<02:57:02.640><c> have</c><02:57:02.880><c> a</c><02:57:03.040><c> random</c><02:57:03.359><c> number</c><02:57:03.680><c> between</c><02:57:04.240><c> one</c>

02:57:04.550 --> 02:57:04.560 align:start position:0%
should have a random number between one
 

02:57:04.560 --> 02:57:05.750 align:start position:0%
should have a random number between one
and<02:57:04.880><c> six</c>

02:57:05.750 --> 02:57:05.760 align:start position:0%
and six
 

02:57:05.760 --> 02:57:08.150 align:start position:0%
and six
and<02:57:05.920><c> our</c><02:57:06.080><c> random</c><02:57:06.399><c> number</c><02:57:07.040><c> is</c><02:57:07.279><c> two</c><02:57:07.680><c> and</c><02:57:07.920><c> if</c><02:57:08.080><c> i</c>

02:57:08.150 --> 02:57:08.160 align:start position:0%
and our random number is two and if i
 

02:57:08.160 --> 02:57:09.510 align:start position:0%
and our random number is two and if i
run<02:57:08.319><c> this</c><02:57:08.479><c> again</c><02:57:08.800><c> this</c><02:57:08.960><c> will</c><02:57:09.120><c> be</c><02:57:09.200><c> a</c><02:57:09.279><c> different</c>

02:57:09.510 --> 02:57:09.520 align:start position:0%
run this again this will be a different
 

02:57:09.520 --> 02:57:12.230 align:start position:0%
run this again this will be a different
number<02:57:09.840><c> probably</c><02:57:10.560><c> yup</c><02:57:10.960><c> six</c><02:57:11.520><c> okay</c><02:57:11.760><c> now</c><02:57:12.000><c> if</c><02:57:12.160><c> i</c>

02:57:12.230 --> 02:57:12.240 align:start position:0%
number probably yup six okay now if i
 

02:57:12.240 --> 02:57:13.910 align:start position:0%
number probably yup six okay now if i
need<02:57:12.479><c> to</c><02:57:12.640><c> generate</c><02:57:13.200><c> a</c><02:57:13.359><c> couple</c><02:57:13.600><c> different</c>

02:57:13.910 --> 02:57:13.920 align:start position:0%
need to generate a couple different
 

02:57:13.920 --> 02:57:16.389 align:start position:0%
need to generate a couple different
random<02:57:14.240><c> numbers</c><02:57:14.800><c> i</c><02:57:14.960><c> can</c><02:57:15.120><c> just</c><02:57:15.359><c> use</c><02:57:15.760><c> this</c><02:57:16.080><c> rand</c>

02:57:16.389 --> 02:57:16.399 align:start position:0%
random numbers i can just use this rand
 

02:57:16.399 --> 02:57:18.150 align:start position:0%
random numbers i can just use this rand
function<02:57:16.720><c> again</c><02:57:17.200><c> so</c><02:57:17.359><c> let's</c><02:57:17.600><c> say</c><02:57:17.760><c> we</c><02:57:18.000><c> are</c>

02:57:18.150 --> 02:57:18.160 align:start position:0%
function again so let's say we are
 

02:57:18.160 --> 02:57:19.830 align:start position:0%
function again so let's say we are
rolling<02:57:18.560><c> three</c><02:57:18.800><c> dice</c>

02:57:19.830 --> 02:57:19.840 align:start position:0%
rolling three dice
 

02:57:19.840 --> 02:57:22.389 align:start position:0%
rolling three dice
number<02:57:20.160><c> one</c><02:57:20.640><c> number</c><02:57:20.960><c> two</c><02:57:21.359><c> and</c><02:57:21.600><c> number</c><02:57:21.920><c> three</c>

02:57:22.389 --> 02:57:22.399 align:start position:0%
number one number two and number three
 

02:57:22.399 --> 02:57:24.230 align:start position:0%
number one number two and number three
and<02:57:22.479><c> then</c><02:57:22.640><c> i'll</c><02:57:22.800><c> print</c><02:57:22.960><c> these</c><02:57:23.200><c> as</c><02:57:23.279><c> well</c>

02:57:24.230 --> 02:57:24.240 align:start position:0%
and then i'll print these as well
 

02:57:24.240 --> 02:57:26.630 align:start position:0%
and then i'll print these as well
so<02:57:24.479><c> number</c><02:57:24.800><c> one</c><02:57:25.200><c> number</c><02:57:25.520><c> two</c><02:57:26.080><c> and</c><02:57:26.319><c> number</c>

02:57:26.630 --> 02:57:26.640 align:start position:0%
so number one number two and number
 

02:57:26.640 --> 02:57:29.110 align:start position:0%
so number one number two and number
three<02:57:27.279><c> and</c><02:57:27.520><c> i'll</c><02:57:27.760><c> add</c><02:57:28.000><c> a</c><02:57:28.160><c> new</c><02:57:28.319><c> line</c><02:57:28.560><c> character</c>

02:57:29.110 --> 02:57:29.120 align:start position:0%
three and i'll add a new line character
 

02:57:29.120 --> 02:57:31.349 align:start position:0%
three and i'll add a new line character
after<02:57:29.359><c> each</c><02:57:29.520><c> of</c><02:57:29.600><c> these</c><02:57:29.760><c> print</c><02:57:30.000><c> statements</c>

02:57:31.349 --> 02:57:31.359 align:start position:0%
after each of these print statements
 

02:57:31.359 --> 02:57:33.990 align:start position:0%
after each of these print statements
okay<02:57:31.680><c> so</c><02:57:32.240><c> this</c><02:57:32.560><c> will</c><02:57:32.800><c> give</c><02:57:33.040><c> us</c><02:57:33.439><c> three</c><02:57:33.680><c> random</c>

02:57:33.990 --> 02:57:34.000 align:start position:0%
okay so this will give us three random
 

02:57:34.000 --> 02:57:36.630 align:start position:0%
okay so this will give us three random
numbers<02:57:34.399><c> between</c><02:57:34.800><c> one</c><02:57:35.040><c> and</c><02:57:35.200><c> six</c><02:57:36.000><c> one</c><02:57:36.240><c> three</c>

02:57:36.630 --> 02:57:36.640 align:start position:0%
numbers between one and six one three
 

02:57:36.640 --> 02:57:37.910 align:start position:0%
numbers between one and six one three
one

02:57:37.910 --> 02:57:37.920 align:start position:0%
one
 

02:57:37.920 --> 02:57:39.590 align:start position:0%
one
three<02:57:38.240><c> five</c><02:57:38.560><c> six</c>

02:57:39.590 --> 02:57:39.600 align:start position:0%
three five six
 

02:57:39.600 --> 02:57:40.790 align:start position:0%
three five six
now<02:57:39.760><c> it</c><02:57:39.920><c> is</c><02:57:40.080><c> important</c><02:57:40.479><c> that</c><02:57:40.640><c> we're</c>

02:57:40.790 --> 02:57:40.800 align:start position:0%
now it is important that we're
 

02:57:40.800 --> 02:57:42.469 align:start position:0%
now it is important that we're
generating<02:57:41.279><c> a</c><02:57:41.279><c> random</c><02:57:41.680><c> seed</c><02:57:42.000><c> let</c><02:57:42.160><c> me</c><02:57:42.240><c> show</c><02:57:42.399><c> you</c>

02:57:42.469 --> 02:57:42.479 align:start position:0%
generating a random seed let me show you
 

02:57:42.479 --> 02:57:44.870 align:start position:0%
generating a random seed let me show you
what<02:57:42.640><c> happens</c><02:57:42.880><c> when</c><02:57:43.040><c> i</c><02:57:43.120><c> take</c><02:57:43.359><c> this</c><02:57:43.520><c> out</c>

02:57:44.870 --> 02:57:44.880 align:start position:0%
what happens when i take this out
 

02:57:44.880 --> 02:57:46.550 align:start position:0%
what happens when i take this out
so<02:57:45.040><c> this</c><02:57:45.200><c> will</c><02:57:45.359><c> give</c><02:57:45.520><c> us</c><02:57:45.680><c> the</c><02:57:45.840><c> same</c><02:57:46.080><c> numbers</c>

02:57:46.550 --> 02:57:46.560 align:start position:0%
so this will give us the same numbers
 

02:57:46.560 --> 02:57:49.269 align:start position:0%
so this will give us the same numbers
over<02:57:46.800><c> and</c><02:57:46.880><c> over</c><02:57:47.120><c> again</c><02:57:47.680><c> six</c><02:57:47.920><c> six</c><02:57:48.240><c> five</c>

02:57:49.269 --> 02:57:49.279 align:start position:0%
over and over again six six five
 

02:57:49.279 --> 02:57:50.790 align:start position:0%
over and over again six six five
six<02:57:49.520><c> six</c><02:57:49.760><c> five</c>

02:57:50.790 --> 02:57:50.800 align:start position:0%
six six five
 

02:57:50.800 --> 02:57:52.950 align:start position:0%
six six five
and<02:57:51.200><c> six</c><02:57:51.359><c> six</c><02:57:51.600><c> five</c><02:57:52.160><c> so</c><02:57:52.319><c> that's</c><02:57:52.560><c> why</c><02:57:52.720><c> it's</c>

02:57:52.950 --> 02:57:52.960 align:start position:0%
and six six five so that's why it's
 

02:57:52.960 --> 02:57:55.110 align:start position:0%
and six six five so that's why it's
important<02:57:53.359><c> that</c><02:57:53.520><c> we</c><02:57:53.680><c> use</c><02:57:53.920><c> a</c><02:57:54.160><c> seed</c><02:57:54.560><c> for</c><02:57:54.800><c> random</c>

02:57:55.110 --> 02:57:55.120 align:start position:0%
important that we use a seed for random
 

02:57:55.120 --> 02:57:57.190 align:start position:0%
important that we use a seed for random
numbers<02:57:55.840><c> now</c><02:57:56.080><c> another</c><02:57:56.319><c> thing</c><02:57:56.560><c> too</c><02:57:56.960><c> if</c><02:57:57.120><c> you</c>

02:57:57.190 --> 02:57:57.200 align:start position:0%
numbers now another thing too if you
 

02:57:57.200 --> 02:57:58.950 align:start position:0%
numbers now another thing too if you
need<02:57:57.359><c> a</c><02:57:57.439><c> larger</c><02:57:57.840><c> number</c><02:57:58.240><c> you</c><02:57:58.399><c> can</c><02:57:58.479><c> just</c><02:57:58.640><c> change</c>

02:57:58.950 --> 02:57:58.960 align:start position:0%
need a larger number you can just change
 

02:57:58.960 --> 02:58:01.030 align:start position:0%
need a larger number you can just change
this<02:57:59.120><c> number</c><02:57:59.760><c> for</c><02:58:00.000><c> example</c><02:58:00.479><c> i</c><02:58:00.560><c> play</c><02:58:00.720><c> a</c><02:58:00.800><c> lot</c><02:58:00.960><c> of</c>

02:58:01.030 --> 02:58:01.040 align:start position:0%
this number for example i play a lot of
 

02:58:01.040 --> 02:58:02.950 align:start position:0%
this number for example i play a lot of
dungeons<02:58:01.520><c> and</c><02:58:01.600><c> dragons</c><02:58:02.160><c> so</c><02:58:02.319><c> i</c><02:58:02.479><c> may</c><02:58:02.720><c> need</c><02:58:02.880><c> to</c>

02:58:02.950 --> 02:58:02.960 align:start position:0%
dungeons and dragons so i may need to
 

02:58:02.960 --> 02:58:05.429 align:start position:0%
dungeons and dragons so i may need to
roll<02:58:03.279><c> a</c><02:58:03.439><c> 20-sided</c><02:58:04.080><c> dice</c><02:58:04.640><c> so</c><02:58:04.800><c> i</c><02:58:04.880><c> can</c><02:58:05.040><c> just</c><02:58:05.200><c> set</c>

02:58:05.429 --> 02:58:05.439 align:start position:0%
roll a 20-sided dice so i can just set
 

02:58:05.439 --> 02:58:07.910 align:start position:0%
roll a 20-sided dice so i can just set
this<02:58:05.680><c> to</c><02:58:06.000><c> 20.</c>

02:58:07.910 --> 02:58:07.920 align:start position:0%
this to 20.
 

02:58:07.920 --> 02:58:09.590 align:start position:0%
this to 20.
so<02:58:08.240><c> 288</c>

02:58:09.590 --> 02:58:09.600 align:start position:0%
so 288
 

02:58:09.600 --> 02:58:12.790 align:start position:0%
so 288
and<02:58:09.840><c> let's</c><02:58:10.080><c> try</c><02:58:10.240><c> this</c><02:58:10.399><c> again</c><02:58:10.960><c> 12-5-4</c><02:58:12.240><c> so</c><02:58:12.560><c> yeah</c>

02:58:12.790 --> 02:58:12.800 align:start position:0%
and let's try this again 12-5-4 so yeah
 

02:58:12.800 --> 02:58:14.070 align:start position:0%
and let's try this again 12-5-4 so yeah
that's<02:58:12.960><c> how</c><02:58:13.120><c> to</c><02:58:13.279><c> generate</c><02:58:13.600><c> some</c><02:58:13.760><c> random</c>

02:58:14.070 --> 02:58:14.080 align:start position:0%
that's how to generate some random
 

02:58:14.080 --> 02:58:15.990 align:start position:0%
that's how to generate some random
numbers<02:58:14.479><c> in</c><02:58:14.640><c> c</c><02:58:15.040><c> if</c><02:58:15.120><c> you</c><02:58:15.279><c> would</c><02:58:15.359><c> like</c><02:58:15.520><c> a</c><02:58:15.600><c> copy</c><02:58:15.920><c> of</c>

02:58:15.990 --> 02:58:16.000 align:start position:0%
numbers in c if you would like a copy of
 

02:58:16.000 --> 02:58:17.670 align:start position:0%
numbers in c if you would like a copy of
this<02:58:16.160><c> code</c><02:58:16.479><c> i'll</c><02:58:16.640><c> post</c><02:58:16.880><c> this</c><02:58:17.120><c> to</c><02:58:17.200><c> the</c><02:58:17.359><c> comment</c>

02:58:17.670 --> 02:58:17.680 align:start position:0%
this code i'll post this to the comment
 

02:58:17.680 --> 02:58:19.910 align:start position:0%
this code i'll post this to the comment
section<02:58:18.080><c> down</c><02:58:18.240><c> below</c><02:58:18.800><c> and</c><02:58:19.040><c> well</c><02:58:19.439><c> yeah</c><02:58:19.680><c> that's</c>

02:58:19.910 --> 02:58:19.920 align:start position:0%
section down below and well yeah that's
 

02:58:19.920 --> 02:58:23.349 align:start position:0%
section down below and well yeah that's
how<02:58:20.080><c> to</c><02:58:20.240><c> generate</c><02:58:20.560><c> some</c><02:58:20.720><c> random</c><02:58:21.040><c> numbers</c><02:58:21.680><c> in</c><02:58:21.920><c> c</c>

02:58:23.349 --> 02:58:23.359 align:start position:0%
how to generate some random numbers in c
 

02:58:23.359 --> 02:58:25.429 align:start position:0%
how to generate some random numbers in c
hey<02:58:23.600><c> y'all</c><02:58:24.000><c> what's</c><02:58:24.240><c> going</c><02:58:24.399><c> on</c><02:58:24.640><c> everybody</c><02:58:25.200><c> it's</c>

02:58:25.429 --> 02:58:25.439 align:start position:0%
hey y'all what's going on everybody it's
 

02:58:25.439 --> 02:58:27.110 align:start position:0%
hey y'all what's going on everybody it's
you<02:58:25.520><c> bro</c><02:58:25.840><c> hope</c><02:58:26.080><c> you're</c><02:58:26.160><c> doing</c><02:58:26.479><c> well</c><02:58:26.800><c> and</c><02:58:26.960><c> in</c>

02:58:27.110 --> 02:58:27.120 align:start position:0%
you bro hope you're doing well and in
 

02:58:27.120 --> 02:58:28.710 align:start position:0%
you bro hope you're doing well and in
this<02:58:27.279><c> video</c><02:58:27.600><c> we're</c><02:58:27.760><c> going</c><02:58:27.920><c> to</c><02:58:28.080><c> create</c><02:58:28.399><c> a</c>

02:58:28.710 --> 02:58:28.720 align:start position:0%
this video we're going to create a
 

02:58:28.720 --> 02:58:31.910 align:start position:0%
this video we're going to create a
number<02:58:29.120><c> guessing</c><02:58:29.439><c> game</c><02:58:29.920><c> in</c><02:58:30.240><c> c</c><02:58:30.800><c> so</c><02:58:31.279><c> sit</c><02:58:31.520><c> back</c>

02:58:31.910 --> 02:58:31.920 align:start position:0%
number guessing game in c so sit back
 

02:58:31.920 --> 02:58:35.750 align:start position:0%
number guessing game in c so sit back
relax<02:58:32.560><c> and</c><02:58:32.720><c> enjoy</c><02:58:33.120><c> the</c><02:58:33.279><c> show</c>

02:58:35.750 --> 02:58:35.760 align:start position:0%
 
 

02:58:35.760 --> 02:58:37.429 align:start position:0%
 
if<02:58:36.000><c> you</c><02:58:36.080><c> find</c><02:58:36.319><c> this</c><02:58:36.479><c> video</c><02:58:36.720><c> helpful</c><02:58:37.120><c> please</c>

02:58:37.429 --> 02:58:37.439 align:start position:0%
if you find this video helpful please
 

02:58:37.439 --> 02:58:40.389 align:start position:0%
if you find this video helpful please
remember<02:58:37.840><c> to</c><02:58:38.319><c> like</c><02:58:38.880><c> comment</c><02:58:39.520><c> and</c><02:58:39.760><c> subscribe</c>

02:58:40.389 --> 02:58:40.399 align:start position:0%
remember to like comment and subscribe
 

02:58:40.399 --> 02:58:42.309 align:start position:0%
remember to like comment and subscribe
your<02:58:40.720><c> support</c><02:58:41.120><c> will</c><02:58:41.279><c> help</c><02:58:41.520><c> keep</c><02:58:41.760><c> this</c><02:58:42.000><c> channel</c>

02:58:42.309 --> 02:58:42.319 align:start position:0%
your support will help keep this channel
 

02:58:42.319 --> 02:58:44.870 align:start position:0%
your support will help keep this channel
running<02:58:43.200><c> hey</c><02:58:43.600><c> everybody</c><02:58:44.240><c> so</c><02:58:44.399><c> now</c><02:58:44.560><c> that</c><02:58:44.720><c> we</c>

02:58:44.870 --> 02:58:44.880 align:start position:0%
running hey everybody so now that we
 

02:58:44.880 --> 02:58:46.870 align:start position:0%
running hey everybody so now that we
know<02:58:45.040><c> how</c><02:58:45.200><c> to</c><02:58:45.359><c> generate</c><02:58:45.920><c> some</c><02:58:46.240><c> pseudo-random</c>

02:58:46.870 --> 02:58:46.880 align:start position:0%
know how to generate some pseudo-random
 

02:58:46.880 --> 02:58:48.630 align:start position:0%
know how to generate some pseudo-random
numbers<02:58:47.279><c> in</c><02:58:47.520><c> c</c><02:58:47.840><c> i</c><02:58:47.920><c> thought</c><02:58:48.080><c> this</c><02:58:48.240><c> would</c><02:58:48.399><c> be</c><02:58:48.479><c> a</c>

02:58:48.630 --> 02:58:48.640 align:start position:0%
numbers in c i thought this would be a
 

02:58:48.640 --> 02:58:50.870 align:start position:0%
numbers in c i thought this would be a
good<02:58:48.800><c> opportunity</c><02:58:49.520><c> for</c><02:58:49.760><c> us</c><02:58:50.080><c> to</c><02:58:50.319><c> create</c><02:58:50.640><c> a</c>

02:58:50.870 --> 02:58:50.880 align:start position:0%
good opportunity for us to create a
 

02:58:50.880 --> 02:58:52.550 align:start position:0%
good opportunity for us to create a
number<02:58:51.120><c> guessing</c><02:58:51.520><c> game</c><02:58:51.920><c> if</c><02:58:52.080><c> we're</c><02:58:52.240><c> working</c>

02:58:52.550 --> 02:58:52.560 align:start position:0%
number guessing game if we're working
 

02:58:52.560 --> 02:58:54.389 align:start position:0%
number guessing game if we're working
with<02:58:52.800><c> pseudorandom</c><02:58:53.520><c> numbers</c><02:58:53.840><c> be</c><02:58:54.080><c> sure</c><02:58:54.240><c> to</c>

02:58:54.389 --> 02:58:54.399 align:start position:0%
with pseudorandom numbers be sure to
 

02:58:54.399 --> 02:58:56.150 align:start position:0%
with pseudorandom numbers be sure to
include<02:58:54.880><c> at</c><02:58:54.960><c> least</c><02:58:55.359><c> these</c><02:58:55.600><c> three</c><02:58:55.840><c> header</c>

02:58:56.150 --> 02:58:56.160 align:start position:0%
include at least these three header
 

02:58:56.160 --> 02:58:58.070 align:start position:0%
include at least these three header
files<02:58:56.479><c> at</c><02:58:56.640><c> the</c><02:58:56.720><c> top</c><02:58:56.960><c> of</c><02:58:57.040><c> your</c><02:58:57.279><c> program</c><02:58:57.920><c> so</c>

02:58:58.070 --> 02:58:58.080 align:start position:0%
files at the top of your program so
 

02:58:58.080 --> 02:59:02.309 align:start position:0%
files at the top of your program so
let's<02:58:58.399><c> generate</c><02:58:58.800><c> two</c><02:58:59.040><c> constants</c><02:58:59.840><c> min</c><02:59:00.240><c> and</c><02:59:00.560><c> max</c>

02:59:02.309 --> 02:59:02.319 align:start position:0%
let's generate two constants min and max
 

02:59:02.319 --> 02:59:04.790 align:start position:0%
let's generate two constants min and max
const<02:59:03.040><c> int</c><02:59:03.439><c> and</c><02:59:03.680><c> a</c><02:59:03.760><c> naming</c><02:59:04.080><c> convention</c><02:59:04.560><c> for</c>

02:59:04.790 --> 02:59:04.800 align:start position:0%
const int and a naming convention for
 

02:59:04.800 --> 02:59:06.870 align:start position:0%
const int and a naming convention for
constants<02:59:05.439><c> is</c><02:59:05.600><c> to</c><02:59:05.760><c> make</c><02:59:06.000><c> all</c><02:59:06.160><c> of</c><02:59:06.319><c> the</c><02:59:06.479><c> letters</c>

02:59:06.870 --> 02:59:06.880 align:start position:0%
constants is to make all of the letters
 

02:59:06.880 --> 02:59:08.150 align:start position:0%
constants is to make all of the letters
uppercase

02:59:08.150 --> 02:59:08.160 align:start position:0%
uppercase
 

02:59:08.160 --> 02:59:10.870 align:start position:0%
uppercase
so<02:59:08.399><c> minimum</c><02:59:09.040><c> will</c><02:59:09.279><c> be</c><02:59:09.520><c> the</c><02:59:09.840><c> minimum</c><02:59:10.479><c> number</c>

02:59:10.870 --> 02:59:10.880 align:start position:0%
so minimum will be the minimum number
 

02:59:10.880 --> 02:59:12.870 align:start position:0%
so minimum will be the minimum number
that<02:59:11.040><c> we</c><02:59:11.200><c> will</c><02:59:11.439><c> generate</c><02:59:12.080><c> when</c><02:59:12.240><c> we</c><02:59:12.479><c> generate</c><02:59:12.800><c> a</c>

02:59:12.870 --> 02:59:12.880 align:start position:0%
that we will generate when we generate a
 

02:59:12.880 --> 02:59:14.790 align:start position:0%
that we will generate when we generate a
random<02:59:13.200><c> number</c><02:59:13.840><c> so</c><02:59:14.080><c> let's</c><02:59:14.240><c> pick</c><02:59:14.479><c> a</c><02:59:14.560><c> number</c>

02:59:14.790 --> 02:59:14.800 align:start position:0%
random number so let's pick a number
 

02:59:14.800 --> 02:59:17.670 align:start position:0%
random number so let's pick a number
between<02:59:15.120><c> maybe</c><02:59:15.520><c> one</c><02:59:15.760><c> and</c><02:59:15.920><c> one</c><02:59:16.080><c> hundred</c><02:59:16.880><c> so</c><02:59:17.279><c> min</c>

02:59:17.670 --> 02:59:17.680 align:start position:0%
between maybe one and one hundred so min
 

02:59:17.680 --> 02:59:18.870 align:start position:0%
between maybe one and one hundred so min
will<02:59:17.840><c> be</c><02:59:18.080><c> one</c>

02:59:18.870 --> 02:59:18.880 align:start position:0%
will be one
 

02:59:18.880 --> 02:59:21.830 align:start position:0%
will be one
and<02:59:19.359><c> max</c><02:59:19.920><c> will</c><02:59:20.160><c> be</c><02:59:20.399><c> 100</c><02:59:21.040><c> but</c><02:59:21.279><c> feel</c><02:59:21.520><c> free</c><02:59:21.760><c> to</c>

02:59:21.830 --> 02:59:21.840 align:start position:0%
and max will be 100 but feel free to
 

02:59:21.840 --> 02:59:23.349 align:start position:0%
and max will be 100 but feel free to
take<02:59:22.000><c> the</c><02:59:22.080><c> liberty</c><02:59:22.560><c> to</c><02:59:22.720><c> choose</c><02:59:22.960><c> some</c><02:59:23.120><c> other</c>

02:59:23.349 --> 02:59:23.359 align:start position:0%
take the liberty to choose some other
 

02:59:23.359 --> 02:59:26.389 align:start position:0%
take the liberty to choose some other
numbers<02:59:24.080><c> and</c><02:59:24.319><c> we'll</c><02:59:24.560><c> need</c><02:59:24.880><c> int</c><02:59:25.680><c> guess</c><02:59:26.240><c> to</c>

02:59:26.389 --> 02:59:26.399 align:start position:0%
numbers and we'll need int guess to
 

02:59:26.399 --> 02:59:28.389 align:start position:0%
numbers and we'll need int guess to
store<02:59:26.800><c> a</c><02:59:26.960><c> user's</c><02:59:27.359><c> guess</c>

02:59:28.389 --> 02:59:28.399 align:start position:0%
store a user's guess
 

02:59:28.399 --> 02:59:31.590 align:start position:0%
store a user's guess
int<02:59:29.040><c> guesses</c><02:59:29.680><c> to</c><02:59:29.840><c> keep</c><02:59:30.080><c> track</c><02:59:30.319><c> of</c><02:59:30.399><c> the</c><02:59:30.560><c> guesses</c>

02:59:31.590 --> 02:59:31.600 align:start position:0%
int guesses to keep track of the guesses
 

02:59:31.600 --> 02:59:33.030 align:start position:0%
int guesses to keep track of the guesses
and<02:59:31.920><c> int</c>

02:59:33.030 --> 02:59:33.040 align:start position:0%
and int
 

02:59:33.040 --> 02:59:35.269 align:start position:0%
and int
answer<02:59:33.920><c> okay</c><02:59:34.240><c> now</c><02:59:34.479><c> if</c><02:59:34.640><c> we're</c><02:59:34.880><c> working</c><02:59:35.120><c> with</c>

02:59:35.269 --> 02:59:35.279 align:start position:0%
answer okay now if we're working with
 

02:59:35.279 --> 02:59:37.510 align:start position:0%
answer okay now if we're working with
random<02:59:35.680><c> numbers</c><02:59:36.160><c> we'll</c><02:59:36.399><c> want</c><02:59:36.560><c> to</c><02:59:36.800><c> create</c><02:59:37.200><c> a</c>

02:59:37.510 --> 02:59:37.520 align:start position:0%
random numbers we'll want to create a
 

02:59:37.520 --> 02:59:39.510 align:start position:0%
random numbers we'll want to create a
seed<02:59:38.160><c> and</c><02:59:38.319><c> to</c><02:59:38.479><c> do</c><02:59:38.640><c> that</c><02:59:38.800><c> we</c><02:59:38.880><c> can</c><02:59:39.040><c> actually</c><02:59:39.359><c> use</c>

02:59:39.510 --> 02:59:39.520 align:start position:0%
seed and to do that we can actually use
 

02:59:39.520 --> 02:59:42.150 align:start position:0%
seed and to do that we can actually use
the<02:59:39.680><c> current</c><02:59:40.000><c> time</c><02:59:40.560><c> so</c><02:59:40.800><c> use</c><02:59:41.120><c> the</c><02:59:41.359><c> s</c><02:59:41.760><c> rand</c>

02:59:42.150 --> 02:59:42.160 align:start position:0%
the current time so use the s rand
 

02:59:42.160 --> 02:59:46.389 align:start position:0%
the current time so use the s rand
function<02:59:43.120><c> and</c><02:59:43.279><c> pass</c><02:59:43.680><c> in</c><02:59:44.000><c> time</c><02:59:44.720><c> pass</c><02:59:45.120><c> in</c><02:59:45.359><c> zero</c>

02:59:46.389 --> 02:59:46.399 align:start position:0%
function and pass in time pass in zero
 

02:59:46.399 --> 02:59:49.269 align:start position:0%
function and pass in time pass in zero
so<02:59:46.640><c> this</c><02:59:47.120><c> uses</c><02:59:47.840><c> the</c><02:59:48.160><c> current</c>

02:59:49.269 --> 02:59:49.279 align:start position:0%
so this uses the current
 

02:59:49.279 --> 02:59:52.550 align:start position:0%
so this uses the current
time<02:59:50.160><c> as</c><02:59:50.640><c> a</c><02:59:50.960><c> seed</c><02:59:51.439><c> to</c><02:59:51.680><c> generate</c><02:59:52.080><c> some</c><02:59:52.240><c> random</c>

02:59:52.550 --> 02:59:52.560 align:start position:0%
time as a seed to generate some random
 

02:59:52.560 --> 02:59:54.070 align:start position:0%
time as a seed to generate some random
numbers

02:59:54.070 --> 02:59:54.080 align:start position:0%
numbers
 

02:59:54.080 --> 02:59:56.389 align:start position:0%
numbers
and<02:59:54.240><c> if</c><02:59:54.399><c> we</c><02:59:54.560><c> need</c><02:59:54.800><c> a</c><02:59:55.040><c> random</c><02:59:55.359><c> number</c><02:59:55.760><c> between</c>

02:59:56.389 --> 02:59:56.399 align:start position:0%
and if we need a random number between
 

02:59:56.399 --> 02:59:59.510 align:start position:0%
and if we need a random number between
these<02:59:56.640><c> two</c><02:59:56.880><c> constants</c><02:59:57.760><c> min</c><02:59:58.240><c> and</c><02:59:58.479><c> max</c><02:59:59.200><c> this</c><02:59:59.439><c> is</c>

02:59:59.510 --> 02:59:59.520 align:start position:0%
these two constants min and max this is
 

02:59:59.520 --> 03:00:00.710 align:start position:0%
these two constants min and max this is
what<02:59:59.680><c> we</c><02:59:59.840><c> can</c><03:00:00.000><c> do</c>

03:00:00.710 --> 03:00:00.720 align:start position:0%
what we can do
 

03:00:00.720 --> 03:00:03.590 align:start position:0%
what we can do
so<03:00:00.960><c> we</c><03:00:01.120><c> will</c><03:00:01.279><c> assign</c><03:00:01.840><c> answer</c><03:00:02.720><c> set</c><03:00:02.960><c> this</c><03:00:03.200><c> equal</c>

03:00:03.590 --> 03:00:03.600 align:start position:0%
so we will assign answer set this equal
 

03:00:03.600 --> 03:00:04.550 align:start position:0%
so we will assign answer set this equal
to

03:00:04.550 --> 03:00:04.560 align:start position:0%
to
 

03:00:04.560 --> 03:00:06.389 align:start position:0%
to
call<03:00:04.720><c> the</c><03:00:04.960><c> rand</c><03:00:05.279><c> function</c>

03:00:06.389 --> 03:00:06.399 align:start position:0%
call the rand function
 

03:00:06.399 --> 03:00:09.110 align:start position:0%
call the rand function
and<03:00:06.720><c> use</c><03:00:07.040><c> the</c><03:00:07.439><c> modulus</c><03:00:08.000><c> operator</c>

03:00:09.110 --> 03:00:09.120 align:start position:0%
and use the modulus operator
 

03:00:09.120 --> 03:00:11.910 align:start position:0%
and use the modulus operator
and<03:00:09.279><c> set</c><03:00:09.439><c> this</c><03:00:09.600><c> to</c><03:00:09.840><c> max</c><03:00:10.560><c> and</c><03:00:10.880><c> then</c><03:00:11.040><c> we</c><03:00:11.200><c> will</c><03:00:11.439><c> add</c>

03:00:11.910 --> 03:00:11.920 align:start position:0%
and set this to max and then we will add
 

03:00:11.920 --> 03:00:14.389 align:start position:0%
and set this to max and then we will add
min<03:00:12.399><c> as</c><03:00:12.640><c> an</c><03:00:12.800><c> offset</c>

03:00:14.389 --> 03:00:14.399 align:start position:0%
min as an offset
 

03:00:14.399 --> 03:00:16.550 align:start position:0%
min as an offset
so<03:00:14.720><c> this</c><03:00:14.960><c> will</c><03:00:15.200><c> generate</c><03:00:15.680><c> a</c><03:00:15.840><c> random</c><03:00:16.240><c> number</c>

03:00:16.550 --> 03:00:16.560 align:start position:0%
so this will generate a random number
 

03:00:16.560 --> 03:00:20.389 align:start position:0%
so this will generate a random number
between<03:00:17.120><c> these</c><03:00:17.359><c> two</c><03:00:17.600><c> constants</c><03:00:18.720><c> 1</c><03:00:19.120><c> and</c><03:00:19.359><c> 100</c><03:00:20.160><c> or</c>

03:00:20.389 --> 03:00:20.399 align:start position:0%
between these two constants 1 and 100 or
 

03:00:20.399 --> 03:00:21.990 align:start position:0%
between these two constants 1 and 100 or
some<03:00:20.640><c> other</c><03:00:20.880><c> numbers</c><03:00:21.279><c> if</c><03:00:21.439><c> you</c><03:00:21.520><c> have</c><03:00:21.680><c> something</c>

03:00:21.990 --> 03:00:22.000 align:start position:0%
some other numbers if you have something
 

03:00:22.000 --> 03:00:24.550 align:start position:0%
some other numbers if you have something
different<03:00:22.880><c> so</c><03:00:23.200><c> this</c><03:00:23.359><c> line</c><03:00:23.600><c> of</c><03:00:23.680><c> code</c><03:00:24.080><c> will</c>

03:00:24.550 --> 03:00:24.560 align:start position:0%
different so this line of code will
 

03:00:24.560 --> 03:00:27.429 align:start position:0%
different so this line of code will
generate<03:00:25.279><c> a</c><03:00:25.600><c> random</c><03:00:26.479><c> number</c>

03:00:27.429 --> 03:00:27.439 align:start position:0%
generate a random number
 

03:00:27.439 --> 03:00:28.950 align:start position:0%
generate a random number
between

03:00:28.950 --> 03:00:28.960 align:start position:0%
between
 

03:00:28.960 --> 03:00:29.910 align:start position:0%
between
min

03:00:29.910 --> 03:00:29.920 align:start position:0%
min
 

03:00:29.920 --> 03:00:31.429 align:start position:0%
min
and<03:00:30.319><c> max</c>

03:00:31.429 --> 03:00:31.439 align:start position:0%
and max
 

03:00:31.439 --> 03:00:33.349 align:start position:0%
and max
now<03:00:31.600><c> before</c><03:00:31.920><c> we</c><03:00:32.080><c> actually</c><03:00:32.479><c> move</c><03:00:32.720><c> on</c><03:00:33.040><c> let's</c>

03:00:33.349 --> 03:00:33.359 align:start position:0%
now before we actually move on let's
 

03:00:33.359 --> 03:00:34.710 align:start position:0%
now before we actually move on let's
test<03:00:33.680><c> this</c><03:00:33.920><c> just</c><03:00:34.080><c> to</c><03:00:34.160><c> be</c><03:00:34.319><c> sure</c><03:00:34.560><c> that</c>

03:00:34.710 --> 03:00:34.720 align:start position:0%
test this just to be sure that
 

03:00:34.720 --> 03:00:36.389 align:start position:0%
test this just to be sure that
everything's<03:00:35.120><c> working</c>

03:00:36.389 --> 03:00:36.399 align:start position:0%
everything's working
 

03:00:36.399 --> 03:00:39.030 align:start position:0%
everything's working
so<03:00:36.640><c> let's</c><03:00:36.880><c> print</c><03:00:37.200><c> whatever</c><03:00:37.520><c> the</c><03:00:37.680><c> answer</c><03:00:38.160><c> is</c><03:00:38.800><c> so</c>

03:00:39.030 --> 03:00:39.040 align:start position:0%
so let's print whatever the answer is so
 

03:00:39.040 --> 03:00:40.710 align:start position:0%
so let's print whatever the answer is so
we're<03:00:39.200><c> displaying</c><03:00:39.600><c> an</c><03:00:39.760><c> integer</c><03:00:40.399><c> we</c><03:00:40.560><c> are</c>

03:00:40.710 --> 03:00:40.720 align:start position:0%
we're displaying an integer we are
 

03:00:40.720 --> 03:00:42.150 align:start position:0%
we're displaying an integer we are
displaying

03:00:42.150 --> 03:00:42.160 align:start position:0%
displaying
 

03:00:42.160 --> 03:00:43.190 align:start position:0%
displaying
answer

03:00:43.190 --> 03:00:43.200 align:start position:0%
answer
 

03:00:43.200 --> 03:00:46.230 align:start position:0%
answer
and<03:00:43.439><c> let's</c><03:00:43.680><c> see</c><03:00:43.840><c> what</c><03:00:44.000><c> this</c><03:00:44.240><c> is</c>

03:00:46.230 --> 03:00:46.240 align:start position:0%
and let's see what this is
 

03:00:46.240 --> 03:00:48.790 align:start position:0%
and let's see what this is
so<03:00:46.479><c> my</c><03:00:46.720><c> answer</c><03:00:46.960><c> this</c><03:00:47.200><c> round</c><03:00:47.520><c> is</c><03:00:47.680><c> 73</c><03:00:48.399><c> if</c><03:00:48.479><c> i</c><03:00:48.640><c> run</c>

03:00:48.790 --> 03:00:48.800 align:start position:0%
so my answer this round is 73 if i run
 

03:00:48.800 --> 03:00:51.990 align:start position:0%
so my answer this round is 73 if i run
this<03:00:48.960><c> again</c><03:00:49.600><c> it</c><03:00:49.760><c> is</c><03:00:49.920><c> 93.</c><03:00:50.880><c> now</c><03:00:51.120><c> if</c><03:00:51.279><c> i</c><03:00:51.439><c> change</c>

03:00:51.990 --> 03:00:52.000 align:start position:0%
this again it is 93. now if i change
 

03:00:52.000 --> 03:00:54.150 align:start position:0%
this again it is 93. now if i change
these<03:00:52.240><c> values</c><03:00:52.800><c> we</c><03:00:52.960><c> will</c><03:00:53.120><c> adjust</c><03:00:53.600><c> the</c><03:00:53.760><c> range</c><03:00:54.080><c> in</c>

03:00:54.150 --> 03:00:54.160 align:start position:0%
these values we will adjust the range in
 

03:00:54.160 --> 03:00:56.230 align:start position:0%
these values we will adjust the range in
which<03:00:54.399><c> some</c><03:00:54.640><c> random</c><03:00:54.960><c> numbers</c><03:00:55.279><c> will</c><03:00:55.439><c> generate</c>

03:00:56.230 --> 03:00:56.240 align:start position:0%
which some random numbers will generate
 

03:00:56.240 --> 03:00:59.990 align:start position:0%
which some random numbers will generate
so<03:00:56.399><c> if</c><03:00:56.560><c> i</c><03:00:56.640><c> set</c><03:00:56.960><c> min</c><03:00:57.200><c> to</c><03:00:57.439><c> 100</c><03:00:58.319><c> and</c><03:00:58.479><c> max</c><03:00:58.800><c> to</c><03:00:58.960><c> 1000</c>

03:00:59.990 --> 03:01:00.000 align:start position:0%
so if i set min to 100 and max to 1000
 

03:01:00.000 --> 03:01:02.630 align:start position:0%
so if i set min to 100 and max to 1000
that<03:01:00.240><c> should</c><03:01:00.479><c> change</c><03:01:00.800><c> the</c><03:01:00.960><c> range</c><03:01:01.200><c> of</c><03:01:01.359><c> numbers</c>

03:01:02.630 --> 03:01:02.640 align:start position:0%
that should change the range of numbers
 

03:01:02.640 --> 03:01:06.070 align:start position:0%
that should change the range of numbers
and<03:01:02.880><c> this</c><03:01:03.120><c> time</c><03:01:03.520><c> i</c><03:01:03.680><c> have</c><03:01:04.080><c> 334</c><03:01:05.359><c> but</c><03:01:05.600><c> i'll</c><03:01:05.760><c> change</c>

03:01:06.070 --> 03:01:06.080 align:start position:0%
and this time i have 334 but i'll change
 

03:01:06.080 --> 03:01:08.389 align:start position:0%
and this time i have 334 but i'll change
this<03:01:06.240><c> back</c><03:01:06.560><c> to</c><03:01:06.800><c> 1</c><03:01:07.120><c> and</c><03:01:07.279><c> 100</c>

03:01:08.389 --> 03:01:08.399 align:start position:0%
this back to 1 and 100
 

03:01:08.399 --> 03:01:10.309 align:start position:0%
this back to 1 and 100
okay<03:01:08.720><c> so</c><03:01:08.880><c> we</c><03:01:08.960><c> know</c><03:01:09.279><c> that</c><03:01:09.520><c> we're</c><03:01:09.760><c> generating</c><03:01:10.240><c> a</c>

03:01:10.309 --> 03:01:10.319 align:start position:0%
okay so we know that we're generating a
 

03:01:10.319 --> 03:01:12.309 align:start position:0%
okay so we know that we're generating a
random<03:01:10.640><c> number</c><03:01:10.960><c> so</c><03:01:11.120><c> let's</c><03:01:11.359><c> move</c><03:01:11.600><c> on</c>

03:01:12.309 --> 03:01:12.319 align:start position:0%
random number so let's move on
 

03:01:12.319 --> 03:01:14.870 align:start position:0%
random number so let's move on
let's<03:01:12.560><c> create</c><03:01:12.960><c> a</c><03:01:13.439><c> do</c><03:01:13.680><c> while</c><03:01:14.000><c> loop</c><03:01:14.479><c> so</c><03:01:14.720><c> it's</c>

03:01:14.870 --> 03:01:14.880 align:start position:0%
let's create a do while loop so it's
 

03:01:14.880 --> 03:01:16.870 align:start position:0%
let's create a do while loop so it's
going<03:01:15.040><c> to</c><03:01:15.200><c> take</c><03:01:15.439><c> at</c><03:01:15.680><c> least</c><03:01:16.000><c> one</c><03:01:16.319><c> guess</c><03:01:16.720><c> in</c>

03:01:16.870 --> 03:01:16.880 align:start position:0%
going to take at least one guess in
 

03:01:16.880 --> 03:01:18.710 align:start position:0%
going to take at least one guess in
order<03:01:17.120><c> for</c><03:01:17.279><c> somebody</c><03:01:17.760><c> to</c><03:01:18.000><c> guess</c><03:01:18.240><c> the</c><03:01:18.319><c> correct</c>

03:01:18.710 --> 03:01:18.720 align:start position:0%
order for somebody to guess the correct
 

03:01:18.720 --> 03:01:22.950 align:start position:0%
order for somebody to guess the correct
answer<03:01:20.000><c> so</c><03:01:20.560><c> do</c><03:01:21.200><c> curly</c><03:01:21.520><c> braces</c><03:01:22.319><c> we'll</c><03:01:22.560><c> add</c>

03:01:22.950 --> 03:01:22.960 align:start position:0%
answer so do curly braces we'll add
 

03:01:22.960 --> 03:01:25.510 align:start position:0%
answer so do curly braces we'll add
while<03:01:23.680><c> and</c><03:01:23.920><c> check</c><03:01:24.160><c> a</c><03:01:24.319><c> condition</c><03:01:24.720><c> at</c><03:01:24.880><c> the</c><03:01:25.040><c> end</c>

03:01:25.510 --> 03:01:25.520 align:start position:0%
while and check a condition at the end
 

03:01:25.520 --> 03:01:27.910 align:start position:0%
while and check a condition at the end
and<03:01:25.680><c> the</c><03:01:25.760><c> condition</c><03:01:26.479><c> is</c><03:01:27.120><c> guess</c>

03:01:27.910 --> 03:01:27.920 align:start position:0%
and the condition is guess
 

03:01:27.920 --> 03:01:29.990 align:start position:0%
and the condition is guess
does<03:01:28.319><c> not</c><03:01:28.880><c> equal</c>

03:01:29.990 --> 03:01:30.000 align:start position:0%
does not equal
 

03:01:30.000 --> 03:01:32.710 align:start position:0%
does not equal
answer<03:01:30.960><c> so</c><03:01:31.200><c> let's</c><03:01:31.439><c> create</c><03:01:31.680><c> a</c><03:01:31.760><c> prompt</c><03:01:32.160><c> and</c><03:01:32.399><c> ask</c>

03:01:32.710 --> 03:01:32.720 align:start position:0%
answer so let's create a prompt and ask
 

03:01:32.720 --> 03:01:35.110 align:start position:0%
answer so let's create a prompt and ask
the<03:01:32.880><c> user</c><03:01:33.279><c> to</c><03:01:33.520><c> enter</c><03:01:33.920><c> a</c><03:01:34.160><c> guess</c>

03:01:35.110 --> 03:01:35.120 align:start position:0%
the user to enter a guess
 

03:01:35.120 --> 03:01:37.830 align:start position:0%
the user to enter a guess
enter<03:01:35.760><c> a</c><03:01:36.160><c> guess</c>

03:01:37.830 --> 03:01:37.840 align:start position:0%
enter a guess
 

03:01:37.840 --> 03:01:40.309 align:start position:0%
enter a guess
and<03:01:38.080><c> we</c><03:01:38.240><c> will</c><03:01:38.479><c> use</c><03:01:38.800><c> scanf</c><03:01:39.439><c> to</c><03:01:39.600><c> accept</c><03:01:40.080><c> some</c>

03:01:40.309 --> 03:01:40.319 align:start position:0%
and we will use scanf to accept some
 

03:01:40.319 --> 03:01:43.590 align:start position:0%
and we will use scanf to accept some
user<03:01:40.640><c> input</c><03:01:41.439><c> so</c><03:01:41.760><c> this</c><03:01:42.000><c> is</c><03:01:42.240><c> an</c><03:01:42.479><c> integer</c>

03:01:43.590 --> 03:01:43.600 align:start position:0%
user input so this is an integer
 

03:01:43.600 --> 03:01:45.750 align:start position:0%
user input so this is an integer
and<03:01:43.840><c> we</c><03:01:44.000><c> are</c><03:01:44.080><c> storing</c><03:01:44.479><c> this</c><03:01:44.720><c> within</c>

03:01:45.750 --> 03:01:45.760 align:start position:0%
and we are storing this within
 

03:01:45.760 --> 03:01:49.269 align:start position:0%
and we are storing this within
guess<03:01:46.319><c> so</c><03:01:46.560><c> address</c><03:01:47.040><c> of</c><03:01:47.279><c> operator</c><03:01:48.160><c> guess</c>

03:01:49.269 --> 03:01:49.279 align:start position:0%
guess so address of operator guess
 

03:01:49.279 --> 03:01:51.110 align:start position:0%
guess so address of operator guess
now<03:01:49.439><c> that</c><03:01:49.600><c> we</c><03:01:49.760><c> have</c><03:01:50.000><c> our</c><03:01:50.080><c> user's</c><03:01:50.479><c> guess</c><03:01:50.880><c> let's</c>

03:01:51.110 --> 03:01:51.120 align:start position:0%
now that we have our user's guess let's
 

03:01:51.120 --> 03:01:52.870 align:start position:0%
now that we have our user's guess let's
compare<03:01:51.520><c> it</c><03:01:51.600><c> to</c><03:01:51.760><c> our</c><03:01:51.920><c> answer</c>

03:01:52.870 --> 03:01:52.880 align:start position:0%
compare it to our answer
 

03:01:52.880 --> 03:01:54.710 align:start position:0%
compare it to our answer
so<03:01:53.040><c> we'll</c><03:01:53.200><c> use</c><03:01:53.359><c> an</c><03:01:53.520><c> if</c><03:01:53.680><c> statement</c><03:01:54.319><c> and</c><03:01:54.479><c> check</c>

03:01:54.710 --> 03:01:54.720 align:start position:0%
so we'll use an if statement and check
 

03:01:54.720 --> 03:01:56.870 align:start position:0%
so we'll use an if statement and check
to<03:01:54.880><c> see</c><03:01:55.279><c> if</c><03:01:55.920><c> guess</c>

03:01:56.870 --> 03:01:56.880 align:start position:0%
to see if guess
 

03:01:56.880 --> 03:02:00.309 align:start position:0%
to see if guess
is<03:01:57.520><c> greater</c><03:01:58.160><c> than</c><03:01:58.560><c> answer</c><03:01:59.359><c> so</c><03:01:59.600><c> that</c><03:01:59.760><c> means</c><03:02:00.080><c> a</c>

03:02:00.309 --> 03:02:00.319 align:start position:0%
is greater than answer so that means a
 

03:02:00.319 --> 03:02:02.070 align:start position:0%
is greater than answer so that means a
user<03:02:00.720><c> guessed</c><03:02:01.040><c> a</c><03:02:01.120><c> number</c><03:02:01.359><c> that</c><03:02:01.520><c> was</c><03:02:01.680><c> a</c><03:02:01.840><c> little</c>

03:02:02.070 --> 03:02:02.080 align:start position:0%
user guessed a number that was a little
 

03:02:02.080 --> 03:02:03.269 align:start position:0%
user guessed a number that was a little
too<03:02:02.319><c> high</c>

03:02:03.269 --> 03:02:03.279 align:start position:0%
too high
 

03:02:03.279 --> 03:02:05.750 align:start position:0%
too high
so<03:02:03.520><c> let's</c><03:02:03.840><c> print</c><03:02:04.479><c> a</c><03:02:04.640><c> message</c><03:02:05.040><c> to</c><03:02:05.200><c> let</c><03:02:05.359><c> the</c><03:02:05.520><c> user</c>

03:02:05.750 --> 03:02:05.760 align:start position:0%
so let's print a message to let the user
 

03:02:05.760 --> 03:02:07.349 align:start position:0%
so let's print a message to let the user
know

03:02:07.349 --> 03:02:07.359 align:start position:0%
know
 

03:02:07.359 --> 03:02:08.070 align:start position:0%
know
to

03:02:08.070 --> 03:02:08.080 align:start position:0%
to
 

03:02:08.080 --> 03:02:10.469 align:start position:0%
to
hi

03:02:10.469 --> 03:02:10.479 align:start position:0%
 
 

03:02:10.479 --> 03:02:12.710 align:start position:0%
 
and<03:02:10.560><c> then</c><03:02:10.720><c> we</c><03:02:10.880><c> can</c><03:02:11.040><c> use</c><03:02:11.200><c> an</c><03:02:11.359><c> else</c><03:02:11.600><c> if</c><03:02:11.760><c> statement</c>

03:02:12.710 --> 03:02:12.720 align:start position:0%
and then we can use an else if statement
 

03:02:12.720 --> 03:02:14.469 align:start position:0%
and then we can use an else if statement
else<03:02:13.439><c> if</c>

03:02:14.469 --> 03:02:14.479 align:start position:0%
else if
 

03:02:14.479 --> 03:02:15.429 align:start position:0%
else if
guess

03:02:15.429 --> 03:02:15.439 align:start position:0%
guess
 

03:02:15.439 --> 03:02:17.590 align:start position:0%
guess
is<03:02:15.760><c> less</c><03:02:16.000><c> than</c><03:02:16.240><c> answer</c><03:02:16.800><c> well</c><03:02:17.040><c> then</c><03:02:17.359><c> their</c>

03:02:17.590 --> 03:02:17.600 align:start position:0%
is less than answer well then their
 

03:02:17.600 --> 03:02:21.510 align:start position:0%
is less than answer well then their
guess<03:02:18.000><c> was</c><03:02:18.319><c> too</c><03:02:18.560><c> low</c>

03:02:21.510 --> 03:02:21.520 align:start position:0%
 
 

03:02:21.520 --> 03:02:24.469 align:start position:0%
 
print<03:02:22.399><c> too</c><03:02:23.120><c> low</c>

03:02:24.469 --> 03:02:24.479 align:start position:0%
print too low
 

03:02:24.479 --> 03:02:26.870 align:start position:0%
print too low
so<03:02:24.720><c> if</c><03:02:24.960><c> our</c><03:02:25.200><c> guess</c><03:02:25.680><c> is</c><03:02:25.920><c> not</c><03:02:26.240><c> greater</c><03:02:26.560><c> than</c><03:02:26.720><c> the</c>

03:02:26.870 --> 03:02:26.880 align:start position:0%
so if our guess is not greater than the
 

03:02:26.880 --> 03:02:29.110 align:start position:0%
so if our guess is not greater than the
answer<03:02:27.439><c> or</c><03:02:27.760><c> less</c><03:02:28.000><c> than</c><03:02:28.160><c> the</c><03:02:28.319><c> answer</c><03:02:28.960><c> that</c>

03:02:29.110 --> 03:02:29.120 align:start position:0%
answer or less than the answer that
 

03:02:29.120 --> 03:02:31.030 align:start position:0%
answer or less than the answer that
means<03:02:29.439><c> they</c><03:02:29.600><c> must</c><03:02:29.840><c> have</c><03:02:29.920><c> got</c><03:02:30.160><c> it</c><03:02:30.240><c> right</c>

03:02:31.030 --> 03:02:31.040 align:start position:0%
means they must have got it right
 

03:02:31.040 --> 03:02:35.750 align:start position:0%
means they must have got it right
so<03:02:31.200><c> within</c><03:02:31.680><c> an</c><03:02:31.840><c> else</c><03:02:32.080><c> block</c><03:02:32.640><c> let's</c><03:02:32.960><c> print</c>

03:02:35.750 --> 03:02:35.760 align:start position:0%
 
 

03:02:35.760 --> 03:02:37.590 align:start position:0%
 
correct

03:02:37.590 --> 03:02:37.600 align:start position:0%
correct
 

03:02:37.600 --> 03:02:40.150 align:start position:0%
correct
so<03:02:37.760><c> then</c><03:02:38.080><c> after</c><03:02:38.720><c> our</c><03:02:39.040><c> if</c><03:02:39.279><c> else</c><03:02:39.600><c> statements</c>

03:02:40.150 --> 03:02:40.160 align:start position:0%
so then after our if else statements
 

03:02:40.160 --> 03:02:43.349 align:start position:0%
so then after our if else statements
let's<03:02:40.560><c> increase</c><03:02:41.120><c> guesses</c><03:02:41.680><c> by</c><03:02:41.920><c> one</c><03:02:42.720><c> guesses</c>

03:02:43.349 --> 03:02:43.359 align:start position:0%
let's increase guesses by one guesses
 

03:02:43.359 --> 03:02:44.550 align:start position:0%
let's increase guesses by one guesses
plus<03:02:43.680><c> plus</c>

03:02:44.550 --> 03:02:44.560 align:start position:0%
plus plus
 

03:02:44.560 --> 03:02:46.710 align:start position:0%
plus plus
the<03:02:44.720><c> very</c><03:02:45.040><c> best</c><03:02:45.359><c> possible</c><03:02:45.840><c> score</c><03:02:46.160><c> a</c><03:02:46.240><c> user</c><03:02:46.560><c> can</c>

03:02:46.710 --> 03:02:46.720 align:start position:0%
the very best possible score a user can
 

03:02:46.720 --> 03:02:48.550 align:start position:0%
the very best possible score a user can
get<03:02:47.040><c> is</c><03:02:47.279><c> one</c><03:02:47.520><c> if</c><03:02:47.680><c> they</c><03:02:47.760><c> guess</c><03:02:48.000><c> it</c><03:02:48.160><c> on</c><03:02:48.240><c> the</c><03:02:48.319><c> first</c>

03:02:48.550 --> 03:02:48.560 align:start position:0%
get is one if they guess it on the first
 

03:02:48.560 --> 03:02:51.349 align:start position:0%
get is one if they guess it on the first
try<03:02:49.279><c> so</c><03:02:49.520><c> before</c><03:02:49.840><c> we</c><03:02:50.080><c> finish</c><03:02:50.479><c> a</c><03:02:50.640><c> while</c><03:02:50.880><c> loop</c><03:02:51.200><c> we</c>

03:02:51.349 --> 03:02:51.359 align:start position:0%
try so before we finish a while loop we
 

03:02:51.359 --> 03:02:54.150 align:start position:0%
try so before we finish a while loop we
will<03:02:51.600><c> increment</c><03:02:52.240><c> guesses</c><03:02:52.720><c> by</c><03:02:52.960><c> one</c>

03:02:54.150 --> 03:02:54.160 align:start position:0%
will increment guesses by one
 

03:02:54.160 --> 03:02:56.389 align:start position:0%
will increment guesses by one
so<03:02:54.319><c> then</c><03:02:54.560><c> once</c><03:02:54.880><c> we</c><03:02:55.040><c> escape</c><03:02:55.600><c> our</c><03:02:55.840><c> while</c><03:02:56.080><c> loop</c>

03:02:56.389 --> 03:02:56.399 align:start position:0%
so then once we escape our while loop
 

03:02:56.399 --> 03:02:59.190 align:start position:0%
so then once we escape our while loop
let's<03:02:56.640><c> print</c><03:02:56.960><c> the</c><03:02:57.040><c> user's</c><03:02:57.359><c> final</c><03:02:57.680><c> score</c>

03:02:59.190 --> 03:02:59.200 align:start position:0%
let's print the user's final score
 

03:02:59.200 --> 03:03:00.790 align:start position:0%
let's print the user's final score
so<03:02:59.439><c> we</c><03:02:59.600><c> will</c><03:02:59.840><c> print</c>

03:03:00.790 --> 03:03:00.800 align:start position:0%
so we will print
 

03:03:00.800 --> 03:03:03.349 align:start position:0%
so we will print
the<03:03:01.040><c> answer</c>

03:03:03.349 --> 03:03:03.359 align:start position:0%
the answer
 

03:03:03.359 --> 03:03:05.910 align:start position:0%
the answer
this<03:03:03.680><c> is</c><03:03:03.840><c> an</c><03:03:04.080><c> integer</c>

03:03:05.910 --> 03:03:05.920 align:start position:0%
this is an integer
 

03:03:05.920 --> 03:03:07.830 align:start position:0%
this is an integer
and<03:03:06.160><c> we</c><03:03:06.319><c> are</c><03:03:06.479><c> displaying</c>

03:03:07.830 --> 03:03:07.840 align:start position:0%
and we are displaying
 

03:03:07.840 --> 03:03:11.670 align:start position:0%
and we are displaying
answer

03:03:11.670 --> 03:03:11.680 align:start position:0%
 
 

03:03:11.680 --> 03:03:14.469 align:start position:0%
 
and<03:03:11.920><c> we</c><03:03:12.080><c> will</c><03:03:12.240><c> display</c><03:03:12.800><c> the</c><03:03:13.040><c> guesses</c><03:03:13.439><c> it</c><03:03:13.600><c> took</c>

03:03:14.469 --> 03:03:14.479 align:start position:0%
and we will display the guesses it took
 

03:03:14.479 --> 03:03:15.349 align:start position:0%
and we will display the guesses it took
so

03:03:15.349 --> 03:03:15.359 align:start position:0%
so
 

03:03:15.359 --> 03:03:16.630 align:start position:0%
so
guesses

03:03:16.630 --> 03:03:16.640 align:start position:0%
guesses
 

03:03:16.640 --> 03:03:18.230 align:start position:0%
guesses
and<03:03:16.880><c> display</c><03:03:17.279><c> the</c><03:03:17.359><c> value</c><03:03:17.760><c> found</c><03:03:17.920><c> within</c>

03:03:18.230 --> 03:03:18.240 align:start position:0%
and display the value found within
 

03:03:18.240 --> 03:03:19.750 align:start position:0%
and display the value found within
guesses

03:03:19.750 --> 03:03:19.760 align:start position:0%
guesses
 

03:03:19.760 --> 03:03:21.349 align:start position:0%
guesses
and<03:03:19.840><c> this</c><03:03:20.000><c> part</c><03:03:20.240><c> isn't</c><03:03:20.399><c> necessary</c><03:03:20.960><c> but</c><03:03:21.120><c> i</c><03:03:21.200><c> like</c>

03:03:21.349 --> 03:03:21.359 align:start position:0%
and this part isn't necessary but i like
 

03:03:21.359 --> 03:03:24.150 align:start position:0%
and this part isn't necessary but i like
to<03:03:21.520><c> add</c><03:03:21.760><c> some</c><03:03:22.000><c> text</c><03:03:22.319><c> decorations</c>

03:03:24.150 --> 03:03:24.160 align:start position:0%
to add some text decorations
 

03:03:24.160 --> 03:03:26.070 align:start position:0%
to add some text decorations
so<03:03:24.399><c> maybe</c><03:03:24.640><c> i'll</c><03:03:24.800><c> add</c><03:03:24.880><c> a</c><03:03:24.960><c> bunch</c><03:03:25.200><c> of</c><03:03:25.359><c> asterisks</c>

03:03:26.070 --> 03:03:26.080 align:start position:0%
so maybe i'll add a bunch of asterisks
 

03:03:26.080 --> 03:03:29.670 align:start position:0%
so maybe i'll add a bunch of asterisks
to<03:03:26.240><c> make</c><03:03:26.399><c> it</c><03:03:26.479><c> look</c><03:03:26.720><c> nice</c>

03:03:29.670 --> 03:03:29.680 align:start position:0%
 
 

03:03:29.680 --> 03:03:32.469 align:start position:0%
 
let's<03:03:29.920><c> run</c><03:03:30.160><c> it</c>

03:03:32.469 --> 03:03:32.479 align:start position:0%
 
 

03:03:32.479 --> 03:03:34.070 align:start position:0%
 
enter<03:03:32.880><c> a</c><03:03:32.960><c> guess</c><03:03:33.200><c> i'll</c><03:03:33.359><c> guess</c><03:03:33.600><c> something</c><03:03:33.920><c> right</c>

03:03:34.070 --> 03:03:34.080 align:start position:0%
enter a guess i'll guess something right
 

03:03:34.080 --> 03:03:37.030 align:start position:0%
enter a guess i'll guess something right
in<03:03:34.160><c> the</c><03:03:34.240><c> middle</c><03:03:34.560><c> between</c><03:03:35.359><c> so</c><03:03:35.520><c> maybe</c><03:03:35.920><c> 50.</c>

03:03:37.030 --> 03:03:37.040 align:start position:0%
in the middle between so maybe 50.
 

03:03:37.040 --> 03:03:40.950 align:start position:0%
in the middle between so maybe 50.
so<03:03:37.200><c> that</c><03:03:37.439><c> guess</c><03:03:37.680><c> was</c><03:03:37.920><c> too</c><03:03:38.080><c> low</c><03:03:38.560><c> so</c><03:03:38.720><c> maybe</c><03:03:39.200><c> 75</c>

03:03:40.950 --> 03:03:40.960 align:start position:0%
so that guess was too low so maybe 75
 

03:03:40.960 --> 03:03:42.790 align:start position:0%
so that guess was too low so maybe 75
okay<03:03:41.279><c> that</c><03:03:41.439><c> was</c><03:03:41.600><c> too</c><03:03:41.840><c> high</c><03:03:42.080><c> so</c><03:03:42.240><c> our</c><03:03:42.399><c> numbers</c>

03:03:42.790 --> 03:03:42.800 align:start position:0%
okay that was too high so our numbers
 

03:03:42.800 --> 03:03:48.070 align:start position:0%
okay that was too high so our numbers
between<03:03:43.279><c> 50</c><03:03:43.680><c> and</c><03:03:43.920><c> 75</c><03:03:45.040><c> how</c><03:03:45.279><c> about</c><03:03:45.520><c> 62</c>

03:03:48.070 --> 03:03:48.080 align:start position:0%
between 50 and 75 how about 62
 

03:03:48.080 --> 03:03:51.750 align:start position:0%
between 50 and 75 how about 62
that's<03:03:48.399><c> too</c><03:03:48.640><c> low</c><03:03:49.040><c> so</c><03:03:49.200><c> it's</c><03:03:49.359><c> between</c><03:03:49.840><c> 62</c><03:03:50.399><c> and</c><03:03:50.479><c> 75</c>

03:03:51.750 --> 03:03:51.760 align:start position:0%
that's too low so it's between 62 and 75
 

03:03:51.760 --> 03:03:53.429 align:start position:0%
that's too low so it's between 62 and 75
how<03:03:51.920><c> about</c><03:03:52.160><c> 69</c>

03:03:53.429 --> 03:03:53.439 align:start position:0%
how about 69
 

03:03:53.439 --> 03:03:56.070 align:start position:0%
how about 69
that's<03:03:53.680><c> still</c><03:03:54.000><c> too</c><03:03:54.240><c> low</c><03:03:54.720><c> so</c><03:03:54.960><c> between</c><03:03:55.359><c> 69</c><03:03:55.920><c> and</c>

03:03:56.070 --> 03:03:56.080 align:start position:0%
that's still too low so between 69 and
 

03:03:56.080 --> 03:03:57.269 align:start position:0%
that's still too low so between 69 and
75

03:03:57.269 --> 03:03:57.279 align:start position:0%
75
 

03:03:57.279 --> 03:03:59.110 align:start position:0%
75
maybe<03:03:57.600><c> 72</c>

03:03:59.110 --> 03:03:59.120 align:start position:0%
maybe 72
 

03:03:59.120 --> 03:04:01.429 align:start position:0%
maybe 72
that's<03:03:59.359><c> still</c><03:03:59.600><c> too</c><03:03:59.840><c> low</c><03:04:00.160><c> so</c><03:04:00.319><c> it's</c><03:04:00.479><c> between</c><03:04:00.880><c> 72</c>

03:04:01.429 --> 03:04:01.439 align:start position:0%
that's still too low so it's between 72
 

03:04:01.439 --> 03:04:03.110 align:start position:0%
that's still too low so it's between 72
and<03:04:01.600><c> 75</c>

03:04:03.110 --> 03:04:03.120 align:start position:0%
and 75
 

03:04:03.120 --> 03:04:04.389 align:start position:0%
and 75
73

03:04:04.389 --> 03:04:04.399 align:start position:0%
73
 

03:04:04.399 --> 03:04:06.550 align:start position:0%
73
all<03:04:04.640><c> right</c><03:04:04.880><c> that</c><03:04:05.040><c> was</c><03:04:05.200><c> the</c><03:04:05.279><c> right</c><03:04:05.520><c> answer</c><03:04:06.319><c> i'm</c>

03:04:06.550 --> 03:04:06.560 align:start position:0%
all right that was the right answer i'm
 

03:04:06.560 --> 03:04:08.389 align:start position:0%
all right that was the right answer i'm
just<03:04:06.640><c> gonna</c><03:04:06.880><c> fix</c><03:04:07.120><c> one</c><03:04:07.359><c> thing</c><03:04:07.520><c> real</c><03:04:07.680><c> quick</c>

03:04:08.389 --> 03:04:08.399 align:start position:0%
just gonna fix one thing real quick
 

03:04:08.399 --> 03:04:11.429 align:start position:0%
just gonna fix one thing real quick
uh<03:04:08.640><c> let's</c><03:04:08.880><c> add</c><03:04:09.120><c> a</c><03:04:09.359><c> new</c><03:04:09.600><c> line</c><03:04:10.399><c> here</c><03:04:10.960><c> okay</c><03:04:11.279><c> let's</c>

03:04:11.429 --> 03:04:11.439 align:start position:0%
uh let's add a new line here okay let's
 

03:04:11.439 --> 03:04:13.750 align:start position:0%
uh let's add a new line here okay let's
try<03:04:11.680><c> this</c><03:04:11.840><c> again</c><03:04:12.479><c> okay</c><03:04:12.800><c> until</c><03:04:13.120><c> i</c><03:04:13.279><c> guess</c><03:04:13.600><c> i'll</c>

03:04:13.750 --> 03:04:13.760 align:start position:0%
try this again okay until i guess i'll
 

03:04:13.760 --> 03:04:17.429 align:start position:0%
try this again okay until i guess i'll
try<03:04:14.000><c> 50</c><03:04:14.399><c> again</c><03:04:15.120><c> that's</c><03:04:15.439><c> too</c><03:04:15.680><c> high</c><03:04:16.080><c> maybe</c><03:04:16.399><c> 25</c>

03:04:17.429 --> 03:04:17.439 align:start position:0%
try 50 again that's too high maybe 25
 

03:04:17.439 --> 03:04:19.750 align:start position:0%
try 50 again that's too high maybe 25
that's<03:04:17.680><c> still</c><03:04:17.840><c> too</c><03:04:18.080><c> high</c><03:04:18.399><c> what</c><03:04:18.560><c> about</c><03:04:18.880><c> 12</c>

03:04:19.750 --> 03:04:19.760 align:start position:0%
that's still too high what about 12
 

03:04:19.760 --> 03:04:20.950 align:start position:0%
that's still too high what about 12
2<03:04:20.080><c> low</c>

03:04:20.950 --> 03:04:20.960 align:start position:0%
2 low
 

03:04:20.960 --> 03:04:22.469 align:start position:0%
2 low
maybe<03:04:21.279><c> 18</c>

03:04:22.469 --> 03:04:22.479 align:start position:0%
maybe 18
 

03:04:22.479 --> 03:04:24.710 align:start position:0%
maybe 18
2<03:04:22.800><c> low</c><03:04:23.520><c> 21</c>

03:04:24.710 --> 03:04:24.720 align:start position:0%
2 low 21
 

03:04:24.720 --> 03:04:28.710 align:start position:0%
2 low 21
that's<03:04:24.960><c> still</c><03:04:25.200><c> too</c><03:04:25.439><c> low</c><03:04:26.080><c> 23</c><03:04:26.880><c> too</c><03:04:27.200><c> low</c><03:04:27.600><c> 24</c>

03:04:28.710 --> 03:04:28.720 align:start position:0%
that's still too low 23 too low 24
 

03:04:28.720 --> 03:04:31.269 align:start position:0%
that's still too low 23 too low 24
and<03:04:29.040><c> 24</c><03:04:29.520><c> was</c><03:04:29.680><c> the</c><03:04:29.760><c> correct</c><03:04:30.080><c> answer</c><03:04:30.960><c> all</c><03:04:31.040><c> right</c>

03:04:31.269 --> 03:04:31.279 align:start position:0%
and 24 was the correct answer all right
 

03:04:31.279 --> 03:04:33.110 align:start position:0%
and 24 was the correct answer all right
everybody<03:04:31.680><c> so</c><03:04:32.000><c> i</c><03:04:32.160><c> thought</c><03:04:32.319><c> that</c><03:04:32.479><c> would</c><03:04:32.640><c> be</c><03:04:32.880><c> a</c>

03:04:33.110 --> 03:04:33.120 align:start position:0%
everybody so i thought that would be a
 

03:04:33.120 --> 03:04:34.870 align:start position:0%
everybody so i thought that would be a
fun<03:04:33.439><c> guessing</c><03:04:33.840><c> game</c><03:04:34.080><c> we</c><03:04:34.240><c> could</c><03:04:34.399><c> create</c><03:04:34.720><c> for</c>

03:04:34.870 --> 03:04:34.880 align:start position:0%
fun guessing game we could create for
 

03:04:34.880 --> 03:04:36.950 align:start position:0%
fun guessing game we could create for
practice<03:04:35.680><c> if</c><03:04:35.840><c> you</c><03:04:36.000><c> would</c><03:04:36.080><c> like</c><03:04:36.240><c> a</c><03:04:36.319><c> copy</c><03:04:36.640><c> of</c><03:04:36.800><c> all</c>

03:04:36.950 --> 03:04:36.960 align:start position:0%
practice if you would like a copy of all
 

03:04:36.960 --> 03:04:38.469 align:start position:0%
practice if you would like a copy of all
this<03:04:37.200><c> i'll</c><03:04:37.439><c> post</c><03:04:37.680><c> this</c><03:04:37.920><c> to</c><03:04:38.080><c> the</c><03:04:38.160><c> comment</c>

03:04:38.469 --> 03:04:38.479 align:start position:0%
this i'll post this to the comment
 

03:04:38.479 --> 03:04:41.190 align:start position:0%
this i'll post this to the comment
section<03:04:38.880><c> down</c><03:04:39.120><c> below</c><03:04:39.760><c> and</c><03:04:39.920><c> well</c><03:04:40.240><c> yeah</c><03:04:40.560><c> that</c><03:04:40.880><c> is</c>

03:04:41.190 --> 03:04:41.200 align:start position:0%
section down below and well yeah that is
 

03:04:41.200 --> 03:04:47.349 align:start position:0%
section down below and well yeah that is
a<03:04:41.439><c> simple</c><03:04:42.000><c> number</c><03:04:42.319><c> guessing</c><03:04:42.720><c> game</c><03:04:43.120><c> in</c><03:04:43.439><c> c</c>

03:04:47.349 --> 03:04:47.359 align:start position:0%
 
 

03:04:47.359 --> 03:04:49.510 align:start position:0%
 
all<03:04:47.680><c> right</c><03:04:48.000><c> people</c><03:04:48.479><c> so</c><03:04:48.720><c> now</c><03:04:48.880><c> that</c><03:04:49.040><c> we</c><03:04:49.120><c> know</c><03:04:49.359><c> how</c>

03:04:49.510 --> 03:04:49.520 align:start position:0%
all right people so now that we know how
 

03:04:49.520 --> 03:04:51.269 align:start position:0%
all right people so now that we know how
to<03:04:49.600><c> create</c><03:04:49.920><c> an</c><03:04:50.080><c> array</c><03:04:50.319><c> of</c><03:04:50.479><c> strings</c><03:04:50.960><c> i</c><03:04:51.040><c> thought</c>

03:04:51.269 --> 03:04:51.279 align:start position:0%
to create an array of strings i thought
 

03:04:51.279 --> 03:04:53.030 align:start position:0%
to create an array of strings i thought
this<03:04:51.439><c> would</c><03:04:51.600><c> be</c><03:04:51.680><c> a</c><03:04:51.760><c> good</c><03:04:52.000><c> opportunity</c><03:04:52.640><c> for</c><03:04:52.880><c> us</c>

03:04:53.030 --> 03:04:53.040 align:start position:0%
this would be a good opportunity for us
 

03:04:53.040 --> 03:04:55.670 align:start position:0%
this would be a good opportunity for us
to<03:04:53.120><c> create</c><03:04:53.520><c> a</c><03:04:53.680><c> quiz</c><03:04:54.000><c> game</c><03:04:54.479><c> so</c><03:04:54.720><c> before</c><03:04:55.040><c> we</c><03:04:55.200><c> begin</c>

03:04:55.670 --> 03:04:55.680 align:start position:0%
to create a quiz game so before we begin
 

03:04:55.680 --> 03:04:57.590 align:start position:0%
to create a quiz game so before we begin
make<03:04:55.840><c> sure</c><03:04:56.080><c> to</c><03:04:56.319><c> include</c><03:04:56.800><c> these</c><03:04:57.040><c> two</c><03:04:57.279><c> header</c>

03:04:57.590 --> 03:04:57.600 align:start position:0%
make sure to include these two header
 

03:04:57.600 --> 03:04:59.830 align:start position:0%
make sure to include these two header
files<03:04:58.000><c> at</c><03:04:58.080><c> the</c><03:04:58.240><c> top</c><03:04:58.479><c> of</c><03:04:58.560><c> your</c><03:04:58.800><c> program</c><03:04:59.680><c> so</c>

03:04:59.830 --> 03:04:59.840 align:start position:0%
files at the top of your program so
 

03:04:59.840 --> 03:05:01.990 align:start position:0%
files at the top of your program so
let's<03:05:00.080><c> begin</c><03:05:00.479><c> with</c><03:05:00.800><c> a</c><03:05:01.120><c> 2d</c><03:05:01.520><c> array</c><03:05:01.840><c> of</c>

03:05:01.990 --> 03:05:02.000 align:start position:0%
let's begin with a 2d array of
 

03:05:02.000 --> 03:05:04.150 align:start position:0%
let's begin with a 2d array of
characters<03:05:02.960><c> and</c><03:05:03.200><c> these</c><03:05:03.439><c> will</c><03:05:03.600><c> store</c><03:05:04.000><c> our</c>

03:05:04.150 --> 03:05:04.160 align:start position:0%
characters and these will store our
 

03:05:04.160 --> 03:05:06.469 align:start position:0%
characters and these will store our
questions

03:05:06.469 --> 03:05:06.479 align:start position:0%
questions
 

03:05:06.479 --> 03:05:08.710 align:start position:0%
questions
and<03:05:06.640><c> i'm</c><03:05:06.720><c> going</c><03:05:06.880><c> to</c><03:05:07.040><c> set</c><03:05:07.279><c> a</c><03:05:07.520><c> maximum</c><03:05:08.080><c> size</c><03:05:08.479><c> for</c>

03:05:08.710 --> 03:05:08.720 align:start position:0%
and i'm going to set a maximum size for
 

03:05:08.720 --> 03:05:11.510 align:start position:0%
and i'm going to set a maximum size for
each<03:05:08.960><c> question</c><03:05:09.600><c> to</c><03:05:09.920><c> 100</c><03:05:10.399><c> bytes</c>

03:05:11.510 --> 03:05:11.520 align:start position:0%
each question to 100 bytes
 

03:05:11.520 --> 03:05:13.269 align:start position:0%
each question to 100 bytes
and<03:05:11.760><c> we</c><03:05:11.840><c> can</c><03:05:12.000><c> go</c><03:05:12.160><c> ahead</c><03:05:12.399><c> and</c><03:05:12.560><c> initialize</c><03:05:13.120><c> this</c>

03:05:13.269 --> 03:05:13.279 align:start position:0%
and we can go ahead and initialize this
 

03:05:13.279 --> 03:05:15.510 align:start position:0%
and we can go ahead and initialize this
array<03:05:13.600><c> with</c><03:05:13.680><c> some</c><03:05:13.920><c> questions</c><03:05:14.880><c> so</c><03:05:15.040><c> remember</c>

03:05:15.510 --> 03:05:15.520 align:start position:0%
array with some questions so remember
 

03:05:15.520 --> 03:05:17.670 align:start position:0%
array with some questions so remember
with<03:05:15.760><c> strings</c><03:05:16.319><c> each</c><03:05:16.640><c> string</c><03:05:17.200><c> is</c><03:05:17.279><c> its</c><03:05:17.520><c> own</c>

03:05:17.670 --> 03:05:17.680 align:start position:0%
with strings each string is its own
 

03:05:17.680 --> 03:05:18.469 align:start position:0%
with strings each string is its own
array

03:05:18.469 --> 03:05:18.479 align:start position:0%
array
 

03:05:18.479 --> 03:05:20.790 align:start position:0%
array
so<03:05:18.720><c> let's</c><03:05:19.040><c> ask</c><03:05:19.359><c> maybe</c><03:05:19.680><c> three</c><03:05:20.000><c> questions</c><03:05:20.560><c> but</c>

03:05:20.790 --> 03:05:20.800 align:start position:0%
so let's ask maybe three questions but
 

03:05:20.800 --> 03:05:22.550 align:start position:0%
so let's ask maybe three questions but
feel<03:05:21.120><c> free</c><03:05:21.359><c> to</c><03:05:21.520><c> pick</c><03:05:21.760><c> any</c><03:05:21.920><c> amount</c><03:05:22.319><c> that</c><03:05:22.479><c> you</c>

03:05:22.550 --> 03:05:22.560 align:start position:0%
feel free to pick any amount that you
 

03:05:22.560 --> 03:05:23.830 align:start position:0%
feel free to pick any amount that you
like

03:05:23.830 --> 03:05:23.840 align:start position:0%
like
 

03:05:23.840 --> 03:05:25.190 align:start position:0%
like
and<03:05:24.000><c> come</c><03:05:24.160><c> up</c><03:05:24.240><c> with</c><03:05:24.479><c> any</c><03:05:24.640><c> questions</c><03:05:24.960><c> you</c><03:05:25.120><c> would</c>

03:05:25.190 --> 03:05:25.200 align:start position:0%
and come up with any questions you would
 

03:05:25.200 --> 03:05:27.510 align:start position:0%
and come up with any questions you would
like<03:05:25.439><c> as</c><03:05:25.520><c> well</c><03:05:26.080><c> or</c><03:05:26.319><c> you</c><03:05:26.399><c> can</c><03:05:26.560><c> copy</c><03:05:26.880><c> me</c><03:05:27.200><c> i</c><03:05:27.359><c> don't</c>

03:05:27.510 --> 03:05:27.520 align:start position:0%
like as well or you can copy me i don't
 

03:05:27.520 --> 03:05:31.190 align:start position:0%
like as well or you can copy me i don't
care

03:05:31.190 --> 03:05:31.200 align:start position:0%
 
 

03:05:31.200 --> 03:05:34.070 align:start position:0%
 
what<03:05:31.439><c> year</c><03:05:31.600><c> did</c><03:05:31.840><c> the</c><03:05:32.080><c> c</c><03:05:32.319><c> language</c><03:05:32.880><c> debut</c><03:05:33.760><c> then</c>

03:05:34.070 --> 03:05:34.080 align:start position:0%
what year did the c language debut then
 

03:05:34.080 --> 03:05:37.110 align:start position:0%
what year did the c language debut then
separate<03:05:34.560><c> each</c><03:05:34.800><c> string</c><03:05:35.200><c> with</c><03:05:35.439><c> a</c><03:05:35.680><c> comma</c>

03:05:37.110 --> 03:05:37.120 align:start position:0%
separate each string with a comma
 

03:05:37.120 --> 03:05:38.469 align:start position:0%
separate each string with a comma
then<03:05:37.279><c> just</c><03:05:37.439><c> to</c><03:05:37.520><c> make</c><03:05:37.680><c> this</c><03:05:37.840><c> more</c><03:05:38.000><c> readable</c><03:05:38.399><c> i'm</c>

03:05:38.469 --> 03:05:38.479 align:start position:0%
then just to make this more readable i'm
 

03:05:38.479 --> 03:05:40.469 align:start position:0%
then just to make this more readable i'm
going<03:05:38.640><c> to</c><03:05:38.800><c> go</c><03:05:38.960><c> down</c><03:05:39.120><c> to</c><03:05:39.279><c> the</c><03:05:39.359><c> next</c><03:05:39.680><c> line</c>

03:05:40.469 --> 03:05:40.479 align:start position:0%
going to go down to the next line
 

03:05:40.479 --> 03:05:44.469 align:start position:0%
going to go down to the next line
so<03:05:40.640><c> this</c><03:05:40.800><c> is</c><03:05:40.960><c> question</c><03:05:41.439><c> two</c><03:05:41.680><c> now</c>

03:05:44.469 --> 03:05:44.479 align:start position:0%
 
 

03:05:44.479 --> 03:05:47.269 align:start position:0%
 
who<03:05:44.800><c> is</c><03:05:44.960><c> credited</c><03:05:45.520><c> with</c><03:05:45.760><c> creating</c><03:05:46.319><c> c</c>

03:05:47.269 --> 03:05:47.279 align:start position:0%
who is credited with creating c
 

03:05:47.279 --> 03:05:52.230 align:start position:0%
who is credited with creating c
and<03:05:47.520><c> one</c><03:05:47.760><c> more</c><03:05:48.000><c> question</c>

03:05:52.230 --> 03:05:52.240 align:start position:0%
 
 

03:05:52.240 --> 03:05:55.190 align:start position:0%
 
what<03:05:52.560><c> is</c><03:05:52.800><c> the</c><03:05:53.040><c> predecessor</c><03:05:53.840><c> of</c><03:05:54.080><c> c</c><03:05:54.640><c> so</c><03:05:54.960><c> now</c><03:05:55.120><c> we</c>

03:05:55.190 --> 03:05:55.200 align:start position:0%
what is the predecessor of c so now we
 

03:05:55.200 --> 03:05:56.950 align:start position:0%
what is the predecessor of c so now we
have<03:05:55.359><c> some</c><03:05:55.680><c> questions</c><03:05:56.399><c> we'll</c><03:05:56.560><c> need</c><03:05:56.720><c> some</c>

03:05:56.950 --> 03:05:56.960 align:start position:0%
have some questions we'll need some
 

03:05:56.960 --> 03:05:59.750 align:start position:0%
have some questions we'll need some
options<03:05:57.920><c> this</c><03:05:58.080><c> could</c><03:05:58.319><c> be</c><03:05:58.640><c> a</c><03:05:58.880><c> separate</c><03:05:59.359><c> 2d</c>

03:05:59.750 --> 03:05:59.760 align:start position:0%
options this could be a separate 2d
 

03:05:59.760 --> 03:06:01.990 align:start position:0%
options this could be a separate 2d
character<03:06:00.240><c> array</c>

03:06:01.990 --> 03:06:02.000 align:start position:0%
character array
 

03:06:02.000 --> 03:06:03.110 align:start position:0%
character array
char

03:06:03.110 --> 03:06:03.120 align:start position:0%
char
 

03:06:03.120 --> 03:06:04.630 align:start position:0%
char
options

03:06:04.630 --> 03:06:04.640 align:start position:0%
options
 

03:06:04.640 --> 03:06:06.790 align:start position:0%
options
and<03:06:04.880><c> i'll</c><03:06:05.040><c> copy</c><03:06:05.439><c> the</c><03:06:05.600><c> dimensions</c><03:06:06.319><c> from</c>

03:06:06.790 --> 03:06:06.800 align:start position:0%
and i'll copy the dimensions from
 

03:06:06.800 --> 03:06:09.190 align:start position:0%
and i'll copy the dimensions from
questions

03:06:09.190 --> 03:06:09.200 align:start position:0%
questions
 

03:06:09.200 --> 03:06:11.510 align:start position:0%
questions
and<03:06:09.439><c> we'll</c><03:06:09.600><c> create</c><03:06:10.080><c> four</c><03:06:10.319><c> sets</c><03:06:10.800><c> of</c><03:06:11.040><c> options</c>

03:06:11.510 --> 03:06:11.520 align:start position:0%
and we'll create four sets of options
 

03:06:11.520 --> 03:06:18.630 align:start position:0%
and we'll create four sets of options
for<03:06:11.760><c> each</c><03:06:12.000><c> question</c>

03:06:18.630 --> 03:06:18.640 align:start position:0%
 
 

03:06:18.640 --> 03:06:20.870 align:start position:0%
 
this<03:06:18.880><c> is</c><03:06:19.040><c> the</c><03:06:19.200><c> first</c><03:06:19.600><c> set</c><03:06:19.760><c> of</c><03:06:19.920><c> options</c><03:06:20.479><c> for</c><03:06:20.640><c> the</c>

03:06:20.870 --> 03:06:20.880 align:start position:0%
this is the first set of options for the
 

03:06:20.880 --> 03:06:23.030 align:start position:0%
this is the first set of options for the
first<03:06:21.279><c> question</c><03:06:22.080><c> and</c><03:06:22.160><c> then</c><03:06:22.399><c> let's</c><03:06:22.640><c> add</c><03:06:22.880><c> a</c>

03:06:23.030 --> 03:06:23.040 align:start position:0%
first question and then let's add a
 

03:06:23.040 --> 03:06:24.790 align:start position:0%
first question and then let's add a
second<03:06:23.359><c> set</c><03:06:23.520><c> of</c><03:06:23.680><c> options</c><03:06:24.080><c> for</c><03:06:24.319><c> the</c><03:06:24.479><c> second</c>

03:06:24.790 --> 03:06:24.800 align:start position:0%
second set of options for the second
 

03:06:24.800 --> 03:06:36.630 align:start position:0%
second set of options for the second
question

03:06:36.630 --> 03:06:36.640 align:start position:0%
 
 

03:06:36.640 --> 03:06:45.429 align:start position:0%
 
and<03:06:36.880><c> a</c><03:06:36.960><c> third</c><03:06:37.279><c> set</c>

03:06:45.429 --> 03:06:45.439 align:start position:0%
 
 

03:06:45.439 --> 03:06:47.110 align:start position:0%
 
now<03:06:45.680><c> we'll</c><03:06:45.840><c> create</c><03:06:46.080><c> an</c><03:06:46.240><c> answer</c><03:06:46.560><c> key</c><03:06:46.800><c> this</c><03:06:46.960><c> will</c>

03:06:47.110 --> 03:06:47.120 align:start position:0%
now we'll create an answer key this will
 

03:06:47.120 --> 03:06:49.429 align:start position:0%
now we'll create an answer key this will
be<03:06:47.520><c> a</c><03:06:47.760><c> one-dimensional</c><03:06:48.479><c> array</c>

03:06:49.429 --> 03:06:49.439 align:start position:0%
be a one-dimensional array
 

03:06:49.439 --> 03:06:51.110 align:start position:0%
be a one-dimensional array
so<03:06:49.840><c> char</c>

03:06:51.110 --> 03:06:51.120 align:start position:0%
so char
 

03:06:51.120 --> 03:06:54.710 align:start position:0%
so char
answers<03:06:52.080><c> and</c><03:06:52.240><c> the</c><03:06:52.399><c> size</c><03:06:52.800><c> will</c><03:06:53.040><c> be</c><03:06:53.279><c> three</c>

03:06:54.710 --> 03:06:54.720 align:start position:0%
answers and the size will be three
 

03:06:54.720 --> 03:06:56.950 align:start position:0%
answers and the size will be three
and<03:06:54.960><c> i</c><03:06:55.040><c> will</c><03:06:55.200><c> set</c><03:06:55.439><c> this</c><03:06:55.760><c> equal</c><03:06:56.240><c> to</c>

03:06:56.950 --> 03:06:56.960 align:start position:0%
and i will set this equal to
 

03:06:56.960 --> 03:06:59.830 align:start position:0%
and i will set this equal to
my<03:06:57.200><c> answer</c><03:06:57.520><c> key</c><03:06:58.080><c> so</c><03:06:58.319><c> the</c><03:06:58.399><c> correct</c><03:06:58.800><c> answers</c><03:06:59.600><c> for</c>

03:06:59.830 --> 03:06:59.840 align:start position:0%
my answer key so the correct answers for
 

03:06:59.840 --> 03:07:02.230 align:start position:0%
my answer key so the correct answers for
my<03:07:00.080><c> quiz</c><03:07:00.560><c> are</c><03:07:01.120><c> b</c>

03:07:02.230 --> 03:07:02.240 align:start position:0%
my quiz are b
 

03:07:02.240 --> 03:07:03.269 align:start position:0%
my quiz are b
a

03:07:03.269 --> 03:07:03.279 align:start position:0%
a
 

03:07:03.279 --> 03:07:04.950 align:start position:0%
a
b

03:07:04.950 --> 03:07:04.960 align:start position:0%
b
 

03:07:04.960 --> 03:07:06.950 align:start position:0%
b
so<03:07:05.200><c> these</c><03:07:05.359><c> will</c><03:07:05.520><c> be</c><03:07:05.760><c> individual</c><03:07:06.240><c> characters</c>

03:07:06.950 --> 03:07:06.960 align:start position:0%
so these will be individual characters
 

03:07:06.960 --> 03:07:09.670 align:start position:0%
so these will be individual characters
all<03:07:07.200><c> separated</c><03:07:07.760><c> with</c><03:07:08.080><c> a</c><03:07:08.240><c> comma</c><03:07:08.880><c> b</c>

03:07:09.670 --> 03:07:09.680 align:start position:0%
all separated with a comma b
 

03:07:09.680 --> 03:07:10.550 align:start position:0%
all separated with a comma b
a

03:07:10.550 --> 03:07:10.560 align:start position:0%
a
 

03:07:10.560 --> 03:07:11.510 align:start position:0%
a
b

03:07:11.510 --> 03:07:11.520 align:start position:0%
b
 

03:07:11.520 --> 03:07:13.110 align:start position:0%
b
so<03:07:11.680><c> let's</c><03:07:11.920><c> calculate</c><03:07:12.479><c> the</c><03:07:12.640><c> number</c><03:07:12.960><c> of</c>

03:07:13.110 --> 03:07:13.120 align:start position:0%
so let's calculate the number of
 

03:07:13.120 --> 03:07:14.710 align:start position:0%
so let's calculate the number of
questions<03:07:13.600><c> that</c><03:07:13.760><c> we</c><03:07:13.920><c> have</c>

03:07:14.710 --> 03:07:14.720 align:start position:0%
questions that we have
 

03:07:14.720 --> 03:07:16.870 align:start position:0%
questions that we have
so<03:07:14.960><c> i</c><03:07:15.120><c> will</c><03:07:15.279><c> declare</c><03:07:15.920><c> int</c>

03:07:16.870 --> 03:07:16.880 align:start position:0%
so i will declare int
 

03:07:16.880 --> 03:07:18.070 align:start position:0%
so i will declare int
number

03:07:18.070 --> 03:07:18.080 align:start position:0%
number
 

03:07:18.080 --> 03:07:19.349 align:start position:0%
number
of

03:07:19.349 --> 03:07:19.359 align:start position:0%
of
 

03:07:19.359 --> 03:07:20.790 align:start position:0%
of
questions

03:07:20.790 --> 03:07:20.800 align:start position:0%
questions
 

03:07:20.800 --> 03:07:22.710 align:start position:0%
questions
and<03:07:21.040><c> set</c><03:07:21.200><c> this</c><03:07:21.439><c> equal</c><03:07:21.840><c> to</c>

03:07:22.710 --> 03:07:22.720 align:start position:0%
and set this equal to
 

03:07:22.720 --> 03:07:24.550 align:start position:0%
and set this equal to
sizeof<03:07:23.200><c> operator</c>

03:07:24.550 --> 03:07:24.560 align:start position:0%
sizeof operator
 

03:07:24.560 --> 03:07:26.790 align:start position:0%
sizeof operator
pass<03:07:24.880><c> in</c><03:07:25.120><c> our</c><03:07:25.359><c> two-dimensional</c><03:07:26.080><c> array</c><03:07:26.560><c> of</c>

03:07:26.790 --> 03:07:26.800 align:start position:0%
pass in our two-dimensional array of
 

03:07:26.800 --> 03:07:28.070 align:start position:0%
pass in our two-dimensional array of
questions

03:07:28.070 --> 03:07:28.080 align:start position:0%
questions
 

03:07:28.080 --> 03:07:30.230 align:start position:0%
questions
and<03:07:28.240><c> divide</c><03:07:28.640><c> this</c><03:07:29.040><c> by</c><03:07:29.279><c> one</c><03:07:29.520><c> of</c><03:07:29.600><c> the</c><03:07:29.760><c> elements</c>

03:07:30.230 --> 03:07:30.240 align:start position:0%
and divide this by one of the elements
 

03:07:30.240 --> 03:07:32.309 align:start position:0%
and divide this by one of the elements
because<03:07:30.479><c> they</c><03:07:30.640><c> all</c><03:07:30.800><c> have</c><03:07:31.040><c> the</c><03:07:31.120><c> same</c><03:07:31.439><c> size</c>

03:07:32.309 --> 03:07:32.319 align:start position:0%
because they all have the same size
 

03:07:32.319 --> 03:07:35.269 align:start position:0%
because they all have the same size
questions<03:07:32.960><c> at</c><03:07:33.279><c> index</c><03:07:34.160><c> zero</c>

03:07:35.269 --> 03:07:35.279 align:start position:0%
questions at index zero
 

03:07:35.279 --> 03:07:36.870 align:start position:0%
questions at index zero
and<03:07:35.520><c> let's</c><03:07:35.840><c> declare</c>

03:07:36.870 --> 03:07:36.880 align:start position:0%
and let's declare
 

03:07:36.880 --> 03:07:40.150 align:start position:0%
and let's declare
char<03:07:37.600><c> guess</c><03:07:38.160><c> to</c><03:07:38.399><c> store</c><03:07:38.800><c> our</c><03:07:38.960><c> guess</c>

03:07:40.150 --> 03:07:40.160 align:start position:0%
char guess to store our guess
 

03:07:40.160 --> 03:07:42.389 align:start position:0%
char guess to store our guess
and<03:07:40.560><c> int</c><03:07:41.040><c> score</c><03:07:41.439><c> to</c><03:07:41.600><c> keep</c><03:07:41.840><c> track</c><03:07:42.160><c> of</c><03:07:42.240><c> the</c>

03:07:42.389 --> 03:07:42.399 align:start position:0%
and int score to keep track of the
 

03:07:42.399 --> 03:07:43.830 align:start position:0%
and int score to keep track of the
player's<03:07:42.720><c> score</c>

03:07:43.830 --> 03:07:43.840 align:start position:0%
player's score
 

03:07:43.840 --> 03:07:46.790 align:start position:0%
player's score
so<03:07:44.000><c> now</c><03:07:44.160><c> let's</c><03:07:44.399><c> begin</c><03:07:44.720><c> this</c><03:07:45.120><c> i</c><03:07:45.279><c> will</c><03:07:45.600><c> print</c>

03:07:46.790 --> 03:07:46.800 align:start position:0%
so now let's begin this i will print
 

03:07:46.800 --> 03:07:50.710 align:start position:0%
so now let's begin this i will print
the<03:07:47.040><c> title</c><03:07:47.520><c> quiz</c><03:07:47.840><c> game</c>

03:07:50.710 --> 03:07:50.720 align:start position:0%
 
 

03:07:50.720 --> 03:07:52.870 align:start position:0%
 
then<03:07:50.960><c> add</c><03:07:51.279><c> a</c><03:07:51.439><c> new</c><03:07:51.680><c> line</c>

03:07:52.870 --> 03:07:52.880 align:start position:0%
then add a new line
 

03:07:52.880 --> 03:07:54.950 align:start position:0%
then add a new line
okay<03:07:53.200><c> now</c><03:07:53.439><c> we</c><03:07:53.600><c> need</c><03:07:53.760><c> to</c><03:07:54.000><c> loop</c><03:07:54.399><c> through</c><03:07:54.720><c> all</c><03:07:54.880><c> of</c>

03:07:54.950 --> 03:07:54.960 align:start position:0%
okay now we need to loop through all of
 

03:07:54.960 --> 03:07:59.030 align:start position:0%
okay now we need to loop through all of
the<03:07:55.200><c> questions</c><03:07:55.840><c> so</c><03:07:56.000><c> let's</c><03:07:56.319><c> use</c><03:07:56.640><c> a</c><03:07:56.880><c> for</c><03:07:57.200><c> loop</c>

03:07:59.030 --> 03:07:59.040 align:start position:0%
the questions so let's use a for loop
 

03:07:59.040 --> 03:08:02.150 align:start position:0%
the questions so let's use a for loop
so<03:07:59.279><c> we</c><03:07:59.439><c> will</c><03:07:59.600><c> have</c><03:08:00.160><c> an</c><03:08:00.319><c> index</c><03:08:00.960><c> of</c><03:08:01.120><c> i</c><03:08:01.680><c> set</c><03:08:01.920><c> to</c>

03:08:02.150 --> 03:08:02.160 align:start position:0%
so we will have an index of i set to
 

03:08:02.160 --> 03:08:03.590 align:start position:0%
so we will have an index of i set to
zero

03:08:03.590 --> 03:08:03.600 align:start position:0%
zero
 

03:08:03.600 --> 03:08:05.830 align:start position:0%
zero
and<03:08:03.760><c> i</c><03:08:03.840><c> would</c><03:08:04.080><c> like</c><03:08:04.319><c> to</c><03:08:04.640><c> loop</c><03:08:05.040><c> through</c><03:08:05.279><c> this</c><03:08:05.600><c> as</c>

03:08:05.830 --> 03:08:05.840 align:start position:0%
and i would like to loop through this as
 

03:08:05.840 --> 03:08:08.550 align:start position:0%
and i would like to loop through this as
long<03:08:06.080><c> as</c><03:08:06.319><c> i</c><03:08:06.800><c> is</c><03:08:07.040><c> less</c><03:08:07.359><c> than</c><03:08:07.840><c> the</c><03:08:08.000><c> number</c><03:08:08.319><c> of</c>

03:08:08.550 --> 03:08:08.560 align:start position:0%
long as i is less than the number of
 

03:08:08.560 --> 03:08:10.230 align:start position:0%
long as i is less than the number of
questions<03:08:09.120><c> that</c><03:08:09.279><c> we</c><03:08:09.359><c> have</c>

03:08:10.230 --> 03:08:10.240 align:start position:0%
questions that we have
 

03:08:10.240 --> 03:08:12.550 align:start position:0%
questions that we have
then<03:08:10.560><c> increment</c><03:08:11.200><c> i</c><03:08:11.439><c> by</c><03:08:11.680><c> one</c>

03:08:12.550 --> 03:08:12.560 align:start position:0%
then increment i by one
 

03:08:12.560 --> 03:08:14.550 align:start position:0%
then increment i by one
and<03:08:12.800><c> to</c><03:08:12.960><c> test</c><03:08:13.279><c> this</c><03:08:13.600><c> let's</c><03:08:13.840><c> print</c><03:08:14.240><c> our</c>

03:08:14.550 --> 03:08:14.560 align:start position:0%
and to test this let's print our
 

03:08:14.560 --> 03:08:16.950 align:start position:0%
and to test this let's print our
questions

03:08:16.950 --> 03:08:16.960 align:start position:0%
questions
 

03:08:16.960 --> 03:08:18.870 align:start position:0%
questions
so<03:08:17.279><c> printf</c>

03:08:18.870 --> 03:08:18.880 align:start position:0%
so printf
 

03:08:18.880 --> 03:08:21.349 align:start position:0%
so printf
we're<03:08:19.040><c> displaying</c><03:08:19.600><c> a</c><03:08:19.840><c> string</c><03:08:20.399><c> so</c><03:08:20.640><c> use</c><03:08:20.960><c> the</c><03:08:21.200><c> s</c>

03:08:21.349 --> 03:08:21.359 align:start position:0%
we're displaying a string so use the s
 

03:08:21.359 --> 03:08:23.990 align:start position:0%
we're displaying a string so use the s
format<03:08:21.760><c> specifier</c>

03:08:23.990 --> 03:08:24.000 align:start position:0%
format specifier
 

03:08:24.000 --> 03:08:27.750 align:start position:0%
format specifier
questions<03:08:25.120><c> add</c><03:08:25.520><c> index</c><03:08:26.399><c> of</c><03:08:26.640><c> i</c>

03:08:27.750 --> 03:08:27.760 align:start position:0%
questions add index of i
 

03:08:27.760 --> 03:08:29.590 align:start position:0%
questions add index of i
and<03:08:27.840><c> then</c><03:08:28.080><c> i'll</c><03:08:28.240><c> add</c><03:08:28.399><c> a</c><03:08:28.640><c> new</c><03:08:28.800><c> line</c><03:08:29.040><c> character</c>

03:08:29.590 --> 03:08:29.600 align:start position:0%
and then i'll add a new line character
 

03:08:29.600 --> 03:08:32.150 align:start position:0%
and then i'll add a new line character
after<03:08:30.000><c> each</c><03:08:30.240><c> printf</c><03:08:30.720><c> statement</c><03:08:31.600><c> okay</c><03:08:31.920><c> let's</c>

03:08:32.150 --> 03:08:32.160 align:start position:0%
after each printf statement okay let's
 

03:08:32.160 --> 03:08:34.230 align:start position:0%
after each printf statement okay let's
at<03:08:32.240><c> least</c><03:08:32.560><c> test</c><03:08:32.880><c> this</c><03:08:33.200><c> so</c><03:08:33.359><c> we</c><03:08:33.439><c> should</c><03:08:33.840><c> cycle</c>

03:08:34.230 --> 03:08:34.240 align:start position:0%
at least test this so we should cycle
 

03:08:34.240 --> 03:08:36.309 align:start position:0%
at least test this so we should cycle
through<03:08:34.399><c> our</c><03:08:34.560><c> questions</c>

03:08:36.309 --> 03:08:36.319 align:start position:0%
through our questions
 

03:08:36.319 --> 03:08:38.469 align:start position:0%
through our questions
okay<03:08:36.720><c> here</c><03:08:36.960><c> are</c><03:08:37.040><c> my</c><03:08:37.279><c> questions</c><03:08:37.920><c> what</c><03:08:38.080><c> year</c><03:08:38.319><c> did</c>

03:08:38.469 --> 03:08:38.479 align:start position:0%
okay here are my questions what year did
 

03:08:38.479 --> 03:08:40.790 align:start position:0%
okay here are my questions what year did
the<03:08:38.640><c> c</c><03:08:38.880><c> language</c><03:08:39.279><c> debut</c><03:08:40.000><c> who</c><03:08:40.240><c> is</c><03:08:40.399><c> credited</c>

03:08:40.790 --> 03:08:40.800 align:start position:0%
the c language debut who is credited
 

03:08:40.800 --> 03:08:42.309 align:start position:0%
the c language debut who is credited
with<03:08:40.960><c> creating</c><03:08:41.439><c> c</c>

03:08:42.309 --> 03:08:42.319 align:start position:0%
with creating c
 

03:08:42.319 --> 03:08:44.550 align:start position:0%
with creating c
what<03:08:42.560><c> is</c><03:08:42.800><c> the</c><03:08:43.040><c> predecessor</c><03:08:43.680><c> of</c><03:08:43.840><c> c</c>

03:08:44.550 --> 03:08:44.560 align:start position:0%
what is the predecessor of c
 

03:08:44.560 --> 03:08:46.150 align:start position:0%
what is the predecessor of c
and<03:08:44.800><c> this</c><03:08:44.960><c> part</c><03:08:45.120><c> isn't</c><03:08:45.359><c> necessary</c><03:08:45.840><c> but</c><03:08:46.000><c> i'm</c>

03:08:46.150 --> 03:08:46.160 align:start position:0%
and this part isn't necessary but i'm
 

03:08:46.160 --> 03:08:49.110 align:start position:0%
and this part isn't necessary but i'm
going<03:08:46.319><c> to</c><03:08:46.479><c> add</c><03:08:46.640><c> some</c><03:08:46.880><c> text</c><03:08:47.200><c> decorations</c>

03:08:49.110 --> 03:08:49.120 align:start position:0%
going to add some text decorations
 

03:08:49.120 --> 03:08:51.670 align:start position:0%
going to add some text decorations
i'll<03:08:49.359><c> just</c><03:08:49.600><c> display</c><03:08:50.080><c> a</c><03:08:50.240><c> bunch</c><03:08:50.399><c> of</c><03:08:50.560><c> asterisks</c>

03:08:51.670 --> 03:08:51.680 align:start position:0%
i'll just display a bunch of asterisks
 

03:08:51.680 --> 03:08:53.510 align:start position:0%
i'll just display a bunch of asterisks
i'll<03:08:51.840><c> do</c><03:08:52.000><c> that</c><03:08:52.160><c> before</c><03:08:52.720><c> and</c><03:08:52.960><c> after</c><03:08:53.359><c> the</c>

03:08:53.510 --> 03:08:53.520 align:start position:0%
i'll do that before and after the
 

03:08:53.520 --> 03:08:55.110 align:start position:0%
i'll do that before and after the
question

03:08:55.110 --> 03:08:55.120 align:start position:0%
question
 

03:08:55.120 --> 03:08:57.510 align:start position:0%
question
and<03:08:55.439><c> let's</c><03:08:55.680><c> try</c><03:08:55.840><c> that</c><03:08:56.000><c> again</c><03:08:56.720><c> oh</c><03:08:57.040><c> then</c><03:08:57.279><c> add</c><03:08:57.439><c> a</c>

03:08:57.510 --> 03:08:57.520 align:start position:0%
and let's try that again oh then add a
 

03:08:57.520 --> 03:09:00.070 align:start position:0%
and let's try that again oh then add a
new<03:08:57.680><c> line</c><03:08:57.920><c> character</c>

03:09:00.070 --> 03:09:00.080 align:start position:0%
new line character
 

03:09:00.080 --> 03:09:01.670 align:start position:0%
new line character
that's<03:09:00.319><c> a</c><03:09:00.399><c> little</c><03:09:00.560><c> bit</c><03:09:00.800><c> better</c>

03:09:01.670 --> 03:09:01.680 align:start position:0%
that's a little bit better
 

03:09:01.680 --> 03:09:04.150 align:start position:0%
that's a little bit better
after<03:09:02.160><c> our</c><03:09:02.399><c> question</c><03:09:03.120><c> let's</c><03:09:03.359><c> display</c><03:09:03.920><c> the</c>

03:09:04.150 --> 03:09:04.160 align:start position:0%
after our question let's display the
 

03:09:04.160 --> 03:09:06.150 align:start position:0%
after our question let's display the
possible<03:09:04.800><c> options</c>

03:09:06.150 --> 03:09:06.160 align:start position:0%
possible options
 

03:09:06.160 --> 03:09:09.269 align:start position:0%
possible options
so<03:09:06.399><c> we</c><03:09:06.560><c> will</c><03:09:06.720><c> need</c><03:09:07.040><c> a</c><03:09:07.279><c> nested</c><03:09:07.680><c> for</c><03:09:07.920><c> loop</c>

03:09:09.269 --> 03:09:09.279 align:start position:0%
so we will need a nested for loop
 

03:09:09.279 --> 03:09:11.510 align:start position:0%
so we will need a nested for loop
so<03:09:09.680><c> four</c>

03:09:11.510 --> 03:09:11.520 align:start position:0%
so four
 

03:09:11.520 --> 03:09:12.790 align:start position:0%
so four
now<03:09:11.680><c> this</c><03:09:11.840><c> part's</c><03:09:12.080><c> gonna</c><03:09:12.240><c> be</c><03:09:12.399><c> a</c><03:09:12.479><c> little</c><03:09:12.640><c> bit</c>

03:09:12.790 --> 03:09:12.800 align:start position:0%
now this part's gonna be a little bit
 

03:09:12.800 --> 03:09:13.830 align:start position:0%
now this part's gonna be a little bit
tricky

03:09:13.830 --> 03:09:13.840 align:start position:0%
tricky
 

03:09:13.840 --> 03:09:16.790 align:start position:0%
tricky
we<03:09:14.000><c> need</c><03:09:14.160><c> to</c><03:09:14.319><c> begin</c><03:09:14.800><c> our</c><03:09:15.040><c> for</c><03:09:15.359><c> loop</c><03:09:15.680><c> at</c><03:09:16.080><c> every</c>

03:09:16.790 --> 03:09:16.800 align:start position:0%
we need to begin our for loop at every
 

03:09:16.800 --> 03:09:19.110 align:start position:0%
we need to begin our for loop at every
fourth<03:09:17.279><c> string</c>

03:09:19.110 --> 03:09:19.120 align:start position:0%
fourth string
 

03:09:19.120 --> 03:09:22.229 align:start position:0%
fourth string
within<03:09:19.439><c> our</c><03:09:19.600><c> for</c><03:09:19.920><c> loop</c><03:09:20.160><c> let's</c><03:09:20.479><c> set</c><03:09:20.880><c> int</c><03:09:21.520><c> j</c>

03:09:22.229 --> 03:09:22.239 align:start position:0%
within our for loop let's set int j
 

03:09:22.239 --> 03:09:24.070 align:start position:0%
within our for loop let's set int j
equal<03:09:23.120><c> to</c>

03:09:24.070 --> 03:09:24.080 align:start position:0%
equal to
 

03:09:24.080 --> 03:09:26.550 align:start position:0%
equal to
i<03:09:24.720><c> times</c><03:09:25.359><c> four</c>

03:09:26.550 --> 03:09:26.560 align:start position:0%
i times four
 

03:09:26.560 --> 03:09:29.190 align:start position:0%
i times four
so<03:09:26.880><c> during</c><03:09:27.200><c> the</c><03:09:27.439><c> first</c><03:09:27.760><c> iteration</c><03:09:28.479><c> i</c><03:09:28.800><c> will</c><03:09:28.960><c> be</c>

03:09:29.190 --> 03:09:29.200 align:start position:0%
so during the first iteration i will be
 

03:09:29.200 --> 03:09:32.469 align:start position:0%
so during the first iteration i will be
zero<03:09:29.920><c> so</c><03:09:30.239><c> zero</c><03:09:30.640><c> times</c><03:09:30.960><c> four</c><03:09:31.359><c> is</c><03:09:31.600><c> zero</c><03:09:32.319><c> but</c>

03:09:32.469 --> 03:09:32.479 align:start position:0%
zero so zero times four is zero but
 

03:09:32.479 --> 03:09:34.630 align:start position:0%
zero so zero times four is zero but
during<03:09:32.800><c> the</c><03:09:32.880><c> next</c><03:09:33.200><c> iteration</c><03:09:33.920><c> of</c><03:09:34.080><c> the</c><03:09:34.319><c> outer</c>

03:09:34.630 --> 03:09:34.640 align:start position:0%
during the next iteration of the outer
 

03:09:34.640 --> 03:09:38.469 align:start position:0%
during the next iteration of the outer
for<03:09:34.960><c> loop</c><03:09:35.600><c> i</c><03:09:36.000><c> is</c><03:09:36.080><c> going</c><03:09:36.239><c> to</c><03:09:36.399><c> equal</c><03:09:36.880><c> one</c><03:09:37.520><c> so</c><03:09:38.000><c> one</c>

03:09:38.469 --> 03:09:38.479 align:start position:0%
for loop i is going to equal one so one
 

03:09:38.479 --> 03:09:40.710 align:start position:0%
for loop i is going to equal one so one
times<03:09:38.960><c> four</c><03:09:39.600><c> is</c><03:09:39.840><c> four</c>

03:09:40.710 --> 03:09:40.720 align:start position:0%
times four is four
 

03:09:40.720 --> 03:09:43.269 align:start position:0%
times four is four
so<03:09:40.960><c> that</c><03:09:41.120><c> way</c><03:09:41.359><c> we</c><03:09:41.520><c> will</c><03:09:41.760><c> begin</c><03:09:42.479><c> the</c><03:09:42.720><c> inner</c><03:09:42.960><c> for</c>

03:09:43.269 --> 03:09:43.279 align:start position:0%
so that way we will begin the inner for
 

03:09:43.279 --> 03:09:46.790 align:start position:0%
so that way we will begin the inner for
loop<03:09:43.680><c> with</c><03:09:44.160><c> every</c><03:09:44.800><c> fourth</c><03:09:45.359><c> string</c><03:09:45.840><c> within</c><03:09:46.479><c> our</c>

03:09:46.790 --> 03:09:46.800 align:start position:0%
loop with every fourth string within our
 

03:09:46.800 --> 03:09:49.030 align:start position:0%
loop with every fourth string within our
2d<03:09:47.200><c> array</c><03:09:47.680><c> of</c><03:09:47.840><c> options</c>

03:09:49.030 --> 03:09:49.040 align:start position:0%
2d array of options
 

03:09:49.040 --> 03:09:51.670 align:start position:0%
2d array of options
and<03:09:49.359><c> the</c><03:09:49.520><c> condition</c><03:09:50.319><c> is</c><03:09:50.479><c> going</c><03:09:50.720><c> to</c><03:09:50.880><c> be</c>

03:09:51.670 --> 03:09:51.680 align:start position:0%
and the condition is going to be
 

03:09:51.680 --> 03:09:54.469 align:start position:0%
and the condition is going to be
j<03:09:52.319><c> is</c><03:09:52.640><c> less</c><03:09:52.880><c> than</c>

03:09:54.469 --> 03:09:54.479 align:start position:0%
j is less than
 

03:09:54.479 --> 03:09:55.349 align:start position:0%
j is less than
i

03:09:55.349 --> 03:09:55.359 align:start position:0%
i
 

03:09:55.359 --> 03:09:56.550 align:start position:0%
i
times<03:09:55.760><c> 4</c>

03:09:56.550 --> 03:09:56.560 align:start position:0%
times 4
 

03:09:56.560 --> 03:09:58.389 align:start position:0%
times 4
and<03:09:56.720><c> then</c><03:09:56.880><c> we</c><03:09:57.040><c> would</c><03:09:57.200><c> like</c><03:09:57.359><c> to</c><03:09:57.520><c> display</c>

03:09:58.389 --> 03:09:58.399 align:start position:0%
and then we would like to display
 

03:09:58.399 --> 03:09:59.750 align:start position:0%
and then we would like to display
four<03:09:58.720><c> strings</c>

03:09:59.750 --> 03:09:59.760 align:start position:0%
four strings
 

03:09:59.760 --> 03:10:02.309 align:start position:0%
four strings
this<03:10:00.000><c> for</c><03:10:00.319><c> loop</c><03:10:00.640><c> will</c><03:10:00.880><c> cycle</c><03:10:01.439><c> four</c><03:10:01.760><c> times</c>

03:10:02.309 --> 03:10:02.319 align:start position:0%
this for loop will cycle four times
 

03:10:02.319 --> 03:10:05.590 align:start position:0%
this for loop will cycle four times
beginning<03:10:03.120><c> at</c><03:10:03.439><c> every</c><03:10:04.080><c> fourth</c><03:10:04.560><c> string</c>

03:10:05.590 --> 03:10:05.600 align:start position:0%
beginning at every fourth string
 

03:10:05.600 --> 03:10:08.790 align:start position:0%
beginning at every fourth string
and<03:10:05.760><c> then</c><03:10:06.000><c> we</c><03:10:06.160><c> need</c><03:10:06.399><c> to</c><03:10:06.720><c> increment</c><03:10:07.359><c> j</c><03:10:07.680><c> by</c><03:10:08.000><c> one</c>

03:10:08.790 --> 03:10:08.800 align:start position:0%
and then we need to increment j by one
 

03:10:08.800 --> 03:10:12.070 align:start position:0%
and then we need to increment j by one
now<03:10:09.040><c> let's</c><03:10:09.279><c> print</c><03:10:10.000><c> every</c><03:10:10.399><c> option</c>

03:10:12.070 --> 03:10:12.080 align:start position:0%
now let's print every option
 

03:10:12.080 --> 03:10:15.030 align:start position:0%
now let's print every option
so<03:10:12.319><c> this</c><03:10:12.479><c> is</c><03:10:12.640><c> a</c><03:10:12.720><c> string</c><03:10:13.359><c> i'll</c><03:10:13.600><c> add</c><03:10:13.760><c> a</c><03:10:13.840><c> new</c><03:10:14.080><c> line</c>

03:10:15.030 --> 03:10:15.040 align:start position:0%
so this is a string i'll add a new line
 

03:10:15.040 --> 03:10:17.030 align:start position:0%
so this is a string i'll add a new line
and<03:10:15.279><c> we</c><03:10:15.439><c> are</c><03:10:15.600><c> printing</c>

03:10:17.030 --> 03:10:17.040 align:start position:0%
and we are printing
 

03:10:17.040 --> 03:10:20.150 align:start position:0%
and we are printing
options<03:10:17.920><c> at</c><03:10:18.239><c> index</c><03:10:18.880><c> of</c><03:10:19.120><c> j</c>

03:10:20.150 --> 03:10:20.160 align:start position:0%
options at index of j
 

03:10:20.160 --> 03:10:21.910 align:start position:0%
options at index of j
and<03:10:20.399><c> let's</c><03:10:20.720><c> test</c><03:10:20.960><c> this</c><03:10:21.200><c> just</c><03:10:21.359><c> to</c><03:10:21.439><c> be</c><03:10:21.520><c> sure</c><03:10:21.760><c> that</c>

03:10:21.910 --> 03:10:21.920 align:start position:0%
and let's test this just to be sure that
 

03:10:21.920 --> 03:10:22.870 align:start position:0%
and let's test this just to be sure that
it<03:10:22.000><c> works</c>

03:10:22.870 --> 03:10:22.880 align:start position:0%
it works
 

03:10:22.880 --> 03:10:25.590 align:start position:0%
it works
okay<03:10:23.120><c> so</c><03:10:23.279><c> we</c><03:10:23.439><c> have</c><03:10:23.680><c> our</c><03:10:23.920><c> question</c><03:10:24.640><c> followed</c><03:10:25.040><c> by</c>

03:10:25.590 --> 03:10:25.600 align:start position:0%
okay so we have our question followed by
 

03:10:25.600 --> 03:10:28.550 align:start position:0%
okay so we have our question followed by
four<03:10:25.920><c> possible</c><03:10:26.479><c> options</c>

03:10:28.550 --> 03:10:28.560 align:start position:0%
four possible options
 

03:10:28.560 --> 03:10:30.710 align:start position:0%
four possible options
now<03:10:28.720><c> let's</c><03:10:28.960><c> accept</c><03:10:29.439><c> some</c><03:10:29.600><c> user</c><03:10:30.000><c> input</c><03:10:30.399><c> after</c>

03:10:30.710 --> 03:10:30.720 align:start position:0%
now let's accept some user input after
 

03:10:30.720 --> 03:10:32.710 align:start position:0%
now let's accept some user input after
the<03:10:31.040><c> nested</c><03:10:31.439><c> for</c><03:10:31.760><c> loop</c><03:10:32.160><c> currently</c><03:10:32.560><c> our</c>

03:10:32.710 --> 03:10:32.720 align:start position:0%
the nested for loop currently our
 

03:10:32.720 --> 03:10:34.309 align:start position:0%
the nested for loop currently our
program<03:10:33.200><c> isn't</c><03:10:33.359><c> going</c><03:10:33.520><c> to</c><03:10:33.600><c> wait</c><03:10:33.840><c> around</c><03:10:34.160><c> for</c>

03:10:34.309 --> 03:10:34.319 align:start position:0%
program isn't going to wait around for
 

03:10:34.319 --> 03:10:36.150 align:start position:0%
program isn't going to wait around for
any<03:10:34.560><c> user</c><03:10:34.880><c> input</c><03:10:35.200><c> that's</c><03:10:35.439><c> why</c><03:10:35.600><c> i</c><03:10:35.680><c> displayed</c>

03:10:36.150 --> 03:10:36.160 align:start position:0%
any user input that's why i displayed
 

03:10:36.160 --> 03:10:38.309 align:start position:0%
any user input that's why i displayed
all<03:10:36.239><c> the</c><03:10:36.399><c> questions</c><03:10:36.800><c> and</c><03:10:36.960><c> options</c><03:10:37.760><c> okay</c><03:10:38.160><c> we</c>

03:10:38.309 --> 03:10:38.319 align:start position:0%
all the questions and options okay we
 

03:10:38.319 --> 03:10:40.710 align:start position:0%
all the questions and options okay we
will<03:10:38.560><c> create</c><03:10:38.880><c> a</c><03:10:39.040><c> prompt</c><03:10:39.520><c> to</c><03:10:39.680><c> have</c><03:10:39.920><c> a</c><03:10:40.080><c> user</c><03:10:40.479><c> type</c>

03:10:40.710 --> 03:10:40.720 align:start position:0%
will create a prompt to have a user type
 

03:10:40.720 --> 03:10:42.150 align:start position:0%
will create a prompt to have a user type
in<03:10:40.880><c> a</c><03:10:40.960><c> guess</c>

03:10:42.150 --> 03:10:42.160 align:start position:0%
in a guess
 

03:10:42.160 --> 03:10:45.349 align:start position:0%
in a guess
guess<03:10:42.880><c> and</c><03:10:43.120><c> we</c><03:10:43.279><c> will</c><03:10:43.520><c> use</c><03:10:43.920><c> scanf</c><03:10:44.640><c> to</c><03:10:44.880><c> accept</c>

03:10:45.349 --> 03:10:45.359 align:start position:0%
guess and we will use scanf to accept
 

03:10:45.359 --> 03:10:47.030 align:start position:0%
guess and we will use scanf to accept
some<03:10:45.520><c> user</c><03:10:45.920><c> input</c>

03:10:47.030 --> 03:10:47.040 align:start position:0%
some user input
 

03:10:47.040 --> 03:10:49.990 align:start position:0%
some user input
we<03:10:47.279><c> are</c><03:10:47.439><c> accepting</c><03:10:48.000><c> a</c><03:10:48.239><c> single</c><03:10:48.640><c> character</c>

03:10:49.990 --> 03:10:50.000 align:start position:0%
we are accepting a single character
 

03:10:50.000 --> 03:10:53.429 align:start position:0%
we are accepting a single character
and<03:10:50.160><c> use</c><03:10:50.399><c> the</c><03:10:50.640><c> address</c><03:10:51.120><c> of</c><03:10:51.359><c> operator</c><03:10:52.319><c> guess</c>

03:10:53.429 --> 03:10:53.439 align:start position:0%
and use the address of operator guess
 

03:10:53.439 --> 03:10:54.790 align:start position:0%
and use the address of operator guess
now<03:10:53.600><c> let</c><03:10:53.680><c> me</c><03:10:53.840><c> show</c><03:10:54.000><c> you</c><03:10:54.080><c> what</c><03:10:54.239><c> happens</c><03:10:54.479><c> when</c><03:10:54.720><c> we</c>

03:10:54.790 --> 03:10:54.800 align:start position:0%
now let me show you what happens when we
 

03:10:54.800 --> 03:10:56.229 align:start position:0%
now let me show you what happens when we
run<03:10:55.040><c> this</c><03:10:55.200><c> real</c><03:10:55.439><c> quick</c>

03:10:56.229 --> 03:10:56.239 align:start position:0%
run this real quick
 

03:10:56.239 --> 03:10:57.830 align:start position:0%
run this real quick
so<03:10:56.479><c> i'm</c><03:10:56.560><c> just</c><03:10:56.720><c> going</c><03:10:56.880><c> to</c><03:10:56.960><c> type</c><03:10:57.279><c> in</c><03:10:57.439><c> anything</c>

03:10:57.830 --> 03:10:57.840 align:start position:0%
so i'm just going to type in anything
 

03:10:57.840 --> 03:10:59.349 align:start position:0%
so i'm just going to type in anything
let's<03:10:58.080><c> say</c><03:10:58.399><c> a</c>

03:10:59.349 --> 03:10:59.359 align:start position:0%
let's say a
 

03:10:59.359 --> 03:11:01.910 align:start position:0%
let's say a
okay<03:10:59.680><c> so</c><03:10:59.840><c> we</c><03:11:00.080><c> skipped</c><03:11:00.560><c> question</c><03:11:01.120><c> two</c>

03:11:01.910 --> 03:11:01.920 align:start position:0%
okay so we skipped question two
 

03:11:01.920 --> 03:11:04.309 align:start position:0%
okay so we skipped question two
that's<03:11:02.160><c> because</c><03:11:02.720><c> after</c><03:11:03.040><c> using</c><03:11:03.359><c> scanf</c><03:11:04.000><c> when</c><03:11:04.160><c> we</c>

03:11:04.309 --> 03:11:04.319 align:start position:0%
that's because after using scanf when we
 

03:11:04.319 --> 03:11:06.469 align:start position:0%
that's because after using scanf when we
accept<03:11:04.640><c> a</c><03:11:04.800><c> character</c><03:11:05.520><c> we</c><03:11:05.680><c> have</c><03:11:05.840><c> that</c><03:11:06.080><c> new</c><03:11:06.239><c> line</c>

03:11:06.469 --> 03:11:06.479 align:start position:0%
accept a character we have that new line
 

03:11:06.479 --> 03:11:08.550 align:start position:0%
accept a character we have that new line
character<03:11:06.800><c> within</c><03:11:07.040><c> the</c><03:11:07.200><c> input</c><03:11:07.520><c> buffer</c><03:11:08.239><c> so</c><03:11:08.399><c> we</c>

03:11:08.550 --> 03:11:08.560 align:start position:0%
character within the input buffer so we
 

03:11:08.560 --> 03:11:09.990 align:start position:0%
character within the input buffer so we
need<03:11:08.720><c> to</c><03:11:08.880><c> clear</c><03:11:09.200><c> that</c>

03:11:09.990 --> 03:11:10.000 align:start position:0%
need to clear that
 

03:11:10.000 --> 03:11:11.990 align:start position:0%
need to clear that
so<03:11:10.239><c> one</c><03:11:10.399><c> way</c><03:11:10.560><c> in</c><03:11:10.640><c> which</c><03:11:10.880><c> we</c><03:11:11.040><c> can</c><03:11:11.279><c> clear</c><03:11:11.600><c> that</c><03:11:11.920><c> is</c>

03:11:11.990 --> 03:11:12.000 align:start position:0%
so one way in which we can clear that is
 

03:11:12.000 --> 03:11:15.590 align:start position:0%
so one way in which we can clear that is
to<03:11:12.160><c> use</c><03:11:12.560><c> scanf</c><03:11:13.040><c> again</c>

03:11:15.590 --> 03:11:15.600 align:start position:0%
 
 

03:11:15.600 --> 03:11:18.550 align:start position:0%
 
use<03:11:15.920><c> the</c><03:11:16.239><c> c</c><03:11:16.479><c> format</c><03:11:16.800><c> specifier</c><03:11:17.520><c> and</c><03:11:17.600><c> that's</c><03:11:17.920><c> it</c>

03:11:18.550 --> 03:11:18.560 align:start position:0%
use the c format specifier and that's it
 

03:11:18.560 --> 03:11:21.030 align:start position:0%
use the c format specifier and that's it
so<03:11:18.800><c> this</c><03:11:19.040><c> will</c><03:11:19.359><c> clear</c><03:11:19.840><c> the</c><03:11:20.399><c> new</c><03:11:20.720><c> line</c>

03:11:21.030 --> 03:11:21.040 align:start position:0%
so this will clear the new line
 

03:11:21.040 --> 03:11:23.349 align:start position:0%
so this will clear the new line
character<03:11:21.760><c> from</c><03:11:22.319><c> input</c>

03:11:23.349 --> 03:11:23.359 align:start position:0%
character from input
 

03:11:23.359 --> 03:11:24.469 align:start position:0%
character from input
buffer

03:11:24.469 --> 03:11:24.479 align:start position:0%
buffer
 

03:11:24.479 --> 03:11:26.229 align:start position:0%
buffer
so<03:11:24.720><c> this</c><03:11:24.880><c> should</c><03:11:25.120><c> no</c><03:11:25.279><c> longer</c><03:11:25.680><c> just</c><03:11:25.840><c> skip</c>

03:11:26.229 --> 03:11:26.239 align:start position:0%
so this should no longer just skip
 

03:11:26.239 --> 03:11:27.590 align:start position:0%
so this should no longer just skip
question<03:11:26.720><c> two</c>

03:11:27.590 --> 03:11:27.600 align:start position:0%
question two
 

03:11:27.600 --> 03:11:28.550 align:start position:0%
question two
okay

03:11:28.550 --> 03:11:28.560 align:start position:0%
okay
 

03:11:28.560 --> 03:11:29.990 align:start position:0%
okay
let's<03:11:28.800><c> say</c><03:11:29.200><c> a</c>

03:11:29.990 --> 03:11:30.000 align:start position:0%
let's say a
 

03:11:30.000 --> 03:11:30.870 align:start position:0%
let's say a
b

03:11:30.870 --> 03:11:30.880 align:start position:0%
b
 

03:11:30.880 --> 03:11:32.229 align:start position:0%
b
c

03:11:32.229 --> 03:11:32.239 align:start position:0%
c
 

03:11:32.239 --> 03:11:34.229 align:start position:0%
c
okay<03:11:32.560><c> so</c><03:11:32.800><c> we</c><03:11:32.960><c> know</c><03:11:33.120><c> we</c><03:11:33.200><c> can</c><03:11:33.359><c> accept</c><03:11:33.760><c> some</c><03:11:33.920><c> user</c>

03:11:34.229 --> 03:11:34.239 align:start position:0%
okay so we know we can accept some user
 

03:11:34.239 --> 03:11:35.429 align:start position:0%
okay so we know we can accept some user
input<03:11:34.560><c> now</c>

03:11:35.429 --> 03:11:35.439 align:start position:0%
input now
 

03:11:35.439 --> 03:11:37.110 align:start position:0%
input now
now<03:11:35.600><c> here's</c><03:11:35.840><c> one</c><03:11:36.080><c> thing</c><03:11:36.479><c> what</c><03:11:36.640><c> if</c><03:11:36.720><c> somebody</c>

03:11:37.110 --> 03:11:37.120 align:start position:0%
now here's one thing what if somebody
 

03:11:37.120 --> 03:11:39.510 align:start position:0%
now here's one thing what if somebody
types<03:11:37.439><c> in</c><03:11:37.600><c> a</c><03:11:37.760><c> lowercase</c><03:11:38.319><c> character</c><03:11:39.200><c> i</c><03:11:39.279><c> think</c>

03:11:39.510 --> 03:11:39.520 align:start position:0%
types in a lowercase character i think
 

03:11:39.520 --> 03:11:40.790 align:start position:0%
types in a lowercase character i think
that<03:11:39.680><c> should</c><03:11:39.840><c> still</c><03:11:40.080><c> count</c><03:11:40.479><c> even</c><03:11:40.640><c> though</c>

03:11:40.790 --> 03:11:40.800 align:start position:0%
that should still count even though
 

03:11:40.800 --> 03:11:43.030 align:start position:0%
that should still count even though
we're<03:11:40.960><c> looking</c><03:11:41.200><c> for</c><03:11:41.359><c> an</c><03:11:41.520><c> uppercase</c><03:11:42.000><c> character</c>

03:11:43.030 --> 03:11:43.040 align:start position:0%
we're looking for an uppercase character
 

03:11:43.040 --> 03:11:46.309 align:start position:0%
we're looking for an uppercase character
so<03:11:43.279><c> let's</c><03:11:43.600><c> take</c><03:11:44.000><c> our</c><03:11:44.239><c> guess</c><03:11:44.960><c> and</c><03:11:45.200><c> use</c><03:11:45.520><c> the</c><03:11:45.920><c> two</c>

03:11:46.309 --> 03:11:46.319 align:start position:0%
so let's take our guess and use the two
 

03:11:46.319 --> 03:11:48.309 align:start position:0%
so let's take our guess and use the two
upper<03:11:46.640><c> function</c><03:11:47.040><c> to</c><03:11:47.120><c> make</c><03:11:47.279><c> it</c><03:11:47.439><c> uppercase</c>

03:11:48.309 --> 03:11:48.319 align:start position:0%
upper function to make it uppercase
 

03:11:48.319 --> 03:11:51.349 align:start position:0%
upper function to make it uppercase
guess<03:11:48.880><c> equals</c><03:11:49.600><c> to</c><03:11:50.239><c> upper</c>

03:11:51.349 --> 03:11:51.359 align:start position:0%
guess equals to upper
 

03:11:51.359 --> 03:11:53.269 align:start position:0%
guess equals to upper
then<03:11:51.680><c> pass</c><03:11:52.080><c> in</c><03:11:52.319><c> guess</c>

03:11:53.269 --> 03:11:53.279 align:start position:0%
then pass in guess
 

03:11:53.279 --> 03:11:54.950 align:start position:0%
then pass in guess
so<03:11:53.439><c> basically</c><03:11:53.840><c> we're</c><03:11:54.000><c> passing</c><03:11:54.319><c> in</c><03:11:54.479><c> our</c><03:11:54.560><c> guess</c>

03:11:54.950 --> 03:11:54.960 align:start position:0%
so basically we're passing in our guess
 

03:11:54.960 --> 03:11:57.269 align:start position:0%
so basically we're passing in our guess
making<03:11:55.279><c> it</c><03:11:55.439><c> uppercase</c><03:11:56.239><c> and</c><03:11:56.479><c> reassigning</c><03:11:57.200><c> it</c>

03:11:57.269 --> 03:11:57.279 align:start position:0%
making it uppercase and reassigning it
 

03:11:57.279 --> 03:11:58.710 align:start position:0%
making it uppercase and reassigning it
to<03:11:57.520><c> our</c><03:11:57.680><c> guess</c>

03:11:58.710 --> 03:11:58.720 align:start position:0%
to our guess
 

03:11:58.720 --> 03:12:00.870 align:start position:0%
to our guess
and<03:11:59.040><c> let's</c><03:11:59.279><c> write</c><03:11:59.439><c> an</c><03:11:59.600><c> if</c><03:11:59.760><c> else</c><03:12:00.000><c> statement</c><03:12:00.560><c> to</c>

03:12:00.870 --> 03:12:00.880 align:start position:0%
and let's write an if else statement to
 

03:12:00.880 --> 03:12:03.190 align:start position:0%
and let's write an if else statement to
check<03:12:01.279><c> our</c><03:12:01.439><c> guess</c><03:12:01.840><c> if</c><03:12:02.000><c> it's</c><03:12:02.160><c> equal</c><03:12:02.560><c> to</c><03:12:02.960><c> our</c>

03:12:03.190 --> 03:12:03.200 align:start position:0%
check our guess if it's equal to our
 

03:12:03.200 --> 03:12:06.309 align:start position:0%
check our guess if it's equal to our
answer<03:12:04.000><c> so</c><03:12:04.479><c> if</c><03:12:05.200><c> else</c>

03:12:06.309 --> 03:12:06.319 align:start position:0%
answer so if else
 

03:12:06.319 --> 03:12:08.870 align:start position:0%
answer so if else
our<03:12:06.560><c> condition</c><03:12:07.040><c> within</c><03:12:07.359><c> our</c><03:12:07.520><c> if</c><03:12:07.680><c> statement</c><03:12:08.319><c> if</c>

03:12:08.870 --> 03:12:08.880 align:start position:0%
our condition within our if statement if
 

03:12:08.880 --> 03:12:09.750 align:start position:0%
our condition within our if statement if
guess

03:12:09.750 --> 03:12:09.760 align:start position:0%
guess
 

03:12:09.760 --> 03:12:13.110 align:start position:0%
guess
is<03:12:10.000><c> equal</c><03:12:10.319><c> to</c><03:12:10.720><c> answer</c><03:12:11.600><c> at</c><03:12:11.920><c> index</c><03:12:12.399><c> of</c><03:12:12.640><c> i</c>

03:12:13.110 --> 03:12:13.120 align:start position:0%
is equal to answer at index of i
 

03:12:13.120 --> 03:12:15.269 align:start position:0%
is equal to answer at index of i
remember<03:12:13.520><c> that</c><03:12:13.680><c> we're</c><03:12:13.840><c> still</c><03:12:14.080><c> within</c><03:12:14.720><c> the</c><03:12:14.960><c> for</c>

03:12:15.269 --> 03:12:15.279 align:start position:0%
remember that we're still within the for
 

03:12:15.279 --> 03:12:17.510 align:start position:0%
remember that we're still within the for
loop<03:12:15.600><c> the</c><03:12:15.840><c> outer</c><03:12:16.160><c> for</c><03:12:16.399><c> loop</c><03:12:16.800><c> so</c><03:12:16.960><c> we</c><03:12:17.120><c> have</c><03:12:17.279><c> that</c>

03:12:17.510 --> 03:12:17.520 align:start position:0%
loop the outer for loop so we have that
 

03:12:17.520 --> 03:12:20.469 align:start position:0%
loop the outer for loop so we have that
index<03:12:18.239><c> oh</c><03:12:18.479><c> that's</c><03:12:18.800><c> answers</c><03:12:19.439><c> plural</c>

03:12:20.469 --> 03:12:20.479 align:start position:0%
index oh that's answers plural
 

03:12:20.479 --> 03:12:23.349 align:start position:0%
index oh that's answers plural
if<03:12:20.800><c> a</c><03:12:20.960><c> user's</c><03:12:21.359><c> guess</c><03:12:21.760><c> is</c><03:12:21.920><c> equal</c><03:12:22.160><c> to</c><03:12:22.319><c> the</c><03:12:22.479><c> answer</c>

03:12:23.349 --> 03:12:23.359 align:start position:0%
if a user's guess is equal to the answer
 

03:12:23.359 --> 03:12:25.910 align:start position:0%
if a user's guess is equal to the answer
then<03:12:23.680><c> let's</c><03:12:23.920><c> print</c><03:12:24.479><c> correct</c>

03:12:25.910 --> 03:12:25.920 align:start position:0%
then let's print correct
 

03:12:25.920 --> 03:12:29.670 align:start position:0%
then let's print correct
and<03:12:26.000><c> then</c><03:12:26.160><c> give</c><03:12:26.399><c> them</c><03:12:26.560><c> one</c><03:12:26.800><c> point</c><03:12:27.520><c> so</c><03:12:27.840><c> printf</c>

03:12:29.670 --> 03:12:29.680 align:start position:0%
and then give them one point so printf
 

03:12:29.680 --> 03:12:32.309 align:start position:0%
and then give them one point so printf
correct

03:12:32.309 --> 03:12:32.319 align:start position:0%
correct
 

03:12:32.319 --> 03:12:35.110 align:start position:0%
correct
and<03:12:32.479><c> then</c><03:12:32.800><c> increment</c><03:12:33.359><c> our</c><03:12:33.600><c> score</c><03:12:34.319><c> score</c><03:12:34.800><c> plus</c>

03:12:35.110 --> 03:12:35.120 align:start position:0%
and then increment our score score plus
 

03:12:35.120 --> 03:12:37.269 align:start position:0%
and then increment our score score plus
plus

03:12:37.269 --> 03:12:37.279 align:start position:0%
plus
 

03:12:37.279 --> 03:12:40.150 align:start position:0%
plus
else<03:12:37.600><c> we</c><03:12:37.840><c> will</c><03:12:38.000><c> print</c><03:12:38.880><c> wrong</c><03:12:39.680><c> and</c><03:12:39.840><c> you</c><03:12:39.920><c> can</c>

03:12:40.150 --> 03:12:40.160 align:start position:0%
else we will print wrong and you can
 

03:12:40.160 --> 03:12:41.429 align:start position:0%
else we will print wrong and you can
give<03:12:40.319><c> the</c><03:12:40.479><c> correct</c><03:12:40.800><c> answer</c><03:12:41.120><c> if</c><03:12:41.200><c> you</c><03:12:41.279><c> would</c>

03:12:41.429 --> 03:12:41.439 align:start position:0%
give the correct answer if you would
 

03:12:41.439 --> 03:12:43.590 align:start position:0%
give the correct answer if you would
like<03:12:41.760><c> just</c><03:12:41.920><c> do</c><03:12:42.080><c> that</c><03:12:42.239><c> within</c><03:12:42.560><c> here</c><03:12:43.120><c> now</c><03:12:43.359><c> once</c>

03:12:43.590 --> 03:12:43.600 align:start position:0%
like just do that within here now once
 

03:12:43.600 --> 03:12:45.830 align:start position:0%
like just do that within here now once
we<03:12:43.840><c> cycle</c><03:12:44.239><c> through</c><03:12:44.479><c> all</c><03:12:44.640><c> of</c><03:12:44.720><c> the</c><03:12:44.880><c> questions</c><03:12:45.680><c> we</c>

03:12:45.830 --> 03:12:45.840 align:start position:0%
we cycle through all of the questions we
 

03:12:45.840 --> 03:12:48.309 align:start position:0%
we cycle through all of the questions we
can<03:12:46.000><c> display</c><03:12:46.560><c> a</c><03:12:46.720><c> user</c><03:12:47.040><c> score</c><03:12:47.680><c> so</c><03:12:47.840><c> be</c><03:12:48.000><c> sure</c><03:12:48.160><c> to</c>

03:12:48.309 --> 03:12:48.319 align:start position:0%
can display a user score so be sure to
 

03:12:48.319 --> 03:12:50.229 align:start position:0%
can display a user score so be sure to
do<03:12:48.479><c> that</c><03:12:48.720><c> outside</c><03:12:49.120><c> of</c><03:12:49.200><c> the</c><03:12:49.359><c> for</c><03:12:49.600><c> loop</c><03:12:50.000><c> the</c>

03:12:50.229 --> 03:12:50.239 align:start position:0%
do that outside of the for loop the
 

03:12:50.239 --> 03:12:52.550 align:start position:0%
do that outside of the for loop the
outer<03:12:50.560><c> for</c><03:12:50.800><c> loop</c><03:12:51.040><c> that</c><03:12:51.200><c> is</c><03:12:51.760><c> so</c><03:12:51.920><c> let's</c><03:12:52.160><c> use</c>

03:12:52.550 --> 03:12:52.560 align:start position:0%
outer for loop that is so let's use
 

03:12:52.560 --> 03:12:53.830 align:start position:0%
outer for loop that is so let's use
printf

03:12:53.830 --> 03:12:53.840 align:start position:0%
printf
 

03:12:53.840 --> 03:12:55.190 align:start position:0%
printf
and<03:12:54.080><c> display</c>

03:12:55.190 --> 03:12:55.200 align:start position:0%
and display
 

03:12:55.200 --> 03:12:57.670 align:start position:0%
and display
final<03:12:56.080><c> score</c>

03:12:57.670 --> 03:12:57.680 align:start position:0%
final score
 

03:12:57.680 --> 03:13:00.950 align:start position:0%
final score
so<03:12:57.920><c> i'm</c><03:12:58.080><c> going</c><03:12:58.239><c> to</c><03:12:58.399><c> display</c><03:12:59.279><c> two</c><03:12:59.520><c> values</c>

03:13:00.950 --> 03:13:00.960 align:start position:0%
so i'm going to display two values
 

03:13:00.960 --> 03:13:03.269 align:start position:0%
so i'm going to display two values
so<03:13:01.120><c> the</c><03:13:01.279><c> first</c><03:13:01.600><c> will</c><03:13:01.840><c> be</c><03:13:02.080><c> the</c><03:13:02.239><c> player</c><03:13:02.560><c> score</c>

03:13:03.269 --> 03:13:03.279 align:start position:0%
so the first will be the player score
 

03:13:03.279 --> 03:13:06.070 align:start position:0%
so the first will be the player score
divided<03:13:03.840><c> by</c><03:13:04.319><c> the</c><03:13:04.479><c> number</c><03:13:04.720><c> of</c><03:13:04.880><c> questions</c>

03:13:06.070 --> 03:13:06.080 align:start position:0%
divided by the number of questions
 

03:13:06.080 --> 03:13:08.710 align:start position:0%
divided by the number of questions
so<03:13:06.239><c> we</c><03:13:06.399><c> have</c><03:13:06.720><c> two</c><03:13:06.960><c> integers</c><03:13:07.439><c> to</c><03:13:07.520><c> work</c><03:13:07.760><c> with</c><03:13:08.479><c> and</c>

03:13:08.710 --> 03:13:08.720 align:start position:0%
so we have two integers to work with and
 

03:13:08.720 --> 03:13:11.910 align:start position:0%
so we have two integers to work with and
we<03:13:08.880><c> are</c><03:13:09.040><c> displaying</c><03:13:09.520><c> score</c><03:13:10.319><c> and</c><03:13:10.880><c> number</c><03:13:11.600><c> of</c>

03:13:11.910 --> 03:13:11.920 align:start position:0%
we are displaying score and number of
 

03:13:11.920 --> 03:13:14.389 align:start position:0%
we are displaying score and number of
questions<03:13:12.880><c> and</c><03:13:12.960><c> then</c><03:13:13.120><c> if</c><03:13:13.279><c> you</c><03:13:13.359><c> want</c><03:13:13.600><c> you</c><03:13:13.920><c> can</c>

03:13:14.389 --> 03:13:14.399 align:start position:0%
questions and then if you want you can
 

03:13:14.399 --> 03:13:15.990 align:start position:0%
questions and then if you want you can
add<03:13:14.560><c> some</c><03:13:14.720><c> text</c><03:13:15.040><c> decoration</c><03:13:15.520><c> to</c><03:13:15.600><c> make</c><03:13:15.760><c> it</c><03:13:15.840><c> look</c>

03:13:15.990 --> 03:13:16.000 align:start position:0%
add some text decoration to make it look
 

03:13:16.000 --> 03:13:17.510 align:start position:0%
add some text decoration to make it look
cool

03:13:17.510 --> 03:13:17.520 align:start position:0%
cool
 

03:13:17.520 --> 03:13:19.110 align:start position:0%
cool
so<03:13:17.760><c> i'm</c><03:13:17.920><c> going</c><03:13:18.080><c> to</c><03:13:18.239><c> run</c><03:13:18.399><c> through</c><03:13:18.560><c> this</c><03:13:18.800><c> quiz</c>

03:13:19.110 --> 03:13:19.120 align:start position:0%
so i'm going to run through this quiz
 

03:13:19.120 --> 03:13:21.429 align:start position:0%
so i'm going to run through this quiz
once<03:13:19.520><c> and</c><03:13:19.760><c> intentionally</c><03:13:20.399><c> get</c><03:13:20.640><c> one</c><03:13:20.960><c> question</c>

03:13:21.429 --> 03:13:21.439 align:start position:0%
once and intentionally get one question
 

03:13:21.439 --> 03:13:22.469 align:start position:0%
once and intentionally get one question
wrong

03:13:22.469 --> 03:13:22.479 align:start position:0%
wrong
 

03:13:22.479 --> 03:13:24.550 align:start position:0%
wrong
so<03:13:22.640><c> what</c><03:13:22.880><c> year</c><03:13:23.120><c> did</c><03:13:23.279><c> the</c><03:13:23.359><c> c</c><03:13:23.600><c> language</c><03:13:24.080><c> debut</c>

03:13:24.550 --> 03:13:24.560 align:start position:0%
so what year did the c language debut
 

03:13:24.560 --> 03:13:28.309 align:start position:0%
so what year did the c language debut
that<03:13:24.880><c> would</c><03:13:25.040><c> be</c><03:13:25.399><c> 1972</c><03:13:26.479><c> that's</c><03:13:26.840><c> b</c><03:13:27.920><c> who</c><03:13:28.160><c> is</c>

03:13:28.309 --> 03:13:28.319 align:start position:0%
that would be 1972 that's b who is
 

03:13:28.319 --> 03:13:30.309 align:start position:0%
that would be 1972 that's b who is
credited<03:13:28.720><c> with</c><03:13:28.960><c> creating</c><03:13:29.439><c> c</c>

03:13:30.309 --> 03:13:30.319 align:start position:0%
credited with creating c
 

03:13:30.319 --> 03:13:32.550 align:start position:0%
credited with creating c
uh<03:13:30.640><c> let's</c><03:13:30.880><c> say</c><03:13:31.279><c> doc</c><03:13:31.600><c> brown</c>

03:13:32.550 --> 03:13:32.560 align:start position:0%
uh let's say doc brown
 

03:13:32.560 --> 03:13:34.550 align:start position:0%
uh let's say doc brown
so<03:13:32.880><c> d</c>

03:13:34.550 --> 03:13:34.560 align:start position:0%
so d
 

03:13:34.560 --> 03:13:36.870 align:start position:0%
so d
and<03:13:34.800><c> what</c><03:13:34.960><c> is</c><03:13:35.120><c> the</c><03:13:35.279><c> predecessor</c><03:13:36.000><c> of</c><03:13:36.239><c> c</c><03:13:36.640><c> that</c>

03:13:36.870 --> 03:13:36.880 align:start position:0%
and what is the predecessor of c that
 

03:13:36.880 --> 03:13:39.510 align:start position:0%
and what is the predecessor of c that
would<03:13:37.120><c> be</c><03:13:37.439><c> b</c>

03:13:39.510 --> 03:13:39.520 align:start position:0%
would be b
 

03:13:39.520 --> 03:13:41.910 align:start position:0%
would be b
okay<03:13:39.920><c> and</c><03:13:40.160><c> my</c><03:13:40.319><c> final</c><03:13:40.720><c> score</c><03:13:41.200><c> is</c><03:13:41.439><c> two</c><03:13:41.680><c> out</c><03:13:41.840><c> of</c>

03:13:41.910 --> 03:13:41.920 align:start position:0%
okay and my final score is two out of
 

03:13:41.920 --> 03:13:42.790 align:start position:0%
okay and my final score is two out of
three

03:13:42.790 --> 03:13:42.800 align:start position:0%
three
 

03:13:42.800 --> 03:13:44.710 align:start position:0%
three
so<03:13:42.960><c> let's</c><03:13:43.200><c> try</c><03:13:43.439><c> that</c><03:13:43.600><c> again</c><03:13:43.920><c> and</c><03:13:44.160><c> this</c><03:13:44.399><c> time</c><03:13:44.640><c> i</c>

03:13:44.710 --> 03:13:44.720 align:start position:0%
so let's try that again and this time i
 

03:13:44.720 --> 03:13:46.710 align:start position:0%
so let's try that again and this time i
will<03:13:44.880><c> try</c><03:13:45.120><c> and</c><03:13:45.200><c> get</c><03:13:45.359><c> one</c><03:13:45.520><c> hundred</c><03:13:45.760><c> percent</c><03:13:46.560><c> so</c>

03:13:46.710 --> 03:13:46.720 align:start position:0%
will try and get one hundred percent so
 

03:13:46.720 --> 03:13:49.510 align:start position:0%
will try and get one hundred percent so
the<03:13:46.880><c> correct</c><03:13:47.200><c> answer</c><03:13:47.600><c> is</c><03:13:48.080><c> b</c>

03:13:49.510 --> 03:13:49.520 align:start position:0%
the correct answer is b
 

03:13:49.520 --> 03:13:51.510 align:start position:0%
the correct answer is b
a<03:13:50.080><c> dennis</c><03:13:50.399><c> ritchie</c>

03:13:51.510 --> 03:13:51.520 align:start position:0%
a dennis ritchie
 

03:13:51.520 --> 03:13:53.670 align:start position:0%
a dennis ritchie
and<03:13:51.920><c> b</c>

03:13:53.670 --> 03:13:53.680 align:start position:0%
and b
 

03:13:53.680 --> 03:13:56.469 align:start position:0%
and b
and<03:13:53.920><c> my</c><03:13:54.080><c> final</c><03:13:54.399><c> score</c><03:13:54.880><c> is</c><03:13:55.120><c> three</c><03:13:55.359><c> out</c><03:13:55.439><c> of</c><03:13:55.600><c> three</c>

03:13:56.469 --> 03:13:56.479 align:start position:0%
and my final score is three out of three
 

03:13:56.479 --> 03:13:58.710 align:start position:0%
and my final score is three out of three
so<03:13:56.720><c> yeah</c><03:13:56.960><c> i</c><03:13:57.120><c> thought</c><03:13:57.359><c> that</c><03:13:57.520><c> would</c><03:13:57.680><c> be</c><03:13:58.000><c> a</c><03:13:58.319><c> simple</c>

03:13:58.710 --> 03:13:58.720 align:start position:0%
so yeah i thought that would be a simple
 

03:13:58.720 --> 03:14:00.870 align:start position:0%
so yeah i thought that would be a simple
quiz<03:13:59.040><c> game</c><03:13:59.439><c> in</c><03:13:59.680><c> c</c><03:14:00.000><c> if</c><03:14:00.160><c> you</c><03:14:00.239><c> would</c><03:14:00.319><c> like</c><03:14:00.479><c> a</c><03:14:00.560><c> copy</c>

03:14:00.870 --> 03:14:00.880 align:start position:0%
quiz game in c if you would like a copy
 

03:14:00.880 --> 03:14:02.309 align:start position:0%
quiz game in c if you would like a copy
of<03:14:00.960><c> this</c><03:14:01.120><c> code</c><03:14:01.439><c> i'll</c><03:14:01.680><c> post</c><03:14:01.920><c> this</c><03:14:02.080><c> to</c><03:14:02.239><c> the</c>

03:14:02.309 --> 03:14:02.319 align:start position:0%
of this code i'll post this to the
 

03:14:02.319 --> 03:14:05.030 align:start position:0%
of this code i'll post this to the
comment<03:14:02.720><c> section</c><03:14:03.040><c> down</c><03:14:03.279><c> below</c><03:14:03.840><c> and</c><03:14:04.160><c> well</c><03:14:04.640><c> yeah</c>

03:14:05.030 --> 03:14:05.040 align:start position:0%
comment section down below and well yeah
 

03:14:05.040 --> 03:14:11.269 align:start position:0%
comment section down below and well yeah
that's<03:14:05.359><c> a</c><03:14:05.600><c> simple</c><03:14:06.080><c> quiz</c><03:14:06.479><c> game</c><03:14:06.960><c> in</c><03:14:07.200><c> c</c>

03:14:11.269 --> 03:14:11.279 align:start position:0%
 
 

03:14:11.279 --> 03:14:13.670 align:start position:0%
 
hey<03:14:11.760><c> everybody</c><03:14:12.319><c> let's</c><03:14:12.560><c> talk</c><03:14:12.800><c> about</c><03:14:13.120><c> bitwise</c>

03:14:13.670 --> 03:14:13.680 align:start position:0%
hey everybody let's talk about bitwise
 

03:14:13.680 --> 03:14:16.389 align:start position:0%
hey everybody let's talk about bitwise
operators<03:14:14.479><c> these</c><03:14:14.880><c> are</c><03:14:15.120><c> special</c><03:14:15.680><c> operators</c>

03:14:16.389 --> 03:14:16.399 align:start position:0%
operators these are special operators
 

03:14:16.399 --> 03:14:18.950 align:start position:0%
operators these are special operators
used<03:14:16.800><c> in</c><03:14:17.040><c> a</c><03:14:17.200><c> bit</c><03:14:17.439><c> level</c><03:14:17.760><c> programming</c>

03:14:18.950 --> 03:14:18.960 align:start position:0%
used in a bit level programming
 

03:14:18.960 --> 03:14:20.950 align:start position:0%
used in a bit level programming
knowing<03:14:19.279><c> binary</c><03:14:20.000><c> is</c><03:14:20.239><c> important</c><03:14:20.640><c> for</c><03:14:20.800><c> this</c>

03:14:20.950 --> 03:14:20.960 align:start position:0%
knowing binary is important for this
 

03:14:20.960 --> 03:14:23.190 align:start position:0%
knowing binary is important for this
topic<03:14:21.760><c> so</c><03:14:22.000><c> if</c><03:14:22.160><c> you</c><03:14:22.239><c> don't</c><03:14:22.399><c> know</c><03:14:22.560><c> how</c><03:14:22.720><c> binary</c>

03:14:23.190 --> 03:14:23.200 align:start position:0%
topic so if you don't know how binary
 

03:14:23.200 --> 03:14:25.030 align:start position:0%
topic so if you don't know how binary
works<03:14:23.680><c> i</c><03:14:23.760><c> would</c><03:14:24.000><c> recommend</c><03:14:24.479><c> skipping</c><03:14:24.800><c> to</c><03:14:24.960><c> the</c>

03:14:25.030 --> 03:14:25.040 align:start position:0%
works i would recommend skipping to the
 

03:14:25.040 --> 03:14:27.030 align:start position:0%
works i would recommend skipping to the
next<03:14:25.359><c> topic</c><03:14:26.080><c> but</c><03:14:26.319><c> if</c><03:14:26.399><c> you're</c><03:14:26.640><c> comfortable</c>

03:14:27.030 --> 03:14:27.040 align:start position:0%
next topic but if you're comfortable
 

03:14:27.040 --> 03:14:29.110 align:start position:0%
next topic but if you're comfortable
with<03:14:27.200><c> binary</c><03:14:27.680><c> well</c><03:14:27.920><c> this</c><03:14:28.160><c> video</c><03:14:28.399><c> is</c><03:14:28.479><c> for</c><03:14:28.640><c> you</c>

03:14:29.110 --> 03:14:29.120 align:start position:0%
with binary well this video is for you
 

03:14:29.120 --> 03:14:31.429 align:start position:0%
with binary well this video is for you
so<03:14:29.279><c> let's</c><03:14:29.520><c> begin</c><03:14:30.080><c> i'm</c><03:14:30.239><c> going</c><03:14:30.399><c> to</c><03:14:30.560><c> discuss</c><03:14:31.120><c> five</c>

03:14:31.429 --> 03:14:31.439 align:start position:0%
so let's begin i'm going to discuss five
 

03:14:31.439 --> 03:14:34.550 align:start position:0%
so let's begin i'm going to discuss five
different<03:14:31.840><c> bitwise</c><03:14:32.399><c> operators</c><03:14:33.439><c> and</c><03:14:33.920><c> or</c>

03:14:34.550 --> 03:14:34.560 align:start position:0%
different bitwise operators and or
 

03:14:34.560 --> 03:14:37.349 align:start position:0%
different bitwise operators and or
exclusive<03:14:35.200><c> or</c><03:14:35.680><c> left</c><03:14:36.000><c> shift</c><03:14:36.319><c> and</c><03:14:36.560><c> right</c><03:14:36.800><c> shift</c>

03:14:37.349 --> 03:14:37.359 align:start position:0%
exclusive or left shift and right shift
 

03:14:37.359 --> 03:14:40.950 align:start position:0%
exclusive or left shift and right shift
let's<03:14:37.600><c> create</c><03:14:38.000><c> three</c><03:14:38.239><c> variables</c><03:14:39.200><c> x</c><03:14:39.520><c> y</c><03:14:39.840><c> and</c><03:14:40.080><c> z</c>

03:14:40.950 --> 03:14:40.960 align:start position:0%
let's create three variables x y and z
 

03:14:40.960 --> 03:14:43.830 align:start position:0%
let's create three variables x y and z
x<03:14:41.279><c> will</c><03:14:41.600><c> equal</c><03:14:42.160><c> six</c>

03:14:43.830 --> 03:14:43.840 align:start position:0%
x will equal six
 

03:14:43.840 --> 03:14:46.150 align:start position:0%
x will equal six
y<03:14:44.319><c> will</c><03:14:44.560><c> equal</c><03:14:44.960><c> twelve</c>

03:14:46.150 --> 03:14:46.160 align:start position:0%
y will equal twelve
 

03:14:46.160 --> 03:14:48.550 align:start position:0%
y will equal twelve
and<03:14:46.560><c> z</c><03:14:46.960><c> will</c><03:14:47.120><c> store</c><03:14:47.439><c> our</c><03:14:47.600><c> result</c><03:14:48.080><c> and</c><03:14:48.239><c> we</c><03:14:48.399><c> will</c>

03:14:48.550 --> 03:14:48.560 align:start position:0%
and z will store our result and we will
 

03:14:48.560 --> 03:14:50.469 align:start position:0%
and z will store our result and we will
set<03:14:48.800><c> that</c><03:14:48.960><c> to</c><03:14:49.120><c> be</c><03:14:49.279><c> zero</c>

03:14:50.469 --> 03:14:50.479 align:start position:0%
set that to be zero
 

03:14:50.479 --> 03:14:52.309 align:start position:0%
set that to be zero
so<03:14:50.720><c> i'm</c><03:14:50.880><c> going</c><03:14:51.040><c> to</c><03:14:51.120><c> give</c><03:14:51.359><c> you</c><03:14:51.520><c> the</c><03:14:51.840><c> binary</c>

03:14:52.309 --> 03:14:52.319 align:start position:0%
so i'm going to give you the binary
 

03:14:52.319 --> 03:14:55.269 align:start position:0%
so i'm going to give you the binary
representation<03:14:53.200><c> of</c><03:14:53.439><c> each</c><03:14:53.600><c> of</c><03:14:53.680><c> these</c><03:14:53.840><c> numbers</c>

03:14:55.269 --> 03:14:55.279 align:start position:0%
representation of each of these numbers
 

03:14:55.279 --> 03:14:57.990 align:start position:0%
representation of each of these numbers
so<03:14:55.680><c> six</c><03:14:56.239><c> is</c>

03:14:57.990 --> 03:14:58.000 align:start position:0%
so six is
 

03:14:58.000 --> 03:15:00.870 align:start position:0%
so six is
this<03:14:58.239><c> number</c><03:14:59.040><c> so</c><03:14:59.200><c> we</c><03:14:59.359><c> have</c><03:14:59.760><c> eight</c><03:15:00.000><c> bits</c><03:15:00.560><c> that's</c>

03:15:00.870 --> 03:15:00.880 align:start position:0%
this number so we have eight bits that's
 

03:15:00.880 --> 03:15:03.030 align:start position:0%
this number so we have eight bits that's
a<03:15:00.960><c> byte</c><03:15:01.520><c> and</c><03:15:01.840><c> this</c><03:15:02.080><c> is</c><03:15:02.239><c> the</c><03:15:02.399><c> binary</c>

03:15:03.030 --> 03:15:03.040 align:start position:0%
a byte and this is the binary
 

03:15:03.040 --> 03:15:06.630 align:start position:0%
a byte and this is the binary
representation<03:15:04.000><c> of</c><03:15:04.160><c> the</c><03:15:04.319><c> number</c><03:15:04.640><c> six</c>

03:15:06.630 --> 03:15:06.640 align:start position:0%
representation of the number six
 

03:15:06.640 --> 03:15:09.830 align:start position:0%
representation of the number six
12<03:15:07.120><c> would</c><03:15:07.279><c> be</c><03:15:07.439><c> this</c><03:15:07.600><c> binary</c><03:15:08.080><c> number</c>

03:15:09.830 --> 03:15:09.840 align:start position:0%
12 would be this binary number
 

03:15:09.840 --> 03:15:12.710 align:start position:0%
12 would be this binary number
and<03:15:10.239><c> zero</c><03:15:10.720><c> zero</c><03:15:11.120><c> is</c><03:15:11.279><c> easy</c>

03:15:12.710 --> 03:15:12.720 align:start position:0%
and zero zero is easy
 

03:15:12.720 --> 03:15:15.750 align:start position:0%
and zero zero is easy
that<03:15:12.960><c> would</c><03:15:13.120><c> be</c><03:15:13.439><c> all</c><03:15:13.680><c> zeros</c><03:15:14.640><c> so</c><03:15:14.800><c> let's</c><03:15:15.040><c> use</c><03:15:15.439><c> the</c>

03:15:15.750 --> 03:15:15.760 align:start position:0%
that would be all zeros so let's use the
 

03:15:15.760 --> 03:15:17.830 align:start position:0%
that would be all zeros so let's use the
and<03:15:16.080><c> bitwise</c><03:15:16.640><c> operator</c><03:15:17.279><c> so</c><03:15:17.520><c> what</c><03:15:17.600><c> we're</c><03:15:17.760><c> going</c>

03:15:17.830 --> 03:15:17.840 align:start position:0%
and bitwise operator so what we're going
 

03:15:17.840 --> 03:15:21.349 align:start position:0%
and bitwise operator so what we're going
to<03:15:18.000><c> do</c><03:15:18.239><c> is</c><03:15:18.479><c> set</c><03:15:18.800><c> z</c><03:15:19.279><c> equal</c><03:15:20.000><c> to</c><03:15:20.479><c> x</c>

03:15:21.349 --> 03:15:21.359 align:start position:0%
to do is set z equal to x
 

03:15:21.359 --> 03:15:23.510 align:start position:0%
to do is set z equal to x
and<03:15:22.080><c> y</c>

03:15:23.510 --> 03:15:23.520 align:start position:0%
and y
 

03:15:23.520 --> 03:15:25.269 align:start position:0%
and y
so<03:15:23.760><c> imagine</c><03:15:24.080><c> this</c><03:15:24.399><c> imagine</c><03:15:24.800><c> that</c><03:15:25.040><c> we're</c>

03:15:25.269 --> 03:15:25.279 align:start position:0%
so imagine this imagine that we're
 

03:15:25.279 --> 03:15:28.790 align:start position:0%
so imagine this imagine that we're
aligning<03:15:25.840><c> all</c><03:15:26.000><c> of</c><03:15:26.080><c> these</c><03:15:26.399><c> bits</c><03:15:26.800><c> in</c><03:15:27.040><c> columns</c>

03:15:28.790 --> 03:15:28.800 align:start position:0%
aligning all of these bits in columns
 

03:15:28.800 --> 03:15:31.110 align:start position:0%
aligning all of these bits in columns
using<03:15:29.200><c> the</c><03:15:29.520><c> and</c><03:15:29.840><c> bitwise</c><03:15:30.399><c> operator</c><03:15:30.880><c> we're</c>

03:15:31.110 --> 03:15:31.120 align:start position:0%
using the and bitwise operator we're
 

03:15:31.120 --> 03:15:33.830 align:start position:0%
using the and bitwise operator we're
going<03:15:31.279><c> to</c><03:15:31.359><c> look</c><03:15:31.600><c> at</c><03:15:31.760><c> our</c><03:15:31.920><c> operands</c><03:15:32.640><c> x</c><03:15:32.880><c> and</c><03:15:33.040><c> y</c><03:15:33.680><c> if</c>

03:15:33.830 --> 03:15:33.840 align:start position:0%
going to look at our operands x and y if
 

03:15:33.840 --> 03:15:35.990 align:start position:0%
going to look at our operands x and y if
both<03:15:34.080><c> of</c><03:15:34.160><c> these</c><03:15:34.399><c> are</c><03:15:34.560><c> a</c><03:15:34.640><c> one</c><03:15:35.040><c> we</c><03:15:35.200><c> will</c><03:15:35.439><c> assign</c>

03:15:35.990 --> 03:15:36.000 align:start position:0%
both of these are a one we will assign
 

03:15:36.000 --> 03:15:37.750 align:start position:0%
both of these are a one we will assign
one<03:15:36.399><c> to</c><03:15:36.640><c> our</c><03:15:36.800><c> result</c>

03:15:37.750 --> 03:15:37.760 align:start position:0%
one to our result
 

03:15:37.760 --> 03:15:39.510 align:start position:0%
one to our result
and<03:15:38.000><c> let's</c><03:15:38.239><c> begin</c><03:15:38.560><c> with</c><03:15:38.720><c> the</c><03:15:38.800><c> first</c><03:15:39.120><c> column</c><03:15:39.439><c> on</c>

03:15:39.510 --> 03:15:39.520 align:start position:0%
and let's begin with the first column on
 

03:15:39.520 --> 03:15:41.750 align:start position:0%
and let's begin with the first column on
the<03:15:39.680><c> right</c><03:15:40.080><c> both</c><03:15:40.319><c> of</c><03:15:40.399><c> these</c><03:15:40.560><c> are</c><03:15:40.720><c> zeros</c><03:15:41.359><c> so</c><03:15:41.600><c> our</c>

03:15:41.750 --> 03:15:41.760 align:start position:0%
the right both of these are zeros so our
 

03:15:41.760 --> 03:15:43.990 align:start position:0%
the right both of these are zeros so our
result<03:15:42.160><c> will</c><03:15:42.319><c> stay</c><03:15:42.560><c> at</c><03:15:42.720><c> zero</c><03:15:43.520><c> and</c><03:15:43.760><c> with</c><03:15:43.920><c> the</c>

03:15:43.990 --> 03:15:44.000 align:start position:0%
result will stay at zero and with the
 

03:15:44.000 --> 03:15:46.790 align:start position:0%
result will stay at zero and with the
next<03:15:44.239><c> column</c><03:15:44.720><c> we</c><03:15:44.960><c> have</c><03:15:45.200><c> one</c><03:15:45.600><c> and</c><03:15:45.920><c> zero</c><03:15:46.560><c> and</c>

03:15:46.790 --> 03:15:46.800 align:start position:0%
next column we have one and zero and
 

03:15:46.800 --> 03:15:49.269 align:start position:0%
next column we have one and zero and
using<03:15:47.120><c> the</c><03:15:47.359><c> and</c><03:15:47.680><c> bitwise</c><03:15:48.160><c> operator</c><03:15:48.960><c> both</c><03:15:49.200><c> of</c>

03:15:49.269 --> 03:15:49.279 align:start position:0%
using the and bitwise operator both of
 

03:15:49.279 --> 03:15:51.590 align:start position:0%
using the and bitwise operator both of
these<03:15:49.680><c> need</c><03:15:49.920><c> to</c><03:15:50.000><c> be</c><03:15:50.239><c> 1</c><03:15:50.560><c> in</c><03:15:50.640><c> order</c><03:15:50.960><c> to</c><03:15:51.120><c> assign</c>

03:15:51.590 --> 03:15:51.600 align:start position:0%
these need to be 1 in order to assign
 

03:15:51.600 --> 03:15:53.750 align:start position:0%
these need to be 1 in order to assign
one<03:15:51.760><c> to</c><03:15:52.000><c> our</c><03:15:52.080><c> result</c><03:15:52.720><c> so</c><03:15:52.880><c> we</c><03:15:53.040><c> will</c><03:15:53.200><c> skip</c><03:15:53.600><c> this</c>

03:15:53.750 --> 03:15:53.760 align:start position:0%
one to our result so we will skip this
 

03:15:53.760 --> 03:15:56.070 align:start position:0%
one to our result so we will skip this
column<03:15:54.399><c> now</c><03:15:54.640><c> with</c><03:15:54.800><c> our</c><03:15:55.040><c> third</c><03:15:55.279><c> column</c><03:15:55.760><c> these</c>

03:15:56.070 --> 03:15:56.080 align:start position:0%
column now with our third column these
 

03:15:56.080 --> 03:15:59.190 align:start position:0%
column now with our third column these
are<03:15:56.239><c> both</c><03:15:56.560><c> 1</c><03:15:57.040><c> so</c><03:15:57.200><c> we</c><03:15:57.359><c> will</c><03:15:57.520><c> assign</c><03:15:58.160><c> 1</c><03:15:58.720><c> to</c><03:15:59.040><c> our</c>

03:15:59.190 --> 03:15:59.200 align:start position:0%
are both 1 so we will assign 1 to our
 

03:15:59.200 --> 03:16:01.990 align:start position:0%
are both 1 so we will assign 1 to our
result<03:16:00.000><c> the</c><03:16:00.160><c> next</c><03:16:00.399><c> column</c><03:16:00.880><c> is</c><03:16:01.200><c> zero</c><03:16:01.600><c> and</c><03:16:01.760><c> one</c>

03:16:01.990 --> 03:16:02.000 align:start position:0%
result the next column is zero and one
 

03:16:02.000 --> 03:16:05.110 align:start position:0%
result the next column is zero and one
we<03:16:02.239><c> skip</c><03:16:02.560><c> it</c><03:16:02.880><c> and</c><03:16:03.120><c> the</c><03:16:03.200><c> rest</c><03:16:03.520><c> are</c><03:16:03.600><c> just</c><03:16:04.000><c> zero</c><03:16:04.720><c> so</c>

03:16:05.110 --> 03:16:05.120 align:start position:0%
we skip it and the rest are just zero so
 

03:16:05.120 --> 03:16:07.830 align:start position:0%
we skip it and the rest are just zero so
this<03:16:05.359><c> binary</c><03:16:05.840><c> number</c><03:16:06.560><c> is</c><03:16:06.800><c> the</c><03:16:07.200><c> binary</c>

03:16:07.830 --> 03:16:07.840 align:start position:0%
this binary number is the binary
 

03:16:07.840 --> 03:16:10.469 align:start position:0%
this binary number is the binary
representation<03:16:08.880><c> of</c><03:16:09.040><c> the</c><03:16:09.200><c> number</c><03:16:09.520><c> four</c>

03:16:10.469 --> 03:16:10.479 align:start position:0%
representation of the number four
 

03:16:10.479 --> 03:16:13.990 align:start position:0%
representation of the number four
so<03:16:10.640><c> let's</c><03:16:10.880><c> test</c><03:16:11.200><c> that</c><03:16:11.840><c> z</c><03:16:12.239><c> equals</c><03:16:12.800><c> x</c><03:16:13.120><c> and</c><03:16:13.359><c> y</c><03:16:13.840><c> and</c>

03:16:13.990 --> 03:16:14.000 align:start position:0%
so let's test that z equals x and y and
 

03:16:14.000 --> 03:16:17.590 align:start position:0%
so let's test that z equals x and y and
let's<03:16:14.239><c> print</c><03:16:14.640><c> z</c>

03:16:17.590 --> 03:16:17.600 align:start position:0%
let's print z
 

03:16:17.600 --> 03:16:20.950 align:start position:0%
let's print z
and<03:16:18.319><c> equals</c><03:16:19.359><c> we're</c><03:16:19.600><c> displaying</c><03:16:19.920><c> an</c><03:16:20.080><c> integer</c>

03:16:20.950 --> 03:16:20.960 align:start position:0%
and equals we're displaying an integer
 

03:16:20.960 --> 03:16:22.790 align:start position:0%
and equals we're displaying an integer
i'll<03:16:21.200><c> add</c><03:16:21.359><c> a</c><03:16:21.439><c> new</c><03:16:21.600><c> line</c>

03:16:22.790 --> 03:16:22.800 align:start position:0%
i'll add a new line
 

03:16:22.800 --> 03:16:25.190 align:start position:0%
i'll add a new line
and<03:16:23.040><c> we</c><03:16:23.279><c> are</c><03:16:23.359><c> displaying</c><03:16:24.239><c> z</c>

03:16:25.190 --> 03:16:25.200 align:start position:0%
and we are displaying z
 

03:16:25.200 --> 03:16:27.429 align:start position:0%
and we are displaying z
and<03:16:25.520><c> let's</c><03:16:25.760><c> see</c><03:16:26.000><c> if</c><03:16:26.160><c> this</c><03:16:26.319><c> is</c><03:16:26.560><c> for</c>

03:16:27.429 --> 03:16:27.439 align:start position:0%
and let's see if this is for
 

03:16:27.439 --> 03:16:30.790 align:start position:0%
and let's see if this is for
yep<03:16:28.080><c> our</c><03:16:28.319><c> result</c><03:16:28.880><c> z</c><03:16:29.359><c> is</c><03:16:29.600><c> equal</c><03:16:29.760><c> to</c><03:16:30.000><c> four</c><03:16:30.640><c> now</c>

03:16:30.790 --> 03:16:30.800 align:start position:0%
yep our result z is equal to four now
 

03:16:30.800 --> 03:16:33.269 align:start position:0%
yep our result z is equal to four now
let's<03:16:31.040><c> move</c><03:16:31.279><c> on</c><03:16:31.439><c> to</c><03:16:31.760><c> or</c><03:16:32.479><c> so</c><03:16:32.640><c> let's</c><03:16:32.880><c> set</c><03:16:33.040><c> this</c>

03:16:33.269 --> 03:16:33.279 align:start position:0%
let's move on to or so let's set this
 

03:16:33.279 --> 03:16:35.030 align:start position:0%
let's move on to or so let's set this
back<03:16:33.439><c> to</c><03:16:33.600><c> zero</c>

03:16:35.030 --> 03:16:35.040 align:start position:0%
back to zero
 

03:16:35.040 --> 03:16:36.710 align:start position:0%
back to zero
and<03:16:35.279><c> we</c><03:16:35.439><c> will</c><03:16:35.600><c> set</c><03:16:36.000><c> z</c>

03:16:36.710 --> 03:16:36.720 align:start position:0%
and we will set z
 

03:16:36.720 --> 03:16:38.550 align:start position:0%
and we will set z
equal<03:16:37.359><c> to</c><03:16:37.680><c> x</c>

03:16:38.550 --> 03:16:38.560 align:start position:0%
equal to x
 

03:16:38.560 --> 03:16:42.150 align:start position:0%
equal to x
or<03:16:39.120><c> y</c><03:16:39.840><c> or</c><03:16:40.239><c> is</c><03:16:40.399><c> represented</c><03:16:41.120><c> by</c><03:16:41.439><c> a</c><03:16:41.680><c> single</c>

03:16:42.150 --> 03:16:42.160 align:start position:0%
or y or is represented by a single
 

03:16:42.160 --> 03:16:44.630 align:start position:0%
or y or is represented by a single
vertical<03:16:42.840><c> bar</c>

03:16:44.630 --> 03:16:44.640 align:start position:0%
vertical bar
 

03:16:44.640 --> 03:16:46.630 align:start position:0%
vertical bar
and<03:16:44.800><c> we</c><03:16:44.960><c> will</c><03:16:45.200><c> print</c>

03:16:46.630 --> 03:16:46.640 align:start position:0%
and we will print
 

03:16:46.640 --> 03:16:48.870 align:start position:0%
and we will print
or<03:16:47.279><c> let's</c><03:16:47.520><c> try</c><03:16:47.760><c> and</c><03:16:47.840><c> guess</c><03:16:48.080><c> what</c><03:16:48.319><c> z</c><03:16:48.560><c> is</c><03:16:48.640><c> going</c>

03:16:48.870 --> 03:16:48.880 align:start position:0%
or let's try and guess what z is going
 

03:16:48.880 --> 03:16:51.190 align:start position:0%
or let's try and guess what z is going
to<03:16:48.960><c> be</c><03:16:49.120><c> before</c><03:16:49.439><c> we</c><03:16:49.600><c> actually</c><03:16:50.000><c> display</c><03:16:50.479><c> it</c>

03:16:51.190 --> 03:16:51.200 align:start position:0%
to be before we actually display it
 

03:16:51.200 --> 03:16:53.910 align:start position:0%
to be before we actually display it
with<03:16:51.439><c> the</c><03:16:51.680><c> or</c><03:16:51.920><c> bitwise</c><03:16:52.479><c> operator</c><03:16:53.120><c> only</c><03:16:53.600><c> one</c><03:16:53.840><c> of</c>

03:16:53.910 --> 03:16:53.920 align:start position:0%
with the or bitwise operator only one of
 

03:16:53.920 --> 03:16:56.150 align:start position:0%
with the or bitwise operator only one of
these<03:16:54.160><c> bits</c><03:16:54.640><c> needs</c><03:16:54.880><c> to</c><03:16:55.040><c> be</c><03:16:55.200><c> one</c><03:16:55.600><c> in</c><03:16:55.760><c> order</c><03:16:56.000><c> for</c>

03:16:56.150 --> 03:16:56.160 align:start position:0%
these bits needs to be one in order for
 

03:16:56.160 --> 03:16:58.469 align:start position:0%
these bits needs to be one in order for
us<03:16:56.319><c> to</c><03:16:56.479><c> assign</c><03:16:56.960><c> one</c><03:16:57.279><c> to</c><03:16:57.439><c> the</c><03:16:57.600><c> result</c>

03:16:58.469 --> 03:16:58.479 align:start position:0%
us to assign one to the result
 

03:16:58.479 --> 03:17:00.710 align:start position:0%
us to assign one to the result
so<03:16:58.800><c> since</c><03:16:59.040><c> these</c><03:16:59.279><c> are</c><03:16:59.359><c> both</c><03:16:59.680><c> zero</c><03:17:00.399><c> this</c><03:17:00.560><c> will</c>

03:17:00.710 --> 03:17:00.720 align:start position:0%
so since these are both zero this will
 

03:17:00.720 --> 03:17:02.229 align:start position:0%
so since these are both zero this will
stay<03:17:00.960><c> at</c><03:17:01.120><c> zero</c>

03:17:02.229 --> 03:17:02.239 align:start position:0%
stay at zero
 

03:17:02.239 --> 03:17:04.710 align:start position:0%
stay at zero
this<03:17:02.479><c> bit</c><03:17:02.720><c> is</c><03:17:02.800><c> one</c><03:17:03.279><c> this</c><03:17:03.520><c> one's</c><03:17:03.760><c> zero</c><03:17:04.399><c> so</c><03:17:04.560><c> this</c>

03:17:04.710 --> 03:17:04.720 align:start position:0%
this bit is one this one's zero so this
 

03:17:04.720 --> 03:17:07.030 align:start position:0%
this bit is one this one's zero so this
would<03:17:04.880><c> be</c><03:17:05.040><c> one</c><03:17:05.760><c> and</c><03:17:06.000><c> for</c><03:17:06.160><c> the</c><03:17:06.239><c> next</c><03:17:06.560><c> column</c><03:17:06.880><c> of</c>

03:17:07.030 --> 03:17:07.040 align:start position:0%
would be one and for the next column of
 

03:17:07.040 --> 03:17:08.870 align:start position:0%
would be one and for the next column of
bits<03:17:07.359><c> these</c><03:17:07.520><c> are</c><03:17:07.680><c> both</c><03:17:07.920><c> one</c><03:17:08.239><c> so</c><03:17:08.399><c> that</c><03:17:08.560><c> counts</c>

03:17:08.870 --> 03:17:08.880 align:start position:0%
bits these are both one so that counts
 

03:17:08.880 --> 03:17:09.830 align:start position:0%
bits these are both one so that counts
as<03:17:09.040><c> well</c>

03:17:09.830 --> 03:17:09.840 align:start position:0%
as well
 

03:17:09.840 --> 03:17:12.229 align:start position:0%
as well
and<03:17:10.000><c> we</c><03:17:10.160><c> have</c><03:17:10.319><c> a</c><03:17:10.399><c> one</c><03:17:10.640><c> in</c><03:17:10.720><c> here</c><03:17:11.040><c> so</c><03:17:11.279><c> that</c><03:17:11.439><c> is</c><03:17:11.600><c> one</c>

03:17:12.229 --> 03:17:12.239 align:start position:0%
and we have a one in here so that is one
 

03:17:12.239 --> 03:17:14.790 align:start position:0%
and we have a one in here so that is one
and<03:17:12.479><c> the</c><03:17:12.560><c> rest</c><03:17:12.880><c> are</c><03:17:12.960><c> just</c><03:17:13.120><c> zero</c><03:17:14.000><c> so</c><03:17:14.239><c> this</c><03:17:14.640><c> is</c>

03:17:14.790 --> 03:17:14.800 align:start position:0%
and the rest are just zero so this is
 

03:17:14.800 --> 03:17:17.750 align:start position:0%
and the rest are just zero so this is
the<03:17:15.200><c> binary</c><03:17:15.760><c> representation</c><03:17:16.800><c> of</c><03:17:17.040><c> the</c><03:17:17.200><c> number</c>

03:17:17.750 --> 03:17:17.760 align:start position:0%
the binary representation of the number
 

03:17:17.760 --> 03:17:20.229 align:start position:0%
the binary representation of the number
fourteen<03:17:18.640><c> and</c><03:17:18.800><c> let's</c><03:17:18.960><c> see</c><03:17:19.200><c> if</c><03:17:19.359><c> z</c><03:17:19.760><c> is</c><03:17:19.920><c> equal</c><03:17:20.080><c> to</c>

03:17:20.229 --> 03:17:20.239 align:start position:0%
fourteen and let's see if z is equal to
 

03:17:20.239 --> 03:17:21.990 align:start position:0%
fourteen and let's see if z is equal to
fourteen

03:17:21.990 --> 03:17:22.000 align:start position:0%
fourteen
 

03:17:22.000 --> 03:17:23.830 align:start position:0%
fourteen
yep<03:17:22.239><c> we</c><03:17:22.399><c> got</c><03:17:22.560><c> that</c><03:17:22.800><c> right</c>

03:17:23.830 --> 03:17:23.840 align:start position:0%
yep we got that right
 

03:17:23.840 --> 03:17:26.790 align:start position:0%
yep we got that right
so<03:17:24.080><c> let's</c><03:17:24.319><c> set</c><03:17:24.479><c> this</c><03:17:24.720><c> back</c><03:17:24.880><c> to</c><03:17:25.040><c> zero</c>

03:17:26.790 --> 03:17:26.800 align:start position:0%
so let's set this back to zero
 

03:17:26.800 --> 03:17:28.710 align:start position:0%
so let's set this back to zero
now<03:17:27.040><c> with</c><03:17:27.359><c> exclusive</c><03:17:28.000><c> ore</c><03:17:28.319><c> that</c><03:17:28.560><c> is</c>

03:17:28.710 --> 03:17:28.720 align:start position:0%
now with exclusive ore that is
 

03:17:28.720 --> 03:17:31.670 align:start position:0%
now with exclusive ore that is
represented<03:17:29.439><c> by</c><03:17:29.760><c> a</c><03:17:30.000><c> carrot</c><03:17:30.720><c> with</c><03:17:31.040><c> exclusive</c>

03:17:31.670 --> 03:17:31.680 align:start position:0%
represented by a carrot with exclusive
 

03:17:31.680 --> 03:17:34.870 align:start position:0%
represented by a carrot with exclusive
ore<03:17:32.000><c> only</c><03:17:32.479><c> one</c><03:17:32.800><c> of</c><03:17:32.960><c> these</c><03:17:33.200><c> bits</c><03:17:33.600><c> can</c><03:17:33.760><c> be</c><03:17:34.000><c> won</c><03:17:34.560><c> if</c>

03:17:34.870 --> 03:17:34.880 align:start position:0%
ore only one of these bits can be won if
 

03:17:34.880 --> 03:17:37.429 align:start position:0%
ore only one of these bits can be won if
neither<03:17:35.439><c> or</c><03:17:35.760><c> both</c><03:17:36.160><c> of</c><03:17:36.239><c> these</c><03:17:36.479><c> bits</c><03:17:36.800><c> are</c><03:17:36.960><c> one</c><03:17:37.279><c> we</c>

03:17:37.429 --> 03:17:37.439 align:start position:0%
neither or both of these bits are one we
 

03:17:37.439 --> 03:17:39.590 align:start position:0%
neither or both of these bits are one we
don't<03:17:37.680><c> assign</c><03:17:38.000><c> anything</c><03:17:38.800><c> so</c><03:17:39.040><c> both</c><03:17:39.279><c> of</c><03:17:39.439><c> these</c>

03:17:39.590 --> 03:17:39.600 align:start position:0%
don't assign anything so both of these
 

03:17:39.600 --> 03:17:42.309 align:start position:0%
don't assign anything so both of these
bits<03:17:39.920><c> are</c><03:17:40.080><c> zero</c><03:17:40.640><c> they</c><03:17:40.800><c> will</c><03:17:40.960><c> stay</c><03:17:41.200><c> a</c><03:17:41.359><c> zero</c>

03:17:42.309 --> 03:17:42.319 align:start position:0%
bits are zero they will stay a zero
 

03:17:42.319 --> 03:17:44.469 align:start position:0%
bits are zero they will stay a zero
we<03:17:42.560><c> have</c><03:17:42.800><c> one</c><03:17:42.960><c> of</c><03:17:43.040><c> these</c><03:17:43.200><c> bits</c><03:17:43.520><c> as</c><03:17:43.760><c> one</c><03:17:44.080><c> and</c><03:17:44.239><c> not</c>

03:17:44.469 --> 03:17:44.479 align:start position:0%
we have one of these bits as one and not
 

03:17:44.479 --> 03:17:46.870 align:start position:0%
we have one of these bits as one and not
the<03:17:44.640><c> other</c><03:17:45.120><c> so</c><03:17:45.279><c> that</c><03:17:45.520><c> counts</c><03:17:45.840><c> as</c><03:17:46.000><c> one</c><03:17:46.479><c> now</c><03:17:46.720><c> with</c>

03:17:46.870 --> 03:17:46.880 align:start position:0%
the other so that counts as one now with
 

03:17:46.880 --> 03:17:48.790 align:start position:0%
the other so that counts as one now with
this<03:17:47.040><c> next</c><03:17:47.279><c> column</c><03:17:47.760><c> both</c><03:17:48.000><c> of</c><03:17:48.080><c> these</c><03:17:48.319><c> are</c><03:17:48.479><c> one</c>

03:17:48.790 --> 03:17:48.800 align:start position:0%
this next column both of these are one
 

03:17:48.800 --> 03:17:51.510 align:start position:0%
this next column both of these are one
and<03:17:49.040><c> using</c><03:17:49.439><c> exclusive</c><03:17:50.080><c> ore</c><03:17:50.800><c> only</c><03:17:51.200><c> one</c><03:17:51.439><c> of</c>

03:17:51.510 --> 03:17:51.520 align:start position:0%
and using exclusive ore only one of
 

03:17:51.520 --> 03:17:54.070 align:start position:0%
and using exclusive ore only one of
these<03:17:51.760><c> can</c><03:17:52.000><c> be</c><03:17:52.160><c> one</c><03:17:52.960><c> so</c><03:17:53.200><c> since</c><03:17:53.439><c> these</c><03:17:53.680><c> are</c><03:17:53.760><c> both</c>

03:17:54.070 --> 03:17:54.080 align:start position:0%
these can be one so since these are both
 

03:17:54.080 --> 03:17:56.150 align:start position:0%
these can be one so since these are both
ones<03:17:54.560><c> we</c><03:17:54.720><c> do</c><03:17:54.800><c> not</c><03:17:55.040><c> assign</c><03:17:55.359><c> anything</c><03:17:55.840><c> so</c><03:17:56.000><c> we</c>

03:17:56.150 --> 03:17:56.160 align:start position:0%
ones we do not assign anything so we
 

03:17:56.160 --> 03:17:58.070 align:start position:0%
ones we do not assign anything so we
keep<03:17:56.399><c> that</c><03:17:56.560><c> as</c><03:17:56.640><c> zero</c><03:17:57.439><c> and</c><03:17:57.600><c> with</c><03:17:57.760><c> the</c><03:17:57.840><c> next</c>

03:17:58.070 --> 03:17:58.080 align:start position:0%
keep that as zero and with the next
 

03:17:58.080 --> 03:18:00.550 align:start position:0%
keep that as zero and with the next
column<03:17:58.560><c> only</c><03:17:58.880><c> one</c><03:17:59.040><c> of</c><03:17:59.120><c> these</c><03:17:59.359><c> is</c><03:17:59.520><c> one</c><03:18:00.080><c> so</c><03:18:00.399><c> we</c>

03:18:00.550 --> 03:18:00.560 align:start position:0%
column only one of these is one so we
 

03:18:00.560 --> 03:18:02.309 align:start position:0%
column only one of these is one so we
will<03:18:00.880><c> set</c><03:18:01.120><c> this</c><03:18:01.279><c> to</c><03:18:01.359><c> be</c><03:18:01.520><c> one</c><03:18:01.920><c> within</c><03:18:02.160><c> the</c>

03:18:02.309 --> 03:18:02.319 align:start position:0%
will set this to be one within the
 

03:18:02.319 --> 03:18:05.030 align:start position:0%
will set this to be one within the
result<03:18:03.200><c> and</c><03:18:03.600><c> this</c><03:18:04.000><c> is</c><03:18:04.160><c> the</c><03:18:04.479><c> binary</c>

03:18:05.030 --> 03:18:05.040 align:start position:0%
result and this is the binary
 

03:18:05.040 --> 03:18:08.070 align:start position:0%
result and this is the binary
representation<03:18:06.399><c> of</c><03:18:06.720><c> ten</c><03:18:07.359><c> and</c><03:18:07.439><c> let's</c><03:18:07.680><c> test</c>

03:18:08.070 --> 03:18:08.080 align:start position:0%
representation of ten and let's test
 

03:18:08.080 --> 03:18:09.510 align:start position:0%
representation of ten and let's test
that

03:18:09.510 --> 03:18:09.520 align:start position:0%
that
 

03:18:09.520 --> 03:18:10.389 align:start position:0%
that
z

03:18:10.389 --> 03:18:10.399 align:start position:0%
z
 

03:18:10.399 --> 03:18:12.469 align:start position:0%
z
equals<03:18:11.439><c> x</c>

03:18:12.469 --> 03:18:12.479 align:start position:0%
equals x
 

03:18:12.479 --> 03:18:15.910 align:start position:0%
equals x
exclusive<03:18:13.120><c> or</c><03:18:13.760><c> y</c>

03:18:15.910 --> 03:18:15.920 align:start position:0%
exclusive or y
 

03:18:15.920 --> 03:18:19.830 align:start position:0%
exclusive or y
and<03:18:16.160><c> we</c><03:18:16.319><c> will</c><03:18:16.560><c> print</c><03:18:17.200><c> exclusive</c><03:18:17.920><c> or</c><03:18:18.319><c> equals</c><03:18:19.040><c> z</c>

03:18:19.830 --> 03:18:19.840 align:start position:0%
and we will print exclusive or equals z
 

03:18:19.840 --> 03:18:22.870 align:start position:0%
and we will print exclusive or equals z
and<03:18:20.239><c> let's</c><03:18:20.399><c> see</c><03:18:20.560><c> if</c><03:18:20.720><c> that's</c><03:18:21.040><c> ten</c>

03:18:22.870 --> 03:18:22.880 align:start position:0%
and let's see if that's ten
 

03:18:22.880 --> 03:18:26.469 align:start position:0%
and let's see if that's ten
yep<03:18:23.680><c> z</c><03:18:24.160><c> is</c><03:18:24.319><c> equal</c><03:18:24.560><c> to</c><03:18:24.720><c> ten</c><03:18:25.520><c> now</c><03:18:25.760><c> here's</c><03:18:26.080><c> left</c>

03:18:26.469 --> 03:18:26.479 align:start position:0%
yep z is equal to ten now here's left
 

03:18:26.479 --> 03:18:29.030 align:start position:0%
yep z is equal to ten now here's left
shift<03:18:26.960><c> we</c><03:18:27.120><c> will</c><03:18:27.359><c> shift</c><03:18:27.840><c> these</c><03:18:28.080><c> bits</c><03:18:28.640><c> so</c><03:18:28.800><c> many</c>

03:18:29.030 --> 03:18:29.040 align:start position:0%
shift we will shift these bits so many
 

03:18:29.040 --> 03:18:31.910 align:start position:0%
shift we will shift these bits so many
spaces<03:18:29.600><c> to</c><03:18:29.760><c> the</c><03:18:29.920><c> left</c><03:18:30.319><c> using</c><03:18:30.640><c> left</c><03:18:31.040><c> shift</c><03:18:31.760><c> so</c>

03:18:31.910 --> 03:18:31.920 align:start position:0%
spaces to the left using left shift so
 

03:18:31.920 --> 03:18:33.590 align:start position:0%
spaces to the left using left shift so
we<03:18:32.080><c> will</c><03:18:32.319><c> set</c><03:18:32.720><c> z</c>

03:18:33.590 --> 03:18:33.600 align:start position:0%
we will set z
 

03:18:33.600 --> 03:18:37.910 align:start position:0%
we will set z
equal<03:18:34.399><c> to</c><03:18:34.840><c> x</c><03:18:36.000><c> and</c><03:18:36.239><c> then</c><03:18:36.640><c> left</c><03:18:36.960><c> shift</c><03:18:37.520><c> which</c><03:18:37.760><c> is</c>

03:18:37.910 --> 03:18:37.920 align:start position:0%
equal to x and then left shift which is
 

03:18:37.920 --> 03:18:40.790 align:start position:0%
equal to x and then left shift which is
represented<03:18:38.560><c> by</c><03:18:38.880><c> two</c><03:18:39.279><c> left</c><03:18:39.520><c> angle</c><03:18:39.840><c> brackets</c><03:18:40.640><c> a</c>

03:18:40.790 --> 03:18:40.800 align:start position:0%
represented by two left angle brackets a
 

03:18:40.800 --> 03:18:43.269 align:start position:0%
represented by two left angle brackets a
number<03:18:41.040><c> of</c><03:18:41.200><c> spaces</c><03:18:41.760><c> let's</c><03:18:42.000><c> begin</c><03:18:42.239><c> with</c><03:18:42.479><c> one</c>

03:18:43.269 --> 03:18:43.279 align:start position:0%
number of spaces let's begin with one
 

03:18:43.279 --> 03:18:45.910 align:start position:0%
number of spaces let's begin with one
so<03:18:43.439><c> we</c><03:18:43.600><c> have</c><03:18:43.920><c> x</c><03:18:44.239><c> equal</c><03:18:44.560><c> to</c><03:18:44.800><c> six</c>

03:18:45.910 --> 03:18:45.920 align:start position:0%
so we have x equal to six
 

03:18:45.920 --> 03:18:48.150 align:start position:0%
so we have x equal to six
what<03:18:46.080><c> we're</c><03:18:46.239><c> doing</c><03:18:46.640><c> is</c><03:18:46.880><c> shifting</c><03:18:47.439><c> these</c><03:18:47.680><c> bits</c>

03:18:48.150 --> 03:18:48.160 align:start position:0%
what we're doing is shifting these bits
 

03:18:48.160 --> 03:18:50.710 align:start position:0%
what we're doing is shifting these bits
one<03:18:48.399><c> spot</c><03:18:48.720><c> to</c><03:18:48.880><c> the</c><03:18:48.960><c> left</c>

03:18:50.710 --> 03:18:50.720 align:start position:0%
one spot to the left
 

03:18:50.720 --> 03:18:52.790 align:start position:0%
one spot to the left
and<03:18:50.800><c> then</c><03:18:51.040><c> adding</c><03:18:51.359><c> zero</c><03:18:51.680><c> at</c><03:18:51.760><c> the</c><03:18:51.920><c> end</c>

03:18:52.790 --> 03:18:52.800 align:start position:0%
and then adding zero at the end
 

03:18:52.800 --> 03:18:55.590 align:start position:0%
and then adding zero at the end
and<03:18:53.120><c> this</c><03:18:53.359><c> is</c><03:18:53.600><c> the</c><03:18:53.760><c> binary</c><03:18:54.399><c> representation</c><03:18:55.439><c> of</c>

03:18:55.590 --> 03:18:55.600 align:start position:0%
and this is the binary representation of
 

03:18:55.600 --> 03:18:57.830 align:start position:0%
and this is the binary representation of
the<03:18:55.760><c> number</c><03:18:56.160><c> 12.</c><03:18:56.880><c> actually</c><03:18:57.200><c> it's</c><03:18:57.359><c> the</c><03:18:57.439><c> same</c><03:18:57.680><c> as</c>

03:18:57.830 --> 03:18:57.840 align:start position:0%
the number 12. actually it's the same as
 

03:18:57.840 --> 03:18:59.830 align:start position:0%
the number 12. actually it's the same as
y<03:18:58.000><c> currently</c><03:18:58.560><c> these</c><03:18:58.880><c> binary</c><03:18:59.279><c> numbers</c><03:18:59.600><c> are</c><03:18:59.680><c> the</c>

03:18:59.830 --> 03:18:59.840 align:start position:0%
y currently these binary numbers are the
 

03:18:59.840 --> 03:19:00.790 align:start position:0%
y currently these binary numbers are the
same

03:19:00.790 --> 03:19:00.800 align:start position:0%
same
 

03:19:00.800 --> 03:19:04.630 align:start position:0%
same
and<03:19:01.040><c> let's</c><03:19:01.279><c> print</c><03:19:01.520><c> that</c>

03:19:04.630 --> 03:19:04.640 align:start position:0%
 
 

03:19:04.640 --> 03:19:05.590 align:start position:0%
 
so

03:19:05.590 --> 03:19:05.600 align:start position:0%
so
 

03:19:05.600 --> 03:19:07.830 align:start position:0%
so
shift<03:19:06.399><c> left</c>

03:19:07.830 --> 03:19:07.840 align:start position:0%
shift left
 

03:19:07.840 --> 03:19:10.790 align:start position:0%
shift left
and<03:19:08.319><c> z</c><03:19:08.800><c> should</c><03:19:09.120><c> equal</c><03:19:09.439><c> 12</c>

03:19:10.790 --> 03:19:10.800 align:start position:0%
and z should equal 12
 

03:19:10.800 --> 03:19:11.590 align:start position:0%
and z should equal 12
yep

03:19:11.590 --> 03:19:11.600 align:start position:0%
yep
 

03:19:11.600 --> 03:19:14.150 align:start position:0%
yep
and<03:19:11.840><c> if</c><03:19:12.000><c> i</c><03:19:12.160><c> shift</c><03:19:12.560><c> left</c><03:19:12.960><c> twice</c>

03:19:14.150 --> 03:19:14.160 align:start position:0%
and if i shift left twice
 

03:19:14.160 --> 03:19:16.229 align:start position:0%
and if i shift left twice
well<03:19:14.399><c> then</c><03:19:14.720><c> we</c><03:19:14.880><c> are</c><03:19:14.960><c> just</c><03:19:15.120><c> moving</c><03:19:15.600><c> these</c><03:19:15.840><c> bits</c>

03:19:16.229 --> 03:19:16.239 align:start position:0%
well then we are just moving these bits
 

03:19:16.239 --> 03:19:22.550 align:start position:0%
well then we are just moving these bits
one<03:19:16.479><c> more</c><03:19:16.840><c> space</c><03:19:18.319><c> and</c><03:19:18.560><c> now</c><03:19:18.960><c> this</c><03:19:19.200><c> is</c><03:19:19.359><c> 24.</c>

03:19:22.550 --> 03:19:22.560 align:start position:0%
 
 

03:19:22.560 --> 03:19:23.590 align:start position:0%
 
there<03:19:22.720><c> you</c><03:19:22.880><c> go</c>

03:19:23.590 --> 03:19:23.600 align:start position:0%
there you go
 

03:19:23.600 --> 03:19:25.269 align:start position:0%
there you go
so<03:19:23.760><c> you</c><03:19:23.920><c> probably</c><03:19:24.239><c> noticed</c><03:19:24.720><c> that</c><03:19:24.880><c> there's</c><03:19:25.200><c> a</c>

03:19:25.269 --> 03:19:25.279 align:start position:0%
so you probably noticed that there's a
 

03:19:25.279 --> 03:19:27.670 align:start position:0%
so you probably noticed that there's a
pattern<03:19:25.760><c> every</c><03:19:26.000><c> time</c><03:19:26.239><c> we</c><03:19:26.560><c> shift</c><03:19:26.960><c> a</c><03:19:27.200><c> binary</c>

03:19:27.670 --> 03:19:27.680 align:start position:0%
pattern every time we shift a binary
 

03:19:27.680 --> 03:19:29.429 align:start position:0%
pattern every time we shift a binary
number<03:19:28.000><c> to</c><03:19:28.160><c> the</c><03:19:28.239><c> left</c><03:19:28.720><c> it</c><03:19:28.880><c> effectively</c>

03:19:29.429 --> 03:19:29.439 align:start position:0%
number to the left it effectively
 

03:19:29.439 --> 03:19:30.469 align:start position:0%
number to the left it effectively
doubles

03:19:30.469 --> 03:19:30.479 align:start position:0%
doubles
 

03:19:30.479 --> 03:19:32.790 align:start position:0%
doubles
now<03:19:30.640><c> let's</c><03:19:30.960><c> right</c><03:19:31.279><c> shift</c>

03:19:32.790 --> 03:19:32.800 align:start position:0%
now let's right shift
 

03:19:32.800 --> 03:19:35.429 align:start position:0%
now let's right shift
so<03:19:32.960><c> let's</c><03:19:33.200><c> copy</c><03:19:33.600><c> this</c>

03:19:35.429 --> 03:19:35.439 align:start position:0%
so let's copy this
 

03:19:35.439 --> 03:19:37.110 align:start position:0%
so let's copy this
paste<03:19:35.840><c> it</c>

03:19:37.110 --> 03:19:37.120 align:start position:0%
paste it
 

03:19:37.120 --> 03:19:40.469 align:start position:0%
paste it
and<03:19:37.359><c> we</c><03:19:37.520><c> will</c><03:19:37.760><c> use</c><03:19:38.319><c> two</c><03:19:38.720><c> right</c><03:19:38.960><c> angle</c><03:19:39.279><c> brackets</c>

03:19:40.469 --> 03:19:40.479 align:start position:0%
and we will use two right angle brackets
 

03:19:40.479 --> 03:19:43.349 align:start position:0%
and we will use two right angle brackets
and<03:19:40.720><c> this</c><03:19:40.960><c> is</c><03:19:41.359><c> shift</c><03:19:42.080><c> right</c>

03:19:43.349 --> 03:19:43.359 align:start position:0%
and this is shift right
 

03:19:43.359 --> 03:19:46.630 align:start position:0%
and this is shift right
and<03:19:43.600><c> let's</c><03:19:43.920><c> set</c><03:19:44.160><c> this</c><03:19:44.560><c> to</c><03:19:44.880><c> 6.</c>

03:19:46.630 --> 03:19:46.640 align:start position:0%
and let's set this to 6.
 

03:19:46.640 --> 03:19:48.630 align:start position:0%
and let's set this to 6.
if<03:19:46.800><c> we're</c><03:19:46.960><c> right</c><03:19:47.279><c> shifting</c><03:19:47.760><c> we</c><03:19:48.000><c> shift</c><03:19:48.399><c> these</c>

03:19:48.630 --> 03:19:48.640 align:start position:0%
if we're right shifting we shift these
 

03:19:48.640 --> 03:19:51.269 align:start position:0%
if we're right shifting we shift these
bits<03:19:49.200><c> one</c><03:19:49.439><c> spot</c><03:19:49.760><c> to</c><03:19:49.920><c> the</c><03:19:50.080><c> right</c><03:19:50.640><c> and</c><03:19:50.800><c> this</c><03:19:51.120><c> is</c>

03:19:51.269 --> 03:19:51.279 align:start position:0%
bits one spot to the right and this is
 

03:19:51.279 --> 03:19:53.910 align:start position:0%
bits one spot to the right and this is
the<03:19:51.439><c> binary</c><03:19:52.000><c> representation</c><03:19:53.040><c> of</c><03:19:53.279><c> the</c><03:19:53.439><c> number</c>

03:19:53.910 --> 03:19:53.920 align:start position:0%
the binary representation of the number
 

03:19:53.920 --> 03:19:57.110 align:start position:0%
the binary representation of the number
three<03:19:54.720><c> and</c><03:19:54.960><c> if</c><03:19:55.120><c> i</c><03:19:55.200><c> print</c><03:19:55.520><c> this</c>

03:19:57.110 --> 03:19:57.120 align:start position:0%
three and if i print this
 

03:19:57.120 --> 03:20:00.469 align:start position:0%
three and if i print this
after<03:19:57.760><c> shifting</c><03:19:58.239><c> right</c><03:19:58.560><c> once</c><03:19:59.279><c> our</c><03:19:59.520><c> result</c><03:20:00.080><c> z</c>

03:20:00.469 --> 03:20:00.479 align:start position:0%
after shifting right once our result z
 

03:20:00.479 --> 03:20:01.910 align:start position:0%
after shifting right once our result z
is<03:20:00.720><c> three</c>

03:20:01.910 --> 03:20:01.920 align:start position:0%
is three
 

03:20:01.920 --> 03:20:03.429 align:start position:0%
is three
every<03:20:02.160><c> time</c><03:20:02.399><c> we</c><03:20:02.560><c> shift</c><03:20:02.960><c> right</c><03:20:03.200><c> we're</c>

03:20:03.429 --> 03:20:03.439 align:start position:0%
every time we shift right we're
 

03:20:03.439 --> 03:20:05.590 align:start position:0%
every time we shift right we're
effectively<03:20:04.080><c> cutting</c><03:20:04.399><c> our</c><03:20:04.560><c> number</c><03:20:04.960><c> in</c><03:20:05.040><c> half</c>

03:20:05.590 --> 03:20:05.600 align:start position:0%
effectively cutting our number in half
 

03:20:05.600 --> 03:20:07.750 align:start position:0%
effectively cutting our number in half
now<03:20:05.840><c> if</c><03:20:06.000><c> i</c><03:20:06.160><c> shift</c><03:20:06.479><c> right</c><03:20:06.720><c> again</c>

03:20:07.750 --> 03:20:07.760 align:start position:0%
now if i shift right again
 

03:20:07.760 --> 03:20:09.830 align:start position:0%
now if i shift right again
we<03:20:07.920><c> will</c><03:20:08.080><c> shift</c><03:20:08.479><c> these</c><03:20:08.720><c> bits</c><03:20:09.120><c> one</c><03:20:09.279><c> more</c><03:20:09.520><c> spot</c>

03:20:09.830 --> 03:20:09.840 align:start position:0%
we will shift these bits one more spot
 

03:20:09.840 --> 03:20:11.830 align:start position:0%
we will shift these bits one more spot
to<03:20:10.000><c> the</c><03:20:10.160><c> right</c><03:20:10.880><c> and</c><03:20:11.200><c> we</c><03:20:11.359><c> are</c><03:20:11.520><c> going</c><03:20:11.680><c> to</c>

03:20:11.830 --> 03:20:11.840 align:start position:0%
to the right and we are going to
 

03:20:11.840 --> 03:20:14.229 align:start position:0%
to the right and we are going to
truncate<03:20:12.399><c> this</c><03:20:12.640><c> one</c><03:20:12.880><c> at</c><03:20:13.040><c> the</c><03:20:13.200><c> end</c><03:20:13.840><c> and</c><03:20:14.080><c> this</c>

03:20:14.229 --> 03:20:14.239 align:start position:0%
truncate this one at the end and this
 

03:20:14.239 --> 03:20:16.710 align:start position:0%
truncate this one at the end and this
will<03:20:14.399><c> give</c><03:20:14.640><c> us</c><03:20:15.120><c> one</c><03:20:15.520><c> that</c><03:20:15.840><c> is</c><03:20:16.000><c> the</c><03:20:16.239><c> binary</c>

03:20:16.710 --> 03:20:16.720 align:start position:0%
will give us one that is the binary
 

03:20:16.720 --> 03:20:18.950 align:start position:0%
will give us one that is the binary
representation<03:20:17.520><c> of</c><03:20:17.600><c> the</c><03:20:17.680><c> number</c><03:20:18.080><c> one</c>

03:20:18.950 --> 03:20:18.960 align:start position:0%
representation of the number one
 

03:20:18.960 --> 03:20:21.910 align:start position:0%
representation of the number one
so<03:20:19.200><c> technically</c><03:20:19.840><c> half</c><03:20:20.080><c> of</c><03:20:20.319><c> three</c><03:20:20.720><c> is</c><03:20:20.880><c> 1.5</c><03:20:21.760><c> but</c>

03:20:21.910 --> 03:20:21.920 align:start position:0%
so technically half of three is 1.5 but
 

03:20:21.920 --> 03:20:24.790 align:start position:0%
so technically half of three is 1.5 but
we<03:20:22.080><c> can't</c><03:20:22.399><c> store</c><03:20:22.800><c> that</c><03:20:23.120><c> 0.5</c><03:20:23.760><c> portion</c><03:20:24.479><c> so</c><03:20:24.720><c> it</c>

03:20:24.790 --> 03:20:24.800 align:start position:0%
we can't store that 0.5 portion so it
 

03:20:24.800 --> 03:20:27.349 align:start position:0%
we can't store that 0.5 portion so it
just<03:20:24.960><c> gets</c><03:20:25.200><c> truncated</c><03:20:26.319><c> all</c><03:20:26.479><c> right</c><03:20:26.800><c> everybody</c>

03:20:27.349 --> 03:20:27.359 align:start position:0%
just gets truncated all right everybody
 

03:20:27.359 --> 03:20:30.309 align:start position:0%
just gets truncated all right everybody
those<03:20:27.680><c> are</c><03:20:27.920><c> just</c><03:20:28.319><c> a</c><03:20:28.479><c> few</c><03:20:28.880><c> bitwise</c><03:20:29.439><c> operators</c>

03:20:30.309 --> 03:20:30.319 align:start position:0%
those are just a few bitwise operators
 

03:20:30.319 --> 03:20:33.269 align:start position:0%
those are just a few bitwise operators
they<03:20:30.640><c> are</c><03:20:30.880><c> special</c><03:20:31.439><c> operators</c><03:20:32.239><c> used</c><03:20:32.640><c> in</c><03:20:33.040><c> bit</c>

03:20:33.269 --> 03:20:33.279 align:start position:0%
they are special operators used in bit
 

03:20:33.279 --> 03:20:35.590 align:start position:0%
they are special operators used in bit
level<03:20:33.680><c> programming</c><03:20:34.640><c> there's</c><03:20:34.960><c> five</c><03:20:35.279><c> that</c><03:20:35.439><c> we</c>

03:20:35.590 --> 03:20:35.600 align:start position:0%
level programming there's five that we
 

03:20:35.600 --> 03:20:37.349 align:start position:0%
level programming there's five that we
discussed<03:20:36.000><c> today</c><03:20:36.399><c> but</c><03:20:36.560><c> there</c><03:20:36.800><c> is</c><03:20:36.880><c> another</c>

03:20:37.349 --> 03:20:37.359 align:start position:0%
discussed today but there is another
 

03:20:37.359 --> 03:20:39.830 align:start position:0%
discussed today but there is another
known<03:20:37.680><c> as</c><03:20:37.920><c> the</c><03:20:38.239><c> complement</c><03:20:38.880><c> operator</c><03:20:39.600><c> but</c>

03:20:39.830 --> 03:20:39.840 align:start position:0%
known as the complement operator but
 

03:20:39.840 --> 03:20:42.229 align:start position:0%
known as the complement operator but
that's<03:20:40.160><c> a</c><03:20:40.319><c> little</c><03:20:40.560><c> bit</c><03:20:40.720><c> more</c><03:20:40.960><c> complex</c><03:20:41.920><c> and</c><03:20:42.080><c> i</c>

03:20:42.229 --> 03:20:42.239 align:start position:0%
that's a little bit more complex and i
 

03:20:42.239 --> 03:20:44.790 align:start position:0%
that's a little bit more complex and i
might<03:20:42.479><c> save</c><03:20:42.800><c> that</c><03:20:43.040><c> for</c><03:20:43.279><c> another</c><03:20:43.760><c> video</c><03:20:44.560><c> so</c>

03:20:44.790 --> 03:20:44.800 align:start position:0%
might save that for another video so
 

03:20:44.800 --> 03:20:47.349 align:start position:0%
might save that for another video so
yeah<03:20:45.120><c> those</c><03:20:45.439><c> are</c><03:20:45.680><c> bitwise</c><03:20:46.319><c> operators</c><03:20:47.120><c> if</c><03:20:47.279><c> you</c>

03:20:47.349 --> 03:20:47.359 align:start position:0%
yeah those are bitwise operators if you
 

03:20:47.359 --> 03:20:49.190 align:start position:0%
yeah those are bitwise operators if you
would<03:20:47.439><c> like</c><03:20:47.680><c> a</c><03:20:47.760><c> copy</c><03:20:48.080><c> of</c><03:20:48.160><c> this</c><03:20:48.319><c> code</c><03:20:48.640><c> i'll</c><03:20:48.880><c> post</c>

03:20:49.190 --> 03:20:49.200 align:start position:0%
would like a copy of this code i'll post
 

03:20:49.200 --> 03:20:51.030 align:start position:0%
would like a copy of this code i'll post
this<03:20:49.359><c> to</c><03:20:49.520><c> the</c><03:20:49.600><c> comments</c><03:20:50.000><c> section</c><03:20:50.319><c> down</c><03:20:50.560><c> below</c>

03:20:51.030 --> 03:20:51.040 align:start position:0%
this to the comments section down below
 

03:20:51.040 --> 03:20:53.269 align:start position:0%
this to the comments section down below
and<03:20:51.200><c> well</c><03:20:51.760><c> yeah</c><03:20:52.080><c> those</c><03:20:52.319><c> are</c><03:20:52.560><c> some</c><03:20:52.720><c> bitwise</c>

03:20:53.269 --> 03:20:53.279 align:start position:0%
and well yeah those are some bitwise
 

03:20:53.279 --> 03:20:57.990 align:start position:0%
and well yeah those are some bitwise
operators<03:20:54.080><c> in</c><03:20:54.319><c> c</c>

03:20:57.990 --> 03:20:58.000 align:start position:0%
 
 

03:20:58.000 --> 03:21:00.309 align:start position:0%
 
all<03:20:58.239><c> right</c><03:20:58.720><c> everybody</c><03:20:59.359><c> so</c><03:20:59.600><c> let's</c><03:20:59.840><c> talk</c><03:21:00.080><c> about</c>

03:21:00.309 --> 03:21:00.319 align:start position:0%
all right everybody so let's talk about
 

03:21:00.319 --> 03:21:03.429 align:start position:0%
all right everybody so let's talk about
memory<03:21:01.040><c> memory</c><03:21:01.680><c> is</c><03:21:02.000><c> an</c><03:21:02.239><c> array</c><03:21:02.640><c> of</c><03:21:02.880><c> bytes</c>

03:21:03.429 --> 03:21:03.439 align:start position:0%
memory memory is an array of bytes
 

03:21:03.439 --> 03:21:06.790 align:start position:0%
memory memory is an array of bytes
within<03:21:03.840><c> ram</c><03:21:04.479><c> and</c><03:21:04.800><c> a</c><03:21:05.040><c> memory</c><03:21:05.520><c> block</c><03:21:06.160><c> is</c><03:21:06.479><c> a</c>

03:21:06.790 --> 03:21:06.800 align:start position:0%
within ram and a memory block is a
 

03:21:06.800 --> 03:21:10.070 align:start position:0%
within ram and a memory block is a
single<03:21:07.279><c> unit</c><03:21:08.000><c> in</c><03:21:08.239><c> bytes</c><03:21:08.800><c> within</c><03:21:09.279><c> memory</c>

03:21:10.070 --> 03:21:10.080 align:start position:0%
single unit in bytes within memory
 

03:21:10.080 --> 03:21:13.110 align:start position:0%
single unit in bytes within memory
they're<03:21:10.399><c> used</c><03:21:10.880><c> to</c><03:21:11.120><c> hold</c><03:21:11.600><c> some</c><03:21:11.920><c> value</c><03:21:12.640><c> and</c><03:21:12.880><c> a</c>

03:21:13.110 --> 03:21:13.120 align:start position:0%
they're used to hold some value and a
 

03:21:13.120 --> 03:21:16.550 align:start position:0%
they're used to hold some value and a
memory<03:21:13.760><c> address</c><03:21:14.640><c> is</c><03:21:14.960><c> the</c><03:21:15.120><c> address</c><03:21:15.760><c> of</c><03:21:15.920><c> where</c><03:21:16.319><c> a</c>

03:21:16.550 --> 03:21:16.560 align:start position:0%
memory address is the address of where a
 

03:21:16.560 --> 03:21:19.670 align:start position:0%
memory address is the address of where a
memory<03:21:17.040><c> block</c><03:21:17.520><c> is</c><03:21:17.760><c> located</c><03:21:18.399><c> within</c><03:21:18.880><c> ram</c><03:21:19.520><c> i</c>

03:21:19.670 --> 03:21:19.680 align:start position:0%
memory block is located within ram i
 

03:21:19.680 --> 03:21:22.309 align:start position:0%
memory block is located within ram i
like<03:21:19.840><c> to</c><03:21:20.000><c> think</c><03:21:20.160><c> of</c><03:21:20.319><c> memory</c><03:21:21.040><c> as</c><03:21:21.439><c> a</c><03:21:21.680><c> street</c><03:21:22.160><c> with</c>

03:21:22.309 --> 03:21:22.319 align:start position:0%
like to think of memory as a street with
 

03:21:22.319 --> 03:21:24.550 align:start position:0%
like to think of memory as a street with
a<03:21:22.399><c> bunch</c><03:21:22.640><c> of</c><03:21:22.720><c> different</c><03:21:23.040><c> houses</c><03:21:23.920><c> and</c><03:21:24.239><c> each</c>

03:21:24.550 --> 03:21:24.560 align:start position:0%
a bunch of different houses and each
 

03:21:24.560 --> 03:21:27.750 align:start position:0%
a bunch of different houses and each
house<03:21:25.120><c> is</c><03:21:25.439><c> a</c><03:21:25.840><c> memory</c><03:21:26.319><c> block</c><03:21:26.800><c> which</c><03:21:27.040><c> can</c><03:21:27.279><c> hold</c>

03:21:27.750 --> 03:21:27.760 align:start position:0%
house is a memory block which can hold
 

03:21:27.760 --> 03:21:29.910 align:start position:0%
house is a memory block which can hold
some<03:21:28.080><c> value</c><03:21:28.640><c> kind</c><03:21:28.800><c> of</c><03:21:28.960><c> like</c><03:21:29.279><c> they're</c><03:21:29.439><c> storing</c>

03:21:29.910 --> 03:21:29.920 align:start position:0%
some value kind of like they're storing
 

03:21:29.920 --> 03:21:32.870 align:start position:0%
some value kind of like they're storing
a<03:21:30.000><c> person</c><03:21:30.720><c> and</c><03:21:30.960><c> a</c><03:21:31.120><c> memory</c><03:21:31.600><c> address</c><03:21:32.399><c> is</c><03:21:32.640><c> the</c>

03:21:32.870 --> 03:21:32.880 align:start position:0%
a person and a memory address is the
 

03:21:32.880 --> 03:21:35.349 align:start position:0%
a person and a memory address is the
house<03:21:33.120><c> address</c><03:21:33.760><c> on</c><03:21:33.920><c> that</c><03:21:34.160><c> street</c><03:21:34.800><c> where</c><03:21:35.120><c> that</c>

03:21:35.349 --> 03:21:35.359 align:start position:0%
house address on that street where that
 

03:21:35.359 --> 03:21:37.830 align:start position:0%
house address on that street where that
memory<03:21:35.760><c> block</c><03:21:36.160><c> is</c><03:21:36.319><c> located</c><03:21:37.120><c> so</c><03:21:37.279><c> this</c><03:21:37.439><c> would</c><03:21:37.600><c> be</c>

03:21:37.830 --> 03:21:37.840 align:start position:0%
memory block is located so this would be
 

03:21:37.840 --> 03:21:40.150 align:start position:0%
memory block is located so this would be
a<03:21:38.000><c> street</c><03:21:38.319><c> address</c><03:21:38.960><c> like</c><03:21:39.359><c> one</c><03:21:39.520><c> two</c><03:21:39.680><c> three</c><03:21:39.920><c> fake</c>

03:21:40.150 --> 03:21:40.160 align:start position:0%
a street address like one two three fake
 

03:21:40.160 --> 03:21:42.469 align:start position:0%
a street address like one two three fake
street<03:21:40.800><c> so</c><03:21:41.040><c> when</c><03:21:41.200><c> we</c><03:21:41.359><c> declare</c><03:21:41.760><c> variable</c><03:21:42.239><c> let's</c>

03:21:42.469 --> 03:21:42.479 align:start position:0%
street so when we declare variable let's
 

03:21:42.479 --> 03:21:45.269 align:start position:0%
street so when we declare variable let's
say<03:21:42.720><c> we</c><03:21:42.880><c> have</c><03:21:43.279><c> char</c><03:21:43.840><c> a</c><03:21:44.479><c> when</c><03:21:44.640><c> we</c><03:21:44.800><c> declare</c><03:21:45.200><c> a</c>

03:21:45.269 --> 03:21:45.279 align:start position:0%
say we have char a when we declare a
 

03:21:45.279 --> 03:21:47.750 align:start position:0%
say we have char a when we declare a
variable<03:21:45.840><c> we</c><03:21:46.080><c> are</c><03:21:46.239><c> setting</c><03:21:46.800><c> some</c><03:21:47.120><c> amount</c><03:21:47.520><c> of</c>

03:21:47.750 --> 03:21:47.760 align:start position:0%
variable we are setting some amount of
 

03:21:47.760 --> 03:21:51.030 align:start position:0%
variable we are setting some amount of
memory<03:21:48.080><c> blocks</c><03:21:48.560><c> aside</c><03:21:49.279><c> to</c><03:21:49.520><c> store</c><03:21:49.920><c> some</c><03:21:50.160><c> value</c>

03:21:51.030 --> 03:21:51.040 align:start position:0%
memory blocks aside to store some value
 

03:21:51.040 --> 03:21:53.349 align:start position:0%
memory blocks aside to store some value
so<03:21:51.200><c> the</c><03:21:51.359><c> memory</c><03:21:51.680><c> block</c><03:21:52.239><c> that</c><03:21:52.479><c> this</c><03:21:52.800><c> variable</c>

03:21:53.349 --> 03:21:53.359 align:start position:0%
so the memory block that this variable
 

03:21:53.359 --> 03:21:56.630 align:start position:0%
so the memory block that this variable
is<03:21:53.520><c> using</c><03:21:53.920><c> up</c><03:21:54.239><c> has</c><03:21:54.720><c> some</c><03:21:55.120><c> memory</c><03:21:55.600><c> address</c><03:21:56.479><c> and</c>

03:21:56.630 --> 03:21:56.640 align:start position:0%
is using up has some memory address and
 

03:21:56.640 --> 03:21:59.269 align:start position:0%
is using up has some memory address and
if<03:21:56.800><c> i</c><03:21:56.960><c> assign</c><03:21:57.439><c> this</c><03:21:57.680><c> variable</c><03:21:58.239><c> a</c><03:21:58.399><c> value</c><03:21:59.040><c> let's</c>

03:21:59.269 --> 03:21:59.279 align:start position:0%
if i assign this variable a value let's
 

03:21:59.279 --> 03:22:01.830 align:start position:0%
if i assign this variable a value let's
say<03:21:59.520><c> maybe</c><03:21:59.920><c> x</c><03:22:00.640><c> well</c><03:22:00.800><c> then</c><03:22:01.120><c> if</c><03:22:01.279><c> i</c><03:22:01.359><c> was</c><03:22:01.520><c> to</c><03:22:01.680><c> go</c>

03:22:01.830 --> 03:22:01.840 align:start position:0%
say maybe x well then if i was to go
 

03:22:01.840 --> 03:22:04.229 align:start position:0%
say maybe x well then if i was to go
into<03:22:02.080><c> my</c><03:22:02.239><c> computer's</c><03:22:02.800><c> memory</c><03:22:03.439><c> and</c><03:22:03.760><c> look</c><03:22:04.000><c> for</c>

03:22:04.229 --> 03:22:04.239 align:start position:0%
into my computer's memory and look for
 

03:22:04.239 --> 03:22:07.190 align:start position:0%
into my computer's memory and look for
this<03:22:04.479><c> address</c><03:22:05.200><c> i</c><03:22:05.359><c> would</c><03:22:05.600><c> find</c><03:22:06.160><c> this</c><03:22:06.399><c> character</c>

03:22:07.190 --> 03:22:07.200 align:start position:0%
this address i would find this character
 

03:22:07.200 --> 03:22:09.510 align:start position:0%
this address i would find this character
so<03:22:07.439><c> imagine</c><03:22:08.080><c> we're</c><03:22:08.319><c> walking</c><03:22:08.640><c> down</c><03:22:08.880><c> the</c><03:22:08.960><c> street</c>

03:22:09.510 --> 03:22:09.520 align:start position:0%
so imagine we're walking down the street
 

03:22:09.520 --> 03:22:11.110 align:start position:0%
so imagine we're walking down the street
and<03:22:09.760><c> we</c><03:22:09.920><c> are</c><03:22:10.080><c> looking</c><03:22:10.399><c> for</c><03:22:10.640><c> somebody's</c>

03:22:11.110 --> 03:22:11.120 align:start position:0%
and we are looking for somebody's
 

03:22:11.120 --> 03:22:12.870 align:start position:0%
and we are looking for somebody's
address<03:22:11.600><c> so</c><03:22:11.760><c> we're</c><03:22:11.920><c> going</c><03:22:12.160><c> house</c><03:22:12.399><c> to</c><03:22:12.560><c> house</c>

03:22:12.870 --> 03:22:12.880 align:start position:0%
address so we're going house to house
 

03:22:12.880 --> 03:22:15.590 align:start position:0%
address so we're going house to house
and<03:22:12.960><c> we</c><03:22:13.200><c> find</c><03:22:13.520><c> a</c><03:22:13.680><c> matching</c><03:22:14.160><c> address</c><03:22:15.120><c> if</c><03:22:15.279><c> i</c><03:22:15.439><c> were</c>

03:22:15.590 --> 03:22:15.600 align:start position:0%
and we find a matching address if i were
 

03:22:15.600 --> 03:22:17.349 align:start position:0%
and we find a matching address if i were
to<03:22:15.840><c> open</c><03:22:16.080><c> their</c><03:22:16.319><c> front</c><03:22:16.560><c> door</c><03:22:17.040><c> i</c><03:22:17.200><c> should</c>

03:22:17.349 --> 03:22:17.359 align:start position:0%
to open their front door i should
 

03:22:17.359 --> 03:22:19.349 align:start position:0%
to open their front door i should
probably<03:22:17.680><c> knock</c><03:22:17.920><c> first</c><03:22:18.319><c> at</c><03:22:18.399><c> least</c><03:22:18.960><c> then</c><03:22:19.279><c> i</c>

03:22:19.349 --> 03:22:19.359 align:start position:0%
probably knock first at least then i
 

03:22:19.359 --> 03:22:22.070 align:start position:0%
probably knock first at least then i
will<03:22:19.600><c> find</c><03:22:20.080><c> the</c><03:22:20.239><c> character</c><03:22:20.960><c> x</c><03:22:21.439><c> so</c><03:22:21.680><c> that's</c><03:22:21.920><c> kind</c>

03:22:22.070 --> 03:22:22.080 align:start position:0%
will find the character x so that's kind
 

03:22:22.080 --> 03:22:23.990 align:start position:0%
will find the character x so that's kind
of<03:22:22.239><c> an</c><03:22:22.399><c> analogy</c><03:22:22.960><c> i</c><03:22:23.040><c> like</c><03:22:23.200><c> to</c><03:22:23.359><c> use</c><03:22:23.680><c> when</c>

03:22:23.990 --> 03:22:24.000 align:start position:0%
of an analogy i like to use when
 

03:22:24.000 --> 03:22:26.229 align:start position:0%
of an analogy i like to use when
thinking<03:22:24.319><c> about</c><03:22:24.560><c> memory</c><03:22:25.120><c> so</c><03:22:25.279><c> let's</c><03:22:25.520><c> declare</c><03:22:26.080><c> a</c>

03:22:26.229 --> 03:22:26.239 align:start position:0%
thinking about memory so let's declare a
 

03:22:26.239 --> 03:22:29.429 align:start position:0%
thinking about memory so let's declare a
couple<03:22:26.640><c> other</c><03:22:26.880><c> characters</c><03:22:27.520><c> we</c><03:22:27.680><c> have</c><03:22:28.000><c> char</c><03:22:28.560><c> b</c>

03:22:29.429 --> 03:22:29.439 align:start position:0%
couple other characters we have char b
 

03:22:29.439 --> 03:22:32.389 align:start position:0%
couple other characters we have char b
i'll<03:22:29.680><c> give</c><03:22:29.840><c> this</c><03:22:30.080><c> a</c><03:22:30.319><c> value</c><03:22:30.720><c> of</c><03:22:30.960><c> y</c>

03:22:32.389 --> 03:22:32.399 align:start position:0%
i'll give this a value of y
 

03:22:32.399 --> 03:22:34.870 align:start position:0%
i'll give this a value of y
and<03:22:32.960><c> char</c><03:22:33.600><c> c</c>

03:22:34.870 --> 03:22:34.880 align:start position:0%
and char c
 

03:22:34.880 --> 03:22:37.990 align:start position:0%
and char c
and<03:22:35.040><c> i'll</c><03:22:35.200><c> give</c><03:22:35.359><c> this</c><03:22:35.680><c> a</c><03:22:35.920><c> character</c><03:22:36.560><c> of</c><03:22:37.040><c> z</c><03:22:37.680><c> okay</c>

03:22:37.990 --> 03:22:38.000 align:start position:0%
and i'll give this a character of z okay
 

03:22:38.000 --> 03:22:40.150 align:start position:0%
and i'll give this a character of z okay
so<03:22:38.160><c> let's</c><03:22:38.479><c> find</c><03:22:38.880><c> the</c><03:22:39.120><c> size</c><03:22:39.520><c> of</c><03:22:39.760><c> each</c><03:22:39.920><c> of</c><03:22:40.000><c> these</c>

03:22:40.150 --> 03:22:40.160 align:start position:0%
so let's find the size of each of these
 

03:22:40.160 --> 03:22:42.550 align:start position:0%
so let's find the size of each of these
characters<03:22:40.880><c> so</c><03:22:41.040><c> i'm</c><03:22:41.200><c> going</c><03:22:41.359><c> to</c><03:22:41.520><c> use</c><03:22:41.760><c> a</c><03:22:42.000><c> printf</c>

03:22:42.550 --> 03:22:42.560 align:start position:0%
characters so i'm going to use a printf
 

03:22:42.560 --> 03:22:44.790 align:start position:0%
characters so i'm going to use a printf
statement<03:22:43.279><c> i'm</c><03:22:43.520><c> going</c><03:22:43.680><c> to</c><03:22:43.840><c> display</c><03:22:44.560><c> an</c>

03:22:44.790 --> 03:22:44.800 align:start position:0%
statement i'm going to display an
 

03:22:44.800 --> 03:22:45.990 align:start position:0%
statement i'm going to display an
integer

03:22:45.990 --> 03:22:46.000 align:start position:0%
integer
 

03:22:46.000 --> 03:22:48.309 align:start position:0%
integer
and<03:22:46.319><c> the</c><03:22:46.560><c> size</c><03:22:47.120><c> of</c><03:22:47.279><c> each</c><03:22:47.439><c> of</c><03:22:47.520><c> these</c><03:22:47.760><c> characters</c>

03:22:48.309 --> 03:22:48.319 align:start position:0%
and the size of each of these characters
 

03:22:48.319 --> 03:22:49.910 align:start position:0%
and the size of each of these characters
is<03:22:48.479><c> within</c><03:22:48.960><c> bytes</c>

03:22:49.910 --> 03:22:49.920 align:start position:0%
is within bytes
 

03:22:49.920 --> 03:22:53.190 align:start position:0%
is within bytes
so<03:22:50.239><c> i'm</c><03:22:50.399><c> going</c><03:22:50.640><c> to</c><03:22:50.800><c> use</c><03:22:51.120><c> the</c><03:22:51.439><c> size</c><03:22:52.000><c> of</c><03:22:52.239><c> operator</c>

03:22:53.190 --> 03:22:53.200 align:start position:0%
so i'm going to use the size of operator
 

03:22:53.200 --> 03:22:55.750 align:start position:0%
so i'm going to use the size of operator
and<03:22:53.359><c> pass</c><03:22:53.760><c> in</c><03:22:54.399><c> one</c><03:22:54.560><c> of</c><03:22:54.640><c> my</c><03:22:54.800><c> characters</c><03:22:55.439><c> so</c><03:22:55.600><c> i'm</c>

03:22:55.750 --> 03:22:55.760 align:start position:0%
and pass in one of my characters so i'm
 

03:22:55.760 --> 03:22:57.670 align:start position:0%
and pass in one of my characters so i'm
going<03:22:55.920><c> to</c><03:22:56.000><c> pass</c><03:22:56.319><c> in</c><03:22:56.640><c> a</c>

03:22:57.670 --> 03:22:57.680 align:start position:0%
going to pass in a
 

03:22:57.680 --> 03:23:02.229 align:start position:0%
going to pass in a
and<03:22:57.840><c> i'll</c><03:22:57.920><c> do</c><03:22:58.080><c> the</c><03:22:58.160><c> same</c><03:22:58.399><c> thing</c><03:22:58.720><c> with</c><03:22:59.120><c> b</c><03:22:59.439><c> and</c><03:22:59.680><c> c</c>

03:23:02.229 --> 03:23:02.239 align:start position:0%
and i'll do the same thing with b and c
 

03:23:02.239 --> 03:23:05.990 align:start position:0%
and i'll do the same thing with b and c
so<03:23:02.479><c> the</c><03:23:02.640><c> size</c><03:23:03.040><c> of</c><03:23:03.279><c> each</c><03:23:03.439><c> of</c><03:23:03.520><c> these</c><03:23:03.760><c> characters</c>

03:23:05.990 --> 03:23:06.000 align:start position:0%
so the size of each of these characters
 

03:23:06.000 --> 03:23:08.150 align:start position:0%
so the size of each of these characters
is<03:23:06.239><c> one</c><03:23:06.479><c> bite</c><03:23:07.120><c> and</c><03:23:07.359><c> i</c><03:23:07.520><c> think</c><03:23:07.680><c> i'm</c><03:23:07.840><c> just</c><03:23:08.000><c> going</c>

03:23:08.150 --> 03:23:08.160 align:start position:0%
is one bite and i think i'm just going
 

03:23:08.160 --> 03:23:11.910 align:start position:0%
is one bite and i think i'm just going
to<03:23:08.239><c> add</c><03:23:08.479><c> a</c><03:23:08.640><c> new</c><03:23:08.880><c> line</c><03:23:09.200><c> here</c>

03:23:11.910 --> 03:23:11.920 align:start position:0%
 
 

03:23:11.920 --> 03:23:14.469 align:start position:0%
 
much<03:23:12.239><c> better</c><03:23:12.960><c> okay</c><03:23:13.439><c> now</c><03:23:13.600><c> we</c><03:23:13.760><c> can</c><03:23:14.000><c> actually</c>

03:23:14.469 --> 03:23:14.479 align:start position:0%
much better okay now we can actually
 

03:23:14.479 --> 03:23:16.710 align:start position:0%
much better okay now we can actually
access<03:23:15.200><c> the</c><03:23:15.439><c> address</c><03:23:16.080><c> of</c><03:23:16.319><c> each</c><03:23:16.479><c> of</c><03:23:16.560><c> these</c>

03:23:16.710 --> 03:23:16.720 align:start position:0%
access the address of each of these
 

03:23:16.720 --> 03:23:19.910 align:start position:0%
access the address of each of these
variables<03:23:17.840><c> so</c><03:23:18.160><c> each</c><03:23:18.560><c> of</c><03:23:18.720><c> these</c><03:23:18.960><c> variables</c><03:23:19.680><c> is</c>

03:23:19.910 --> 03:23:19.920 align:start position:0%
variables so each of these variables is
 

03:23:19.920 --> 03:23:23.190 align:start position:0%
variables so each of these variables is
using<03:23:20.640><c> one</c><03:23:20.960><c> block</c><03:23:21.279><c> of</c><03:23:21.439><c> memory</c><03:23:22.239><c> a</c><03:23:22.479><c> single</c><03:23:22.880><c> block</c>

03:23:23.190 --> 03:23:23.200 align:start position:0%
using one block of memory a single block
 

03:23:23.200 --> 03:23:25.830 align:start position:0%
using one block of memory a single block
of<03:23:23.359><c> memory</c><03:23:24.160><c> is</c><03:23:24.479><c> a</c><03:23:24.720><c> byte</c>

03:23:25.830 --> 03:23:25.840 align:start position:0%
of memory is a byte
 

03:23:25.840 --> 03:23:27.990 align:start position:0%
of memory is a byte
so<03:23:26.000><c> within</c><03:23:26.479><c> a</c><03:23:26.720><c> printf</c><03:23:27.279><c> statement</c><03:23:27.760><c> i</c><03:23:27.840><c> would</c>

03:23:27.990 --> 03:23:28.000 align:start position:0%
so within a printf statement i would
 

03:23:28.000 --> 03:23:30.870 align:start position:0%
so within a printf statement i would
like<03:23:28.239><c> to</c><03:23:28.399><c> display</c><03:23:28.960><c> an</c><03:23:29.200><c> address</c><03:23:30.000><c> so</c><03:23:30.239><c> the</c><03:23:30.399><c> format</c>

03:23:30.870 --> 03:23:30.880 align:start position:0%
like to display an address so the format
 

03:23:30.880 --> 03:23:32.950 align:start position:0%
like to display an address so the format
specifier<03:23:31.680><c> is</c><03:23:32.000><c> p</c>

03:23:32.950 --> 03:23:32.960 align:start position:0%
specifier is p
 

03:23:32.960 --> 03:23:36.070 align:start position:0%
specifier is p
and<03:23:33.200><c> i</c><03:23:33.279><c> will</c><03:23:33.520><c> use</c><03:23:33.920><c> the</c><03:23:34.239><c> address</c><03:23:34.880><c> of</c><03:23:35.120><c> operator</c>

03:23:36.070 --> 03:23:36.080 align:start position:0%
and i will use the address of operator
 

03:23:36.080 --> 03:23:38.550 align:start position:0%
and i will use the address of operator
then<03:23:36.479><c> the</c><03:23:36.640><c> name</c><03:23:36.880><c> of</c><03:23:37.040><c> one</c><03:23:37.200><c> of</c><03:23:37.279><c> my</c><03:23:37.439><c> variables</c>

03:23:38.550 --> 03:23:38.560 align:start position:0%
then the name of one of my variables
 

03:23:38.560 --> 03:23:40.870 align:start position:0%
then the name of one of my variables
so<03:23:38.720><c> i'll</c><03:23:38.960><c> display</c><03:23:39.279><c> the</c><03:23:39.439><c> address</c><03:23:39.920><c> of</c><03:23:40.239><c> variables</c>

03:23:40.870 --> 03:23:40.880 align:start position:0%
so i'll display the address of variables
 

03:23:40.880 --> 03:23:42.229 align:start position:0%
so i'll display the address of variables
a<03:23:41.520><c> b</c>

03:23:42.229 --> 03:23:42.239 align:start position:0%
a b
 

03:23:42.239 --> 03:23:44.150 align:start position:0%
a b
and<03:23:42.560><c> c</c>

03:23:44.150 --> 03:23:44.160 align:start position:0%
and c
 

03:23:44.160 --> 03:23:47.750 align:start position:0%
and c
and<03:23:44.319><c> then</c><03:23:44.479><c> display</c><03:23:44.880><c> each</c><03:23:45.120><c> on</c><03:23:45.279><c> a</c><03:23:45.359><c> new</c><03:23:45.520><c> line</c>

03:23:47.750 --> 03:23:47.760 align:start position:0%
and then display each on a new line
 

03:23:47.760 --> 03:23:50.150 align:start position:0%
and then display each on a new line
so<03:23:48.080><c> here</c><03:23:48.399><c> are</c><03:23:48.479><c> the</c><03:23:48.720><c> memory</c><03:23:49.040><c> addresses</c><03:23:49.840><c> for</c>

03:23:50.150 --> 03:23:50.160 align:start position:0%
so here are the memory addresses for
 

03:23:50.160 --> 03:23:52.950 align:start position:0%
so here are the memory addresses for
these<03:23:50.479><c> three</c><03:23:50.800><c> variables</c><03:23:51.840><c> these</c><03:23:52.160><c> addresses</c>

03:23:52.950 --> 03:23:52.960 align:start position:0%
these three variables these addresses
 

03:23:52.960 --> 03:23:55.190 align:start position:0%
these three variables these addresses
are<03:23:53.120><c> in</c><03:23:53.279><c> hexadecimal</c><03:23:54.319><c> these</c><03:23:54.640><c> are</c><03:23:54.800><c> the</c><03:23:54.960><c> street</c>

03:23:55.190 --> 03:23:55.200 align:start position:0%
are in hexadecimal these are the street
 

03:23:55.200 --> 03:23:57.830 align:start position:0%
are in hexadecimal these are the street
addresses<03:23:55.920><c> of</c><03:23:56.239><c> each</c><03:23:56.479><c> of</c><03:23:56.640><c> our</c><03:23:56.800><c> memory</c><03:23:57.200><c> blocks</c>

03:23:57.830 --> 03:23:57.840 align:start position:0%
addresses of each of our memory blocks
 

03:23:57.840 --> 03:23:59.830 align:start position:0%
addresses of each of our memory blocks
on<03:23:58.080><c> our</c><03:23:58.319><c> fictional</c><03:23:58.880><c> street</c>

03:23:59.830 --> 03:23:59.840 align:start position:0%
on our fictional street
 

03:23:59.840 --> 03:24:02.070 align:start position:0%
on our fictional street
hey<03:24:00.160><c> uh</c><03:24:00.399><c> so</c><03:24:00.560><c> this</c><03:24:00.800><c> is</c><03:24:00.960><c> bro</c><03:24:01.279><c> from</c><03:24:01.439><c> the</c><03:24:01.600><c> future</c>

03:24:02.070 --> 03:24:02.080 align:start position:0%
hey uh so this is bro from the future
 

03:24:02.080 --> 03:24:04.630 align:start position:0%
hey uh so this is bro from the future
just<03:24:02.399><c> a</c><03:24:02.640><c> quick</c><03:24:02.960><c> crash</c><03:24:03.279><c> course</c><03:24:03.680><c> on</c><03:24:03.920><c> hexadecimal</c>

03:24:04.630 --> 03:24:04.640 align:start position:0%
just a quick crash course on hexadecimal
 

03:24:04.640 --> 03:24:07.750 align:start position:0%
just a quick crash course on hexadecimal
values<03:24:05.520><c> with</c><03:24:05.840><c> standard</c><03:24:06.399><c> decimal</c><03:24:06.880><c> values</c><03:24:07.600><c> they</c>

03:24:07.750 --> 03:24:07.760 align:start position:0%
values with standard decimal values they
 

03:24:07.760 --> 03:24:10.830 align:start position:0%
values with standard decimal values they
use<03:24:08.000><c> the</c><03:24:08.160><c> numbers</c><03:24:08.800><c> 0</c><03:24:09.200><c> through</c><03:24:09.520><c> 9</c><03:24:10.239><c> but</c><03:24:10.479><c> with</c>

03:24:10.830 --> 03:24:10.840 align:start position:0%
use the numbers 0 through 9 but with
 

03:24:10.840 --> 03:24:13.670 align:start position:0%
use the numbers 0 through 9 but with
hexadecimal<03:24:11.920><c> you</c><03:24:12.080><c> use</c><03:24:12.399><c> the</c><03:24:12.560><c> numbers</c><03:24:13.200><c> 0</c>

03:24:13.670 --> 03:24:13.680 align:start position:0%
hexadecimal you use the numbers 0
 

03:24:13.680 --> 03:24:17.510 align:start position:0%
hexadecimal you use the numbers 0
through<03:24:14.000><c> 9</c><03:24:14.720><c> as</c><03:24:14.960><c> well</c><03:24:15.279><c> as</c><03:24:15.680><c> a</c><03:24:16.160><c> through</c><03:24:16.560><c> f</c><03:24:17.120><c> so</c><03:24:17.359><c> that</c>

03:24:17.510 --> 03:24:17.520 align:start position:0%
through 9 as well as a through f so that
 

03:24:17.520 --> 03:24:20.790 align:start position:0%
through 9 as well as a through f so that
gives<03:24:17.760><c> you</c><03:24:18.000><c> a</c><03:24:18.160><c> total</c><03:24:18.560><c> of</c><03:24:19.040><c> 16</c><03:24:19.680><c> different</c><03:24:20.160><c> values</c>

03:24:20.790 --> 03:24:20.800 align:start position:0%
gives you a total of 16 different values
 

03:24:20.800 --> 03:24:23.110 align:start position:0%
gives you a total of 16 different values
for<03:24:21.040><c> each</c><03:24:21.279><c> digit</c><03:24:22.080><c> so</c><03:24:22.239><c> that's</c><03:24:22.479><c> why</c><03:24:22.720><c> there's</c><03:24:22.960><c> a</c>

03:24:23.110 --> 03:24:23.120 align:start position:0%
for each digit so that's why there's a
 

03:24:23.120 --> 03:24:25.269 align:start position:0%
for each digit so that's why there's a
mix<03:24:23.439><c> of</c><03:24:23.600><c> numbers</c><03:24:24.080><c> and</c><03:24:24.319><c> letters</c>

03:24:25.269 --> 03:24:25.279 align:start position:0%
mix of numbers and letters
 

03:24:25.279 --> 03:24:28.070 align:start position:0%
mix of numbers and letters
so<03:24:25.600><c> each</c><03:24:25.840><c> of</c><03:24:25.920><c> these</c><03:24:26.160><c> variables</c><03:24:26.960><c> uses</c><03:24:27.600><c> one</c>

03:24:28.070 --> 03:24:28.080 align:start position:0%
so each of these variables uses one
 

03:24:28.080 --> 03:24:30.389 align:start position:0%
so each of these variables uses one
memory<03:24:28.479><c> block</c><03:24:28.800><c> they</c><03:24:28.960><c> use</c><03:24:29.279><c> one</c><03:24:29.520><c> byte</c><03:24:29.760><c> of</c><03:24:29.840><c> memory</c>

03:24:30.389 --> 03:24:30.399 align:start position:0%
memory block they use one byte of memory
 

03:24:30.399 --> 03:24:32.710 align:start position:0%
memory block they use one byte of memory
so<03:24:30.640><c> beginning</c><03:24:31.200><c> with</c><03:24:31.439><c> variable</c><03:24:32.000><c> a</c>

03:24:32.710 --> 03:24:32.720 align:start position:0%
so beginning with variable a
 

03:24:32.720 --> 03:24:35.110 align:start position:0%
so beginning with variable a
this<03:24:33.040><c> has</c><03:24:33.520><c> this</c><03:24:33.760><c> street</c><03:24:34.080><c> address</c><03:24:34.720><c> but</c><03:24:34.880><c> if</c><03:24:34.960><c> we</c>

03:24:35.110 --> 03:24:35.120 align:start position:0%
this has this street address but if we
 

03:24:35.120 --> 03:24:37.030 align:start position:0%
this has this street address but if we
go<03:24:35.279><c> down</c><03:24:35.439><c> to</c><03:24:35.600><c> the</c><03:24:35.680><c> next</c><03:24:36.000><c> memory</c><03:24:36.319><c> block</c><03:24:36.800><c> you</c><03:24:36.880><c> can</c>

03:24:37.030 --> 03:24:37.040 align:start position:0%
go down to the next memory block you can
 

03:24:37.040 --> 03:24:40.469 align:start position:0%
go down to the next memory block you can
see<03:24:37.359><c> that</c><03:24:37.680><c> there</c><03:24:38.000><c> is</c><03:24:38.239><c> just</c><03:24:38.720><c> one</c><03:24:39.040><c> change</c><03:24:39.840><c> f</c><03:24:40.239><c> goes</c>

03:24:40.469 --> 03:24:40.479 align:start position:0%
see that there is just one change f goes
 

03:24:40.479 --> 03:24:43.510 align:start position:0%
see that there is just one change f goes
down<03:24:40.720><c> to</c><03:24:40.960><c> e</c><03:24:41.439><c> and</c><03:24:41.680><c> then</c><03:24:41.840><c> with</c><03:24:42.080><c> variable</c><03:24:42.640><c> c</c>

03:24:43.510 --> 03:24:43.520 align:start position:0%
down to e and then with variable c
 

03:24:43.520 --> 03:24:47.110 align:start position:0%
down to e and then with variable c
this<03:24:43.760><c> address</c><03:24:44.239><c> goes</c><03:24:44.479><c> down</c><03:24:44.800><c> by</c><03:24:45.040><c> one</c><03:24:45.600><c> so</c><03:24:46.000><c> f</c><03:24:46.399><c> e</c><03:24:46.720><c> d</c>

03:24:47.110 --> 03:24:47.120 align:start position:0%
this address goes down by one so f e d
 

03:24:47.120 --> 03:24:49.429 align:start position:0%
this address goes down by one so f e d
these<03:24:47.439><c> are</c><03:24:47.680><c> contiguous</c><03:24:48.560><c> memory</c><03:24:48.960><c> blocks</c>

03:24:49.429 --> 03:24:49.439 align:start position:0%
these are contiguous memory blocks
 

03:24:49.439 --> 03:24:51.349 align:start position:0%
these are contiguous memory blocks
they're<03:24:49.680><c> all</c><03:24:49.840><c> next</c><03:24:50.080><c> to</c><03:24:50.239><c> each</c><03:24:50.479><c> other</c><03:24:50.880><c> but</c><03:24:51.120><c> now</c>

03:24:51.349 --> 03:24:51.359 align:start position:0%
they're all next to each other but now
 

03:24:51.359 --> 03:24:53.269 align:start position:0%
they're all next to each other but now
if<03:24:51.439><c> we</c><03:24:51.600><c> switch</c><03:24:51.920><c> to</c><03:24:52.080><c> a</c><03:24:52.239><c> different</c><03:24:52.560><c> data</c><03:24:52.880><c> type</c>

03:24:53.269 --> 03:24:53.279 align:start position:0%
if we switch to a different data type
 

03:24:53.279 --> 03:24:55.510 align:start position:0%
if we switch to a different data type
like<03:24:53.520><c> a</c><03:24:53.840><c> short</c><03:24:54.479><c> we</c><03:24:54.640><c> haven't</c><03:24:54.880><c> used</c><03:24:55.120><c> these</c><03:24:55.279><c> in</c><03:24:55.439><c> a</c>

03:24:55.510 --> 03:24:55.520 align:start position:0%
like a short we haven't used these in a
 

03:24:55.520 --> 03:24:57.110 align:start position:0%
like a short we haven't used these in a
long<03:24:55.760><c> time</c>

03:24:57.110 --> 03:24:57.120 align:start position:0%
long time
 

03:24:57.120 --> 03:25:00.150 align:start position:0%
long time
well<03:24:57.520><c> shorts</c><03:24:57.920><c> use</c><03:24:58.479><c> two</c><03:24:58.720><c> bytes</c><03:24:59.040><c> of</c><03:24:59.120><c> memory</c>

03:25:00.150 --> 03:25:00.160 align:start position:0%
well shorts use two bytes of memory
 

03:25:00.160 --> 03:25:02.790 align:start position:0%
well shorts use two bytes of memory
as<03:25:00.319><c> we</c><03:25:00.479><c> can</c><03:25:00.560><c> see</c><03:25:00.800><c> here</c><03:25:01.279><c> so</c><03:25:01.520><c> these</c><03:25:01.840><c> hexadecimal</c>

03:25:02.790 --> 03:25:02.800 align:start position:0%
as we can see here so these hexadecimal
 

03:25:02.800 --> 03:25:07.269 align:start position:0%
as we can see here so these hexadecimal
addresses<03:25:03.840><c> are</c><03:25:04.000><c> now</c><03:25:04.319><c> going</c><03:25:04.640><c> down</c><03:25:04.880><c> by</c><03:25:05.120><c> two</c><03:25:05.840><c> e</c><03:25:06.560><c> d</c>

03:25:07.269 --> 03:25:07.279 align:start position:0%
addresses are now going down by two e d
 

03:25:07.279 --> 03:25:08.389 align:start position:0%
addresses are now going down by two e d
c

03:25:08.389 --> 03:25:08.399 align:start position:0%
c
 

03:25:08.399 --> 03:25:09.110 align:start position:0%
c
b

03:25:09.110 --> 03:25:09.120 align:start position:0%
b
 

03:25:09.120 --> 03:25:11.990 align:start position:0%
b
a<03:25:09.760><c> so</c><03:25:10.000><c> each</c><03:25:10.160><c> of</c><03:25:10.239><c> these</c><03:25:10.479><c> variables</c><03:25:11.200><c> are</c><03:25:11.359><c> using</c>

03:25:11.990 --> 03:25:12.000 align:start position:0%
a so each of these variables are using
 

03:25:12.000 --> 03:25:15.030 align:start position:0%
a so each of these variables are using
two<03:25:12.479><c> memory</c><03:25:12.880><c> blocks</c><03:25:13.600><c> we</c><03:25:13.760><c> need</c><03:25:14.080><c> an</c><03:25:14.319><c> even</c><03:25:14.560><c> larger</c>

03:25:15.030 --> 03:25:15.040 align:start position:0%
two memory blocks we need an even larger
 

03:25:15.040 --> 03:25:17.910 align:start position:0%
two memory blocks we need an even larger
house<03:25:15.680><c> even</c><03:25:16.160><c> more</c><03:25:16.399><c> memory</c><03:25:16.800><c> blocks</c><03:25:17.600><c> and</c><03:25:17.760><c> they</c>

03:25:17.910 --> 03:25:17.920 align:start position:0%
house even more memory blocks and they
 

03:25:17.920 --> 03:25:20.309 align:start position:0%
house even more memory blocks and they
use<03:25:18.239><c> up</c><03:25:18.560><c> two</c><03:25:18.800><c> memory</c><03:25:19.200><c> addresses</c>

03:25:20.309 --> 03:25:20.319 align:start position:0%
use up two memory addresses
 

03:25:20.319 --> 03:25:22.790 align:start position:0%
use up two memory addresses
and<03:25:20.479><c> then</c><03:25:20.720><c> if</c><03:25:20.880><c> i</c><03:25:21.040><c> change</c><03:25:21.359><c> these</c><03:25:21.600><c> two</c><03:25:21.920><c> integers</c>

03:25:22.790 --> 03:25:22.800 align:start position:0%
and then if i change these two integers
 

03:25:22.800 --> 03:25:24.469 align:start position:0%
and then if i change these two integers
well<03:25:23.040><c> they're</c><03:25:23.200><c> going</c><03:25:23.359><c> to</c><03:25:23.520><c> use</c><03:25:23.760><c> up</c><03:25:24.000><c> even</c><03:25:24.239><c> more</c>

03:25:24.469 --> 03:25:24.479 align:start position:0%
well they're going to use up even more
 

03:25:24.479 --> 03:25:25.830 align:start position:0%
well they're going to use up even more
memory

03:25:25.830 --> 03:25:25.840 align:start position:0%
memory
 

03:25:25.840 --> 03:25:28.790 align:start position:0%
memory
so<03:25:26.160><c> integers</c><03:25:26.800><c> use</c><03:25:27.279><c> four</c><03:25:27.520><c> bytes</c><03:25:27.840><c> memory</c>

03:25:28.790 --> 03:25:28.800 align:start position:0%
so integers use four bytes memory
 

03:25:28.800 --> 03:25:31.190 align:start position:0%
so integers use four bytes memory
and<03:25:29.120><c> these</c><03:25:29.439><c> are</c><03:25:29.520><c> the</c><03:25:29.680><c> street</c><03:25:29.920><c> addresses</c><03:25:30.800><c> of</c>

03:25:31.190 --> 03:25:31.200 align:start position:0%
and these are the street addresses of
 

03:25:31.200 --> 03:25:34.229 align:start position:0%
and these are the street addresses of
these<03:25:31.520><c> three</c><03:25:31.840><c> variables</c><03:25:32.960><c> and</c><03:25:33.200><c> doubles</c><03:25:33.760><c> use</c>

03:25:34.229 --> 03:25:34.239 align:start position:0%
these three variables and doubles use
 

03:25:34.239 --> 03:25:38.389 align:start position:0%
these three variables and doubles use
double<03:25:34.560><c> the</c><03:25:34.800><c> size</c><03:25:35.279><c> of</c><03:25:35.439><c> an</c><03:25:35.520><c> integer</c>

03:25:38.389 --> 03:25:38.399 align:start position:0%
 
 

03:25:38.399 --> 03:25:40.950 align:start position:0%
 
doubles<03:25:38.960><c> use</c><03:25:39.279><c> eight</c><03:25:39.520><c> bytes</c><03:25:39.840><c> of</c><03:25:39.920><c> memory</c><03:25:40.640><c> and</c>

03:25:40.950 --> 03:25:40.960 align:start position:0%
doubles use eight bytes of memory and
 

03:25:40.960 --> 03:25:43.269 align:start position:0%
doubles use eight bytes of memory and
these<03:25:41.200><c> street</c><03:25:41.520><c> addresses</c><03:25:42.239><c> are</c><03:25:42.479><c> decrementing</c>

03:25:43.269 --> 03:25:43.279 align:start position:0%
these street addresses are decrementing
 

03:25:43.279 --> 03:25:46.229 align:start position:0%
these street addresses are decrementing
by<03:25:43.600><c> eight</c><03:25:44.239><c> if</c><03:25:44.479><c> this</c><03:25:44.720><c> was</c><03:25:45.120><c> a</c><03:25:45.359><c> fictional</c><03:25:45.840><c> street</c>

03:25:46.229 --> 03:25:46.239 align:start position:0%
by eight if this was a fictional street
 

03:25:46.239 --> 03:25:48.870 align:start position:0%
by eight if this was a fictional street
with<03:25:46.479><c> houses</c><03:25:47.439><c> well</c><03:25:47.760><c> doubles</c><03:25:48.239><c> use</c><03:25:48.479><c> up</c><03:25:48.640><c> eight</c>

03:25:48.870 --> 03:25:48.880 align:start position:0%
with houses well doubles use up eight
 

03:25:48.880 --> 03:25:51.190 align:start position:0%
with houses well doubles use up eight
bytes<03:25:49.279><c> memory</c><03:25:49.920><c> so</c><03:25:50.160><c> think</c><03:25:50.319><c> of</c><03:25:50.479><c> these</c><03:25:50.800><c> like</c>

03:25:51.190 --> 03:25:51.200 align:start position:0%
bytes memory so think of these like
 

03:25:51.200 --> 03:25:53.429 align:start position:0%
bytes memory so think of these like
mansions<03:25:51.760><c> they're</c><03:25:52.000><c> using</c><03:25:52.239><c> up</c><03:25:52.399><c> a</c><03:25:52.399><c> lot</c><03:25:52.560><c> of</c><03:25:52.720><c> space</c>

03:25:53.429 --> 03:25:53.439 align:start position:0%
mansions they're using up a lot of space
 

03:25:53.439 --> 03:25:55.349 align:start position:0%
mansions they're using up a lot of space
now<03:25:53.600><c> what</c><03:25:53.840><c> happens</c><03:25:54.160><c> with</c><03:25:54.399><c> an</c><03:25:54.560><c> array</c><03:25:55.040><c> i'm</c><03:25:55.200><c> going</c>

03:25:55.349 --> 03:25:55.359 align:start position:0%
now what happens with an array i'm going
 

03:25:55.359 --> 03:25:56.550 align:start position:0%
now what happens with an array i'm going
to<03:25:55.520><c> declare</c>

03:25:56.550 --> 03:25:56.560 align:start position:0%
to declare
 

03:25:56.560 --> 03:25:59.110 align:start position:0%
to declare
char<03:25:57.120><c> a</c>

03:25:59.110 --> 03:25:59.120 align:start position:0%
char a
 

03:25:59.120 --> 03:26:01.030 align:start position:0%
char a
and<03:25:59.279><c> declare</c><03:25:59.680><c> an</c><03:25:59.840><c> array</c><03:26:00.239><c> this</c><03:26:00.479><c> will</c><03:26:00.640><c> be</c><03:26:00.880><c> an</c>

03:26:01.030 --> 03:26:01.040 align:start position:0%
and declare an array this will be an
 

03:26:01.040 --> 03:26:03.349 align:start position:0%
and declare an array this will be an
array<03:26:01.439><c> of</c><03:26:01.680><c> characters</c><03:26:02.160><c> to</c><03:26:02.239><c> begin</c><03:26:02.560><c> with</c><03:26:03.120><c> so</c>

03:26:03.349 --> 03:26:03.359 align:start position:0%
array of characters to begin with so
 

03:26:03.359 --> 03:26:05.910 align:start position:0%
array of characters to begin with so
let's<03:26:03.600><c> say</c><03:26:04.319><c> character</c><03:26:04.880><c> array</c><03:26:05.439><c> b</c><03:26:05.680><c> and</c><03:26:05.840><c> i'll</c>

03:26:05.910 --> 03:26:05.920 align:start position:0%
let's say character array b and i'll
 

03:26:05.920 --> 03:26:08.469 align:start position:0%
let's say character array b and i'll
give<03:26:06.160><c> this</c><03:26:06.319><c> a</c><03:26:06.560><c> size</c><03:26:06.800><c> of</c><03:26:06.960><c> one</c>

03:26:08.469 --> 03:26:08.479 align:start position:0%
give this a size of one
 

03:26:08.479 --> 03:26:10.630 align:start position:0%
give this a size of one
so<03:26:08.640><c> i'm</c><03:26:08.800><c> going</c><03:26:08.960><c> to</c><03:26:09.120><c> print</c><03:26:09.439><c> the</c><03:26:09.600><c> size</c><03:26:09.920><c> of</c><03:26:10.080><c> a</c><03:26:10.479><c> and</c>

03:26:10.630 --> 03:26:10.640 align:start position:0%
so i'm going to print the size of a and
 

03:26:10.640 --> 03:26:12.309 align:start position:0%
so i'm going to print the size of a and
the<03:26:10.800><c> size</c><03:26:11.120><c> of</c><03:26:11.279><c> b</c>

03:26:12.309 --> 03:26:12.319 align:start position:0%
the size of b
 

03:26:12.319 --> 03:26:14.630 align:start position:0%
the size of b
as<03:26:12.479><c> well</c><03:26:12.720><c> as</c><03:26:12.880><c> their</c><03:26:13.120><c> memory</c><03:26:13.439><c> addresses</c>

03:26:14.630 --> 03:26:14.640 align:start position:0%
as well as their memory addresses
 

03:26:14.640 --> 03:26:17.750 align:start position:0%
as well as their memory addresses
our<03:26:14.880><c> single</c><03:26:15.200><c> character</c><03:26:15.680><c> a</c><03:26:16.080><c> uses</c><03:26:16.560><c> one</c><03:26:16.800><c> byte</c><03:26:17.439><c> and</c>

03:26:17.750 --> 03:26:17.760 align:start position:0%
our single character a uses one byte and
 

03:26:17.760 --> 03:26:19.510 align:start position:0%
our single character a uses one byte and
this<03:26:17.920><c> is</c><03:26:18.080><c> the</c><03:26:18.239><c> street</c><03:26:18.560><c> address</c><03:26:19.120><c> of</c><03:26:19.279><c> this</c>

03:26:19.510 --> 03:26:19.520 align:start position:0%
this is the street address of this
 

03:26:19.520 --> 03:26:22.070 align:start position:0%
this is the street address of this
variable<03:26:20.399><c> and</c><03:26:20.640><c> our</c><03:26:20.880><c> array</c><03:26:21.279><c> b</c>

03:26:22.070 --> 03:26:22.080 align:start position:0%
variable and our array b
 

03:26:22.080 --> 03:26:24.150 align:start position:0%
variable and our array b
also<03:26:22.399><c> uses</c><03:26:22.720><c> up</c><03:26:23.040><c> one</c><03:26:23.279><c> byte</c>

03:26:24.150 --> 03:26:24.160 align:start position:0%
also uses up one byte
 

03:26:24.160 --> 03:26:26.389 align:start position:0%
also uses up one byte
and<03:26:24.560><c> this</c><03:26:24.720><c> is</c><03:26:24.880><c> the</c><03:26:25.040><c> street</c><03:26:25.359><c> address</c><03:26:25.760><c> of</c><03:26:26.000><c> where</c>

03:26:26.389 --> 03:26:26.399 align:start position:0%
and this is the street address of where
 

03:26:26.399 --> 03:26:29.030 align:start position:0%
and this is the street address of where
this<03:26:26.640><c> array</c><03:26:27.120><c> begins</c><03:26:28.000><c> if</c><03:26:28.160><c> i</c><03:26:28.319><c> set</c><03:26:28.479><c> the</c><03:26:28.640><c> size</c><03:26:28.960><c> of</c>

03:26:29.030 --> 03:26:29.040 align:start position:0%
this array begins if i set the size of
 

03:26:29.040 --> 03:26:32.070 align:start position:0%
this array begins if i set the size of
this<03:26:29.279><c> array</c><03:26:29.600><c> to</c><03:26:29.840><c> 2</c><03:26:30.560><c> well</c><03:26:30.800><c> then</c><03:26:31.200><c> my</c><03:26:31.520><c> array</c><03:26:31.920><c> is</c>

03:26:32.070 --> 03:26:32.080 align:start position:0%
this array to 2 well then my array is
 

03:26:32.080 --> 03:26:34.389 align:start position:0%
this array to 2 well then my array is
going<03:26:32.239><c> to</c><03:26:32.479><c> use</c><03:26:32.880><c> 2</c><03:26:33.120><c> bytes</c>

03:26:34.389 --> 03:26:34.399 align:start position:0%
going to use 2 bytes
 

03:26:34.399 --> 03:26:36.950 align:start position:0%
going to use 2 bytes
and<03:26:34.640><c> now</c><03:26:34.880><c> it</c><03:26:35.040><c> has</c><03:26:35.359><c> a</c><03:26:35.520><c> different</c><03:26:35.840><c> address</c><03:26:36.800><c> to</c>

03:26:36.950 --> 03:26:36.960 align:start position:0%
and now it has a different address to
 

03:26:36.960 --> 03:26:38.870 align:start position:0%
and now it has a different address to
accommodate<03:26:37.600><c> the</c><03:26:37.840><c> increased</c><03:26:38.319><c> size</c><03:26:38.640><c> of</c><03:26:38.720><c> the</c>

03:26:38.870 --> 03:26:38.880 align:start position:0%
accommodate the increased size of the
 

03:26:38.880 --> 03:26:41.910 align:start position:0%
accommodate the increased size of the
array<03:26:39.600><c> and</c><03:26:39.840><c> if</c><03:26:40.000><c> i</c><03:26:40.080><c> change</c><03:26:40.399><c> this</c><03:26:40.560><c> to</c><03:26:40.720><c> 3</c><03:26:41.520><c> it</c><03:26:41.680><c> now</c>

03:26:41.910 --> 03:26:41.920 align:start position:0%
array and if i change this to 3 it now
 

03:26:41.920 --> 03:26:44.469 align:start position:0%
array and if i change this to 3 it now
uses<03:26:42.399><c> 3</c><03:26:42.640><c> bytes</c><03:26:42.880><c> of</c><03:26:42.960><c> memory</c><03:26:43.600><c> and</c><03:26:43.760><c> it</c><03:26:43.840><c> has</c><03:26:44.160><c> a</c><03:26:44.319><c> new</c>

03:26:44.469 --> 03:26:44.479 align:start position:0%
uses 3 bytes of memory and it has a new
 

03:26:44.479 --> 03:26:46.870 align:start position:0%
uses 3 bytes of memory and it has a new
address<03:26:45.279><c> and</c><03:26:45.439><c> if</c><03:26:45.600><c> i</c><03:26:45.760><c> change</c><03:26:46.080><c> the</c><03:26:46.319><c> data</c><03:26:46.640><c> type</c><03:26:46.800><c> of</c>

03:26:46.870 --> 03:26:46.880 align:start position:0%
address and if i change the data type of
 

03:26:46.880 --> 03:26:48.790 align:start position:0%
address and if i change the data type of
the<03:26:47.040><c> array</c><03:26:47.840><c> we'll</c><03:26:48.000><c> have</c><03:26:48.160><c> to</c><03:26:48.239><c> take</c><03:26:48.399><c> that</c><03:26:48.560><c> into</c>

03:26:48.790 --> 03:26:48.800 align:start position:0%
the array we'll have to take that into
 

03:26:48.800 --> 03:26:51.990 align:start position:0%
the array we'll have to take that into
consideration<03:26:50.000><c> so</c><03:26:50.239><c> a</c><03:26:50.479><c> short</c><03:26:50.960><c> uses</c><03:26:51.439><c> two</c><03:26:51.600><c> bytes</c>

03:26:51.990 --> 03:26:52.000 align:start position:0%
consideration so a short uses two bytes
 

03:26:52.000 --> 03:26:54.630 align:start position:0%
consideration so a short uses two bytes
memory<03:26:52.800><c> and</c><03:26:52.960><c> we</c><03:26:53.200><c> need</c><03:26:53.600><c> three</c><03:26:53.840><c> elements</c><03:26:54.479><c> so</c>

03:26:54.630 --> 03:26:54.640 align:start position:0%
memory and we need three elements so
 

03:26:54.640 --> 03:26:57.429 align:start position:0%
memory and we need three elements so
that's<03:26:54.960><c> a</c><03:26:55.200><c> total</c><03:26:55.600><c> of</c><03:26:55.840><c> six</c><03:26:56.319><c> two</c><03:26:56.640><c> times</c><03:26:56.960><c> three</c><03:26:57.279><c> is</c>

03:26:57.429 --> 03:26:57.439 align:start position:0%
that's a total of six two times three is
 

03:26:57.439 --> 03:27:00.309 align:start position:0%
that's a total of six two times three is
six<03:26:58.160><c> and</c><03:26:58.319><c> if</c><03:26:58.479><c> i</c><03:26:58.640><c> change</c><03:26:58.880><c> this</c><03:26:59.120><c> to</c><03:26:59.359><c> int</c><03:26:59.760><c> and</c><03:27:00.000><c> int</c>

03:27:00.309 --> 03:27:00.319 align:start position:0%
six and if i change this to int and int
 

03:27:00.319 --> 03:27:03.670 align:start position:0%
six and if i change this to int and int
uses<03:27:00.880><c> four</c><03:27:01.200><c> bytes</c><03:27:01.760><c> so</c><03:27:02.000><c> four</c><03:27:02.319><c> times</c><03:27:02.640><c> three</c><03:27:03.439><c> is</c>

03:27:03.670 --> 03:27:03.680 align:start position:0%
uses four bytes so four times three is
 

03:27:03.680 --> 03:27:06.070 align:start position:0%
uses four bytes so four times three is
twelve<03:27:04.479><c> and</c><03:27:04.800><c> a</c><03:27:05.120><c> double</c>

03:27:06.070 --> 03:27:06.080 align:start position:0%
twelve and a double
 

03:27:06.080 --> 03:27:08.550 align:start position:0%
twelve and a double
is<03:27:06.319><c> eight</c><03:27:06.640><c> so</c><03:27:06.880><c> eight</c><03:27:07.200><c> times</c><03:27:07.520><c> three</c><03:27:08.000><c> is</c><03:27:08.239><c> twenty</c>

03:27:08.550 --> 03:27:08.560 align:start position:0%
is eight so eight times three is twenty
 

03:27:08.560 --> 03:27:10.790 align:start position:0%
is eight so eight times three is twenty
four<03:27:09.200><c> so</c><03:27:09.359><c> yeah</c><03:27:09.600><c> that's</c><03:27:09.840><c> kind</c><03:27:10.080><c> of</c><03:27:10.160><c> the</c><03:27:10.239><c> basics</c>

03:27:10.790 --> 03:27:10.800 align:start position:0%
four so yeah that's kind of the basics
 

03:27:10.800 --> 03:27:13.990 align:start position:0%
four so yeah that's kind of the basics
of<03:27:11.040><c> memory</c><03:27:11.840><c> so</c><03:27:12.080><c> memory</c><03:27:12.640><c> is</c><03:27:12.800><c> an</c><03:27:12.960><c> array</c><03:27:13.359><c> of</c><03:27:13.600><c> bites</c>

03:27:13.990 --> 03:27:14.000 align:start position:0%
of memory so memory is an array of bites
 

03:27:14.000 --> 03:27:16.710 align:start position:0%
of memory so memory is an array of bites
within<03:27:14.399><c> ram</c><03:27:15.040><c> think</c><03:27:15.279><c> of</c><03:27:15.439><c> it</c><03:27:15.600><c> like</c><03:27:15.920><c> a</c><03:27:16.080><c> street</c><03:27:16.479><c> and</c>

03:27:16.710 --> 03:27:16.720 align:start position:0%
within ram think of it like a street and
 

03:27:16.720 --> 03:27:19.510 align:start position:0%
within ram think of it like a street and
a<03:27:16.800><c> street</c><03:27:17.120><c> contains</c><03:27:17.600><c> houses</c><03:27:18.479><c> each</c><03:27:18.800><c> house</c><03:27:19.200><c> is</c><03:27:19.439><c> a</c>

03:27:19.510 --> 03:27:19.520 align:start position:0%
a street contains houses each house is a
 

03:27:19.520 --> 03:27:22.229 align:start position:0%
a street contains houses each house is a
memory<03:27:19.920><c> block</c><03:27:20.479><c> that</c><03:27:20.640><c> can</c><03:27:20.880><c> hold</c><03:27:21.279><c> some</c><03:27:21.520><c> value</c>

03:27:22.229 --> 03:27:22.239 align:start position:0%
memory block that can hold some value
 

03:27:22.239 --> 03:27:24.710 align:start position:0%
memory block that can hold some value
think<03:27:22.399><c> of</c><03:27:22.560><c> each</c><03:27:22.800><c> value</c><03:27:23.359><c> as</c><03:27:23.680><c> a</c><03:27:23.840><c> person</c><03:27:24.399><c> living</c>

03:27:24.710 --> 03:27:24.720 align:start position:0%
think of each value as a person living
 

03:27:24.720 --> 03:27:26.710 align:start position:0%
think of each value as a person living
in<03:27:24.800><c> that</c><03:27:24.960><c> house</c><03:27:25.600><c> and</c><03:27:25.760><c> in</c><03:27:25.920><c> order</c><03:27:26.160><c> to</c><03:27:26.319><c> find</c><03:27:26.640><c> a</c>

03:27:26.710 --> 03:27:26.720 align:start position:0%
in that house and in order to find a
 

03:27:26.720 --> 03:27:29.190 align:start position:0%
in that house and in order to find a
person<03:27:27.200><c> we</c><03:27:27.359><c> have</c><03:27:27.520><c> to</c><03:27:27.680><c> know</c><03:27:28.000><c> their</c><03:27:28.319><c> address</c>

03:27:29.190 --> 03:27:29.200 align:start position:0%
person we have to know their address
 

03:27:29.200 --> 03:27:31.590 align:start position:0%
person we have to know their address
like<03:27:29.439><c> a</c><03:27:29.520><c> street</c><03:27:29.840><c> address</c><03:27:30.560><c> c</c><03:27:30.880><c> refers</c><03:27:31.200><c> to</c><03:27:31.359><c> these</c>

03:27:31.590 --> 03:27:31.600 align:start position:0%
like a street address c refers to these
 

03:27:31.600 --> 03:27:33.670 align:start position:0%
like a street address c refers to these
variables<03:27:32.239><c> by</c><03:27:32.479><c> their</c><03:27:32.640><c> street</c><03:27:32.960><c> address</c><03:27:33.520><c> but</c>

03:27:33.670 --> 03:27:33.680 align:start position:0%
variables by their street address but
 

03:27:33.680 --> 03:27:35.750 align:start position:0%
variables by their street address but
that's<03:27:33.920><c> difficult</c><03:27:34.319><c> for</c><03:27:34.560><c> us</c><03:27:34.640><c> to</c><03:27:34.800><c> understand</c><03:27:35.600><c> so</c>

03:27:35.750 --> 03:27:35.760 align:start position:0%
that's difficult for us to understand so
 

03:27:35.760 --> 03:27:37.990 align:start position:0%
that's difficult for us to understand so
we<03:27:36.000><c> just</c><03:27:36.160><c> refer</c><03:27:36.479><c> to</c><03:27:36.640><c> this</c><03:27:36.800><c> memory</c><03:27:37.200><c> address</c><03:27:37.680><c> as</c>

03:27:37.990 --> 03:27:38.000 align:start position:0%
we just refer to this memory address as
 

03:27:38.000 --> 03:27:40.070 align:start position:0%
we just refer to this memory address as
a<03:27:38.160><c> variable</c><03:27:38.640><c> name</c><03:27:39.120><c> because</c><03:27:39.439><c> that's</c><03:27:39.760><c> easier</c>

03:27:40.070 --> 03:27:40.080 align:start position:0%
a variable name because that's easier
 

03:27:40.080 --> 03:27:42.150 align:start position:0%
a variable name because that's easier
for<03:27:40.239><c> humans</c><03:27:40.560><c> to</c><03:27:40.640><c> work</c><03:27:40.880><c> with</c><03:27:41.520><c> so</c><03:27:41.680><c> yeah</c><03:27:41.920><c> that's</c>

03:27:42.150 --> 03:27:42.160 align:start position:0%
for humans to work with so yeah that's
 

03:27:42.160 --> 03:27:44.710 align:start position:0%
for humans to work with so yeah that's
some<03:27:42.399><c> basics</c><03:27:42.960><c> of</c><03:27:43.200><c> memory</c><03:27:43.840><c> and</c><03:27:44.080><c> c</c><03:27:44.399><c> and</c><03:27:44.560><c> in</c><03:27:44.640><c> the</c>

03:27:44.710 --> 03:27:44.720 align:start position:0%
some basics of memory and c and in the
 

03:27:44.720 --> 03:27:46.150 align:start position:0%
some basics of memory and c and in the
next<03:27:44.960><c> video</c><03:27:45.279><c> we're</c><03:27:45.439><c> going</c><03:27:45.600><c> to</c><03:27:45.680><c> discuss</c>

03:27:46.150 --> 03:27:46.160 align:start position:0%
next video we're going to discuss
 

03:27:46.160 --> 03:27:48.550 align:start position:0%
next video we're going to discuss
pointers<03:27:47.120><c> so</c><03:27:47.359><c> if</c><03:27:47.520><c> you</c><03:27:47.600><c> would</c><03:27:47.760><c> like</c><03:27:47.920><c> a</c><03:27:48.000><c> copy</c><03:27:48.399><c> of</c>

03:27:48.550 --> 03:27:48.560 align:start position:0%
pointers so if you would like a copy of
 

03:27:48.560 --> 03:27:50.229 align:start position:0%
pointers so if you would like a copy of
my<03:27:48.720><c> notes</c><03:27:49.040><c> here</c><03:27:49.359><c> i'll</c><03:27:49.600><c> post</c><03:27:49.840><c> them</c><03:27:50.000><c> to</c><03:27:50.160><c> the</c>

03:27:50.229 --> 03:27:50.239 align:start position:0%
my notes here i'll post them to the
 

03:27:50.239 --> 03:27:52.710 align:start position:0%
my notes here i'll post them to the
comment<03:27:50.640><c> section</c><03:27:50.960><c> down</c><03:27:51.200><c> below</c><03:27:51.680><c> and</c><03:27:51.920><c> well</c><03:27:52.319><c> yeah</c>

03:27:52.710 --> 03:27:52.720 align:start position:0%
comment section down below and well yeah
 

03:27:52.720 --> 03:27:56.309 align:start position:0%
comment section down below and well yeah
that's<03:27:52.960><c> the</c><03:27:53.120><c> basics</c><03:27:53.600><c> of</c><03:27:53.840><c> memory</c><03:27:54.560><c> in</c><03:27:54.800><c> c</c>

03:27:56.309 --> 03:27:56.319 align:start position:0%
that's the basics of memory in c
 

03:27:56.319 --> 03:27:58.309 align:start position:0%
that's the basics of memory in c
hey<03:27:56.560><c> yeah</c><03:27:56.960><c> it's</c><03:27:57.200><c> you</c><03:27:57.279><c> bro</c><03:27:57.680><c> hope</c><03:27:57.840><c> you're</c><03:27:58.000><c> doing</c>

03:27:58.309 --> 03:27:58.319 align:start position:0%
hey yeah it's you bro hope you're doing
 

03:27:58.319 --> 03:28:00.070 align:start position:0%
hey yeah it's you bro hope you're doing
well<03:27:58.720><c> and</c><03:27:58.880><c> in</c><03:27:59.040><c> this</c><03:27:59.200><c> video</c><03:27:59.520><c> i'm</c><03:27:59.680><c> going</c><03:27:59.840><c> to</c>

03:28:00.070 --> 03:28:00.080 align:start position:0%
well and in this video i'm going to
 

03:28:00.080 --> 03:28:03.750 align:start position:0%
well and in this video i'm going to
explain<03:28:00.640><c> the</c><03:28:00.800><c> basics</c><03:28:01.439><c> of</c><03:28:01.680><c> pointers</c><03:28:02.479><c> in</c><03:28:02.720><c> c</c><03:28:03.279><c> so</c>

03:28:03.750 --> 03:28:03.760 align:start position:0%
explain the basics of pointers in c so
 

03:28:03.760 --> 03:28:08.229 align:start position:0%
explain the basics of pointers in c so
sit<03:28:04.000><c> back</c><03:28:04.399><c> relax</c><03:28:05.120><c> and</c><03:28:05.279><c> enjoy</c><03:28:05.600><c> the</c><03:28:05.760><c> show</c>

03:28:08.229 --> 03:28:08.239 align:start position:0%
 
 

03:28:08.239 --> 03:28:10.790 align:start position:0%
 
if<03:28:08.479><c> you</c><03:28:08.640><c> wouldn't</c><03:28:08.880><c> mind</c><03:28:09.279><c> please</c><03:28:09.680><c> like</c><03:28:10.239><c> comment</c>

03:28:10.790 --> 03:28:10.800 align:start position:0%
if you wouldn't mind please like comment
 

03:28:10.800 --> 03:28:13.590 align:start position:0%
if you wouldn't mind please like comment
and<03:28:11.040><c> subscribe</c><03:28:11.840><c> one</c><03:28:12.080><c> like</c><03:28:12.479><c> equals</c><03:28:12.960><c> one</c><03:28:13.200><c> prayer</c>

03:28:13.590 --> 03:28:13.600 align:start position:0%
and subscribe one like equals one prayer
 

03:28:13.600 --> 03:28:15.830 align:start position:0%
and subscribe one like equals one prayer
for<03:28:13.760><c> the</c><03:28:13.840><c> youtube</c><03:28:14.319><c> algorithm</c>

03:28:15.830 --> 03:28:15.840 align:start position:0%
for the youtube algorithm
 

03:28:15.840 --> 03:28:18.229 align:start position:0%
for the youtube algorithm
oh<03:28:16.080><c> yeah</c><03:28:16.479><c> we</c><03:28:16.720><c> finally</c><03:28:17.120><c> made</c><03:28:17.279><c> it</c><03:28:17.359><c> to</c><03:28:17.520><c> pointers</c>

03:28:18.229 --> 03:28:18.239 align:start position:0%
oh yeah we finally made it to pointers
 

03:28:18.239 --> 03:28:20.870 align:start position:0%
oh yeah we finally made it to pointers
we're<03:28:18.479><c> only</c><03:28:18.640><c> about</c><03:28:18.880><c> 40</c><03:28:19.200><c> topics</c><03:28:19.680><c> in</c><03:28:20.000><c> a</c><03:28:20.239><c> pointer</c>

03:28:20.870 --> 03:28:20.880 align:start position:0%
we're only about 40 topics in a pointer
 

03:28:20.880 --> 03:28:23.990 align:start position:0%
we're only about 40 topics in a pointer
is<03:28:21.200><c> a</c><03:28:21.600><c> variable</c><03:28:22.160><c> like</c><03:28:22.479><c> reference</c><03:28:23.279><c> that</c><03:28:23.600><c> holds</c>

03:28:23.990 --> 03:28:24.000 align:start position:0%
is a variable like reference that holds
 

03:28:24.000 --> 03:28:27.190 align:start position:0%
is a variable like reference that holds
a<03:28:24.239><c> memory</c><03:28:24.640><c> address</c><03:28:25.439><c> as</c><03:28:25.680><c> a</c><03:28:25.760><c> value</c><03:28:26.479><c> to</c><03:28:26.720><c> another</c>

03:28:27.190 --> 03:28:27.200 align:start position:0%
a memory address as a value to another
 

03:28:27.200 --> 03:28:30.389 align:start position:0%
a memory address as a value to another
variable<03:28:27.920><c> array</c><03:28:28.479><c> etc</c><03:28:29.439><c> some</c><03:28:29.760><c> tasks</c><03:28:30.239><c> are</c>

03:28:30.389 --> 03:28:30.399 align:start position:0%
variable array etc some tasks are
 

03:28:30.399 --> 03:28:32.950 align:start position:0%
variable array etc some tasks are
performed<03:28:31.040><c> more</c><03:28:31.359><c> easily</c><03:28:31.760><c> with</c><03:28:32.000><c> pointers</c><03:28:32.720><c> and</c>

03:28:32.950 --> 03:28:32.960 align:start position:0%
performed more easily with pointers and
 

03:28:32.960 --> 03:28:34.710 align:start position:0%
performed more easily with pointers and
here's<03:28:33.279><c> a</c><03:28:33.359><c> comprehensive</c><03:28:33.920><c> list</c><03:28:34.160><c> of</c><03:28:34.319><c> a</c><03:28:34.399><c> few</c><03:28:34.560><c> of</c>

03:28:34.710 --> 03:28:34.720 align:start position:0%
here's a comprehensive list of a few of
 

03:28:34.720 --> 03:28:36.710 align:start position:0%
here's a comprehensive list of a few of
the<03:28:34.800><c> benefits</c><03:28:35.760><c> in</c><03:28:35.920><c> this</c><03:28:36.080><c> video</c><03:28:36.399><c> we're</c><03:28:36.560><c> going</c>

03:28:36.710 --> 03:28:36.720 align:start position:0%
the benefits in this video we're going
 

03:28:36.720 --> 03:28:38.790 align:start position:0%
the benefits in this video we're going
to<03:28:36.880><c> more</c><03:28:37.040><c> or</c><03:28:37.120><c> less</c><03:28:37.439><c> focus</c><03:28:37.920><c> on</c><03:28:38.160><c> building</c><03:28:38.560><c> a</c>

03:28:38.790 --> 03:28:38.800 align:start position:0%
to more or less focus on building a
 

03:28:38.800 --> 03:28:40.630 align:start position:0%
to more or less focus on building a
solid<03:28:39.200><c> foundation</c><03:28:39.600><c> with</c><03:28:39.840><c> pointers</c><03:28:40.399><c> and</c>

03:28:40.630 --> 03:28:40.640 align:start position:0%
solid foundation with pointers and
 

03:28:40.640 --> 03:28:42.469 align:start position:0%
solid foundation with pointers and
understanding<03:28:41.120><c> how</c><03:28:41.279><c> they</c><03:28:41.439><c> work</c><03:28:41.920><c> so</c><03:28:42.080><c> let's</c><03:28:42.319><c> say</c>

03:28:42.469 --> 03:28:42.479 align:start position:0%
understanding how they work so let's say
 

03:28:42.479 --> 03:28:44.950 align:start position:0%
understanding how they work so let's say
we<03:28:42.560><c> have</c><03:28:42.720><c> a</c><03:28:42.800><c> variable</c><03:28:43.680><c> int</c><03:28:44.239><c> edge</c><03:28:44.640><c> and</c><03:28:44.800><c> i'll</c>

03:28:44.950 --> 03:28:44.960 align:start position:0%
we have a variable int edge and i'll
 

03:28:44.960 --> 03:28:47.830 align:start position:0%
we have a variable int edge and i'll
give<03:28:45.120><c> this</c><03:28:45.279><c> some</c><03:28:45.520><c> value</c><03:28:46.399><c> a</c><03:28:46.640><c> variable</c><03:28:47.120><c> has</c><03:28:47.600><c> a</c>

03:28:47.830 --> 03:28:47.840 align:start position:0%
give this some value a variable has a
 

03:28:47.840 --> 03:28:50.710 align:start position:0%
give this some value a variable has a
value<03:28:48.560><c> and</c><03:28:48.800><c> an</c><03:28:48.960><c> address</c><03:28:49.760><c> and</c><03:28:50.000><c> let's</c><03:28:50.239><c> display</c>

03:28:50.710 --> 03:28:50.720 align:start position:0%
value and an address and let's display
 

03:28:50.720 --> 03:28:52.870 align:start position:0%
value and an address and let's display
the<03:28:50.960><c> value</c><03:28:51.520><c> and</c><03:28:51.760><c> the</c><03:28:52.000><c> address</c><03:28:52.560><c> of</c><03:28:52.720><c> this</c>

03:28:52.870 --> 03:28:52.880 align:start position:0%
the value and the address of this
 

03:28:52.880 --> 03:28:55.910 align:start position:0%
the value and the address of this
variable<03:28:53.439><c> using</c><03:28:53.840><c> two</c><03:28:54.080><c> print</c><03:28:54.399><c> statements</c>

03:28:55.910 --> 03:28:55.920 align:start position:0%
variable using two print statements
 

03:28:55.920 --> 03:28:57.990 align:start position:0%
variable using two print statements
so<03:28:56.239><c> first</c><03:28:56.560><c> i'm</c><03:28:56.800><c> going</c><03:28:56.960><c> to</c><03:28:57.120><c> display</c><03:28:57.680><c> the</c>

03:28:57.990 --> 03:28:58.000 align:start position:0%
so first i'm going to display the
 

03:28:58.000 --> 03:29:00.389 align:start position:0%
so first i'm going to display the
address<03:28:58.640><c> of</c><03:28:58.720><c> this</c><03:28:58.960><c> variable</c>

03:29:00.389 --> 03:29:00.399 align:start position:0%
address of this variable
 

03:29:00.399 --> 03:29:03.990 align:start position:0%
address of this variable
address<03:29:01.279><c> of</c><03:29:01.760><c> age</c><03:29:02.479><c> then</c><03:29:02.720><c> i</c><03:29:02.800><c> will</c><03:29:03.040><c> use</c><03:29:03.439><c> the</c><03:29:03.760><c> p</c>

03:29:03.990 --> 03:29:04.000 align:start position:0%
address of age then i will use the p
 

03:29:04.000 --> 03:29:06.469 align:start position:0%
address of age then i will use the p
format<03:29:04.399><c> specifier</c><03:29:05.200><c> to</c><03:29:05.359><c> display</c><03:29:05.760><c> an</c><03:29:06.000><c> address</c>

03:29:06.469 --> 03:29:06.479 align:start position:0%
format specifier to display an address
 

03:29:06.479 --> 03:29:09.190 align:start position:0%
format specifier to display an address
in<03:29:06.640><c> hexadecimal</c><03:29:07.600><c> and</c><03:29:07.840><c> we</c><03:29:08.000><c> are</c><03:29:08.160><c> displaying</c><03:29:08.800><c> the</c>

03:29:09.190 --> 03:29:09.200 align:start position:0%
in hexadecimal and we are displaying the
 

03:29:09.200 --> 03:29:12.070 align:start position:0%
in hexadecimal and we are displaying the
address<03:29:09.920><c> of</c><03:29:10.160><c> age</c><03:29:10.640><c> and</c><03:29:10.800><c> ampersand</c><03:29:11.600><c> is</c><03:29:11.760><c> the</c>

03:29:12.070 --> 03:29:12.080 align:start position:0%
address of age and ampersand is the
 

03:29:12.080 --> 03:29:15.670 align:start position:0%
address of age and ampersand is the
address<03:29:12.560><c> of</c><03:29:12.800><c> operator</c><03:29:13.760><c> address</c><03:29:14.399><c> of</c><03:29:14.800><c> age</c><03:29:15.439><c> and</c><03:29:15.600><c> i</c>

03:29:15.670 --> 03:29:15.680 align:start position:0%
address of operator address of age and i
 

03:29:15.680 --> 03:29:17.830 align:start position:0%
address of operator address of age and i
would<03:29:15.920><c> also</c><03:29:16.239><c> like</c><03:29:16.399><c> to</c><03:29:16.560><c> display</c><03:29:17.040><c> the</c><03:29:17.279><c> value</c><03:29:17.680><c> of</c>

03:29:17.830 --> 03:29:17.840 align:start position:0%
would also like to display the value of
 

03:29:17.840 --> 03:29:18.950 align:start position:0%
would also like to display the value of
age

03:29:18.950 --> 03:29:18.960 align:start position:0%
age
 

03:29:18.960 --> 03:29:21.269 align:start position:0%
age
value<03:29:19.760><c> of</c><03:29:20.319><c> age</c>

03:29:21.269 --> 03:29:21.279 align:start position:0%
value of age
 

03:29:21.279 --> 03:29:23.110 align:start position:0%
value of age
and<03:29:21.600><c> this</c><03:29:21.760><c> is</c><03:29:21.920><c> an</c><03:29:22.080><c> integer</c>

03:29:23.110 --> 03:29:23.120 align:start position:0%
and this is an integer
 

03:29:23.120 --> 03:29:26.550 align:start position:0%
and this is an integer
and<03:29:23.359><c> we</c><03:29:23.520><c> will</c><03:29:23.760><c> display</c><03:29:24.640><c> age</c>

03:29:26.550 --> 03:29:26.560 align:start position:0%
and we will display age
 

03:29:26.560 --> 03:29:30.070 align:start position:0%
and we will display age
so<03:29:26.800><c> variables</c><03:29:27.520><c> have</c><03:29:27.760><c> a</c><03:29:27.920><c> value</c><03:29:28.640><c> and</c><03:29:28.800><c> an</c><03:29:28.960><c> address</c>

03:29:30.070 --> 03:29:30.080 align:start position:0%
so variables have a value and an address
 

03:29:30.080 --> 03:29:32.630 align:start position:0%
so variables have a value and an address
this<03:29:30.239><c> is</c><03:29:30.399><c> the</c><03:29:30.640><c> address</c><03:29:31.279><c> of</c><03:29:31.359><c> this</c><03:29:31.600><c> variable</c><03:29:32.479><c> and</c>

03:29:32.630 --> 03:29:32.640 align:start position:0%
this is the address of this variable and
 

03:29:32.640 --> 03:29:35.269 align:start position:0%
this is the address of this variable and
the<03:29:32.800><c> value</c><03:29:33.520><c> at</c><03:29:33.920><c> this</c><03:29:34.160><c> address</c>

03:29:35.269 --> 03:29:35.279 align:start position:0%
the value at this address
 

03:29:35.279 --> 03:29:36.710 align:start position:0%
the value at this address
as<03:29:35.520><c> you</c><03:29:35.600><c> know</c><03:29:35.840><c> there's</c><03:29:36.080><c> tons</c><03:29:36.399><c> of</c><03:29:36.479><c> different</c>

03:29:36.710 --> 03:29:36.720 align:start position:0%
as you know there's tons of different
 

03:29:36.720 --> 03:29:38.710 align:start position:0%
as you know there's tons of different
things<03:29:36.960><c> we</c><03:29:37.120><c> can</c><03:29:37.279><c> do</c><03:29:37.520><c> with</c><03:29:37.840><c> a</c><03:29:38.000><c> value</c><03:29:38.479><c> of</c><03:29:38.640><c> a</c>

03:29:38.710 --> 03:29:38.720 align:start position:0%
things we can do with a value of a
 

03:29:38.720 --> 03:29:40.710 align:start position:0%
things we can do with a value of a
variable<03:29:39.600><c> but</c><03:29:39.760><c> there</c><03:29:40.000><c> are</c><03:29:40.239><c> things</c><03:29:40.479><c> that</c><03:29:40.640><c> we</c>

03:29:40.710 --> 03:29:40.720 align:start position:0%
variable but there are things that we
 

03:29:40.720 --> 03:29:42.950 align:start position:0%
variable but there are things that we
can<03:29:40.880><c> do</c><03:29:41.040><c> with</c><03:29:41.200><c> an</c><03:29:41.359><c> address</c><03:29:41.760><c> as</c><03:29:41.840><c> well</c><03:29:42.479><c> so</c><03:29:42.640><c> we</c><03:29:42.800><c> can</c>

03:29:42.950 --> 03:29:42.960 align:start position:0%
can do with an address as well so we can
 

03:29:42.960 --> 03:29:44.950 align:start position:0%
can do with an address as well so we can
actually<03:29:43.359><c> store</c><03:29:43.680><c> this</c><03:29:43.920><c> address</c><03:29:44.319><c> within</c><03:29:44.720><c> a</c>

03:29:44.950 --> 03:29:44.960 align:start position:0%
actually store this address within a
 

03:29:44.960 --> 03:29:47.750 align:start position:0%
actually store this address within a
separate<03:29:45.359><c> variable</c><03:29:46.160><c> a</c><03:29:46.640><c> variable</c><03:29:47.359><c> like</c>

03:29:47.750 --> 03:29:47.760 align:start position:0%
separate variable a variable like
 

03:29:47.760 --> 03:29:49.990 align:start position:0%
separate variable a variable like
reference<03:29:48.479><c> and</c><03:29:48.560><c> that</c><03:29:48.800><c> is</c><03:29:48.880><c> called</c><03:29:49.120><c> a</c><03:29:49.200><c> pointer</c>

03:29:49.990 --> 03:29:50.000 align:start position:0%
reference and that is called a pointer
 

03:29:50.000 --> 03:29:51.990 align:start position:0%
reference and that is called a pointer
so<03:29:50.160><c> to</c><03:29:50.319><c> create</c><03:29:50.560><c> a</c><03:29:50.640><c> pointer</c><03:29:51.279><c> we</c><03:29:51.439><c> will</c><03:29:51.600><c> make</c><03:29:51.760><c> sure</c>

03:29:51.990 --> 03:29:52.000 align:start position:0%
so to create a pointer we will make sure
 

03:29:52.000 --> 03:29:53.830 align:start position:0%
so to create a pointer we will make sure
these<03:29:52.239><c> are</c><03:29:52.319><c> of</c><03:29:52.479><c> the</c><03:29:52.560><c> same</c><03:29:52.800><c> data</c><03:29:53.120><c> type</c><03:29:53.439><c> as</c><03:29:53.680><c> the</c>

03:29:53.830 --> 03:29:53.840 align:start position:0%
these are of the same data type as the
 

03:29:53.840 --> 03:29:56.389 align:start position:0%
these are of the same data type as the
variable<03:29:54.319><c> we're</c><03:29:54.560><c> pointing</c><03:29:54.880><c> to</c><03:29:55.600><c> age</c><03:29:56.080><c> is</c><03:29:56.239><c> an</c>

03:29:56.389 --> 03:29:56.399 align:start position:0%
variable we're pointing to age is an
 

03:29:56.399 --> 03:29:58.550 align:start position:0%
variable we're pointing to age is an
integer<03:29:56.960><c> so</c><03:29:57.120><c> we</c><03:29:57.279><c> will</c><03:29:57.439><c> declare</c><03:29:57.840><c> this</c><03:29:58.080><c> pointer</c>

03:29:58.550 --> 03:29:58.560 align:start position:0%
integer so we will declare this pointer
 

03:29:58.560 --> 03:30:00.550 align:start position:0%
integer so we will declare this pointer
of<03:29:58.720><c> the</c><03:29:58.960><c> integer</c><03:29:59.359><c> data</c><03:29:59.680><c> type</c><03:30:00.160><c> and</c><03:30:00.239><c> the</c><03:30:00.399><c> next</c>

03:30:00.550 --> 03:30:00.560 align:start position:0%
of the integer data type and the next
 

03:30:00.560 --> 03:30:02.389 align:start position:0%
of the integer data type and the next
step<03:30:00.720><c> to</c><03:30:00.880><c> declare</c><03:30:01.279><c> a</c><03:30:01.359><c> pointer</c><03:30:01.920><c> is</c><03:30:02.000><c> that</c><03:30:02.160><c> we</c>

03:30:02.389 --> 03:30:02.399 align:start position:0%
step to declare a pointer is that we
 

03:30:02.399 --> 03:30:04.710 align:start position:0%
step to declare a pointer is that we
will<03:30:02.560><c> use</c><03:30:02.880><c> an</c><03:30:03.120><c> asterisk</c><03:30:03.840><c> this</c><03:30:04.080><c> is</c><03:30:04.239><c> the</c><03:30:04.560><c> in</c>

03:30:04.710 --> 03:30:04.720 align:start position:0%
will use an asterisk this is the in
 

03:30:04.720 --> 03:30:07.190 align:start position:0%
will use an asterisk this is the in
direction<03:30:05.200><c> operator</c><03:30:06.160><c> and</c><03:30:06.399><c> a</c><03:30:06.560><c> common</c><03:30:06.880><c> naming</c>

03:30:07.190 --> 03:30:07.200 align:start position:0%
direction operator and a common naming
 

03:30:07.200 --> 03:30:09.830 align:start position:0%
direction operator and a common naming
convention<03:30:07.760><c> for</c><03:30:08.000><c> pointers</c><03:30:08.720><c> is</c><03:30:08.880><c> that</c><03:30:09.040><c> you</c><03:30:09.279><c> type</c>

03:30:09.830 --> 03:30:09.840 align:start position:0%
convention for pointers is that you type
 

03:30:09.840 --> 03:30:12.150 align:start position:0%
convention for pointers is that you type
lowercase<03:30:10.479><c> p</c><03:30:11.120><c> the</c><03:30:11.279><c> name</c><03:30:11.520><c> of</c><03:30:11.600><c> the</c><03:30:11.680><c> variable</c>

03:30:12.150 --> 03:30:12.160 align:start position:0%
lowercase p the name of the variable
 

03:30:12.160 --> 03:30:14.229 align:start position:0%
lowercase p the name of the variable
you're<03:30:12.319><c> going</c><03:30:12.479><c> to</c><03:30:12.640><c> point</c><03:30:12.960><c> to</c><03:30:13.439><c> but</c><03:30:13.600><c> make</c><03:30:13.920><c> the</c>

03:30:14.229 --> 03:30:14.239 align:start position:0%
you're going to point to but make the
 

03:30:14.239 --> 03:30:16.870 align:start position:0%
you're going to point to but make the
first<03:30:14.640><c> letter</c><03:30:15.040><c> uppercase</c><03:30:16.160><c> and</c><03:30:16.319><c> i'm</c><03:30:16.560><c> going</c><03:30:16.720><c> to</c>

03:30:16.870 --> 03:30:16.880 align:start position:0%
first letter uppercase and i'm going to
 

03:30:16.880 --> 03:30:18.710 align:start position:0%
first letter uppercase and i'm going to
set<03:30:17.120><c> this</c><03:30:17.439><c> equal</c><03:30:17.840><c> to</c>

03:30:18.710 --> 03:30:18.720 align:start position:0%
set this equal to
 

03:30:18.720 --> 03:30:21.269 align:start position:0%
set this equal to
the<03:30:18.960><c> address</c><03:30:19.760><c> of</c><03:30:20.080><c> age</c>

03:30:21.269 --> 03:30:21.279 align:start position:0%
the address of age
 

03:30:21.279 --> 03:30:24.630 align:start position:0%
the address of age
so<03:30:21.520><c> the</c><03:30:21.840><c> address</c><03:30:22.399><c> of</c><03:30:22.640><c> age</c><03:30:23.120><c> and</c><03:30:23.439><c> the</c><03:30:23.680><c> value</c><03:30:24.399><c> at</c>

03:30:24.630 --> 03:30:24.640 align:start position:0%
so the address of age and the value at
 

03:30:24.640 --> 03:30:27.349 align:start position:0%
so the address of age and the value at
this<03:30:24.880><c> variable</c><03:30:25.840><c> are</c><03:30:26.000><c> the</c><03:30:26.160><c> same</c><03:30:26.880><c> and</c><03:30:27.040><c> let's</c>

03:30:27.349 --> 03:30:27.359 align:start position:0%
this variable are the same and let's
 

03:30:27.359 --> 03:30:28.950 align:start position:0%
this variable are the same and let's
test<03:30:27.600><c> that</c><03:30:27.840><c> theory</c>

03:30:28.950 --> 03:30:28.960 align:start position:0%
test that theory
 

03:30:28.960 --> 03:30:31.590 align:start position:0%
test that theory
so<03:30:29.200><c> this</c><03:30:29.439><c> time</c><03:30:29.840><c> i'm</c><03:30:30.000><c> going</c><03:30:30.319><c> to</c><03:30:30.479><c> display</c>

03:30:31.590 --> 03:30:31.600 align:start position:0%
so this time i'm going to display
 

03:30:31.600 --> 03:30:37.190 align:start position:0%
so this time i'm going to display
the<03:30:31.840><c> address</c><03:30:32.319><c> of</c><03:30:32.560><c> age</c><03:30:33.200><c> and</c><03:30:33.520><c> the</c><03:30:33.760><c> value</c><03:30:34.560><c> of</c><03:30:34.960><c> ph</c>

03:30:37.190 --> 03:30:37.200 align:start position:0%
the address of age and the value of ph
 

03:30:37.200 --> 03:30:38.950 align:start position:0%
the address of age and the value of ph
and<03:30:37.359><c> this</c><03:30:37.520><c> will</c><03:30:37.680><c> display</c><03:30:38.000><c> an</c><03:30:38.160><c> address</c><03:30:38.720><c> so</c>

03:30:38.950 --> 03:30:38.960 align:start position:0%
and this will display an address so
 

03:30:38.960 --> 03:30:42.630 align:start position:0%
and this will display an address so
change<03:30:39.359><c> the</c><03:30:39.520><c> format</c><03:30:39.920><c> specifier</c><03:30:40.720><c> from</c><03:30:41.040><c> d</c><03:30:41.439><c> to</c><03:30:41.680><c> p</c>

03:30:42.630 --> 03:30:42.640 align:start position:0%
change the format specifier from d to p
 

03:30:42.640 --> 03:30:44.630 align:start position:0%
change the format specifier from d to p
and<03:30:42.800><c> i'm</c><03:30:43.040><c> going</c><03:30:43.279><c> to</c><03:30:43.600><c> turn</c><03:30:43.840><c> this</c><03:30:44.080><c> line</c><03:30:44.319><c> into</c><03:30:44.560><c> a</c>

03:30:44.630 --> 03:30:44.640 align:start position:0%
and i'm going to turn this line into a
 

03:30:44.640 --> 03:30:47.910 align:start position:0%
and i'm going to turn this line into a
comment<03:30:45.120><c> for</c><03:30:45.359><c> now</c><03:30:45.920><c> okay</c><03:30:46.239><c> so</c><03:30:46.720><c> these</c><03:30:47.120><c> addresses</c>

03:30:47.910 --> 03:30:47.920 align:start position:0%
comment for now okay so these addresses
 

03:30:47.920 --> 03:30:50.469 align:start position:0%
comment for now okay so these addresses
should<03:30:48.160><c> both</c><03:30:48.399><c> be</c><03:30:48.640><c> the</c><03:30:48.720><c> same</c><03:30:49.439><c> the</c><03:30:49.600><c> address</c><03:30:50.239><c> of</c>

03:30:50.469 --> 03:30:50.479 align:start position:0%
should both be the same the address of
 

03:30:50.479 --> 03:30:53.510 align:start position:0%
should both be the same the address of
age<03:30:51.040><c> as</c><03:30:51.279><c> well</c><03:30:51.520><c> as</c><03:30:51.760><c> the</c><03:30:51.920><c> value</c><03:30:52.399><c> stored</c><03:30:52.720><c> within</c>

03:30:53.510 --> 03:30:53.520 align:start position:0%
age as well as the value stored within
 

03:30:53.520 --> 03:30:54.630 align:start position:0%
age as well as the value stored within
ph

03:30:54.630 --> 03:30:54.640 align:start position:0%
ph
 

03:30:54.640 --> 03:30:56.950 align:start position:0%
ph
so<03:30:54.960><c> our</c><03:30:55.200><c> pointer</c><03:30:55.680><c> has</c><03:30:55.920><c> its</c><03:30:56.160><c> own</c><03:30:56.319><c> address</c><03:30:56.800><c> but</c>

03:30:56.950 --> 03:30:56.960 align:start position:0%
so our pointer has its own address but
 

03:30:56.960 --> 03:30:59.830 align:start position:0%
so our pointer has its own address but
the<03:30:57.120><c> value</c><03:30:57.600><c> stored</c><03:30:58.000><c> within</c><03:30:58.399><c> it</c><03:30:58.800><c> is</c><03:30:58.960><c> an</c><03:30:59.120><c> address</c>

03:30:59.830 --> 03:30:59.840 align:start position:0%
the value stored within it is an address
 

03:30:59.840 --> 03:31:01.990 align:start position:0%
the value stored within it is an address
and<03:31:00.000><c> we</c><03:31:00.160><c> can</c><03:31:00.399><c> access</c><03:31:00.960><c> the</c><03:31:01.200><c> value</c><03:31:01.600><c> at</c><03:31:01.760><c> this</c>

03:31:01.990 --> 03:31:02.000 align:start position:0%
and we can access the value at this
 

03:31:02.000 --> 03:31:03.830 align:start position:0%
and we can access the value at this
address<03:31:02.399><c> by</c><03:31:02.640><c> using</c><03:31:03.040><c> the</c><03:31:03.279><c> indirection</c>

03:31:03.830 --> 03:31:03.840 align:start position:0%
address by using the indirection
 

03:31:03.840 --> 03:31:06.150 align:start position:0%
address by using the indirection
operator<03:31:04.640><c> so</c><03:31:04.800><c> this</c><03:31:05.040><c> time</c><03:31:05.279><c> i'm</c><03:31:05.439><c> going</c><03:31:05.600><c> to</c><03:31:05.760><c> print</c>

03:31:06.150 --> 03:31:06.160 align:start position:0%
operator so this time i'm going to print
 

03:31:06.160 --> 03:31:08.150 align:start position:0%
operator so this time i'm going to print
the<03:31:06.319><c> value</c><03:31:06.880><c> of</c><03:31:07.200><c> age</c>

03:31:08.150 --> 03:31:08.160 align:start position:0%
the value of age
 

03:31:08.160 --> 03:31:09.670 align:start position:0%
the value of age
and<03:31:08.479><c> the</c><03:31:08.720><c> value</c>

03:31:09.670 --> 03:31:09.680 align:start position:0%
and the value
 

03:31:09.680 --> 03:31:10.710 align:start position:0%
and the value
at

03:31:10.710 --> 03:31:10.720 align:start position:0%
at
 

03:31:10.720 --> 03:31:12.950 align:start position:0%
at
stored

03:31:12.950 --> 03:31:12.960 align:start position:0%
stored
 

03:31:12.960 --> 03:31:14.229 align:start position:0%
stored
address

03:31:14.229 --> 03:31:14.239 align:start position:0%
address
 

03:31:14.239 --> 03:31:16.710 align:start position:0%
address
and<03:31:14.560><c> to</c><03:31:14.800><c> dereference</c><03:31:15.520><c> a</c><03:31:15.600><c> pointer</c><03:31:16.319><c> you</c><03:31:16.479><c> will</c>

03:31:16.710 --> 03:31:16.720 align:start position:0%
and to dereference a pointer you will
 

03:31:16.720 --> 03:31:20.469 align:start position:0%
and to dereference a pointer you will
type<03:31:17.120><c> the</c><03:31:17.439><c> pointer</c><03:31:17.920><c> name</c><03:31:18.560><c> ph</c><03:31:19.680><c> appreciated</c>

03:31:20.469 --> 03:31:20.479 align:start position:0%
type the pointer name ph appreciated
 

03:31:20.479 --> 03:31:22.550 align:start position:0%
type the pointer name ph appreciated
with<03:31:20.640><c> the</c><03:31:20.880><c> indirection</c><03:31:21.439><c> operator</c>

03:31:22.550 --> 03:31:22.560 align:start position:0%
with the indirection operator
 

03:31:22.560 --> 03:31:24.550 align:start position:0%
with the indirection operator
as<03:31:22.800><c> my</c><03:31:23.040><c> own</c><03:31:23.200><c> personal</c><03:31:23.680><c> nickname</c><03:31:24.160><c> for</c><03:31:24.399><c> the</c>

03:31:24.550 --> 03:31:24.560 align:start position:0%
as my own personal nickname for the
 

03:31:24.560 --> 03:31:27.110 align:start position:0%
as my own personal nickname for the
indirection<03:31:25.040><c> operator</c><03:31:25.600><c> i</c><03:31:25.680><c> call</c><03:31:26.000><c> it</c><03:31:26.160><c> the</c><03:31:26.560><c> value</c>

03:31:27.110 --> 03:31:27.120 align:start position:0%
indirection operator i call it the value
 

03:31:27.120 --> 03:31:29.510 align:start position:0%
indirection operator i call it the value
at<03:31:27.520><c> address</c><03:31:28.000><c> operator</c><03:31:28.800><c> that's</c><03:31:29.040><c> not</c><03:31:29.279><c> any</c>

03:31:29.510 --> 03:31:29.520 align:start position:0%
at address operator that's not any
 

03:31:29.520 --> 03:31:31.269 align:start position:0%
at address operator that's not any
official<03:31:29.920><c> name</c><03:31:30.160><c> that's</c><03:31:30.479><c> just</c><03:31:30.720><c> how</c><03:31:30.960><c> i</c><03:31:31.120><c> think</c>

03:31:31.269 --> 03:31:31.279 align:start position:0%
official name that's just how i think
 

03:31:31.279 --> 03:31:34.469 align:start position:0%
official name that's just how i think
about<03:31:31.600><c> it</c><03:31:32.080><c> so</c><03:31:32.319><c> we're</c><03:31:32.560><c> extracting</c><03:31:33.359><c> a</c><03:31:33.600><c> value</c><03:31:34.319><c> at</c>

03:31:34.469 --> 03:31:34.479 align:start position:0%
about it so we're extracting a value at
 

03:31:34.479 --> 03:31:37.110 align:start position:0%
about it so we're extracting a value at
the<03:31:34.640><c> given</c><03:31:34.960><c> address</c><03:31:35.439><c> within</c><03:31:35.760><c> this</c><03:31:35.920><c> pointer</c><03:31:36.880><c> so</c>

03:31:37.110 --> 03:31:37.120 align:start position:0%
the given address within this pointer so
 

03:31:37.120 --> 03:31:40.550 align:start position:0%
the given address within this pointer so
if<03:31:37.279><c> i</c><03:31:37.439><c> display</c><03:31:37.920><c> the</c><03:31:38.160><c> value</c><03:31:38.960><c> of</c><03:31:39.200><c> age</c><03:31:39.920><c> and</c><03:31:40.319><c> the</c>

03:31:40.550 --> 03:31:40.560 align:start position:0%
if i display the value of age and the
 

03:31:40.560 --> 03:31:43.269 align:start position:0%
if i display the value of age and the
value<03:31:41.200><c> at</c><03:31:41.520><c> the</c><03:31:41.680><c> stored</c><03:31:42.160><c> address</c><03:31:42.800><c> using</c><03:31:43.040><c> the</c>

03:31:43.269 --> 03:31:43.279 align:start position:0%
value at the stored address using the
 

03:31:43.279 --> 03:31:45.510 align:start position:0%
value at the stored address using the
indirection<03:31:43.840><c> operator</c><03:31:44.800><c> well</c><03:31:45.040><c> both</c><03:31:45.279><c> of</c><03:31:45.359><c> these</c>

03:31:45.510 --> 03:31:45.520 align:start position:0%
indirection operator well both of these
 

03:31:45.520 --> 03:31:47.590 align:start position:0%
indirection operator well both of these
are<03:31:45.680><c> going</c><03:31:45.840><c> to</c><03:31:45.920><c> be</c><03:31:46.000><c> the</c><03:31:46.160><c> same</c>

03:31:47.590 --> 03:31:47.600 align:start position:0%
are going to be the same
 

03:31:47.600 --> 03:31:50.550 align:start position:0%
are going to be the same
so<03:31:47.760><c> we</c><03:31:47.920><c> have</c><03:31:48.239><c> 21</c><03:31:48.880><c> stored</c><03:31:49.200><c> within</c><03:31:49.520><c> our</c><03:31:49.760><c> edge</c>

03:31:50.550 --> 03:31:50.560 align:start position:0%
so we have 21 stored within our edge
 

03:31:50.560 --> 03:31:53.110 align:start position:0%
so we have 21 stored within our edge
and<03:31:50.880><c> after</c><03:31:51.359><c> dereferencing</c><03:31:52.160><c> this</c><03:31:52.319><c> pointer</c>

03:31:53.110 --> 03:31:53.120 align:start position:0%
and after dereferencing this pointer
 

03:31:53.120 --> 03:31:55.750 align:start position:0%
and after dereferencing this pointer
we're<03:31:53.359><c> extracting</c><03:31:54.160><c> the</c><03:31:54.399><c> value</c><03:31:55.040><c> at</c><03:31:55.279><c> this</c><03:31:55.439><c> given</c>

03:31:55.750 --> 03:31:55.760 align:start position:0%
we're extracting the value at this given
 

03:31:55.760 --> 03:31:56.870 align:start position:0%
we're extracting the value at this given
address

03:31:56.870 --> 03:31:56.880 align:start position:0%
address
 

03:31:56.880 --> 03:31:59.190 align:start position:0%
address
so<03:31:57.120><c> you</c><03:31:57.279><c> use</c><03:31:57.600><c> the</c><03:31:57.840><c> indirection</c><03:31:58.399><c> operator</c><03:31:59.040><c> when</c>

03:31:59.190 --> 03:31:59.200 align:start position:0%
so you use the indirection operator when
 

03:31:59.200 --> 03:32:01.590 align:start position:0%
so you use the indirection operator when
you<03:31:59.359><c> declare</c><03:31:59.760><c> a</c><03:32:00.000><c> pointer</c><03:32:00.800><c> as</c><03:32:01.040><c> well</c><03:32:01.279><c> as</c><03:32:01.439><c> when</c>

03:32:01.590 --> 03:32:01.600 align:start position:0%
you declare a pointer as well as when
 

03:32:01.600 --> 03:32:04.309 align:start position:0%
you declare a pointer as well as when
you<03:32:01.680><c> want</c><03:32:01.920><c> to</c><03:32:02.160><c> access</c><03:32:02.640><c> a</c><03:32:02.800><c> value</c><03:32:03.600><c> at</c><03:32:03.760><c> the</c><03:32:03.920><c> stored</c>

03:32:04.309 --> 03:32:04.319 align:start position:0%
you want to access a value at the stored
 

03:32:04.319 --> 03:32:05.590 align:start position:0%
you want to access a value at the stored
address

03:32:05.590 --> 03:32:05.600 align:start position:0%
address
 

03:32:05.600 --> 03:32:07.510 align:start position:0%
address
so<03:32:05.840><c> with</c><03:32:06.000><c> the</c><03:32:06.160><c> data</c><03:32:06.479><c> types</c><03:32:06.800><c> of</c><03:32:06.880><c> the</c><03:32:07.040><c> pointer</c>

03:32:07.510 --> 03:32:07.520 align:start position:0%
so with the data types of the pointer
 

03:32:07.520 --> 03:32:08.469 align:start position:0%
so with the data types of the pointer
you'll<03:32:07.680><c> want</c><03:32:07.920><c> to</c><03:32:08.000><c> make</c><03:32:08.160><c> sure</c><03:32:08.319><c> they're</c>

03:32:08.469 --> 03:32:08.479 align:start position:0%
you'll want to make sure they're
 

03:32:08.479 --> 03:32:10.870 align:start position:0%
you'll want to make sure they're
consistent<03:32:09.279><c> c</c><03:32:09.600><c> is</c><03:32:09.840><c> a</c><03:32:10.000><c> strongly</c><03:32:10.560><c> typed</c>

03:32:10.870 --> 03:32:10.880 align:start position:0%
consistent c is a strongly typed
 

03:32:10.880 --> 03:32:13.510 align:start position:0%
consistent c is a strongly typed
language<03:32:11.680><c> so</c><03:32:11.840><c> if</c><03:32:12.000><c> i</c><03:32:12.160><c> change</c><03:32:12.479><c> the</c><03:32:12.720><c> data</c><03:32:13.040><c> type</c><03:32:13.359><c> of</c>

03:32:13.510 --> 03:32:13.520 align:start position:0%
language so if i change the data type of
 

03:32:13.520 --> 03:32:15.269 align:start position:0%
language so if i change the data type of
my<03:32:13.760><c> pointer</c><03:32:14.239><c> to</c><03:32:14.399><c> char</c>

03:32:15.269 --> 03:32:15.279 align:start position:0%
my pointer to char
 

03:32:15.279 --> 03:32:17.990 align:start position:0%
my pointer to char
using<03:32:15.520><c> my</c><03:32:15.760><c> compiler</c><03:32:16.399><c> i'll</c><03:32:16.560><c> receive</c><03:32:17.040><c> a</c><03:32:17.279><c> warning</c>

03:32:17.990 --> 03:32:18.000 align:start position:0%
using my compiler i'll receive a warning
 

03:32:18.000 --> 03:32:21.269 align:start position:0%
using my compiler i'll receive a warning
initialization<03:32:19.200><c> of</c><03:32:19.680><c> char</c><03:32:20.239><c> from</c><03:32:20.479><c> incompatible</c>

03:32:21.269 --> 03:32:21.279 align:start position:0%
initialization of char from incompatible
 

03:32:21.279 --> 03:32:24.070 align:start position:0%
initialization of char from incompatible
pointer<03:32:21.680><c> type</c><03:32:22.160><c> int</c><03:32:22.880><c> now</c><03:32:23.040><c> the</c><03:32:23.279><c> actual</c><03:32:23.760><c> data</c>

03:32:24.070 --> 03:32:24.080 align:start position:0%
pointer type int now the actual data
 

03:32:24.080 --> 03:32:26.309 align:start position:0%
pointer type int now the actual data
type<03:32:24.319><c> of</c><03:32:24.479><c> a</c><03:32:24.560><c> pointer</c><03:32:25.120><c> is</c><03:32:25.279><c> the</c><03:32:25.439><c> same</c><03:32:25.840><c> they</c><03:32:26.000><c> use</c>

03:32:26.309 --> 03:32:26.319 align:start position:0%
type of a pointer is the same they use
 

03:32:26.319 --> 03:32:28.790 align:start position:0%
type of a pointer is the same they use
eight<03:32:26.560><c> bytes</c><03:32:26.880><c> to</c><03:32:27.040><c> store</c><03:32:27.359><c> an</c><03:32:27.600><c> address</c><03:32:28.399><c> so</c><03:32:28.640><c> i'm</c>

03:32:28.790 --> 03:32:28.800 align:start position:0%
eight bytes to store an address so i'm
 

03:32:28.800 --> 03:32:31.510 align:start position:0%
eight bytes to store an address so i'm
going<03:32:29.040><c> to</c><03:32:29.279><c> print</c><03:32:29.760><c> the</c><03:32:30.000><c> size</c><03:32:30.479><c> of</c><03:32:30.720><c> our</c><03:32:30.880><c> variable</c>

03:32:31.510 --> 03:32:31.520 align:start position:0%
going to print the size of our variable
 

03:32:31.520 --> 03:32:33.910 align:start position:0%
going to print the size of our variable
as<03:32:31.680><c> well</c><03:32:32.000><c> as</c><03:32:32.319><c> our</c><03:32:32.560><c> pointer</c>

03:32:33.910 --> 03:32:33.920 align:start position:0%
as well as our pointer
 

03:32:33.920 --> 03:32:35.670 align:start position:0%
as well as our pointer
so<03:32:34.080><c> i'll</c><03:32:34.239><c> change</c><03:32:34.560><c> this</c><03:32:34.720><c> data</c><03:32:35.040><c> type</c><03:32:35.359><c> back</c><03:32:35.520><c> to</c>

03:32:35.670 --> 03:32:35.680 align:start position:0%
so i'll change this data type back to
 

03:32:35.680 --> 03:32:37.990 align:start position:0%
so i'll change this data type back to
what<03:32:35.920><c> it</c><03:32:36.000><c> was</c><03:32:36.160><c> originally</c><03:32:37.120><c> and</c><03:32:37.439><c> this</c><03:32:37.600><c> time</c><03:32:37.840><c> i'm</c>

03:32:37.990 --> 03:32:38.000 align:start position:0%
what it was originally and this time i'm
 

03:32:38.000 --> 03:32:39.910 align:start position:0%
what it was originally and this time i'm
going<03:32:38.160><c> to</c><03:32:38.319><c> print</c><03:32:38.800><c> the</c><03:32:38.960><c> size</c><03:32:39.279><c> of</c><03:32:39.439><c> our</c><03:32:39.600><c> age</c>

03:32:39.910 --> 03:32:39.920 align:start position:0%
going to print the size of our age
 

03:32:39.920 --> 03:32:41.750 align:start position:0%
going to print the size of our age
variable<03:32:40.479><c> as</c><03:32:40.640><c> well</c><03:32:40.880><c> as</c><03:32:41.040><c> the</c><03:32:41.200><c> size</c><03:32:41.520><c> of</c><03:32:41.600><c> our</c>

03:32:41.750 --> 03:32:41.760 align:start position:0%
variable as well as the size of our
 

03:32:41.760 --> 03:32:42.950 align:start position:0%
variable as well as the size of our
pointer

03:32:42.950 --> 03:32:42.960 align:start position:0%
pointer
 

03:32:42.960 --> 03:32:45.910 align:start position:0%
pointer
size<03:32:43.760><c> of</c><03:32:44.319><c> age</c>

03:32:45.910 --> 03:32:45.920 align:start position:0%
size of age
 

03:32:45.920 --> 03:32:47.670 align:start position:0%
size of age
and<03:32:46.160><c> we're</c><03:32:46.319><c> displaying</c><03:32:46.640><c> an</c><03:32:46.800><c> integer</c><03:32:47.359><c> and</c><03:32:47.520><c> this</c>

03:32:47.670 --> 03:32:47.680 align:start position:0%
and we're displaying an integer and this
 

03:32:47.680 --> 03:32:48.830 align:start position:0%
and we're displaying an integer and this
will<03:32:47.840><c> be</c><03:32:48.080><c> in</c>

03:32:48.830 --> 03:32:48.840 align:start position:0%
will be in
 

03:32:48.840 --> 03:32:54.150 align:start position:0%
will be in
bytes<03:32:49.920><c> size</c><03:32:50.800><c> of</c><03:32:51.600><c> age</c>

03:32:54.150 --> 03:32:54.160 align:start position:0%
 
 

03:32:54.160 --> 03:32:58.550 align:start position:0%
 
size<03:32:54.800><c> of</c><03:32:55.439><c> pointer</c><03:32:56.080><c> age</c>

03:32:58.550 --> 03:32:58.560 align:start position:0%
 
 

03:32:58.560 --> 03:33:00.550 align:start position:0%
 
and<03:32:58.640><c> then</c><03:32:58.880><c> i'm</c><03:32:58.960><c> going</c><03:32:59.120><c> to</c><03:32:59.200><c> display</c><03:32:59.520><c> a</c><03:32:59.600><c> new</c><03:32:59.840><c> line</c>

03:33:00.550 --> 03:33:00.560 align:start position:0%
and then i'm going to display a new line
 

03:33:00.560 --> 03:33:03.190 align:start position:0%
and then i'm going to display a new line
okay<03:33:00.960><c> so</c><03:33:01.200><c> the</c><03:33:01.359><c> size</c><03:33:01.840><c> of</c><03:33:02.000><c> our</c><03:33:02.160><c> age</c><03:33:02.399><c> variable</c><03:33:02.960><c> is</c>

03:33:03.190 --> 03:33:03.200 align:start position:0%
okay so the size of our age variable is
 

03:33:03.200 --> 03:33:05.750 align:start position:0%
okay so the size of our age variable is
4<03:33:03.520><c> bytes</c><03:33:04.000><c> it's</c><03:33:04.160><c> an</c><03:33:04.319><c> integer</c><03:33:04.800><c> integers</c><03:33:05.359><c> use</c><03:33:05.520><c> 4</c>

03:33:05.750 --> 03:33:05.760 align:start position:0%
4 bytes it's an integer integers use 4
 

03:33:05.760 --> 03:33:07.910 align:start position:0%
4 bytes it's an integer integers use 4
bytes<03:33:06.479><c> so</c><03:33:06.720><c> even</c><03:33:06.880><c> though</c><03:33:07.120><c> we</c><03:33:07.200><c> declared</c><03:33:07.760><c> our</c>

03:33:07.910 --> 03:33:07.920 align:start position:0%
bytes so even though we declared our
 

03:33:07.920 --> 03:33:09.830 align:start position:0%
bytes so even though we declared our
pointer<03:33:08.560><c> as</c><03:33:08.720><c> an</c><03:33:08.880><c> integer</c>

03:33:09.830 --> 03:33:09.840 align:start position:0%
pointer as an integer
 

03:33:09.840 --> 03:33:12.229 align:start position:0%
pointer as an integer
the<03:33:10.080><c> actual</c><03:33:10.640><c> size</c><03:33:11.200><c> of</c><03:33:11.439><c> our</c><03:33:11.520><c> pointer</c><03:33:12.000><c> is</c><03:33:12.080><c> going</c>

03:33:12.229 --> 03:33:12.239 align:start position:0%
the actual size of our pointer is going
 

03:33:12.239 --> 03:33:14.630 align:start position:0%
the actual size of our pointer is going
to<03:33:12.399><c> be</c><03:33:12.560><c> 8</c><03:33:12.880><c> bytes</c><03:33:13.520><c> that's</c><03:33:13.760><c> enough</c><03:33:14.000><c> to</c><03:33:14.160><c> store</c><03:33:14.479><c> a</c>

03:33:14.630 --> 03:33:14.640 align:start position:0%
to be 8 bytes that's enough to store a
 

03:33:14.640 --> 03:33:16.630 align:start position:0%
to be 8 bytes that's enough to store a
hexadecimal<03:33:15.359><c> address</c>

03:33:16.630 --> 03:33:16.640 align:start position:0%
hexadecimal address
 

03:33:16.640 --> 03:33:19.269 align:start position:0%
hexadecimal address
so<03:33:16.800><c> just</c><03:33:17.040><c> as</c><03:33:17.200><c> good</c><03:33:17.439><c> practice</c><03:33:18.080><c> since</c><03:33:18.479><c> c</c><03:33:18.880><c> is</c><03:33:19.040><c> a</c>

03:33:19.269 --> 03:33:19.279 align:start position:0%
so just as good practice since c is a
 

03:33:19.279 --> 03:33:21.349 align:start position:0%
so just as good practice since c is a
strongly<03:33:19.760><c> typed</c><03:33:20.160><c> language</c><03:33:20.960><c> you'll</c><03:33:21.120><c> want</c><03:33:21.279><c> to</c>

03:33:21.349 --> 03:33:21.359 align:start position:0%
strongly typed language you'll want to
 

03:33:21.359 --> 03:33:22.870 align:start position:0%
strongly typed language you'll want to
be<03:33:21.520><c> sure</c><03:33:21.760><c> that</c><03:33:21.920><c> the</c><03:33:22.080><c> data</c><03:33:22.319><c> type</c><03:33:22.560><c> of</c><03:33:22.720><c> your</c>

03:33:22.870 --> 03:33:22.880 align:start position:0%
be sure that the data type of your
 

03:33:22.880 --> 03:33:24.950 align:start position:0%
be sure that the data type of your
pointer<03:33:23.439><c> is</c><03:33:23.600><c> consistent</c><03:33:24.160><c> with</c><03:33:24.319><c> the</c><03:33:24.479><c> variable</c>

03:33:24.950 --> 03:33:24.960 align:start position:0%
pointer is consistent with the variable
 

03:33:24.960 --> 03:33:26.389 align:start position:0%
pointer is consistent with the variable
that<03:33:25.120><c> it's</c><03:33:25.279><c> pointing</c><03:33:25.680><c> to</c>

03:33:26.389 --> 03:33:26.399 align:start position:0%
that it's pointing to
 

03:33:26.399 --> 03:33:28.150 align:start position:0%
that it's pointing to
now<03:33:26.640><c> here's</c><03:33:26.960><c> one</c><03:33:27.200><c> thing</c><03:33:27.359><c> that</c><03:33:27.520><c> we</c><03:33:27.680><c> can</c><03:33:27.840><c> do</c><03:33:28.000><c> with</c>

03:33:28.150 --> 03:33:28.160 align:start position:0%
now here's one thing that we can do with
 

03:33:28.160 --> 03:33:31.030 align:start position:0%
now here's one thing that we can do with
pointers<03:33:28.880><c> we</c><03:33:29.040><c> can</c><03:33:29.200><c> pass</c><03:33:29.600><c> a</c><03:33:29.840><c> pointer</c><03:33:30.479><c> as</c><03:33:30.880><c> an</c>

03:33:31.030 --> 03:33:31.040 align:start position:0%
pointers we can pass a pointer as an
 

03:33:31.040 --> 03:33:32.630 align:start position:0%
pointers we can pass a pointer as an
argument<03:33:31.439><c> to</c><03:33:31.600><c> a</c><03:33:31.680><c> function</c>

03:33:32.630 --> 03:33:32.640 align:start position:0%
argument to a function
 

03:33:32.640 --> 03:33:34.389 align:start position:0%
argument to a function
so<03:33:32.880><c> outside</c><03:33:33.200><c> of</c><03:33:33.279><c> my</c><03:33:33.439><c> main</c><03:33:33.680><c> function</c><03:33:34.080><c> i'm</c><03:33:34.239><c> going</c>

03:33:34.389 --> 03:33:34.399 align:start position:0%
so outside of my main function i'm going
 

03:33:34.399 --> 03:33:36.309 align:start position:0%
so outside of my main function i'm going
to<03:33:34.560><c> declare</c><03:33:34.960><c> a</c><03:33:35.120><c> function</c>

03:33:36.309 --> 03:33:36.319 align:start position:0%
to declare a function
 

03:33:36.319 --> 03:33:37.269 align:start position:0%
to declare a function
void

03:33:37.269 --> 03:33:37.279 align:start position:0%
void
 

03:33:37.279 --> 03:33:38.870 align:start position:0%
void
let's<03:33:37.520><c> say</c><03:33:37.840><c> print</c>

03:33:38.870 --> 03:33:38.880 align:start position:0%
let's say print
 

03:33:38.880 --> 03:33:39.830 align:start position:0%
let's say print
age

03:33:39.830 --> 03:33:39.840 align:start position:0%
age
 

03:33:39.840 --> 03:33:41.910 align:start position:0%
age
first<03:33:40.160><c> we'll</c><03:33:40.319><c> do</c><03:33:40.560><c> this</c><03:33:40.880><c> with</c><03:33:41.200><c> passing</c><03:33:41.680><c> and</c>

03:33:41.910 --> 03:33:41.920 align:start position:0%
first we'll do this with passing and
 

03:33:41.920 --> 03:33:44.950 align:start position:0%
first we'll do this with passing and
integer<03:33:42.640><c> so</c><03:33:43.040><c> int</c><03:33:43.439><c> age</c>

03:33:44.950 --> 03:33:44.960 align:start position:0%
integer so int age
 

03:33:44.960 --> 03:33:48.150 align:start position:0%
integer so int age
and<03:33:45.200><c> i</c><03:33:45.359><c> will</c><03:33:45.520><c> display</c><03:33:46.319><c> the</c><03:33:46.479><c> value</c><03:33:46.960><c> of</c><03:33:47.120><c> age</c>

03:33:48.150 --> 03:33:48.160 align:start position:0%
and i will display the value of age
 

03:33:48.160 --> 03:33:49.110 align:start position:0%
and i will display the value of age
you

03:33:49.110 --> 03:33:49.120 align:start position:0%
you
 

03:33:49.120 --> 03:33:51.190 align:start position:0%
you
are

03:33:51.190 --> 03:33:51.200 align:start position:0%
are
 

03:33:51.200 --> 03:33:53.190 align:start position:0%
are
age<03:33:52.080><c> years</c>

03:33:53.190 --> 03:33:53.200 align:start position:0%
age years
 

03:33:53.200 --> 03:33:54.710 align:start position:0%
age years
old

03:33:54.710 --> 03:33:54.720 align:start position:0%
old
 

03:33:54.720 --> 03:33:57.510 align:start position:0%
old
and<03:33:54.960><c> i</c><03:33:55.120><c> will</c><03:33:55.359><c> display</c><03:33:56.000><c> my</c><03:33:56.239><c> age</c><03:33:56.479><c> variable</c>

03:33:57.510 --> 03:33:57.520 align:start position:0%
and i will display my age variable
 

03:33:57.520 --> 03:33:59.429 align:start position:0%
and i will display my age variable
then<03:33:57.760><c> at</c><03:33:57.840><c> the</c><03:33:58.000><c> end</c><03:33:58.239><c> we</c><03:33:58.399><c> will</c><03:33:58.560><c> pass</c><03:33:58.960><c> in</c><03:33:59.200><c> our</c>

03:33:59.429 --> 03:33:59.439 align:start position:0%
then at the end we will pass in our
 

03:33:59.439 --> 03:34:02.389 align:start position:0%
then at the end we will pass in our
variable

03:34:02.389 --> 03:34:02.399 align:start position:0%
 
 

03:34:02.399 --> 03:34:05.269 align:start position:0%
 
print<03:34:02.960><c> edge</c><03:34:03.359><c> and</c><03:34:03.520><c> i</c><03:34:03.600><c> will</c><03:34:03.760><c> pass</c><03:34:04.080><c> in</c><03:34:04.319><c> age</c>

03:34:05.269 --> 03:34:05.279 align:start position:0%
print edge and i will pass in age
 

03:34:05.279 --> 03:34:06.630 align:start position:0%
print edge and i will pass in age
for<03:34:05.439><c> now</c><03:34:05.600><c> i'm</c><03:34:05.680><c> just</c><03:34:05.840><c> going</c><03:34:06.000><c> to</c><03:34:06.160><c> turn</c><03:34:06.399><c> all</c><03:34:06.560><c> of</c>

03:34:06.630 --> 03:34:06.640 align:start position:0%
for now i'm just going to turn all of
 

03:34:06.640 --> 03:34:09.030 align:start position:0%
for now i'm just going to turn all of
these<03:34:06.880><c> into</c><03:34:07.120><c> comments</c>

03:34:09.030 --> 03:34:09.040 align:start position:0%
these into comments
 

03:34:09.040 --> 03:34:11.590 align:start position:0%
these into comments
okay<03:34:09.359><c> so</c><03:34:09.760><c> you</c><03:34:09.840><c> know</c><03:34:10.080><c> this</c><03:34:10.239><c> works</c>

03:34:11.590 --> 03:34:11.600 align:start position:0%
okay so you know this works
 

03:34:11.600 --> 03:34:14.790 align:start position:0%
okay so you know this works
you<03:34:11.920><c> are</c><03:34:12.239><c> 21</c><03:34:12.720><c> years</c><03:34:13.040><c> old</c><03:34:13.840><c> you</c><03:34:14.000><c> could</c><03:34:14.160><c> also</c><03:34:14.560><c> pass</c>

03:34:14.790 --> 03:34:14.800 align:start position:0%
you are 21 years old you could also pass
 

03:34:14.800 --> 03:34:16.309 align:start position:0%
you are 21 years old you could also pass
in<03:34:14.960><c> a</c><03:34:15.040><c> pointer</c><03:34:15.520><c> too</c>

03:34:16.309 --> 03:34:16.319 align:start position:0%
in a pointer too
 

03:34:16.319 --> 03:34:18.870 align:start position:0%
in a pointer too
so<03:34:16.640><c> i'm</c><03:34:16.880><c> going</c><03:34:17.120><c> to</c><03:34:17.439><c> this</c><03:34:17.680><c> time</c><03:34:18.160><c> pass</c><03:34:18.479><c> in</c>

03:34:18.870 --> 03:34:18.880 align:start position:0%
so i'm going to this time pass in
 

03:34:18.880 --> 03:34:20.790 align:start position:0%
so i'm going to this time pass in
pointer<03:34:19.840><c> age</c>

03:34:20.790 --> 03:34:20.800 align:start position:0%
pointer age
 

03:34:20.800 --> 03:34:23.429 align:start position:0%
pointer age
and<03:34:20.960><c> we</c><03:34:21.120><c> need</c><03:34:21.279><c> to</c><03:34:21.439><c> change</c><03:34:21.920><c> the</c><03:34:22.160><c> parameter</c><03:34:23.040><c> from</c>

03:34:23.429 --> 03:34:23.439 align:start position:0%
and we need to change the parameter from
 

03:34:23.439 --> 03:34:26.070 align:start position:0%
and we need to change the parameter from
an<03:34:23.600><c> integer</c><03:34:24.319><c> to</c><03:34:24.800><c> a</c><03:34:25.040><c> pointer</c>

03:34:26.070 --> 03:34:26.080 align:start position:0%
an integer to a pointer
 

03:34:26.080 --> 03:34:28.710 align:start position:0%
an integer to a pointer
so<03:34:26.319><c> precede</c><03:34:27.040><c> the</c><03:34:27.200><c> parameter</c><03:34:27.760><c> name</c><03:34:28.160><c> with</c><03:34:28.479><c> the</c>

03:34:28.710 --> 03:34:28.720 align:start position:0%
so precede the parameter name with the
 

03:34:28.720 --> 03:34:30.389 align:start position:0%
so precede the parameter name with the
indirection<03:34:29.279><c> operator</c>

03:34:30.389 --> 03:34:30.399 align:start position:0%
indirection operator
 

03:34:30.399 --> 03:34:33.910 align:start position:0%
indirection operator
and<03:34:30.640><c> i'll</c><03:34:30.720><c> rename</c><03:34:31.040><c> this</c><03:34:31.200><c> parameter</c><03:34:31.840><c> as</c><03:34:32.239><c> ph</c>

03:34:33.910 --> 03:34:33.920 align:start position:0%
and i'll rename this parameter as ph
 

03:34:33.920 --> 03:34:35.830 align:start position:0%
and i'll rename this parameter as ph
in<03:34:34.080><c> order</c><03:34:34.399><c> to</c><03:34:34.479><c> access</c><03:34:34.880><c> the</c><03:34:35.040><c> value</c><03:34:35.520><c> of</c><03:34:35.680><c> the</c>

03:34:35.830 --> 03:34:35.840 align:start position:0%
in order to access the value of the
 

03:34:35.840 --> 03:34:38.550 align:start position:0%
in order to access the value of the
address<03:34:36.479><c> stored</c><03:34:36.800><c> within</c><03:34:37.120><c> my</c><03:34:37.359><c> pointer</c><03:34:38.160><c> i</c><03:34:38.319><c> need</c>

03:34:38.550 --> 03:34:38.560 align:start position:0%
address stored within my pointer i need
 

03:34:38.560 --> 03:34:41.269 align:start position:0%
address stored within my pointer i need
to<03:34:39.040><c> de-reference</c>

03:34:41.269 --> 03:34:41.279 align:start position:0%
to de-reference
 

03:34:41.279 --> 03:34:43.750 align:start position:0%
to de-reference
so<03:34:41.520><c> i</c><03:34:41.600><c> will</c><03:34:41.840><c> use</c><03:34:42.239><c> the</c><03:34:42.560><c> indirection</c><03:34:43.120><c> operator</c>

03:34:43.750 --> 03:34:43.760 align:start position:0%
so i will use the indirection operator
 

03:34:43.760 --> 03:34:47.110 align:start position:0%
so i will use the indirection operator
then<03:34:44.080><c> type</c><03:34:44.479><c> my</c><03:34:44.960><c> pointer</c><03:34:45.359><c> name</c><03:34:45.840><c> ph</c>

03:34:47.110 --> 03:34:47.120 align:start position:0%
then type my pointer name ph
 

03:34:47.120 --> 03:34:48.389 align:start position:0%
then type my pointer name ph
and<03:34:47.279><c> this</c><03:34:47.439><c> will</c><03:34:47.600><c> do</c><03:34:47.760><c> the</c><03:34:47.840><c> same</c><03:34:48.080><c> thing</c><03:34:48.319><c> as</c>

03:34:48.389 --> 03:34:48.399 align:start position:0%
and this will do the same thing as
 

03:34:48.399 --> 03:34:49.830 align:start position:0%
and this will do the same thing as
before

03:34:49.830 --> 03:34:49.840 align:start position:0%
before
 

03:34:49.840 --> 03:34:52.389 align:start position:0%
before
so<03:34:50.080><c> yeah</c><03:34:50.319><c> those</c><03:34:50.560><c> are</c><03:34:50.720><c> pointers</c><03:34:51.680><c> oh</c><03:34:52.000><c> and</c><03:34:52.080><c> before</c>

03:34:52.389 --> 03:34:52.399 align:start position:0%
so yeah those are pointers oh and before
 

03:34:52.399 --> 03:34:54.790 align:start position:0%
so yeah those are pointers oh and before
i<03:34:52.560><c> forget</c><03:34:53.040><c> you</c><03:34:53.200><c> can</c><03:34:53.439><c> declare</c><03:34:54.000><c> and</c><03:34:54.160><c> initialize</c>

03:34:54.790 --> 03:34:54.800 align:start position:0%
i forget you can declare and initialize
 

03:34:54.800 --> 03:34:56.790 align:start position:0%
i forget you can declare and initialize
a<03:34:54.960><c> pointer</c><03:34:55.359><c> in</c><03:34:55.520><c> two</c><03:34:55.760><c> steps</c>

03:34:56.790 --> 03:34:56.800 align:start position:0%
a pointer in two steps
 

03:34:56.800 --> 03:34:58.469 align:start position:0%
a pointer in two steps
but<03:34:57.040><c> it</c><03:34:57.120><c> would</c><03:34:57.279><c> be</c><03:34:57.439><c> good</c><03:34:57.680><c> practice</c><03:34:58.160><c> if</c><03:34:58.319><c> you're</c>

03:34:58.469 --> 03:34:58.479 align:start position:0%
but it would be good practice if you're
 

03:34:58.479 --> 03:35:01.269 align:start position:0%
but it would be good practice if you're
declaring<03:34:58.880><c> a</c><03:34:59.040><c> pointer</c><03:34:59.520><c> to</c><03:34:59.760><c> assign</c><03:35:00.239><c> a</c><03:35:00.479><c> value</c><03:35:00.960><c> of</c>

03:35:01.269 --> 03:35:01.279 align:start position:0%
declaring a pointer to assign a value of
 

03:35:01.279 --> 03:35:02.229 align:start position:0%
declaring a pointer to assign a value of
null

03:35:02.229 --> 03:35:02.239 align:start position:0%
null
 

03:35:02.239 --> 03:35:03.830 align:start position:0%
null
since<03:35:02.479><c> we</c><03:35:02.640><c> already</c><03:35:02.880><c> declared</c><03:35:03.279><c> this</c><03:35:03.439><c> pointer</c>

03:35:03.830 --> 03:35:03.840 align:start position:0%
since we already declared this pointer
 

03:35:03.840 --> 03:35:05.670 align:start position:0%
since we already declared this pointer
we<03:35:04.000><c> do</c><03:35:04.160><c> not</c><03:35:04.319><c> need</c><03:35:04.560><c> to</c><03:35:04.640><c> use</c><03:35:04.960><c> this</c><03:35:05.200><c> indirection</c>

03:35:05.670 --> 03:35:05.680 align:start position:0%
we do not need to use this indirection
 

03:35:05.680 --> 03:35:08.070 align:start position:0%
we do not need to use this indirection
operator<03:35:06.160><c> again</c><03:35:06.399><c> when</c><03:35:06.560><c> assigning</c><03:35:06.960><c> a</c><03:35:07.120><c> value</c><03:35:07.680><c> so</c>

03:35:08.070 --> 03:35:08.080 align:start position:0%
operator again when assigning a value so
 

03:35:08.080 --> 03:35:08.710 align:start position:0%
operator again when assigning a value so
p

03:35:08.710 --> 03:35:08.720 align:start position:0%
p
 

03:35:08.720 --> 03:35:12.870 align:start position:0%
p
h<03:35:09.520><c> equals</c><03:35:10.479><c> the</c><03:35:10.640><c> address</c><03:35:11.359><c> of</c><03:35:11.680><c> age</c>

03:35:12.870 --> 03:35:12.880 align:start position:0%
h equals the address of age
 

03:35:12.880 --> 03:35:15.110 align:start position:0%
h equals the address of age
so<03:35:13.120><c> it's</c><03:35:13.359><c> considered</c><03:35:14.000><c> good</c><03:35:14.319><c> practice</c><03:35:14.880><c> to</c>

03:35:15.110 --> 03:35:15.120 align:start position:0%
so it's considered good practice to
 

03:35:15.120 --> 03:35:17.510 align:start position:0%
so it's considered good practice to
assign<03:35:15.760><c> null</c><03:35:16.399><c> if</c><03:35:16.560><c> you're</c><03:35:16.720><c> declaring</c><03:35:17.359><c> a</c>

03:35:17.510 --> 03:35:17.520 align:start position:0%
assign null if you're declaring a
 

03:35:17.520 --> 03:35:20.710 align:start position:0%
assign null if you're declaring a
pointer<03:35:18.239><c> and</c><03:35:18.640><c> not</c><03:35:18.880><c> yet</c><03:35:19.120><c> assigning</c><03:35:19.520><c> a</c><03:35:19.680><c> value</c><03:35:20.479><c> so</c>

03:35:20.710 --> 03:35:20.720 align:start position:0%
pointer and not yet assigning a value so
 

03:35:20.720 --> 03:35:23.349 align:start position:0%
pointer and not yet assigning a value so
yeah<03:35:20.960><c> that's</c><03:35:21.200><c> basically</c><03:35:21.760><c> a</c><03:35:21.920><c> pointer</c><03:35:22.720><c> it's</c><03:35:23.120><c> a</c>

03:35:23.349 --> 03:35:23.359 align:start position:0%
yeah that's basically a pointer it's a
 

03:35:23.359 --> 03:35:25.990 align:start position:0%
yeah that's basically a pointer it's a
variable<03:35:23.920><c> like</c><03:35:24.239><c> reference</c><03:35:25.120><c> that</c><03:35:25.439><c> has</c><03:35:25.760><c> a</c>

03:35:25.990 --> 03:35:26.000 align:start position:0%
variable like reference that has a
 

03:35:26.000 --> 03:35:29.030 align:start position:0%
variable like reference that has a
memory<03:35:26.399><c> address</c><03:35:27.040><c> as</c><03:35:27.439><c> value</c><03:35:28.239><c> to</c><03:35:28.479><c> another</c>

03:35:29.030 --> 03:35:29.040 align:start position:0%
memory address as value to another
 

03:35:29.040 --> 03:35:32.469 align:start position:0%
memory address as value to another
variable<03:35:29.760><c> array</c><03:35:30.479><c> etc</c><03:35:31.439><c> some</c><03:35:31.840><c> tasks</c><03:35:32.319><c> are</c>

03:35:32.469 --> 03:35:32.479 align:start position:0%
variable array etc some tasks are
 

03:35:32.479 --> 03:35:35.429 align:start position:0%
variable array etc some tasks are
performed<03:35:33.200><c> more</c><03:35:33.520><c> easily</c><03:35:34.000><c> with</c><03:35:34.239><c> pointers</c><03:35:35.200><c> and</c>

03:35:35.429 --> 03:35:35.439 align:start position:0%
performed more easily with pointers and
 

03:35:35.439 --> 03:35:37.510 align:start position:0%
performed more easily with pointers and
to<03:35:35.600><c> declare</c><03:35:36.000><c> a</c><03:35:36.160><c> pointer</c><03:35:36.640><c> you</c><03:35:36.880><c> use</c><03:35:37.200><c> the</c>

03:35:37.510 --> 03:35:37.520 align:start position:0%
to declare a pointer you use the
 

03:35:37.520 --> 03:35:39.750 align:start position:0%
to declare a pointer you use the
indirection<03:35:38.080><c> operator</c><03:35:38.800><c> and</c><03:35:38.960><c> if</c><03:35:39.120><c> you</c><03:35:39.200><c> need</c><03:35:39.439><c> to</c>

03:35:39.750 --> 03:35:39.760 align:start position:0%
indirection operator and if you need to
 

03:35:39.760 --> 03:35:42.550 align:start position:0%
indirection operator and if you need to
access<03:35:40.239><c> a</c><03:35:40.479><c> value</c><03:35:41.040><c> stored</c><03:35:41.439><c> within</c><03:35:41.760><c> a</c><03:35:41.840><c> pointer</c>

03:35:42.550 --> 03:35:42.560 align:start position:0%
access a value stored within a pointer
 

03:35:42.560 --> 03:35:45.269 align:start position:0%
access a value stored within a pointer
you<03:35:42.800><c> type</c><03:35:43.120><c> the</c><03:35:43.279><c> pointer</c><03:35:43.680><c> name</c><03:35:44.239><c> preceded</c><03:35:44.960><c> with</c>

03:35:45.269 --> 03:35:45.279 align:start position:0%
you type the pointer name preceded with
 

03:35:45.279 --> 03:35:48.070 align:start position:0%
you type the pointer name preceded with
the<03:35:45.520><c> indirection</c><03:35:46.080><c> operator</c><03:35:46.960><c> so</c><03:35:47.200><c> yeah</c><03:35:47.520><c> that</c><03:35:47.840><c> is</c>

03:35:48.070 --> 03:35:48.080 align:start position:0%
the indirection operator so yeah that is
 

03:35:48.080 --> 03:35:50.550 align:start position:0%
the indirection operator so yeah that is
a<03:35:48.319><c> quick</c><03:35:48.640><c> intro</c><03:35:49.040><c> to</c><03:35:49.200><c> pointers</c><03:35:50.080><c> if</c><03:35:50.239><c> you</c><03:35:50.319><c> found</c>

03:35:50.550 --> 03:35:50.560 align:start position:0%
a quick intro to pointers if you found
 

03:35:50.560 --> 03:35:52.070 align:start position:0%
a quick intro to pointers if you found
this<03:35:50.720><c> video</c><03:35:50.960><c> helpful</c><03:35:51.439><c> please</c><03:35:51.760><c> give</c><03:35:51.920><c> this</c>

03:35:52.070 --> 03:35:52.080 align:start position:0%
this video helpful please give this
 

03:35:52.080 --> 03:35:53.990 align:start position:0%
this video helpful please give this
video<03:35:52.399><c> a</c><03:35:52.479><c> thumbs</c><03:35:52.800><c> up</c><03:35:53.120><c> leave</c><03:35:53.279><c> a</c><03:35:53.359><c> random</c><03:35:53.680><c> comment</c>

03:35:53.990 --> 03:35:54.000 align:start position:0%
video a thumbs up leave a random comment
 

03:35:54.000 --> 03:35:55.830 align:start position:0%
video a thumbs up leave a random comment
down<03:35:54.160><c> below</c><03:35:54.640><c> and</c><03:35:54.960><c> subscribe</c><03:35:55.439><c> if</c><03:35:55.520><c> you'd</c><03:35:55.680><c> like</c>

03:35:55.830 --> 03:35:55.840 align:start position:0%
down below and subscribe if you'd like
 

03:35:55.840 --> 03:36:01.510 align:start position:0%
down below and subscribe if you'd like
to<03:35:56.000><c> become</c><03:35:56.239><c> a</c><03:35:56.319><c> fellow</c><03:35:56.640><c> bro</c>

03:36:01.510 --> 03:36:01.520 align:start position:0%
 
 

03:36:01.520 --> 03:36:03.590 align:start position:0%
 
all<03:36:01.760><c> right</c><03:36:02.239><c> let's</c><03:36:02.479><c> do</c><03:36:02.720><c> this</c><03:36:03.040><c> here's</c><03:36:03.279><c> how</c><03:36:03.439><c> we</c>

03:36:03.590 --> 03:36:03.600 align:start position:0%
all right let's do this here's how we
 

03:36:03.600 --> 03:36:06.710 align:start position:0%
all right let's do this here's how we
can<03:36:03.760><c> write</c><03:36:04.080><c> to</c><03:36:04.319><c> a</c><03:36:04.479><c> file</c><03:36:05.040><c> in</c><03:36:05.279><c> c</c><03:36:05.840><c> let's</c><03:36:06.160><c> create</c><03:36:06.479><c> a</c>

03:36:06.710 --> 03:36:06.720 align:start position:0%
can write to a file in c let's create a
 

03:36:06.720 --> 03:36:09.750 align:start position:0%
can write to a file in c let's create a
file<03:36:07.040><c> pointer</c><03:36:07.760><c> the</c><03:36:07.920><c> data</c><03:36:08.239><c> type</c><03:36:08.560><c> is</c><03:36:08.800><c> file</c><03:36:09.520><c> and</c>

03:36:09.750 --> 03:36:09.760 align:start position:0%
file pointer the data type is file and
 

03:36:09.760 --> 03:36:13.030 align:start position:0%
file pointer the data type is file and
i'll<03:36:10.000><c> name</c><03:36:10.239><c> this</c><03:36:10.880><c> pf</c><03:36:11.840><c> it's</c><03:36:12.080><c> a</c><03:36:12.239><c> pointer</c><03:36:12.720><c> to</c><03:36:12.960><c> a</c>

03:36:13.030 --> 03:36:13.040 align:start position:0%
i'll name this pf it's a pointer to a
 

03:36:13.040 --> 03:36:15.830 align:start position:0%
i'll name this pf it's a pointer to a
file<03:36:13.680><c> and</c><03:36:13.840><c> i</c><03:36:13.920><c> will</c><03:36:14.160><c> set</c><03:36:14.399><c> this</c><03:36:14.640><c> equal</c><03:36:14.960><c> to</c><03:36:15.600><c> then</c>

03:36:15.830 --> 03:36:15.840 align:start position:0%
file and i will set this equal to then
 

03:36:15.840 --> 03:36:19.110 align:start position:0%
file and i will set this equal to then
invoke<03:36:16.319><c> the</c><03:36:16.640><c> f</c><03:36:17.120><c> open</c><03:36:17.520><c> function</c><03:36:18.399><c> we</c><03:36:18.560><c> will</c><03:36:18.800><c> pass</c>

03:36:19.110 --> 03:36:19.120 align:start position:0%
invoke the f open function we will pass
 

03:36:19.120 --> 03:36:21.590 align:start position:0%
invoke the f open function we will pass
in<03:36:19.439><c> a</c><03:36:19.680><c> name</c><03:36:19.920><c> we</c><03:36:20.000><c> would</c><03:36:20.160><c> like</c><03:36:20.319><c> to</c><03:36:20.479><c> give</c><03:36:20.720><c> our</c><03:36:20.880><c> file</c>

03:36:21.590 --> 03:36:21.600 align:start position:0%
in a name we would like to give our file
 

03:36:21.600 --> 03:36:24.469 align:start position:0%
in a name we would like to give our file
let's<03:36:21.840><c> name</c><03:36:22.080><c> this</c><03:36:22.680><c> test.txt</c><03:36:24.080><c> but</c><03:36:24.239><c> if</c><03:36:24.399><c> you</c>

03:36:24.469 --> 03:36:24.479 align:start position:0%
let's name this test.txt but if you
 

03:36:24.479 --> 03:36:26.229 align:start position:0%
let's name this test.txt but if you
would<03:36:24.560><c> like</c><03:36:24.880><c> this</c><03:36:25.040><c> to</c><03:36:25.200><c> be</c><03:36:25.439><c> a</c><03:36:25.680><c> different</c><03:36:25.920><c> file</c>

03:36:26.229 --> 03:36:26.239 align:start position:0%
would like this to be a different file
 

03:36:26.239 --> 03:36:28.630 align:start position:0%
would like this to be a different file
extension<03:36:26.800><c> such</c><03:36:27.120><c> as</c><03:36:27.439><c> html</c><03:36:28.160><c> well</c><03:36:28.399><c> you</c><03:36:28.479><c> can</c>

03:36:28.630 --> 03:36:28.640 align:start position:0%
extension such as html well you can
 

03:36:28.640 --> 03:36:30.550 align:start position:0%
extension such as html well you can
change<03:36:28.960><c> it</c><03:36:29.040><c> to</c><03:36:29.200><c> that</c><03:36:29.439><c> then</c><03:36:29.840><c> uh</c><03:36:30.160><c> we'll</c><03:36:30.319><c> keep</c>

03:36:30.550 --> 03:36:30.560 align:start position:0%
change it to that then uh we'll keep
 

03:36:30.560 --> 03:36:32.710 align:start position:0%
change it to that then uh we'll keep
this<03:36:30.880><c> as</c><03:36:31.120><c> a</c><03:36:31.279><c> plain</c><03:36:31.600><c> text</c><03:36:31.920><c> file</c><03:36:32.239><c> just</c><03:36:32.399><c> to</c><03:36:32.479><c> keep</c>

03:36:32.710 --> 03:36:32.720 align:start position:0%
this as a plain text file just to keep
 

03:36:32.720 --> 03:36:35.990 align:start position:0%
this as a plain text file just to keep
it<03:36:32.880><c> simple</c><03:36:33.680><c> and</c><03:36:34.080><c> to</c><03:36:34.319><c> write</c><03:36:34.560><c> to</c><03:36:34.800><c> a</c><03:36:34.880><c> file</c><03:36:35.680><c> there</c>

03:36:35.990 --> 03:36:36.000 align:start position:0%
it simple and to write to a file there
 

03:36:36.000 --> 03:36:38.630 align:start position:0%
it simple and to write to a file there
is<03:36:36.160><c> a</c><03:36:36.319><c> second</c><03:36:36.720><c> argument</c><03:36:37.279><c> a</c><03:36:37.520><c> mode</c><03:36:38.239><c> so</c><03:36:38.479><c> this</c>

03:36:38.630 --> 03:36:38.640 align:start position:0%
is a second argument a mode so this
 

03:36:38.640 --> 03:36:42.150 align:start position:0%
is a second argument a mode so this
could<03:36:38.880><c> be</c><03:36:39.120><c> w</c><03:36:39.760><c> for</c><03:36:40.000><c> right</c><03:36:40.720><c> a</c><03:36:40.960><c> for</c><03:36:41.120><c> append</c><03:36:41.840><c> r</c><03:36:42.000><c> for</c>

03:36:42.150 --> 03:36:42.160 align:start position:0%
could be w for right a for append r for
 

03:36:42.160 --> 03:36:45.590 align:start position:0%
could be w for right a for append r for
read<03:36:42.720><c> but</c><03:36:42.960><c> we</c><03:36:43.120><c> are</c><03:36:43.200><c> looking</c><03:36:43.680><c> for</c><03:36:44.000><c> w</c><03:36:44.479><c> for</c><03:36:44.720><c> now</c><03:36:45.439><c> so</c>

03:36:45.590 --> 03:36:45.600 align:start position:0%
read but we are looking for w for now so
 

03:36:45.600 --> 03:36:47.190 align:start position:0%
read but we are looking for w for now so
it<03:36:45.760><c> is</c><03:36:45.840><c> good</c><03:36:46.080><c> practice</c><03:36:46.560><c> at</c><03:36:46.720><c> the</c><03:36:46.800><c> end</c><03:36:46.960><c> of</c><03:36:47.040><c> your</c>

03:36:47.190 --> 03:36:47.200 align:start position:0%
it is good practice at the end of your
 

03:36:47.200 --> 03:36:49.990 align:start position:0%
it is good practice at the end of your
program<03:36:47.760><c> to</c><03:36:48.000><c> close</c><03:36:48.399><c> any</c><03:36:48.640><c> files</c><03:36:49.040><c> that</c><03:36:49.200><c> are</c><03:36:49.359><c> open</c>

03:36:49.990 --> 03:36:50.000 align:start position:0%
program to close any files that are open
 

03:36:50.000 --> 03:36:53.750 align:start position:0%
program to close any files that are open
so<03:36:50.239><c> we</c><03:36:50.399><c> will</c><03:36:50.640><c> use</c><03:36:51.040><c> the</c><03:36:51.359><c> f</c><03:36:51.920><c> close</c><03:36:52.560><c> function</c><03:36:53.520><c> and</c>

03:36:53.750 --> 03:36:53.760 align:start position:0%
so we will use the f close function and
 

03:36:53.760 --> 03:36:57.269 align:start position:0%
so we will use the f close function and
pass<03:36:54.080><c> in</c><03:36:54.319><c> our</c><03:36:54.479><c> pointer</c><03:36:55.359><c> p</c><03:36:55.920><c> f</c><03:36:56.479><c> make</c><03:36:56.720><c> sure</c><03:36:56.880><c> to</c><03:36:57.040><c> not</c>

03:36:57.269 --> 03:36:57.279 align:start position:0%
pass in our pointer p f make sure to not
 

03:36:57.279 --> 03:36:59.349 align:start position:0%
pass in our pointer p f make sure to not
dereference<03:36:58.000><c> it</c><03:36:58.319><c> now</c><03:36:58.560><c> to</c><03:36:58.720><c> write</c><03:36:58.880><c> a</c><03:36:58.960><c> line</c><03:36:59.200><c> of</c>

03:36:59.349 --> 03:36:59.359 align:start position:0%
dereference it now to write a line of
 

03:36:59.359 --> 03:37:04.070 align:start position:0%
dereference it now to write a line of
text<03:36:59.760><c> to</c><03:36:59.920><c> our</c><03:37:00.160><c> file</c><03:37:00.960><c> we</c><03:37:01.120><c> can</c><03:37:01.279><c> use</c><03:37:01.760><c> f</c><03:37:02.479><c> print</c><03:37:03.200><c> f</c>

03:37:04.070 --> 03:37:04.080 align:start position:0%
text to our file we can use f print f
 

03:37:04.080 --> 03:37:06.710 align:start position:0%
text to our file we can use f print f
pass<03:37:04.319><c> in</c><03:37:04.479><c> our</c><03:37:04.640><c> pointer</c><03:37:05.520><c> p</c><03:37:05.840><c> f</c><03:37:06.319><c> do</c><03:37:06.479><c> not</c>

03:37:06.710 --> 03:37:06.720 align:start position:0%
pass in our pointer p f do not
 

03:37:06.720 --> 03:37:08.710 align:start position:0%
pass in our pointer p f do not
dereference<03:37:07.439><c> it</c><03:37:07.760><c> and</c><03:37:07.840><c> then</c><03:37:08.080><c> some</c><03:37:08.319><c> string</c><03:37:08.640><c> of</c>

03:37:08.710 --> 03:37:08.720 align:start position:0%
dereference it and then some string of
 

03:37:08.720 --> 03:37:13.190 align:start position:0%
dereference it and then some string of
text<03:37:09.200><c> let's</c><03:37:09.439><c> say</c><03:37:09.840><c> spongebob</c><03:37:11.120><c> squarepants</c>

03:37:13.190 --> 03:37:13.200 align:start position:0%
text let's say spongebob squarepants
 

03:37:13.200 --> 03:37:15.750 align:start position:0%
text let's say spongebob squarepants
so<03:37:13.520><c> this</c><03:37:13.840><c> file</c><03:37:14.399><c> will</c><03:37:14.560><c> be</c><03:37:14.720><c> created</c><03:37:15.200><c> in</c><03:37:15.279><c> the</c><03:37:15.439><c> same</c>

03:37:15.750 --> 03:37:15.760 align:start position:0%
so this file will be created in the same
 

03:37:15.760 --> 03:37:18.790 align:start position:0%
so this file will be created in the same
folder<03:37:16.160><c> as</c><03:37:16.399><c> my</c><03:37:16.640><c> c</c><03:37:16.880><c> program</c><03:37:17.840><c> so</c><03:37:18.080><c> after</c><03:37:18.479><c> running</c>

03:37:18.790 --> 03:37:18.800 align:start position:0%
folder as my c program so after running
 

03:37:18.800 --> 03:37:19.990 align:start position:0%
folder as my c program so after running
this

03:37:19.990 --> 03:37:20.000 align:start position:0%
this
 

03:37:20.000 --> 03:37:22.150 align:start position:0%
this
we<03:37:20.160><c> have</c><03:37:20.399><c> a</c><03:37:20.560><c> new</c><03:37:20.800><c> text</c><03:37:21.120><c> file</c><03:37:21.439><c> within</c><03:37:21.760><c> the</c><03:37:21.840><c> same</c>

03:37:22.150 --> 03:37:22.160 align:start position:0%
we have a new text file within the same
 

03:37:22.160 --> 03:37:25.510 align:start position:0%
we have a new text file within the same
folder<03:37:22.880><c> and</c><03:37:23.040><c> it</c><03:37:23.200><c> says</c><03:37:23.680><c> spongebob</c><03:37:24.399><c> squarepants</c>

03:37:25.510 --> 03:37:25.520 align:start position:0%
folder and it says spongebob squarepants
 

03:37:25.520 --> 03:37:27.269 align:start position:0%
folder and it says spongebob squarepants
what<03:37:25.680><c> if</c><03:37:25.840><c> i</c><03:37:26.000><c> run</c><03:37:26.160><c> this</c><03:37:26.399><c> again</c><03:37:26.800><c> and</c><03:37:27.040><c> write</c>

03:37:27.269 --> 03:37:27.279 align:start position:0%
what if i run this again and write
 

03:37:27.279 --> 03:37:31.429 align:start position:0%
what if i run this again and write
something<03:37:27.520><c> different</c><03:37:28.399><c> like</c><03:37:28.880><c> patrick</c><03:37:30.160><c> starr</c>

03:37:31.429 --> 03:37:31.439 align:start position:0%
something different like patrick starr
 

03:37:31.439 --> 03:37:33.910 align:start position:0%
something different like patrick starr
so<03:37:31.680><c> if</c><03:37:32.000><c> the</c><03:37:32.239><c> mode</c><03:37:32.720><c> is</c><03:37:33.040><c> w</c>

03:37:33.910 --> 03:37:33.920 align:start position:0%
so if the mode is w
 

03:37:33.920 --> 03:37:35.910 align:start position:0%
so if the mode is w
then<03:37:34.160><c> we</c><03:37:34.319><c> will</c><03:37:34.560><c> actually</c><03:37:35.120><c> overwrite</c><03:37:35.680><c> any</c>

03:37:35.910 --> 03:37:35.920 align:start position:0%
then we will actually overwrite any
 

03:37:35.920 --> 03:37:38.550 align:start position:0%
then we will actually overwrite any
existing<03:37:36.479><c> data</c><03:37:36.880><c> already</c><03:37:37.279><c> within</c><03:37:37.520><c> this</c><03:37:37.760><c> file</c>

03:37:38.550 --> 03:37:38.560 align:start position:0%
existing data already within this file
 

03:37:38.560 --> 03:37:41.349 align:start position:0%
existing data already within this file
if<03:37:38.720><c> we</c><03:37:38.880><c> need</c><03:37:39.040><c> to</c><03:37:39.279><c> append</c><03:37:39.680><c> a</c><03:37:39.760><c> file</c><03:37:40.479><c> we</c><03:37:40.640><c> can</c><03:37:40.880><c> use</c>

03:37:41.349 --> 03:37:41.359 align:start position:0%
if we need to append a file we can use
 

03:37:41.359 --> 03:37:44.389 align:start position:0%
if we need to append a file we can use
the<03:37:41.600><c> a</c><03:37:41.840><c> mode</c><03:37:42.239><c> for</c><03:37:42.479><c> append</c><03:37:43.359><c> so</c><03:37:43.600><c> this</c><03:37:43.840><c> time</c><03:37:44.160><c> let's</c>

03:37:44.389 --> 03:37:44.399 align:start position:0%
the a mode for append so this time let's
 

03:37:44.399 --> 03:37:46.070 align:start position:0%
the a mode for append so this time let's
append<03:37:44.880><c> some</c><03:37:45.120><c> text</c><03:37:45.439><c> to</c><03:37:45.600><c> the</c><03:37:45.760><c> end</c><03:37:45.840><c> of</c><03:37:46.000><c> our</c>

03:37:46.070 --> 03:37:46.080 align:start position:0%
append some text to the end of our
 

03:37:46.080 --> 03:37:48.870 align:start position:0%
append some text to the end of our
document

03:37:48.870 --> 03:37:48.880 align:start position:0%
 
 

03:37:48.880 --> 03:37:51.910 align:start position:0%
 
spongebob<03:37:50.319><c> squarepants</c>

03:37:51.910 --> 03:37:51.920 align:start position:0%
spongebob squarepants
 

03:37:51.920 --> 03:37:53.510 align:start position:0%
spongebob squarepants
and<03:37:52.080><c> you</c><03:37:52.239><c> have</c><03:37:52.399><c> to</c><03:37:52.479><c> keep</c><03:37:52.720><c> track</c><03:37:52.960><c> of</c><03:37:53.120><c> any</c><03:37:53.279><c> new</c>

03:37:53.510 --> 03:37:53.520 align:start position:0%
and you have to keep track of any new
 

03:37:53.520 --> 03:37:56.150 align:start position:0%
and you have to keep track of any new
lines<03:37:53.760><c> that</c><03:37:53.920><c> you</c><03:37:54.080><c> add</c><03:37:54.319><c> too</c><03:37:55.120><c> so</c><03:37:55.359><c> if</c><03:37:55.520><c> i</c><03:37:55.680><c> run</c><03:37:55.920><c> this</c>

03:37:56.150 --> 03:37:56.160 align:start position:0%
lines that you add too so if i run this
 

03:37:56.160 --> 03:37:58.309 align:start position:0%
lines that you add too so if i run this
again<03:37:56.640><c> and</c><03:37:56.800><c> this</c><03:37:57.040><c> time</c><03:37:57.359><c> i</c><03:37:57.439><c> am</c><03:37:57.680><c> appending</c><03:37:58.080><c> some</c>

03:37:58.309 --> 03:37:58.319 align:start position:0%
again and this time i am appending some
 

03:37:58.319 --> 03:38:00.630 align:start position:0%
again and this time i am appending some
text

03:38:00.630 --> 03:38:00.640 align:start position:0%
text
 

03:38:00.640 --> 03:38:02.870 align:start position:0%
text
well<03:38:00.880><c> patrick</c><03:38:01.359><c> starr</c><03:38:01.760><c> is</c><03:38:01.920><c> still</c><03:38:02.160><c> there</c><03:38:02.479><c> and</c><03:38:02.640><c> we</c>

03:38:02.870 --> 03:38:02.880 align:start position:0%
well patrick starr is still there and we
 

03:38:02.880 --> 03:38:05.269 align:start position:0%
well patrick starr is still there and we
appended<03:38:03.520><c> spongebob</c><03:38:04.160><c> squarepants</c><03:38:04.960><c> to</c><03:38:05.120><c> the</c>

03:38:05.269 --> 03:38:05.279 align:start position:0%
appended spongebob squarepants to the
 

03:38:05.279 --> 03:38:06.790 align:start position:0%
appended spongebob squarepants to the
end<03:38:05.520><c> of</c><03:38:05.600><c> our</c><03:38:05.840><c> file</c>

03:38:06.790 --> 03:38:06.800 align:start position:0%
end of our file
 

03:38:06.800 --> 03:38:08.790 align:start position:0%
end of our file
now<03:38:07.120><c> if</c><03:38:07.200><c> you</c><03:38:07.359><c> would</c><03:38:07.439><c> like</c><03:38:07.680><c> to</c><03:38:07.840><c> delete</c><03:38:08.239><c> a</c><03:38:08.319><c> file</c>

03:38:08.790 --> 03:38:08.800 align:start position:0%
now if you would like to delete a file
 

03:38:08.800 --> 03:38:11.110 align:start position:0%
now if you would like to delete a file
here's<03:38:09.120><c> how</c><03:38:09.840><c> i'm</c><03:38:10.000><c> going</c><03:38:10.160><c> to</c><03:38:10.319><c> turn</c><03:38:10.560><c> all</c><03:38:10.720><c> of</c><03:38:10.800><c> this</c>

03:38:11.110 --> 03:38:11.120 align:start position:0%
here's how i'm going to turn all of this
 

03:38:11.120 --> 03:38:14.070 align:start position:0%
here's how i'm going to turn all of this
into<03:38:11.600><c> one</c><03:38:12.000><c> giant</c><03:38:12.399><c> comment</c>

03:38:14.070 --> 03:38:14.080 align:start position:0%
into one giant comment
 

03:38:14.080 --> 03:38:16.229 align:start position:0%
into one giant comment
let's<03:38:14.399><c> use</c><03:38:14.640><c> a</c><03:38:14.880><c> little</c><03:38:15.120><c> bit</c><03:38:15.279><c> of</c><03:38:15.359><c> file</c><03:38:15.680><c> detection</c>

03:38:16.229 --> 03:38:16.239 align:start position:0%
let's use a little bit of file detection
 

03:38:16.239 --> 03:38:18.229 align:start position:0%
let's use a little bit of file detection
let's<03:38:16.560><c> check</c><03:38:16.720><c> to</c><03:38:16.880><c> see</c><03:38:17.120><c> if</c><03:38:17.439><c> our</c><03:38:17.600><c> file</c><03:38:18.000><c> does</c>

03:38:18.229 --> 03:38:18.239 align:start position:0%
let's check to see if our file does
 

03:38:18.239 --> 03:38:19.510 align:start position:0%
let's check to see if our file does
exist

03:38:19.510 --> 03:38:19.520 align:start position:0%
exist
 

03:38:19.520 --> 03:38:21.830 align:start position:0%
exist
within<03:38:19.920><c> our</c><03:38:20.080><c> if</c><03:38:20.319><c> statement</c><03:38:20.800><c> let's</c><03:38:21.040><c> invoke</c><03:38:21.600><c> the</c>

03:38:21.830 --> 03:38:21.840 align:start position:0%
within our if statement let's invoke the
 

03:38:21.840 --> 03:38:24.630 align:start position:0%
within our if statement let's invoke the
remove<03:38:22.239><c> method</c><03:38:23.040><c> and</c><03:38:23.279><c> we</c><03:38:23.439><c> will</c><03:38:23.680><c> pass</c><03:38:24.000><c> in</c><03:38:24.399><c> the</c>

03:38:24.630 --> 03:38:24.640 align:start position:0%
remove method and we will pass in the
 

03:38:24.640 --> 03:38:27.389 align:start position:0%
remove method and we will pass in the
name<03:38:24.960><c> or</c><03:38:25.200><c> location</c><03:38:25.760><c> to</c><03:38:26.000><c> our</c><03:38:26.160><c> file</c>

03:38:27.389 --> 03:38:27.399 align:start position:0%
name or location to our file
 

03:38:27.399 --> 03:38:30.309 align:start position:0%
name or location to our file
test.txt<03:38:28.800><c> if</c><03:38:29.120><c> we</c><03:38:29.279><c> remove</c><03:38:29.840><c> this</c><03:38:30.080><c> file</c>

03:38:30.309 --> 03:38:30.319 align:start position:0%
test.txt if we remove this file
 

03:38:30.319 --> 03:38:33.590 align:start position:0%
test.txt if we remove this file
successfully<03:38:31.199><c> it</c><03:38:31.279><c> will</c><03:38:31.520><c> return</c><03:38:32.160><c> zero</c><03:38:33.040><c> so</c><03:38:33.279><c> if</c>

03:38:33.590 --> 03:38:33.600 align:start position:0%
successfully it will return zero so if
 

03:38:33.600 --> 03:38:36.389 align:start position:0%
successfully it will return zero so if
after<03:38:33.920><c> invoking</c><03:38:34.479><c> the</c><03:38:34.720><c> remove</c><03:38:35.120><c> function</c><03:38:36.000><c> if</c>

03:38:36.389 --> 03:38:36.399 align:start position:0%
after invoking the remove function if
 

03:38:36.399 --> 03:38:39.110 align:start position:0%
after invoking the remove function if
this<03:38:36.640><c> returns</c><03:38:37.279><c> zero</c><03:38:37.680><c> that's</c><03:38:37.920><c> its</c><03:38:38.160><c> exit</c><03:38:38.399><c> code</c>

03:38:39.110 --> 03:38:39.120 align:start position:0%
this returns zero that's its exit code
 

03:38:39.120 --> 03:38:41.030 align:start position:0%
this returns zero that's its exit code
that<03:38:39.359><c> means</c><03:38:39.680><c> that</c><03:38:40.000><c> file</c><03:38:40.319><c> was</c><03:38:40.560><c> deleted</c>

03:38:41.030 --> 03:38:41.040 align:start position:0%
that means that file was deleted
 

03:38:41.040 --> 03:38:43.189 align:start position:0%
that means that file was deleted
successfully<03:38:42.160><c> let's</c><03:38:42.399><c> print</c><03:38:42.640><c> a</c><03:38:42.720><c> message</c><03:38:43.120><c> to</c>

03:38:43.189 --> 03:38:43.199 align:start position:0%
successfully let's print a message to
 

03:38:43.199 --> 03:38:45.030 align:start position:0%
successfully let's print a message to
let<03:38:43.359><c> the</c><03:38:43.520><c> user</c><03:38:43.760><c> know</c>

03:38:45.030 --> 03:38:45.040 align:start position:0%
let the user know
 

03:38:45.040 --> 03:38:45.910 align:start position:0%
let the user know
that

03:38:45.910 --> 03:38:45.920 align:start position:0%
that
 

03:38:45.920 --> 03:38:47.189 align:start position:0%
that
file

03:38:47.189 --> 03:38:47.199 align:start position:0%
file
 

03:38:47.199 --> 03:38:49.429 align:start position:0%
file
was<03:38:47.840><c> deleted</c>

03:38:49.429 --> 03:38:49.439 align:start position:0%
was deleted
 

03:38:49.439 --> 03:38:51.750 align:start position:0%
was deleted
successfully

03:38:51.750 --> 03:38:51.760 align:start position:0%
successfully
 

03:38:51.760 --> 03:38:54.309 align:start position:0%
successfully
else<03:38:52.160><c> we</c><03:38:52.319><c> will</c><03:38:52.479><c> print</c><03:38:52.800><c> a</c><03:38:52.960><c> different</c><03:38:53.279><c> message</c>

03:38:54.309 --> 03:38:54.319 align:start position:0%
else we will print a different message
 

03:38:54.319 --> 03:38:56.469 align:start position:0%
else we will print a different message
printf

03:38:56.469 --> 03:38:56.479 align:start position:0%
printf
 

03:38:56.479 --> 03:38:59.030 align:start position:0%
printf
that<03:38:56.960><c> file</c><03:38:57.600><c> was</c><03:38:58.239><c> not</c>

03:38:59.030 --> 03:38:59.040 align:start position:0%
that file was not
 

03:38:59.040 --> 03:39:00.389 align:start position:0%
that file was not
deleted

03:39:00.389 --> 03:39:00.399 align:start position:0%
deleted
 

03:39:00.399 --> 03:39:02.630 align:start position:0%
deleted
okay<03:39:00.720><c> let's</c><03:39:00.960><c> try</c><03:39:01.199><c> this</c><03:39:01.680><c> so</c><03:39:01.840><c> here's</c><03:39:02.160><c> my</c><03:39:02.399><c> file</c>

03:39:02.630 --> 03:39:02.640 align:start position:0%
okay let's try this so here's my file
 

03:39:02.640 --> 03:39:06.070 align:start position:0%
okay let's try this so here's my file
within<03:39:02.960><c> the</c><03:39:03.120><c> same</c><03:39:03.359><c> folder</c><03:39:04.160><c> if</c><03:39:04.399><c> i</c><03:39:04.479><c> run</c><03:39:04.720><c> this</c>

03:39:06.070 --> 03:39:06.080 align:start position:0%
within the same folder if i run this
 

03:39:06.080 --> 03:39:08.630 align:start position:0%
within the same folder if i run this
that<03:39:06.399><c> file</c><03:39:06.720><c> was</c><03:39:06.960><c> deleted</c><03:39:07.359><c> successfully</c>

03:39:08.630 --> 03:39:08.640 align:start position:0%
that file was deleted successfully
 

03:39:08.640 --> 03:39:10.469 align:start position:0%
that file was deleted successfully
and<03:39:08.800><c> that</c><03:39:09.120><c> file</c><03:39:09.520><c> is</c><03:39:09.680><c> no</c><03:39:09.840><c> longer</c><03:39:10.160><c> within</c><03:39:10.399><c> the</c>

03:39:10.469 --> 03:39:10.479 align:start position:0%
and that file is no longer within the
 

03:39:10.479 --> 03:39:12.150 align:start position:0%
and that file is no longer within the
same<03:39:10.720><c> folder</c><03:39:11.199><c> you</c><03:39:11.279><c> can</c><03:39:11.439><c> see</c><03:39:11.600><c> here</c><03:39:11.840><c> that</c><03:39:12.000><c> this</c>

03:39:12.150 --> 03:39:12.160 align:start position:0%
same folder you can see here that this
 

03:39:12.160 --> 03:39:13.429 align:start position:0%
same folder you can see here that this
says<03:39:12.399><c> deleted</c>

03:39:13.429 --> 03:39:13.439 align:start position:0%
says deleted
 

03:39:13.439 --> 03:39:15.269 align:start position:0%
says deleted
and<03:39:13.680><c> if</c><03:39:13.840><c> i</c><03:39:13.920><c> run</c><03:39:14.080><c> this</c><03:39:14.239><c> again</c><03:39:14.560><c> we</c><03:39:14.720><c> will</c><03:39:14.880><c> not</c><03:39:15.120><c> be</c>

03:39:15.269 --> 03:39:15.279 align:start position:0%
and if i run this again we will not be
 

03:39:15.279 --> 03:39:17.189 align:start position:0%
and if i run this again we will not be
able<03:39:15.439><c> to</c><03:39:15.680><c> locate</c><03:39:16.000><c> that</c><03:39:16.239><c> file</c><03:39:16.640><c> because</c><03:39:16.960><c> it's</c>

03:39:17.189 --> 03:39:17.199 align:start position:0%
able to locate that file because it's
 

03:39:17.199 --> 03:39:18.229 align:start position:0%
able to locate that file because it's
not<03:39:17.439><c> there</c>

03:39:18.229 --> 03:39:18.239 align:start position:0%
not there
 

03:39:18.239 --> 03:39:20.309 align:start position:0%
not there
now<03:39:18.479><c> you</c><03:39:18.640><c> can</c><03:39:18.960><c> write</c><03:39:19.120><c> a</c><03:39:19.279><c> file</c><03:39:19.600><c> to</c><03:39:19.840><c> a</c><03:39:20.000><c> different</c>

03:39:20.309 --> 03:39:20.319 align:start position:0%
now you can write a file to a different
 

03:39:20.319 --> 03:39:22.469 align:start position:0%
now you can write a file to a different
location<03:39:21.040><c> let's</c><03:39:21.279><c> say</c><03:39:21.520><c> i</c><03:39:21.600><c> would</c><03:39:21.760><c> like</c><03:39:22.000><c> to</c><03:39:22.160><c> write</c>

03:39:22.469 --> 03:39:22.479 align:start position:0%
location let's say i would like to write
 

03:39:22.479 --> 03:39:25.189 align:start position:0%
location let's say i would like to write
a<03:39:22.720><c> file</c><03:39:23.040><c> to</c><03:39:23.199><c> my</c><03:39:23.359><c> desktop</c><03:39:24.399><c> i</c><03:39:24.479><c> can</c><03:39:24.720><c> set</c><03:39:25.040><c> a</c>

03:39:25.189 --> 03:39:25.199 align:start position:0%
a file to my desktop i can set a
 

03:39:25.199 --> 03:39:27.990 align:start position:0%
a file to my desktop i can set a
relative<03:39:25.680><c> file</c><03:39:26.080><c> path</c><03:39:26.800><c> or</c><03:39:27.040><c> an</c><03:39:27.199><c> absolute</c><03:39:27.680><c> file</c>

03:39:27.990 --> 03:39:28.000 align:start position:0%
relative file path or an absolute file
 

03:39:28.000 --> 03:39:30.950 align:start position:0%
relative file path or an absolute file
path<03:39:28.560><c> i'll</c><03:39:28.880><c> use</c><03:39:29.120><c> an</c><03:39:29.279><c> absolute</c><03:39:29.760><c> file</c><03:39:30.080><c> path</c>

03:39:30.950 --> 03:39:30.960 align:start position:0%
path i'll use an absolute file path
 

03:39:30.960 --> 03:39:32.950 align:start position:0%
path i'll use an absolute file path
i'm<03:39:31.120><c> going</c><03:39:31.359><c> to</c><03:39:31.439><c> get</c><03:39:31.680><c> the</c><03:39:31.920><c> file</c><03:39:32.160><c> location</c><03:39:32.720><c> of</c><03:39:32.800><c> my</c>

03:39:32.950 --> 03:39:32.960 align:start position:0%
i'm going to get the file location of my
 

03:39:32.960 --> 03:39:35.110 align:start position:0%
i'm going to get the file location of my
desktop<03:39:33.920><c> so</c><03:39:34.160><c> i'm</c><03:39:34.239><c> just</c><03:39:34.399><c> going</c><03:39:34.560><c> to</c><03:39:34.720><c> click</c><03:39:34.960><c> on</c>

03:39:35.110 --> 03:39:35.120 align:start position:0%
desktop so i'm just going to click on
 

03:39:35.120 --> 03:39:36.630 align:start position:0%
desktop so i'm just going to click on
one<03:39:35.279><c> of</c><03:39:35.359><c> these</c><03:39:35.600><c> folders</c>

03:39:36.630 --> 03:39:36.640 align:start position:0%
one of these folders
 

03:39:36.640 --> 03:39:38.950 align:start position:0%
one of these folders
go<03:39:36.960><c> to</c><03:39:37.279><c> properties</c>

03:39:38.950 --> 03:39:38.960 align:start position:0%
go to properties
 

03:39:38.960 --> 03:39:41.830 align:start position:0%
go to properties
and<03:39:39.279><c> copy</c><03:39:39.680><c> this</c><03:39:39.920><c> location</c>

03:39:41.830 --> 03:39:41.840 align:start position:0%
and copy this location
 

03:39:41.840 --> 03:39:44.150 align:start position:0%
and copy this location
so<03:39:42.160><c> with</c><03:39:42.399><c> my</c><03:39:42.720><c> file</c><03:39:43.040><c> name</c><03:39:43.439><c> i'm</c><03:39:43.600><c> going</c><03:39:43.840><c> to</c>

03:39:44.150 --> 03:39:44.160 align:start position:0%
so with my file name i'm going to
 

03:39:44.160 --> 03:39:46.870 align:start position:0%
so with my file name i'm going to
precede<03:39:44.720><c> this</c><03:39:45.040><c> with</c><03:39:45.279><c> an</c><03:39:45.439><c> absolute</c><03:39:45.920><c> file</c><03:39:46.239><c> path</c>

03:39:46.870 --> 03:39:46.880 align:start position:0%
precede this with an absolute file path
 

03:39:46.880 --> 03:39:49.349 align:start position:0%
precede this with an absolute file path
then<03:39:47.120><c> any</c><03:39:47.359><c> backslashes</c><03:39:48.479><c> might</c><03:39:48.800><c> need</c><03:39:48.960><c> to</c><03:39:49.120><c> be</c>

03:39:49.349 --> 03:39:49.359 align:start position:0%
then any backslashes might need to be
 

03:39:49.359 --> 03:39:51.030 align:start position:0%
then any backslashes might need to be
double<03:39:49.680><c> backslashes</c>

03:39:51.030 --> 03:39:51.040 align:start position:0%
double backslashes
 

03:39:51.040 --> 03:39:53.830 align:start position:0%
double backslashes
so<03:39:51.279><c> this</c><03:39:51.520><c> time</c><03:39:51.920><c> if</c><03:39:52.080><c> i</c><03:39:52.239><c> write</c><03:39:52.479><c> a</c><03:39:52.560><c> file</c>

03:39:53.830 --> 03:39:53.840 align:start position:0%
so this time if i write a file
 

03:39:53.840 --> 03:39:55.990 align:start position:0%
so this time if i write a file
then<03:39:54.160><c> this</c><03:39:54.399><c> file</c><03:39:54.880><c> will</c><03:39:55.120><c> appear</c><03:39:55.600><c> at</c><03:39:55.760><c> this</c>

03:39:55.990 --> 03:39:56.000 align:start position:0%
then this file will appear at this
 

03:39:56.000 --> 03:39:58.150 align:start position:0%
then this file will appear at this
location<03:39:56.800><c> on</c><03:39:56.960><c> my</c><03:39:57.120><c> desktop</c>

03:39:58.150 --> 03:39:58.160 align:start position:0%
location on my desktop
 

03:39:58.160 --> 03:40:01.349 align:start position:0%
location on my desktop
and<03:39:58.399><c> here's</c><03:39:58.800><c> that</c><03:39:59.040><c> file</c><03:39:59.800><c> test.txt</c><03:40:01.040><c> and</c><03:40:01.199><c> it</c>

03:40:01.349 --> 03:40:01.359 align:start position:0%
and here's that file test.txt and it
 

03:40:01.359 --> 03:40:04.710 align:start position:0%
and here's that file test.txt and it
says<03:40:01.840><c> spongebob</c><03:40:02.840><c> squarepants</c><03:40:04.000><c> well</c><03:40:04.319><c> alright</c>

03:40:04.710 --> 03:40:04.720 align:start position:0%
says spongebob squarepants well alright
 

03:40:04.720 --> 03:40:07.110 align:start position:0%
says spongebob squarepants well alright
everybody<03:40:05.199><c> that</c><03:40:05.439><c> is</c><03:40:05.600><c> how</c><03:40:05.840><c> to</c><03:40:06.160><c> write</c><03:40:06.560><c> append</c>

03:40:07.110 --> 03:40:07.120 align:start position:0%
everybody that is how to write append
 

03:40:07.120 --> 03:40:09.910 align:start position:0%
everybody that is how to write append
and<03:40:07.359><c> delete</c><03:40:07.840><c> files</c><03:40:08.319><c> in</c><03:40:08.640><c> c</c><03:40:09.199><c> if</c><03:40:09.359><c> you</c><03:40:09.439><c> found</c><03:40:09.760><c> this</c>

03:40:09.910 --> 03:40:09.920 align:start position:0%
and delete files in c if you found this
 

03:40:09.920 --> 03:40:12.150 align:start position:0%
and delete files in c if you found this
video<03:40:10.160><c> helpful</c><03:40:10.720><c> be</c><03:40:10.960><c> sure</c><03:40:11.120><c> to</c><03:40:11.279><c> help</c><03:40:11.439><c> me</c><03:40:11.680><c> out</c><03:40:11.840><c> by</c>

03:40:12.150 --> 03:40:12.160 align:start position:0%
video helpful be sure to help me out by
 

03:40:12.160 --> 03:40:14.150 align:start position:0%
video helpful be sure to help me out by
smashing<03:40:12.560><c> that</c><03:40:12.800><c> like</c><03:40:12.960><c> button</c><03:40:13.520><c> leave</c><03:40:13.760><c> a</c><03:40:13.840><c> random</c>

03:40:14.150 --> 03:40:14.160 align:start position:0%
smashing that like button leave a random
 

03:40:14.160 --> 03:40:16.070 align:start position:0%
smashing that like button leave a random
comment<03:40:14.479><c> down</c><03:40:14.640><c> below</c><03:40:15.199><c> and</c><03:40:15.439><c> subscribe</c><03:40:16.000><c> if</c>

03:40:16.070 --> 03:40:16.080 align:start position:0%
comment down below and subscribe if
 

03:40:16.080 --> 03:40:20.790 align:start position:0%
comment down below and subscribe if
you'd<03:40:16.239><c> like</c><03:40:16.399><c> to</c><03:40:16.560><c> become</c><03:40:16.800><c> a</c><03:40:16.960><c> fellow</c><03:40:17.279><c> bro</c>

03:40:20.790 --> 03:40:20.800 align:start position:0%
 
 

03:40:20.800 --> 03:40:22.710 align:start position:0%
 
alright<03:40:21.359><c> people</c><03:40:21.840><c> so</c><03:40:22.000><c> in</c><03:40:22.160><c> this</c><03:40:22.319><c> video</c><03:40:22.640><c> i'm</c>

03:40:22.710 --> 03:40:22.720 align:start position:0%
alright people so in this video i'm
 

03:40:22.720 --> 03:40:24.229 align:start position:0%
alright people so in this video i'm
going<03:40:22.880><c> to</c><03:40:22.960><c> show</c><03:40:23.199><c> you</c><03:40:23.359><c> how</c><03:40:23.520><c> we</c><03:40:23.680><c> can</c><03:40:23.840><c> read</c><03:40:24.080><c> the</c>

03:40:24.229 --> 03:40:24.239 align:start position:0%
going to show you how we can read the
 

03:40:24.239 --> 03:40:26.309 align:start position:0%
going to show you how we can read the
contents<03:40:24.880><c> of</c><03:40:25.040><c> a</c><03:40:25.199><c> file</c><03:40:25.600><c> someplace</c><03:40:26.160><c> on</c><03:40:26.239><c> your</c>

03:40:26.309 --> 03:40:26.319 align:start position:0%
contents of a file someplace on your
 

03:40:26.319 --> 03:40:28.150 align:start position:0%
contents of a file someplace on your
computer<03:40:27.120><c> you</c><03:40:27.279><c> can</c><03:40:27.359><c> either</c><03:40:27.680><c> place</c><03:40:27.920><c> this</c>

03:40:28.150 --> 03:40:28.160 align:start position:0%
computer you can either place this
 

03:40:28.160 --> 03:40:30.469 align:start position:0%
computer you can either place this
within<03:40:28.479><c> the</c><03:40:28.560><c> same</c><03:40:28.800><c> folder</c><03:40:29.279><c> as</c><03:40:29.439><c> your</c><03:40:29.680><c> c</c><03:40:29.920><c> program</c>

03:40:30.469 --> 03:40:30.479 align:start position:0%
within the same folder as your c program
 

03:40:30.479 --> 03:40:32.309 align:start position:0%
within the same folder as your c program
or<03:40:30.640><c> someplace</c><03:40:31.199><c> else</c><03:40:31.600><c> i</c><03:40:31.760><c> think</c><03:40:31.920><c> it</c><03:40:32.080><c> would</c><03:40:32.160><c> be</c>

03:40:32.309 --> 03:40:32.319 align:start position:0%
or someplace else i think it would be
 

03:40:32.319 --> 03:40:34.870 align:start position:0%
or someplace else i think it would be
cool<03:40:32.560><c> if</c><03:40:32.720><c> we</c><03:40:32.960><c> read</c><03:40:33.199><c> a</c><03:40:33.439><c> file</c><03:40:33.760><c> from</c><03:40:33.920><c> our</c><03:40:34.080><c> desktops</c>

03:40:34.870 --> 03:40:34.880 align:start position:0%
cool if we read a file from our desktops
 

03:40:34.880 --> 03:40:36.710 align:start position:0%
cool if we read a file from our desktops
so<03:40:35.120><c> i'm</c><03:40:35.279><c> going</c><03:40:35.439><c> to</c><03:40:35.520><c> create</c><03:40:35.760><c> a</c><03:40:35.920><c> new</c><03:40:36.160><c> file</c><03:40:36.640><c> and</c>

03:40:36.710 --> 03:40:36.720 align:start position:0%
so i'm going to create a new file and
 

03:40:36.720 --> 03:40:39.189 align:start position:0%
so i'm going to create a new file and
this<03:40:36.880><c> is</c><03:40:36.960><c> going</c><03:40:37.199><c> to</c><03:40:37.279><c> be</c><03:40:37.520><c> a</c><03:40:37.680><c> plain</c><03:40:38.080><c> text</c><03:40:38.479><c> file</c>

03:40:39.189 --> 03:40:39.199 align:start position:0%
this is going to be a plain text file
 

03:40:39.199 --> 03:40:40.950 align:start position:0%
this is going to be a plain text file
and<03:40:39.439><c> i'll</c><03:40:39.600><c> write</c><03:40:39.840><c> a</c><03:40:39.920><c> poem</c><03:40:40.319><c> i'll</c><03:40:40.479><c> name</c><03:40:40.720><c> this</c>

03:40:40.950 --> 03:40:40.960 align:start position:0%
and i'll write a poem i'll name this
 

03:40:40.960 --> 03:40:42.710 align:start position:0%
and i'll write a poem i'll name this
poem.txt

03:40:42.710 --> 03:40:42.720 align:start position:0%
poem.txt
 

03:40:42.720 --> 03:40:45.750 align:start position:0%
poem.txt
here's<03:40:43.040><c> my</c><03:40:43.279><c> beautiful</c><03:40:43.680><c> poem</c>

03:40:45.750 --> 03:40:45.760 align:start position:0%
here's my beautiful poem
 

03:40:45.760 --> 03:40:47.750 align:start position:0%
here's my beautiful poem
are<03:40:46.239><c> red</c>

03:40:47.750 --> 03:40:47.760 align:start position:0%
are red
 

03:40:47.760 --> 03:40:51.110 align:start position:0%
are red
violets<03:40:48.720><c> are</c><03:40:49.279><c> blue</c>

03:40:51.110 --> 03:40:51.120 align:start position:0%
violets are blue
 

03:40:51.120 --> 03:40:55.590 align:start position:0%
violets are blue
booty<03:40:51.920><c> booty</c><03:40:52.800><c> booty</c><03:40:53.680><c> booty</c>

03:40:55.590 --> 03:40:55.600 align:start position:0%
booty booty booty booty
 

03:40:55.600 --> 03:40:56.710 align:start position:0%
booty booty booty booty
rockin

03:40:56.710 --> 03:40:56.720 align:start position:0%
rockin
 

03:40:56.720 --> 03:40:58.790 align:start position:0%
rockin
everywhere

03:40:58.790 --> 03:40:58.800 align:start position:0%
everywhere
 

03:40:58.800 --> 03:41:00.630 align:start position:0%
everywhere
okay<03:40:59.120><c> i'm</c><03:40:59.279><c> going</c><03:40:59.439><c> to</c><03:40:59.760><c> save</c>

03:41:00.630 --> 03:41:00.640 align:start position:0%
okay i'm going to save
 

03:41:00.640 --> 03:41:02.630 align:start position:0%
okay i'm going to save
and<03:41:00.800><c> then</c><03:41:01.040><c> i'll</c><03:41:01.279><c> need</c><03:41:01.520><c> the</c><03:41:01.760><c> file</c><03:41:02.000><c> location</c><03:41:02.560><c> of</c>

03:41:02.630 --> 03:41:02.640 align:start position:0%
and then i'll need the file location of
 

03:41:02.640 --> 03:41:04.550 align:start position:0%
and then i'll need the file location of
where<03:41:02.880><c> this</c><03:41:03.040><c> is</c><03:41:03.199><c> located</c><03:41:03.760><c> i'm</c><03:41:03.920><c> going</c><03:41:04.160><c> to</c><03:41:04.319><c> right</c>

03:41:04.550 --> 03:41:04.560 align:start position:0%
where this is located i'm going to right
 

03:41:04.560 --> 03:41:07.189 align:start position:0%
where this is located i'm going to right
click<03:41:04.880><c> go</c><03:41:05.040><c> to</c><03:41:05.199><c> properties</c><03:41:06.239><c> and</c><03:41:06.560><c> copy</c><03:41:07.040><c> this</c>

03:41:07.189 --> 03:41:07.199 align:start position:0%
click go to properties and copy this
 

03:41:07.199 --> 03:41:10.309 align:start position:0%
click go to properties and copy this
file<03:41:07.600><c> path</c><03:41:08.239><c> and</c><03:41:08.479><c> save</c><03:41:08.720><c> it</c><03:41:08.800><c> for</c><03:41:09.040><c> later</c><03:41:09.760><c> now</c><03:41:10.000><c> to</c>

03:41:10.309 --> 03:41:10.319 align:start position:0%
file path and save it for later now to
 

03:41:10.319 --> 03:41:12.150 align:start position:0%
file path and save it for later now to
read<03:41:10.640><c> a</c><03:41:10.800><c> file</c><03:41:11.120><c> on</c><03:41:11.279><c> your</c><03:41:11.359><c> computer</c><03:41:11.840><c> we'll</c><03:41:12.000><c> need</c>

03:41:12.150 --> 03:41:12.160 align:start position:0%
read a file on your computer we'll need
 

03:41:12.160 --> 03:41:14.550 align:start position:0%
read a file on your computer we'll need
to<03:41:12.319><c> create</c><03:41:12.560><c> a</c><03:41:12.720><c> pointer</c><03:41:13.359><c> the</c><03:41:13.520><c> data</c><03:41:13.920><c> type</c><03:41:14.319><c> is</c>

03:41:14.550 --> 03:41:14.560 align:start position:0%
to create a pointer the data type is
 

03:41:14.560 --> 03:41:15.590 align:start position:0%
to create a pointer the data type is
file

03:41:15.590 --> 03:41:15.600 align:start position:0%
file
 

03:41:15.600 --> 03:41:17.030 align:start position:0%
file
and<03:41:15.760><c> i'll</c><03:41:15.920><c> name</c><03:41:16.239><c> this</c>

03:41:17.030 --> 03:41:17.040 align:start position:0%
and i'll name this
 

03:41:17.040 --> 03:41:20.309 align:start position:0%
and i'll name this
p<03:41:17.680><c> f</c><03:41:18.319><c> and</c><03:41:18.560><c> i</c><03:41:18.640><c> will</c><03:41:18.800><c> set</c><03:41:18.960><c> the</c><03:41:19.120><c> sql</c><03:41:19.600><c> to</c><03:41:20.080><c> then</c>

03:41:20.309 --> 03:41:20.319 align:start position:0%
p f and i will set the sql to then
 

03:41:20.319 --> 03:41:23.110 align:start position:0%
p f and i will set the sql to then
invoke<03:41:20.800><c> the</c><03:41:21.040><c> f</c><03:41:21.680><c> open</c><03:41:22.080><c> function</c>

03:41:23.110 --> 03:41:23.120 align:start position:0%
invoke the f open function
 

03:41:23.120 --> 03:41:27.269 align:start position:0%
invoke the f open function
pass<03:41:23.359><c> in</c><03:41:23.520><c> your</c><03:41:23.680><c> file</c><03:41:24.479><c> mine</c><03:41:24.800><c> is</c><03:41:25.120><c> poem.txt</c>

03:41:27.269 --> 03:41:27.279 align:start position:0%
pass in your file mine is poem.txt
 

03:41:27.279 --> 03:41:29.990 align:start position:0%
pass in your file mine is poem.txt
so<03:41:27.600><c> if</c><03:41:28.080><c> this</c><03:41:28.319><c> file</c><03:41:28.800><c> is</c><03:41:28.960><c> not</c><03:41:29.120><c> within</c><03:41:29.520><c> the</c><03:41:29.680><c> same</c>

03:41:29.990 --> 03:41:30.000 align:start position:0%
so if this file is not within the same
 

03:41:30.000 --> 03:41:32.150 align:start position:0%
so if this file is not within the same
folder<03:41:30.399><c> as</c><03:41:30.560><c> your</c><03:41:30.720><c> c</c><03:41:30.960><c> program</c><03:41:31.520><c> you'll</c><03:41:31.680><c> need</c><03:41:31.920><c> a</c>

03:41:32.150 --> 03:41:32.160 align:start position:0%
folder as your c program you'll need a
 

03:41:32.160 --> 03:41:35.030 align:start position:0%
folder as your c program you'll need a
relative<03:41:32.720><c> or</c><03:41:33.040><c> absolute</c><03:41:33.600><c> file</c><03:41:33.920><c> path</c><03:41:34.640><c> since</c>

03:41:35.030 --> 03:41:35.040 align:start position:0%
relative or absolute file path since
 

03:41:35.040 --> 03:41:37.590 align:start position:0%
relative or absolute file path since
this<03:41:35.359><c> file</c><03:41:35.680><c> is</c><03:41:35.840><c> on</c><03:41:35.920><c> my</c><03:41:36.080><c> desktop</c><03:41:36.720><c> i</c><03:41:36.960><c> could</c><03:41:37.359><c> use</c>

03:41:37.590 --> 03:41:37.600 align:start position:0%
this file is on my desktop i could use
 

03:41:37.600 --> 03:41:39.349 align:start position:0%
this file is on my desktop i could use
an<03:41:37.760><c> absolute</c><03:41:38.160><c> file</c><03:41:38.479><c> path</c>

03:41:39.349 --> 03:41:39.359 align:start position:0%
an absolute file path
 

03:41:39.359 --> 03:41:42.309 align:start position:0%
an absolute file path
so<03:41:39.760><c> preceding</c><03:41:40.479><c> my</c><03:41:40.720><c> file</c><03:41:41.040><c> name</c><03:41:41.439><c> i</c><03:41:41.600><c> will</c><03:41:41.840><c> paste</c>

03:41:42.309 --> 03:41:42.319 align:start position:0%
so preceding my file name i will paste
 

03:41:42.319 --> 03:41:44.950 align:start position:0%
so preceding my file name i will paste
that<03:41:42.479><c> location</c><03:41:43.359><c> and</c><03:41:43.520><c> then</c><03:41:43.760><c> each</c><03:41:44.080><c> backslash</c>

03:41:44.950 --> 03:41:44.960 align:start position:0%
that location and then each backslash
 

03:41:44.960 --> 03:41:46.790 align:start position:0%
that location and then each backslash
may<03:41:45.120><c> need</c><03:41:45.279><c> to</c><03:41:45.439><c> be</c><03:41:45.680><c> a</c><03:41:45.840><c> double</c><03:41:46.160><c> backslash</c>

03:41:46.790 --> 03:41:46.800 align:start position:0%
may need to be a double backslash
 

03:41:46.800 --> 03:41:49.110 align:start position:0%
may need to be a double backslash
because<03:41:47.279><c> that</c><03:41:47.520><c> is</c><03:41:47.600><c> an</c><03:41:47.760><c> escape</c><03:41:48.080><c> sequence</c><03:41:48.640><c> for</c><03:41:48.960><c> a</c>

03:41:49.110 --> 03:41:49.120 align:start position:0%
because that is an escape sequence for a
 

03:41:49.120 --> 03:41:51.510 align:start position:0%
because that is an escape sequence for a
backslash<03:41:49.760><c> character</c><03:41:50.560><c> okay</c><03:41:50.960><c> the</c><03:41:51.120><c> second</c>

03:41:51.510 --> 03:41:51.520 align:start position:0%
backslash character okay the second
 

03:41:51.520 --> 03:41:53.670 align:start position:0%
backslash character okay the second
argument<03:41:52.080><c> is</c><03:41:52.239><c> the</c><03:41:52.399><c> mode</c><03:41:52.960><c> this</c><03:41:53.120><c> time</c><03:41:53.359><c> we</c><03:41:53.520><c> are</c>

03:41:53.670 --> 03:41:53.680 align:start position:0%
argument is the mode this time we are
 

03:41:53.680 --> 03:41:57.189 align:start position:0%
argument is the mode this time we are
going<03:41:53.920><c> to</c><03:41:54.319><c> read</c><03:41:54.640><c> a</c><03:41:54.880><c> file</c><03:41:55.600><c> so</c><03:41:55.840><c> pass</c><03:41:56.160><c> in</c><03:41:56.479><c> r</c><03:41:56.960><c> for</c>

03:41:57.189 --> 03:41:57.199 align:start position:0%
going to read a file so pass in r for
 

03:41:57.199 --> 03:41:59.269 align:start position:0%
going to read a file so pass in r for
the<03:41:57.359><c> second</c><03:41:57.680><c> argument</c><03:41:58.640><c> then</c><03:41:58.800><c> it's</c><03:41:59.040><c> good</c>

03:41:59.269 --> 03:41:59.279 align:start position:0%
the second argument then it's good
 

03:41:59.279 --> 03:42:01.189 align:start position:0%
the second argument then it's good
practice<03:41:59.760><c> at</c><03:41:59.840><c> the</c><03:42:00.000><c> end</c><03:42:00.160><c> of</c><03:42:00.239><c> your</c><03:42:00.399><c> program</c><03:42:00.960><c> to</c>

03:42:01.189 --> 03:42:01.199 align:start position:0%
practice at the end of your program to
 

03:42:01.199 --> 03:42:03.670 align:start position:0%
practice at the end of your program to
close<03:42:01.600><c> any</c><03:42:01.920><c> open</c><03:42:02.239><c> files</c>

03:42:03.670 --> 03:42:03.680 align:start position:0%
close any open files
 

03:42:03.680 --> 03:42:06.469 align:start position:0%
close any open files
we<03:42:03.840><c> will</c><03:42:04.080><c> invoke</c><03:42:04.479><c> the</c><03:42:04.720><c> f</c><03:42:05.040><c> close</c><03:42:05.359><c> function</c><03:42:06.160><c> pass</c>

03:42:06.469 --> 03:42:06.479 align:start position:0%
we will invoke the f close function pass
 

03:42:06.479 --> 03:42:09.269 align:start position:0%
we will invoke the f close function pass
in<03:42:06.640><c> our</c><03:42:06.720><c> pointer</c><03:42:07.520><c> do</c><03:42:07.680><c> not</c><03:42:07.920><c> dereference</c><03:42:08.640><c> it</c><03:42:09.120><c> and</c>

03:42:09.269 --> 03:42:09.279 align:start position:0%
in our pointer do not dereference it and
 

03:42:09.279 --> 03:42:12.229 align:start position:0%
in our pointer do not dereference it and
we<03:42:09.439><c> will</c><03:42:09.600><c> need</c><03:42:10.000><c> one</c><03:42:10.160><c> more</c><03:42:10.479><c> thing</c><03:42:10.960><c> a</c><03:42:11.199><c> buffer</c><03:42:12.080><c> a</c>

03:42:12.229 --> 03:42:12.239 align:start position:0%
we will need one more thing a buffer a
 

03:42:12.239 --> 03:42:14.950 align:start position:0%
we will need one more thing a buffer a
buffer<03:42:12.640><c> is</c><03:42:12.800><c> going</c><03:42:13.040><c> to</c><03:42:13.279><c> act</c><03:42:13.600><c> as</c><03:42:14.000><c> a</c><03:42:14.239><c> container</c><03:42:14.800><c> an</c>

03:42:14.950 --> 03:42:14.960 align:start position:0%
buffer is going to act as a container an
 

03:42:14.960 --> 03:42:17.349 align:start position:0%
buffer is going to act as a container an
array<03:42:15.199><c> of</c><03:42:15.359><c> characters</c><03:42:16.000><c> to</c><03:42:16.239><c> hold</c><03:42:16.640><c> one</c><03:42:16.960><c> line</c><03:42:17.199><c> of</c>

03:42:17.349 --> 03:42:17.359 align:start position:0%
array of characters to hold one line of
 

03:42:17.359 --> 03:42:20.150 align:start position:0%
array of characters to hold one line of
our<03:42:17.520><c> text</c><03:42:17.760><c> document</c><03:42:18.479><c> one</c><03:42:18.720><c> line</c><03:42:18.960><c> at</c><03:42:19.120><c> a</c><03:42:19.279><c> time</c><03:42:19.920><c> so</c>

03:42:20.150 --> 03:42:20.160 align:start position:0%
our text document one line at a time so
 

03:42:20.160 --> 03:42:22.150 align:start position:0%
our text document one line at a time so
let's<03:42:20.399><c> declare</c><03:42:20.960><c> an</c><03:42:21.120><c> array</c><03:42:21.439><c> of</c><03:42:21.600><c> characters</c>

03:42:22.150 --> 03:42:22.160 align:start position:0%
let's declare an array of characters
 

03:42:22.160 --> 03:42:25.590 align:start position:0%
let's declare an array of characters
named<03:42:22.560><c> buffer</c><03:42:23.359><c> and</c><03:42:23.520><c> i'll</c><03:42:23.600><c> set</c><03:42:23.840><c> the</c><03:42:24.000><c> size</c><03:42:24.960><c> to</c>

03:42:25.590 --> 03:42:25.600 align:start position:0%
named buffer and i'll set the size to
 

03:42:25.600 --> 03:42:28.469 align:start position:0%
named buffer and i'll set the size to
255.<03:42:26.640><c> our</c><03:42:26.880><c> buffer</c><03:42:27.279><c> is</c><03:42:27.439><c> going</c><03:42:27.600><c> to</c><03:42:27.760><c> hold</c><03:42:28.239><c> one</c>

03:42:28.469 --> 03:42:28.479 align:start position:0%
255. our buffer is going to hold one
 

03:42:28.479 --> 03:42:31.429 align:start position:0%
255. our buffer is going to hold one
line<03:42:28.880><c> of</c><03:42:29.040><c> our</c><03:42:29.199><c> file</c><03:42:29.680><c> one</c><03:42:30.000><c> line</c><03:42:30.239><c> at</c><03:42:30.399><c> a</c><03:42:30.479><c> time</c><03:42:31.199><c> and</c>

03:42:31.429 --> 03:42:31.439 align:start position:0%
line of our file one line at a time and
 

03:42:31.439 --> 03:42:34.150 align:start position:0%
line of our file one line at a time and
to<03:42:31.680><c> read</c><03:42:32.000><c> a</c><03:42:32.239><c> single</c><03:42:32.640><c> line</c><03:42:33.120><c> from</c><03:42:33.359><c> our</c><03:42:33.520><c> file</c><03:42:34.000><c> we</c>

03:42:34.150 --> 03:42:34.160 align:start position:0%
to read a single line from our file we
 

03:42:34.160 --> 03:42:37.269 align:start position:0%
to read a single line from our file we
will<03:42:34.319><c> use</c><03:42:34.640><c> the</c><03:42:34.960><c> f</c><03:42:35.600><c> gets</c><03:42:36.080><c> function</c><03:42:36.880><c> and</c><03:42:37.040><c> there</c>

03:42:37.269 --> 03:42:37.279 align:start position:0%
will use the f gets function and there
 

03:42:37.279 --> 03:42:39.990 align:start position:0%
will use the f gets function and there
are<03:42:37.439><c> three</c><03:42:37.760><c> arguments</c><03:42:38.720><c> our</c><03:42:38.960><c> buffer</c><03:42:39.680><c> this</c><03:42:39.920><c> is</c>

03:42:39.990 --> 03:42:40.000 align:start position:0%
are three arguments our buffer this is
 

03:42:40.000 --> 03:42:42.630 align:start position:0%
are three arguments our buffer this is
what<03:42:40.160><c> we're</c><03:42:40.399><c> inserting</c><03:42:40.960><c> a</c><03:42:41.120><c> line</c><03:42:41.359><c> of</c><03:42:41.439><c> text</c><03:42:41.840><c> into</c>

03:42:42.630 --> 03:42:42.640 align:start position:0%
what we're inserting a line of text into
 

03:42:42.640 --> 03:42:45.349 align:start position:0%
what we're inserting a line of text into
a<03:42:42.880><c> maximum</c><03:42:43.359><c> input</c><03:42:43.760><c> size</c><03:42:44.399><c> i'll</c><03:42:44.560><c> set</c><03:42:44.800><c> this</c><03:42:45.040><c> to</c><03:42:45.120><c> be</c>

03:42:45.349 --> 03:42:45.359 align:start position:0%
a maximum input size i'll set this to be
 

03:42:45.359 --> 03:42:48.389 align:start position:0%
a maximum input size i'll set this to be
255<03:42:46.160><c> to</c><03:42:46.319><c> match</c><03:42:46.640><c> our</c><03:42:46.800><c> buffer</c><03:42:47.439><c> and</c><03:42:47.760><c> then</c><03:42:48.080><c> a</c>

03:42:48.389 --> 03:42:48.399 align:start position:0%
255 to match our buffer and then a
 

03:42:48.399 --> 03:42:50.790 align:start position:0%
255 to match our buffer and then a
pointer<03:42:48.880><c> to</c><03:42:49.040><c> the</c><03:42:49.279><c> file</c><03:42:49.520><c> that</c><03:42:49.680><c> we're</c><03:42:49.920><c> opening</c>

03:42:50.790 --> 03:42:50.800 align:start position:0%
pointer to the file that we're opening
 

03:42:50.800 --> 03:42:52.630 align:start position:0%
pointer to the file that we're opening
and<03:42:50.960><c> again</c><03:42:51.279><c> make</c><03:42:51.439><c> sure</c><03:42:51.600><c> to</c><03:42:51.840><c> not</c><03:42:52.000><c> dereference</c>

03:42:52.630 --> 03:42:52.640 align:start position:0%
and again make sure to not dereference
 

03:42:52.640 --> 03:42:55.110 align:start position:0%
and again make sure to not dereference
it<03:42:53.199><c> so</c><03:42:53.439><c> this</c><03:42:53.680><c> will</c><03:42:53.840><c> read</c><03:42:54.160><c> a</c><03:42:54.399><c> single</c><03:42:54.720><c> line</c><03:42:54.960><c> of</c>

03:42:55.110 --> 03:42:55.120 align:start position:0%
it so this will read a single line of
 

03:42:55.120 --> 03:42:57.910 align:start position:0%
it so this will read a single line of
text<03:42:55.760><c> and</c><03:42:55.840><c> then</c><03:42:56.080><c> let's</c><03:42:56.319><c> print</c><03:42:56.720><c> our</c><03:42:56.880><c> buffer</c><03:42:57.680><c> so</c>

03:42:57.910 --> 03:42:57.920 align:start position:0%
text and then let's print our buffer so
 

03:42:57.920 --> 03:43:00.389 align:start position:0%
text and then let's print our buffer so
we're<03:42:58.160><c> printing</c><03:42:58.880><c> a</c><03:42:59.040><c> string</c><03:42:59.840><c> and</c><03:43:00.080><c> we</c><03:43:00.239><c> are</c>

03:43:00.389 --> 03:43:00.399 align:start position:0%
we're printing a string and we are
 

03:43:00.399 --> 03:43:02.150 align:start position:0%
we're printing a string and we are
displaying<03:43:00.880><c> whatever</c><03:43:01.279><c> is</c><03:43:01.439><c> currently</c><03:43:01.840><c> within</c>

03:43:02.150 --> 03:43:02.160 align:start position:0%
displaying whatever is currently within
 

03:43:02.160 --> 03:43:03.349 align:start position:0%
displaying whatever is currently within
our<03:43:02.319><c> buffer</c>

03:43:03.349 --> 03:43:03.359 align:start position:0%
our buffer
 

03:43:03.359 --> 03:43:05.510 align:start position:0%
our buffer
so<03:43:03.600><c> after</c><03:43:03.920><c> running</c><03:43:04.160><c> this</c><03:43:04.560><c> this</c><03:43:04.720><c> will</c><03:43:04.960><c> read</c><03:43:05.279><c> a</c>

03:43:05.510 --> 03:43:05.520 align:start position:0%
so after running this this will read a
 

03:43:05.520 --> 03:43:07.510 align:start position:0%
so after running this this will read a
single<03:43:06.000><c> line</c><03:43:06.239><c> of</c><03:43:06.399><c> text</c><03:43:06.800><c> whatever's</c><03:43:07.279><c> at</c><03:43:07.439><c> the</c>

03:43:07.510 --> 03:43:07.520 align:start position:0%
single line of text whatever's at the
 

03:43:07.520 --> 03:43:08.469 align:start position:0%
single line of text whatever's at the
top

03:43:08.469 --> 03:43:08.479 align:start position:0%
top
 

03:43:08.479 --> 03:43:10.229 align:start position:0%
top
roses<03:43:09.120><c> are</c><03:43:09.359><c> red</c>

03:43:10.229 --> 03:43:10.239 align:start position:0%
roses are red
 

03:43:10.239 --> 03:43:11.830 align:start position:0%
roses are red
now<03:43:10.479><c> if</c><03:43:10.640><c> i</c><03:43:10.720><c> need</c><03:43:10.880><c> to</c><03:43:11.040><c> read</c><03:43:11.439><c> all</c><03:43:11.600><c> of</c><03:43:11.680><c> the</c>

03:43:11.830 --> 03:43:11.840 align:start position:0%
now if i need to read all of the
 

03:43:11.840 --> 03:43:14.550 align:start position:0%
now if i need to read all of the
contents<03:43:12.560><c> of</c><03:43:12.720><c> my</c><03:43:12.960><c> file</c><03:43:13.600><c> i</c><03:43:13.680><c> can</c><03:43:13.920><c> place</c><03:43:14.399><c> this</c>

03:43:14.550 --> 03:43:14.560 align:start position:0%
contents of my file i can place this
 

03:43:14.560 --> 03:43:20.389 align:start position:0%
contents of my file i can place this
section<03:43:14.960><c> of</c><03:43:15.040><c> code</c><03:43:15.279><c> within</c><03:43:15.680><c> a</c><03:43:15.840><c> while</c><03:43:16.160><c> loop</c>

03:43:20.389 --> 03:43:20.399 align:start position:0%
 
 

03:43:20.399 --> 03:43:22.550 align:start position:0%
 
so<03:43:20.640><c> with</c><03:43:20.880><c> our</c><03:43:20.960><c> condition</c><03:43:21.600><c> i'm</c><03:43:21.760><c> going</c><03:43:22.000><c> to</c><03:43:22.160><c> move</c>

03:43:22.550 --> 03:43:22.560 align:start position:0%
so with our condition i'm going to move
 

03:43:22.560 --> 03:43:25.590 align:start position:0%
so with our condition i'm going to move
the<03:43:22.880><c> f</c><03:43:23.040><c> gets</c><03:43:23.359><c> function</c><03:43:24.080><c> within</c><03:43:24.560><c> the</c><03:43:24.720><c> condition</c>

03:43:25.590 --> 03:43:25.600 align:start position:0%
the f gets function within the condition
 

03:43:25.600 --> 03:43:27.830 align:start position:0%
the f gets function within the condition
if<03:43:25.760><c> we</c><03:43:26.000><c> reach</c><03:43:26.319><c> the</c><03:43:26.479><c> end</c><03:43:26.560><c> of</c><03:43:26.720><c> a</c><03:43:26.880><c> file</c><03:43:27.359><c> f</c><03:43:27.520><c> gets</c>

03:43:27.830 --> 03:43:27.840 align:start position:0%
if we reach the end of a file f gets
 

03:43:27.840 --> 03:43:30.469 align:start position:0%
if we reach the end of a file f gets
will<03:43:28.080><c> return</c><03:43:28.800><c> null</c><03:43:29.359><c> so</c><03:43:29.600><c> let's</c><03:43:29.840><c> continue</c><03:43:30.319><c> this</c>

03:43:30.469 --> 03:43:30.479 align:start position:0%
will return null so let's continue this
 

03:43:30.479 --> 03:43:34.150 align:start position:0%
will return null so let's continue this
while<03:43:30.800><c> loop</c><03:43:31.120><c> while</c><03:43:31.600><c> f</c><03:43:31.760><c> gets</c><03:43:32.479><c> does</c><03:43:32.800><c> not</c><03:43:33.199><c> return</c>

03:43:34.150 --> 03:43:34.160 align:start position:0%
while loop while f gets does not return
 

03:43:34.160 --> 03:43:36.950 align:start position:0%
while loop while f gets does not return
no<03:43:34.880><c> if</c><03:43:35.120><c> we</c><03:43:35.279><c> do</c><03:43:35.439><c> not</c><03:43:35.600><c> return</c><03:43:36.000><c> null</c><03:43:36.399><c> then</c><03:43:36.560><c> we</c><03:43:36.720><c> will</c>

03:43:36.950 --> 03:43:36.960 align:start position:0%
no if we do not return null then we will
 

03:43:36.960 --> 03:43:39.349 align:start position:0%
no if we do not return null then we will
print<03:43:37.359><c> whatever's</c><03:43:37.840><c> within</c><03:43:38.239><c> our</c><03:43:38.319><c> buffer</c><03:43:39.120><c> now</c>

03:43:39.349 --> 03:43:39.359 align:start position:0%
print whatever's within our buffer now
 

03:43:39.359 --> 03:43:41.670 align:start position:0%
print whatever's within our buffer now
if<03:43:39.520><c> i</c><03:43:39.680><c> run</c><03:43:39.920><c> this</c><03:43:40.399><c> this</c><03:43:40.560><c> will</c><03:43:40.800><c> display</c><03:43:41.359><c> all</c><03:43:41.520><c> of</c>

03:43:41.670 --> 03:43:41.680 align:start position:0%
if i run this this will display all of
 

03:43:41.680 --> 03:43:44.630 align:start position:0%
if i run this this will display all of
the<03:43:41.840><c> lines</c><03:43:42.319><c> from</c><03:43:42.560><c> my</c><03:43:42.800><c> file</c><03:43:43.600><c> roses</c><03:43:44.000><c> are</c><03:43:44.160><c> red</c>

03:43:44.630 --> 03:43:44.640 align:start position:0%
the lines from my file roses are red
 

03:43:44.640 --> 03:43:47.030 align:start position:0%
the lines from my file roses are red
violets<03:43:45.120><c> are</c><03:43:45.279><c> blue</c><03:43:45.920><c> booty</c><03:43:46.160><c> booty</c><03:43:46.479><c> booty</c><03:43:46.720><c> booty</c>

03:43:47.030 --> 03:43:47.040 align:start position:0%
violets are blue booty booty booty booty
 

03:43:47.040 --> 03:43:49.189 align:start position:0%
violets are blue booty booty booty booty
rocking<03:43:47.439><c> everywhere</c><03:43:48.319><c> and</c><03:43:48.479><c> if</c><03:43:48.560><c> you</c><03:43:48.720><c> would</c><03:43:48.880><c> like</c>

03:43:49.189 --> 03:43:49.199 align:start position:0%
rocking everywhere and if you would like
 

03:43:49.199 --> 03:43:50.389 align:start position:0%
rocking everywhere and if you would like
you<03:43:49.279><c> can</c><03:43:49.439><c> add</c><03:43:49.600><c> a</c><03:43:49.680><c> little</c><03:43:49.840><c> bit</c><03:43:50.000><c> of</c><03:43:50.080><c> file</c>

03:43:50.389 --> 03:43:50.399 align:start position:0%
you can add a little bit of file
 

03:43:50.399 --> 03:43:52.790 align:start position:0%
you can add a little bit of file
detection<03:43:51.040><c> so</c><03:43:51.279><c> before</c><03:43:51.680><c> we</c><03:43:51.840><c> reach</c><03:43:52.319><c> our</c><03:43:52.560><c> while</c>

03:43:52.790 --> 03:43:52.800 align:start position:0%
detection so before we reach our while
 

03:43:52.800 --> 03:43:54.870 align:start position:0%
detection so before we reach our while
loop<03:43:53.120><c> let's</c><03:43:53.359><c> check</c><03:43:53.600><c> to</c><03:43:53.760><c> see</c><03:43:54.000><c> if</c><03:43:54.160><c> that</c><03:43:54.399><c> file</c>

03:43:54.870 --> 03:43:54.880 align:start position:0%
loop let's check to see if that file
 

03:43:54.880 --> 03:43:57.269 align:start position:0%
loop let's check to see if that file
even<03:43:55.120><c> exists</c><03:43:55.760><c> before</c><03:43:56.080><c> we</c><03:43:56.239><c> attempt</c><03:43:56.720><c> to</c><03:43:56.960><c> open</c>

03:43:57.269 --> 03:43:57.279 align:start position:0%
even exists before we attempt to open
 

03:43:57.279 --> 03:43:59.590 align:start position:0%
even exists before we attempt to open
and<03:43:57.439><c> read</c><03:43:57.680><c> it</c><03:43:57.920><c> so</c><03:43:58.080><c> let's</c><03:43:58.399><c> check</c><03:43:58.560><c> to</c><03:43:58.720><c> see</c><03:43:59.040><c> if</c><03:43:59.359><c> our</c>

03:43:59.590 --> 03:43:59.600 align:start position:0%
and read it so let's check to see if our
 

03:43:59.600 --> 03:44:02.630 align:start position:0%
and read it so let's check to see if our
pointer<03:44:00.640><c> equals</c><03:44:01.279><c> no</c><03:44:01.760><c> if</c><03:44:01.920><c> it</c><03:44:02.080><c> is</c><03:44:02.239><c> null</c><03:44:02.479><c> that</c>

03:44:02.630 --> 03:44:02.640 align:start position:0%
pointer equals no if it is null that
 

03:44:02.640 --> 03:44:05.189 align:start position:0%
pointer equals no if it is null that
means<03:44:02.960><c> we</c><03:44:03.120><c> could</c><03:44:03.279><c> not</c><03:44:03.520><c> locate</c><03:44:04.000><c> this</c><03:44:04.239><c> file</c><03:44:04.960><c> so</c>

03:44:05.189 --> 03:44:05.199 align:start position:0%
means we could not locate this file so
 

03:44:05.199 --> 03:44:07.750 align:start position:0%
means we could not locate this file so
i'm<03:44:05.359><c> going</c><03:44:05.600><c> to</c><03:44:05.840><c> print</c>

03:44:07.750 --> 03:44:07.760 align:start position:0%
i'm going to print
 

03:44:07.760 --> 03:44:10.309 align:start position:0%
i'm going to print
unable<03:44:08.560><c> to</c><03:44:09.199><c> open</c>

03:44:10.309 --> 03:44:10.319 align:start position:0%
unable to open
 

03:44:10.319 --> 03:44:11.670 align:start position:0%
unable to open
file

03:44:11.670 --> 03:44:11.680 align:start position:0%
file
 

03:44:11.680 --> 03:44:14.469 align:start position:0%
file
and<03:44:11.920><c> we'll</c><03:44:12.080><c> create</c><03:44:12.319><c> an</c><03:44:12.479><c> else</c><03:44:12.640><c> statement</c>

03:44:14.469 --> 03:44:14.479 align:start position:0%
and we'll create an else statement
 

03:44:14.479 --> 03:44:17.349 align:start position:0%
and we'll create an else statement
else<03:44:15.279><c> let's</c><03:44:15.600><c> read</c><03:44:15.920><c> and</c><03:44:16.080><c> print</c><03:44:16.479><c> the</c><03:44:16.720><c> contents</c>

03:44:17.349 --> 03:44:17.359 align:start position:0%
else let's read and print the contents
 

03:44:17.359 --> 03:44:20.550 align:start position:0%
else let's read and print the contents
of<03:44:17.520><c> this</c><03:44:17.760><c> file</c>

03:44:20.550 --> 03:44:20.560 align:start position:0%
 
 

03:44:20.560 --> 03:44:22.389 align:start position:0%
 
okay<03:44:20.880><c> so</c><03:44:21.120><c> let's</c><03:44:21.279><c> say</c><03:44:21.520><c> i</c><03:44:21.680><c> get</c><03:44:21.920><c> the</c><03:44:22.160><c> file</c>

03:44:22.389 --> 03:44:22.399 align:start position:0%
okay so let's say i get the file
 

03:44:22.399 --> 03:44:24.150 align:start position:0%
okay so let's say i get the file
extension<03:44:22.960><c> wrong</c><03:44:23.359><c> let's</c><03:44:23.520><c> say</c><03:44:23.760><c> i'm</c><03:44:23.840><c> looking</c>

03:44:24.150 --> 03:44:24.160 align:start position:0%
extension wrong let's say i'm looking
 

03:44:24.160 --> 03:44:27.269 align:start position:0%
extension wrong let's say i'm looking
for<03:44:24.319><c> an</c><03:44:24.479><c> html</c><03:44:25.120><c> file</c><03:44:25.520><c> named</c><03:44:25.920><c> poem</c><03:44:26.640><c> and</c><03:44:26.880><c> i</c><03:44:27.040><c> try</c>

03:44:27.269 --> 03:44:27.279 align:start position:0%
for an html file named poem and i try
 

03:44:27.279 --> 03:44:28.550 align:start position:0%
for an html file named poem and i try
and<03:44:27.359><c> read</c><03:44:27.600><c> this</c>

03:44:28.550 --> 03:44:28.560 align:start position:0%
and read this
 

03:44:28.560 --> 03:44:30.389 align:start position:0%
and read this
unable<03:44:29.120><c> to</c><03:44:29.359><c> open</c><03:44:29.680><c> file</c>

03:44:30.389 --> 03:44:30.399 align:start position:0%
unable to open file
 

03:44:30.399 --> 03:44:33.030 align:start position:0%
unable to open file
but<03:44:30.640><c> if</c><03:44:30.720><c> we</c><03:44:30.960><c> are</c><03:44:31.199><c> able</c><03:44:31.439><c> to</c><03:44:31.680><c> locate</c><03:44:32.080><c> this</c><03:44:32.319><c> file</c>

03:44:33.030 --> 03:44:33.040 align:start position:0%
but if we are able to locate this file
 

03:44:33.040 --> 03:44:35.510 align:start position:0%
but if we are able to locate this file
we<03:44:33.279><c> will</c><03:44:33.520><c> open</c><03:44:33.840><c> it</c><03:44:34.160><c> and</c><03:44:34.399><c> read</c><03:44:34.560><c> the</c><03:44:34.720><c> contents</c>

03:44:35.510 --> 03:44:35.520 align:start position:0%
we will open it and read the contents
 

03:44:35.520 --> 03:44:37.590 align:start position:0%
we will open it and read the contents
and<03:44:35.680><c> then</c><03:44:35.920><c> close</c><03:44:36.160><c> this</c><03:44:36.399><c> file</c><03:44:37.040><c> so</c><03:44:37.359><c> yeah</c>

03:44:37.590 --> 03:44:37.600 align:start position:0%
and then close this file so yeah
 

03:44:37.600 --> 03:44:39.670 align:start position:0%
and then close this file so yeah
everybody<03:44:38.080><c> that</c><03:44:38.319><c> is</c><03:44:38.479><c> how</c><03:44:38.720><c> to</c><03:44:39.040><c> read</c><03:44:39.439><c> the</c>

03:44:39.670 --> 03:44:39.680 align:start position:0%
everybody that is how to read the
 

03:44:39.680 --> 03:44:42.389 align:start position:0%
everybody that is how to read the
contents<03:44:40.160><c> of</c><03:44:40.319><c> a</c><03:44:40.399><c> file</c><03:44:40.960><c> line</c><03:44:41.199><c> by</c><03:44:41.439><c> line</c><03:44:42.080><c> if</c><03:44:42.319><c> you</c>

03:44:42.389 --> 03:44:42.399 align:start position:0%
contents of a file line by line if you
 

03:44:42.399 --> 03:44:44.070 align:start position:0%
contents of a file line by line if you
found<03:44:42.640><c> this</c><03:44:42.800><c> video</c><03:44:43.040><c> helpful</c><03:44:43.520><c> please</c><03:44:43.760><c> be</c><03:44:43.920><c> sure</c>

03:44:44.070 --> 03:44:44.080 align:start position:0%
found this video helpful please be sure
 

03:44:44.080 --> 03:44:45.830 align:start position:0%
found this video helpful please be sure
to<03:44:44.239><c> help</c><03:44:44.479><c> me</c><03:44:44.640><c> out</c><03:44:44.800><c> by</c><03:44:45.120><c> smashing</c><03:44:45.520><c> that</c><03:44:45.680><c> like</c>

03:44:45.830 --> 03:44:45.840 align:start position:0%
to help me out by smashing that like
 

03:44:45.840 --> 03:44:47.670 align:start position:0%
to help me out by smashing that like
button<03:44:46.239><c> leave</c><03:44:46.399><c> a</c><03:44:46.479><c> random</c><03:44:46.800><c> comment</c><03:44:47.040><c> down</c><03:44:47.279><c> below</c>

03:44:47.670 --> 03:44:47.680 align:start position:0%
button leave a random comment down below
 

03:44:47.680 --> 03:44:49.349 align:start position:0%
button leave a random comment down below
and<03:44:47.920><c> subscribe</c><03:44:48.399><c> if</c><03:44:48.560><c> you'd</c><03:44:48.640><c> like</c><03:44:48.800><c> to</c><03:44:48.960><c> become</c><03:44:49.199><c> a</c>

03:44:49.349 --> 03:44:49.359 align:start position:0%
and subscribe if you'd like to become a
 

03:44:49.359 --> 03:44:51.510 align:start position:0%
and subscribe if you'd like to become a
fellow<03:44:49.680><c> bro</c>

03:44:51.510 --> 03:44:51.520 align:start position:0%
fellow bro
 

03:44:51.520 --> 03:44:53.670 align:start position:0%
fellow bro
oh<03:44:51.760><c> yeah</c><03:44:52.160><c> what's</c><03:44:52.399><c> going</c><03:44:52.640><c> on</c><03:44:52.800><c> everybody</c><03:44:53.359><c> it's</c>

03:44:53.670 --> 03:44:53.680 align:start position:0%
oh yeah what's going on everybody it's
 

03:44:53.680 --> 03:44:55.269 align:start position:0%
oh yeah what's going on everybody it's
you<03:44:53.760><c> bro</c><03:44:54.080><c> hope</c><03:44:54.239><c> you're</c><03:44:54.399><c> doing</c><03:44:54.640><c> well</c><03:44:55.040><c> and</c><03:44:55.199><c> in</c>

03:44:55.269 --> 03:44:55.279 align:start position:0%
you bro hope you're doing well and in
 

03:44:55.279 --> 03:44:56.870 align:start position:0%
you bro hope you're doing well and in
this<03:44:55.520><c> video</c><03:44:55.840><c> we're</c><03:44:56.000><c> going</c><03:44:56.160><c> to</c><03:44:56.239><c> create</c><03:44:56.560><c> a</c><03:44:56.640><c> game</c>

03:44:56.870 --> 03:44:56.880 align:start position:0%
this video we're going to create a game
 

03:44:56.880 --> 03:44:59.990 align:start position:0%
this video we're going to create a game
of<03:44:57.120><c> tic-tac-toe</c><03:44:58.160><c> so</c><03:44:58.640><c> sit</c><03:44:58.880><c> back</c><03:44:59.199><c> relax</c><03:44:59.840><c> and</c>

03:44:59.990 --> 03:45:00.000 align:start position:0%
of tic-tac-toe so sit back relax and
 

03:45:00.000 --> 03:45:03.189 align:start position:0%
of tic-tac-toe so sit back relax and
enjoy<03:45:00.399><c> the</c><03:45:00.560><c> show</c>

03:45:03.189 --> 03:45:03.199 align:start position:0%
 
 

03:45:03.199 --> 03:45:04.870 align:start position:0%
 
if<03:45:03.359><c> you</c><03:45:03.520><c> find</c><03:45:03.760><c> this</c><03:45:03.920><c> video</c><03:45:04.160><c> helpful</c><03:45:04.560><c> please</c>

03:45:04.870 --> 03:45:04.880 align:start position:0%
if you find this video helpful please
 

03:45:04.880 --> 03:45:07.830 align:start position:0%
if you find this video helpful please
remember<03:45:05.279><c> to</c><03:45:05.760><c> like</c><03:45:06.319><c> comment</c><03:45:06.960><c> and</c><03:45:07.199><c> subscribe</c>

03:45:07.830 --> 03:45:07.840 align:start position:0%
remember to like comment and subscribe
 

03:45:07.840 --> 03:45:09.750 align:start position:0%
remember to like comment and subscribe
your<03:45:08.160><c> support</c><03:45:08.560><c> will</c><03:45:08.720><c> help</c><03:45:08.960><c> keep</c><03:45:09.199><c> this</c><03:45:09.439><c> channel</c>

03:45:09.750 --> 03:45:09.760 align:start position:0%
your support will help keep this channel
 

03:45:09.760 --> 03:45:12.309 align:start position:0%
your support will help keep this channel
running<03:45:10.640><c> all</c><03:45:10.880><c> right</c><03:45:11.279><c> let's</c><03:45:11.520><c> begin</c><03:45:12.000><c> so</c><03:45:12.239><c> the</c>

03:45:12.309 --> 03:45:12.319 align:start position:0%
running all right let's begin so the
 

03:45:12.319 --> 03:45:13.750 align:start position:0%
running all right let's begin so the
first<03:45:12.640><c> thing</c><03:45:12.800><c> that</c><03:45:12.880><c> you're</c><03:45:13.040><c> going</c><03:45:13.120><c> to</c><03:45:13.279><c> need</c><03:45:13.600><c> is</c>

03:45:13.750 --> 03:45:13.760 align:start position:0%
first thing that you're going to need is
 

03:45:13.760 --> 03:45:15.910 align:start position:0%
first thing that you're going to need is
to<03:45:14.080><c> include</c><03:45:14.720><c> these</c><03:45:14.960><c> files</c><03:45:15.439><c> at</c><03:45:15.520><c> the</c><03:45:15.600><c> top</c><03:45:15.840><c> of</c>

03:45:15.910 --> 03:45:15.920 align:start position:0%
to include these files at the top of
 

03:45:15.920 --> 03:45:18.550 align:start position:0%
to include these files at the top of
your<03:45:16.160><c> c</c><03:45:16.399><c> program</c><03:45:17.120><c> and</c><03:45:17.359><c> we</c><03:45:17.520><c> will</c><03:45:17.760><c> create</c><03:45:18.160><c> seven</c>

03:45:18.550 --> 03:45:18.560 align:start position:0%
your c program and we will create seven
 

03:45:18.560 --> 03:45:20.790 align:start position:0%
your c program and we will create seven
different<03:45:18.960><c> function</c><03:45:19.359><c> prototypes</c><03:45:20.560><c> so</c><03:45:20.720><c> the</c>

03:45:20.790 --> 03:45:20.800 align:start position:0%
different function prototypes so the
 

03:45:20.800 --> 03:45:22.950 align:start position:0%
different function prototypes so the
return<03:45:21.279><c> type</c><03:45:21.520><c> of</c><03:45:21.680><c> this</c><03:45:21.840><c> first</c><03:45:22.160><c> function</c><03:45:22.640><c> is</c>

03:45:22.950 --> 03:45:22.960 align:start position:0%
return type of this first function is
 

03:45:22.960 --> 03:45:25.429 align:start position:0%
return type of this first function is
void<03:45:23.760><c> and</c><03:45:24.080><c> the</c><03:45:24.239><c> name</c><03:45:24.479><c> of</c><03:45:24.560><c> this</c><03:45:24.720><c> function</c><03:45:25.199><c> will</c>

03:45:25.429 --> 03:45:25.439 align:start position:0%
void and the name of this function will
 

03:45:25.439 --> 03:45:28.389 align:start position:0%
void and the name of this function will
be<03:45:25.760><c> reset</c><03:45:26.399><c> board</c><03:45:27.120><c> our</c><03:45:27.359><c> board</c><03:45:27.680><c> is</c><03:45:27.760><c> going</c><03:45:27.920><c> to</c><03:45:28.080><c> be</c>

03:45:28.389 --> 03:45:28.399 align:start position:0%
be reset board our board is going to be
 

03:45:28.399 --> 03:45:30.870 align:start position:0%
be reset board our board is going to be
a<03:45:28.560><c> 2d</c><03:45:28.960><c> character</c><03:45:29.439><c> array</c><03:45:30.160><c> and</c><03:45:30.399><c> our</c><03:45:30.560><c> second</c>

03:45:30.870 --> 03:45:30.880 align:start position:0%
a 2d character array and our second
 

03:45:30.880 --> 03:45:33.750 align:start position:0%
a 2d character array and our second
function<03:45:31.520><c> is</c><03:45:31.920><c> void</c><03:45:32.479><c> print</c><03:45:32.800><c> board</c>

03:45:33.750 --> 03:45:33.760 align:start position:0%
function is void print board
 

03:45:33.760 --> 03:45:36.469 align:start position:0%
function is void print board
which<03:45:34.000><c> will</c><03:45:34.239><c> print</c><03:45:34.720><c> our</c><03:45:35.040><c> 2d</c><03:45:35.359><c> character</c><03:45:35.840><c> array</c>

03:45:36.469 --> 03:45:36.479 align:start position:0%
which will print our 2d character array
 

03:45:36.479 --> 03:45:38.630 align:start position:0%
which will print our 2d character array
then<03:45:36.720><c> with</c><03:45:36.880><c> this</c><03:45:37.040><c> next</c><03:45:37.359><c> function</c><03:45:37.920><c> this</c><03:45:38.160><c> has</c><03:45:38.560><c> a</c>

03:45:38.630 --> 03:45:38.640 align:start position:0%
then with this next function this has a
 

03:45:38.640 --> 03:45:41.910 align:start position:0%
then with this next function this has a
return<03:45:39.120><c> type</c><03:45:39.359><c> event</c><03:45:40.160><c> and</c><03:45:40.399><c> this</c><03:45:40.640><c> will</c><03:45:41.120><c> check</c>

03:45:41.910 --> 03:45:41.920 align:start position:0%
return type event and this will check
 

03:45:41.920 --> 03:45:44.710 align:start position:0%
return type event and this will check
free<03:45:42.640><c> spaces</c>

03:45:44.710 --> 03:45:44.720 align:start position:0%
free spaces
 

03:45:44.720 --> 03:45:47.110 align:start position:0%
free spaces
if<03:45:45.040><c> after</c><03:45:45.439><c> invoking</c><03:45:46.000><c> this</c><03:45:46.319><c> function</c><03:45:46.880><c> this</c>

03:45:47.110 --> 03:45:47.120 align:start position:0%
if after invoking this function this
 

03:45:47.120 --> 03:45:49.429 align:start position:0%
if after invoking this function this
function<03:45:47.520><c> returns</c><03:45:48.160><c> zero</c><03:45:48.880><c> that</c><03:45:49.040><c> means</c><03:45:49.359><c> the</c>

03:45:49.429 --> 03:45:49.439 align:start position:0%
function returns zero that means the
 

03:45:49.439 --> 03:45:51.349 align:start position:0%
function returns zero that means the
game<03:45:49.680><c> is</c><03:45:49.840><c> over</c><03:45:50.160><c> there's</c><03:45:50.399><c> no</c><03:45:50.560><c> more</c><03:45:50.720><c> places</c><03:45:51.199><c> to</c>

03:45:51.349 --> 03:45:51.359 align:start position:0%
game is over there's no more places to
 

03:45:51.359 --> 03:45:54.630 align:start position:0%
game is over there's no more places to
move<03:45:51.840><c> and</c><03:45:52.160><c> we</c><03:45:52.319><c> will</c><03:45:52.479><c> need</c><03:45:53.199><c> void</c><03:45:53.920><c> player</c><03:45:54.239><c> move</c>

03:45:54.630 --> 03:45:54.640 align:start position:0%
move and we will need void player move
 

03:45:54.640 --> 03:45:57.670 align:start position:0%
move and we will need void player move
when<03:45:54.880><c> it's</c><03:45:55.040><c> the</c><03:45:55.199><c> player's</c><03:45:55.520><c> turn</c><03:45:55.760><c> to</c><03:45:55.920><c> move</c>

03:45:57.670 --> 03:45:57.680 align:start position:0%
when it's the player's turn to move
 

03:45:57.680 --> 03:46:00.150 align:start position:0%
when it's the player's turn to move
void<03:45:58.399><c> computer</c><03:45:58.960><c> move</c><03:45:59.520><c> when</c><03:45:59.760><c> it's</c><03:46:00.000><c> the</c>

03:46:00.150 --> 03:46:00.160 align:start position:0%
void computer move when it's the
 

03:46:00.160 --> 03:46:02.150 align:start position:0%
void computer move when it's the
computer's<03:46:00.640><c> turn</c><03:46:00.880><c> to</c><03:46:01.040><c> move</c>

03:46:02.150 --> 03:46:02.160 align:start position:0%
computer's turn to move
 

03:46:02.160 --> 03:46:03.189 align:start position:0%
computer's turn to move
char

03:46:03.189 --> 03:46:03.199 align:start position:0%
char
 

03:46:03.199 --> 03:46:04.950 align:start position:0%
char
check<03:46:03.760><c> winner</c>

03:46:04.950 --> 03:46:04.960 align:start position:0%
check winner
 

03:46:04.960 --> 03:46:06.469 align:start position:0%
check winner
so<03:46:05.120><c> we</c><03:46:05.359><c> have</c><03:46:05.600><c> a</c><03:46:05.760><c> few</c><03:46:06.000><c> different</c><03:46:06.239><c> win</c>

03:46:06.469 --> 03:46:06.479 align:start position:0%
so we have a few different win
 

03:46:06.479 --> 03:46:09.830 align:start position:0%
so we have a few different win
conditions<03:46:07.040><c> to</c><03:46:07.279><c> check</c><03:46:07.840><c> and</c><03:46:08.319><c> void</c><03:46:09.120><c> print</c>

03:46:09.830 --> 03:46:09.840 align:start position:0%
conditions to check and void print
 

03:46:09.840 --> 03:46:11.110 align:start position:0%
conditions to check and void print
winner

03:46:11.110 --> 03:46:11.120 align:start position:0%
winner
 

03:46:11.120 --> 03:46:13.750 align:start position:0%
winner
and<03:46:11.439><c> there</c><03:46:11.760><c> is</c><03:46:12.000><c> one</c><03:46:12.239><c> parameter</c><03:46:13.199><c> a</c><03:46:13.439><c> single</c>

03:46:13.750 --> 03:46:13.760 align:start position:0%
and there is one parameter a single
 

03:46:13.760 --> 03:46:16.150 align:start position:0%
and there is one parameter a single
character<03:46:14.399><c> soap</c><03:46:14.720><c> char</c><03:46:15.439><c> so</c><03:46:15.680><c> these</c><03:46:16.000><c> are</c>

03:46:16.150 --> 03:46:16.160 align:start position:0%
character soap char so these are
 

03:46:16.160 --> 03:46:18.309 align:start position:0%
character soap char so these are
function<03:46:16.560><c> prototypes</c><03:46:17.439><c> we</c><03:46:17.680><c> tend</c><03:46:17.840><c> to</c><03:46:17.920><c> declare</c>

03:46:18.309 --> 03:46:18.319 align:start position:0%
function prototypes we tend to declare
 

03:46:18.319 --> 03:46:20.070 align:start position:0%
function prototypes we tend to declare
these<03:46:18.560><c> before</c><03:46:18.800><c> the</c><03:46:18.960><c> main</c><03:46:19.199><c> function</c><03:46:19.760><c> because</c>

03:46:20.070 --> 03:46:20.080 align:start position:0%
these before the main function because
 

03:46:20.080 --> 03:46:22.070 align:start position:0%
these before the main function because
they<03:46:20.239><c> help</c><03:46:20.479><c> with</c><03:46:20.720><c> readability</c><03:46:21.600><c> after</c><03:46:21.920><c> the</c>

03:46:22.070 --> 03:46:22.080 align:start position:0%
they help with readability after the
 

03:46:22.080 --> 03:46:23.830 align:start position:0%
they help with readability after the
main<03:46:22.319><c> function</c><03:46:22.720><c> we</c><03:46:22.880><c> will</c><03:46:23.040><c> give</c><03:46:23.279><c> each</c><03:46:23.520><c> of</c><03:46:23.600><c> these</c>

03:46:23.830 --> 03:46:23.840 align:start position:0%
main function we will give each of these
 

03:46:23.840 --> 03:46:25.750 align:start position:0%
main function we will give each of these
a<03:46:23.920><c> body</c>

03:46:25.750 --> 03:46:25.760 align:start position:0%
a body
 

03:46:25.760 --> 03:46:28.469 align:start position:0%
a body
so<03:46:26.160><c> copy</c><03:46:26.640><c> and</c><03:46:26.720><c> paste</c><03:46:27.120><c> those</c><03:46:27.359><c> functions</c><03:46:28.319><c> and</c>

03:46:28.469 --> 03:46:28.479 align:start position:0%
so copy and paste those functions and
 

03:46:28.479 --> 03:46:35.189 align:start position:0%
so copy and paste those functions and
then<03:46:28.720><c> give</c><03:46:29.040><c> each</c><03:46:29.359><c> a</c><03:46:29.520><c> body</c>

03:46:35.189 --> 03:46:35.199 align:start position:0%
 
 

03:46:35.199 --> 03:46:37.510 align:start position:0%
 
and<03:46:35.439><c> with</c><03:46:35.600><c> the</c><03:46:35.840><c> parameter</c><03:46:36.399><c> for</c><03:46:36.560><c> print</c><03:46:36.880><c> winner</c>

03:46:37.510 --> 03:46:37.520 align:start position:0%
and with the parameter for print winner
 

03:46:37.520 --> 03:46:39.830 align:start position:0%
and with the parameter for print winner
the<03:46:37.680><c> parameter</c><03:46:38.319><c> is</c><03:46:38.800><c> char</c>

03:46:39.830 --> 03:46:39.840 align:start position:0%
the parameter is char
 

03:46:39.840 --> 03:46:41.990 align:start position:0%
the parameter is char
winner<03:46:40.560><c> now</c><03:46:40.800><c> let's</c><03:46:41.040><c> head</c><03:46:41.199><c> back</c><03:46:41.359><c> to</c><03:46:41.520><c> the</c><03:46:41.600><c> top</c><03:46:41.840><c> of</c>

03:46:41.990 --> 03:46:42.000 align:start position:0%
winner now let's head back to the top of
 

03:46:42.000 --> 03:46:44.070 align:start position:0%
winner now let's head back to the top of
our<03:46:42.160><c> program</c><03:46:42.720><c> and</c><03:46:42.960><c> there's</c><03:46:43.279><c> a</c><03:46:43.439><c> few</c><03:46:43.680><c> global</c>

03:46:44.070 --> 03:46:44.080 align:start position:0%
our program and there's a few global
 

03:46:44.080 --> 03:46:46.070 align:start position:0%
our program and there's a few global
variables<03:46:44.560><c> that</c><03:46:44.640><c> we're</c><03:46:44.800><c> going</c><03:46:44.960><c> to</c><03:46:45.120><c> declare</c><03:46:45.920><c> we</c>

03:46:46.070 --> 03:46:46.080 align:start position:0%
variables that we're going to declare we
 

03:46:46.080 --> 03:46:47.910 align:start position:0%
variables that we're going to declare we
could<03:46:46.239><c> declare</c><03:46:46.640><c> these</c><03:46:46.880><c> as</c><03:46:47.120><c> local</c><03:46:47.439><c> variables</c>

03:46:47.910 --> 03:46:47.920 align:start position:0%
could declare these as local variables
 

03:46:47.920 --> 03:46:49.510 align:start position:0%
could declare these as local variables
within<03:46:48.239><c> the</c><03:46:48.319><c> main</c><03:46:48.560><c> function</c><03:46:49.120><c> but</c><03:46:49.359><c> this</c>

03:46:49.510 --> 03:46:49.520 align:start position:0%
within the main function but this
 

03:46:49.520 --> 03:46:50.950 align:start position:0%
within the main function but this
program<03:46:50.000><c> is</c><03:46:50.080><c> going</c><03:46:50.239><c> to</c><03:46:50.399><c> get</c><03:46:50.640><c> really</c>

03:46:50.950 --> 03:46:50.960 align:start position:0%
program is going to get really
 

03:46:50.960 --> 03:46:52.469 align:start position:0%
program is going to get really
complicated<03:46:51.439><c> then</c><03:46:51.760><c> if</c><03:46:51.840><c> we</c><03:46:52.000><c> have</c><03:46:52.080><c> to</c><03:46:52.160><c> pass</c>

03:46:52.469 --> 03:46:52.479 align:start position:0%
complicated then if we have to pass
 

03:46:52.479 --> 03:46:54.550 align:start position:0%
complicated then if we have to pass
around<03:46:52.880><c> pointers</c><03:46:53.439><c> to</c><03:46:53.680><c> a</c><03:46:53.840><c> two-dimensional</c>

03:46:54.550 --> 03:46:54.560 align:start position:0%
around pointers to a two-dimensional
 

03:46:54.560 --> 03:46:56.710 align:start position:0%
around pointers to a two-dimensional
array<03:46:55.120><c> so</c><03:46:55.439><c> just</c><03:46:55.600><c> to</c><03:46:55.760><c> keep</c><03:46:56.000><c> this</c><03:46:56.239><c> simple</c><03:46:56.560><c> i'm</c>

03:46:56.710 --> 03:46:56.720 align:start position:0%
array so just to keep this simple i'm
 

03:46:56.720 --> 03:46:58.870 align:start position:0%
array so just to keep this simple i'm
going<03:46:56.960><c> to</c><03:46:57.040><c> create</c><03:46:57.359><c> some</c><03:46:57.600><c> global</c><03:46:57.920><c> variables</c>

03:46:58.870 --> 03:46:58.880 align:start position:0%
going to create some global variables
 

03:46:58.880 --> 03:47:00.469 align:start position:0%
going to create some global variables
there<03:46:59.120><c> are</c><03:46:59.279><c> some</c><03:46:59.439><c> downsides</c><03:47:00.000><c> to</c><03:47:00.160><c> global</c>

03:47:00.469 --> 03:47:00.479 align:start position:0%
there are some downsides to global
 

03:47:00.479 --> 03:47:02.070 align:start position:0%
there are some downsides to global
variables<03:47:00.960><c> so</c><03:47:01.120><c> i</c><03:47:01.199><c> tend</c><03:47:01.439><c> to</c><03:47:01.520><c> not</c><03:47:01.680><c> to</c><03:47:01.840><c> like</c><03:47:02.000><c> to</c>

03:47:02.070 --> 03:47:02.080 align:start position:0%
variables so i tend to not to like to
 

03:47:02.080 --> 03:47:04.710 align:start position:0%
variables so i tend to not to like to
use<03:47:02.399><c> these</c><03:47:02.880><c> so</c><03:47:03.040><c> we</c><03:47:03.199><c> have</c><03:47:03.520><c> a</c><03:47:03.840><c> 2d</c><03:47:04.239><c> array</c><03:47:04.560><c> of</c>

03:47:04.710 --> 03:47:04.720 align:start position:0%
use these so we have a 2d array of
 

03:47:04.720 --> 03:47:06.870 align:start position:0%
use these so we have a 2d array of
characters<03:47:05.359><c> named</c><03:47:05.760><c> board</c><03:47:06.239><c> it's</c><03:47:06.479><c> our</c><03:47:06.640><c> game</c>

03:47:06.870 --> 03:47:06.880 align:start position:0%
characters named board it's our game
 

03:47:06.880 --> 03:47:09.510 align:start position:0%
characters named board it's our game
board<03:47:07.520><c> and</c><03:47:07.840><c> let's</c><03:47:08.080><c> create</c><03:47:08.399><c> two</c><03:47:08.640><c> constants</c>

03:47:09.510 --> 03:47:09.520 align:start position:0%
board and let's create two constants
 

03:47:09.520 --> 03:47:12.710 align:start position:0%
board and let's create two constants
constant<03:47:10.399><c> char</c><03:47:11.120><c> player</c><03:47:11.760><c> a</c><03:47:11.920><c> naming</c><03:47:12.239><c> convention</c>

03:47:12.710 --> 03:47:12.720 align:start position:0%
constant char player a naming convention
 

03:47:12.720 --> 03:47:14.630 align:start position:0%
constant char player a naming convention
for<03:47:12.960><c> constants</c><03:47:13.600><c> is</c><03:47:13.760><c> to</c><03:47:13.920><c> make</c><03:47:14.239><c> all</c><03:47:14.399><c> of</c><03:47:14.479><c> the</c>

03:47:14.630 --> 03:47:14.640 align:start position:0%
for constants is to make all of the
 

03:47:14.640 --> 03:47:16.229 align:start position:0%
for constants is to make all of the
letters<03:47:15.040><c> uppercase</c>

03:47:16.229 --> 03:47:16.239 align:start position:0%
letters uppercase
 

03:47:16.239 --> 03:47:18.309 align:start position:0%
letters uppercase
and<03:47:16.399><c> i</c><03:47:16.479><c> will</c><03:47:16.720><c> set</c><03:47:16.880><c> this</c><03:47:17.120><c> to</c><03:47:17.439><c> a</c><03:47:17.600><c> character</c><03:47:18.080><c> of</c><03:47:18.160><c> my</c>

03:47:18.309 --> 03:47:18.319 align:start position:0%
and i will set this to a character of my
 

03:47:18.319 --> 03:47:21.269 align:start position:0%
and i will set this to a character of my
choice<03:47:18.720><c> i</c><03:47:18.960><c> could</c><03:47:19.199><c> be</c><03:47:19.439><c> oh</c><03:47:19.840><c> or</c><03:47:20.080><c> i</c><03:47:20.160><c> could</c><03:47:20.319><c> be</c><03:47:20.560><c> x</c><03:47:21.040><c> or</c>

03:47:21.269 --> 03:47:21.279 align:start position:0%
choice i could be oh or i could be x or
 

03:47:21.279 --> 03:47:23.030 align:start position:0%
choice i could be oh or i could be x or
something<03:47:21.600><c> else</c><03:47:22.000><c> maybe</c><03:47:22.319><c> i</c><03:47:22.399><c> could</c><03:47:22.479><c> be</c><03:47:22.560><c> a</c><03:47:22.640><c> dollar</c>

03:47:23.030 --> 03:47:23.040 align:start position:0%
something else maybe i could be a dollar
 

03:47:23.040 --> 03:47:25.429 align:start position:0%
something else maybe i could be a dollar
sign<03:47:23.439><c> whatever</c><03:47:24.160><c> uh</c><03:47:24.319><c> i'll</c><03:47:24.560><c> set</c><03:47:24.800><c> myself</c><03:47:25.120><c> to</c><03:47:25.279><c> be</c>

03:47:25.429 --> 03:47:25.439 align:start position:0%
sign whatever uh i'll set myself to be
 

03:47:25.439 --> 03:47:28.150 align:start position:0%
sign whatever uh i'll set myself to be
an<03:47:25.600><c> x</c><03:47:26.319><c> and</c><03:47:26.560><c> then</c><03:47:26.880><c> let's</c><03:47:27.199><c> create</c><03:47:27.520><c> a</c><03:47:27.760><c> constant</c>

03:47:28.150 --> 03:47:28.160 align:start position:0%
an x and then let's create a constant
 

03:47:28.160 --> 03:47:31.110 align:start position:0%
an x and then let's create a constant
for<03:47:28.319><c> the</c><03:47:28.399><c> computer</c><03:47:29.279><c> constant</c><03:47:30.000><c> char</c>

03:47:31.110 --> 03:47:31.120 align:start position:0%
for the computer constant char
 

03:47:31.120 --> 03:47:34.469 align:start position:0%
for the computer constant char
computer<03:47:32.080><c> and</c><03:47:32.239><c> computers</c><03:47:32.960><c> will</c><03:47:33.279><c> be</c><03:47:33.680><c> o</c><03:47:34.239><c> so</c>

03:47:34.469 --> 03:47:34.479 align:start position:0%
computer and computers will be o so
 

03:47:34.479 --> 03:47:37.030 align:start position:0%
computer and computers will be o so
within<03:47:34.960><c> the</c><03:47:35.120><c> main</c><03:47:35.359><c> function</c><03:47:36.000><c> we</c><03:47:36.239><c> will</c><03:47:36.479><c> declare</c>

03:47:37.030 --> 03:47:37.040 align:start position:0%
within the main function we will declare
 

03:47:37.040 --> 03:47:39.670 align:start position:0%
within the main function we will declare
a<03:47:37.279><c> local</c><03:47:37.840><c> variable</c><03:47:38.720><c> char</c>

03:47:39.670 --> 03:47:39.680 align:start position:0%
a local variable char
 

03:47:39.680 --> 03:47:40.630 align:start position:0%
a local variable char
winner

03:47:40.630 --> 03:47:40.640 align:start position:0%
winner
 

03:47:40.640 --> 03:47:42.790 align:start position:0%
winner
and<03:47:40.800><c> i'll</c><03:47:41.040><c> go</c><03:47:41.199><c> ahead</c><03:47:41.520><c> and</c><03:47:41.760><c> set</c><03:47:42.000><c> this</c><03:47:42.319><c> to</c><03:47:42.560><c> an</c>

03:47:42.790 --> 03:47:42.800 align:start position:0%
and i'll go ahead and set this to an
 

03:47:42.800 --> 03:47:45.510 align:start position:0%
and i'll go ahead and set this to an
empty<03:47:43.040><c> space</c><03:47:43.920><c> so</c><03:47:44.239><c> if</c><03:47:44.399><c> our</c><03:47:44.560><c> winner</c><03:47:44.960><c> is</c><03:47:45.040><c> in</c><03:47:45.199><c> empty</c>

03:47:45.510 --> 03:47:45.520 align:start position:0%
empty space so if our winner is in empty
 

03:47:45.520 --> 03:47:47.670 align:start position:0%
empty space so if our winner is in empty
space<03:47:46.160><c> that</c><03:47:46.399><c> means</c><03:47:46.720><c> there</c><03:47:46.880><c> currently</c><03:47:47.359><c> is</c><03:47:47.520><c> no</c>

03:47:47.670 --> 03:47:47.680 align:start position:0%
space that means there currently is no
 

03:47:47.680 --> 03:47:50.389 align:start position:0%
space that means there currently is no
winner<03:47:48.399><c> if</c><03:47:48.640><c> player</c><03:47:49.040><c> wins</c><03:47:49.520><c> then</c><03:47:49.680><c> that</c><03:47:49.920><c> would</c><03:47:50.080><c> be</c>

03:47:50.389 --> 03:47:50.399 align:start position:0%
winner if player wins then that would be
 

03:47:50.399 --> 03:47:53.910 align:start position:0%
winner if player wins then that would be
an<03:47:50.640><c> x</c><03:47:51.279><c> if</c><03:47:51.439><c> computer</c><03:47:51.920><c> wins</c><03:47:52.479><c> that's</c><03:47:52.800><c> a</c><03:47:52.880><c> no</c><03:47:53.520><c> within</c>

03:47:53.910 --> 03:47:53.920 align:start position:0%
an x if computer wins that's a no within
 

03:47:53.920 --> 03:47:55.830 align:start position:0%
an x if computer wins that's a no within
our<03:47:54.000><c> main</c><03:47:54.239><c> function</c><03:47:54.720><c> this</c><03:47:54.960><c> is</c><03:47:55.120><c> acting</c><03:47:55.439><c> as</c><03:47:55.680><c> a</c>

03:47:55.830 --> 03:47:55.840 align:start position:0%
our main function this is acting as a
 

03:47:55.840 --> 03:47:57.990 align:start position:0%
our main function this is acting as a
driver<03:47:56.319><c> for</c><03:47:56.560><c> our</c><03:47:56.720><c> code</c><03:47:57.359><c> so</c><03:47:57.520><c> the</c><03:47:57.600><c> first</c><03:47:57.840><c> thing</c>

03:47:57.990 --> 03:47:58.000 align:start position:0%
driver for our code so the first thing
 

03:47:58.000 --> 03:48:01.670 align:start position:0%
driver for our code so the first thing
we'll<03:47:58.239><c> do</c><03:47:58.560><c> is</c><03:47:58.800><c> reset</c><03:47:59.279><c> our</c><03:47:59.520><c> board</c>

03:48:01.670 --> 03:48:01.680 align:start position:0%
we'll do is reset our board
 

03:48:01.680 --> 03:48:03.750 align:start position:0%
we'll do is reset our board
so<03:48:01.840><c> we</c><03:48:02.000><c> are</c><03:48:02.160><c> going</c><03:48:02.319><c> to</c><03:48:02.479><c> initialize</c><03:48:03.359><c> all</c><03:48:03.520><c> of</c><03:48:03.600><c> the</c>

03:48:03.750 --> 03:48:03.760 align:start position:0%
so we are going to initialize all of the
 

03:48:03.760 --> 03:48:05.349 align:start position:0%
so we are going to initialize all of the
different<03:48:04.160><c> characters</c><03:48:04.720><c> within</c><03:48:05.199><c> our</c>

03:48:05.349 --> 03:48:05.359 align:start position:0%
different characters within our
 

03:48:05.359 --> 03:48:07.429 align:start position:0%
different characters within our
two-dimensional<03:48:06.160><c> board</c><03:48:06.720><c> so</c><03:48:06.960><c> let's</c><03:48:07.120><c> head</c><03:48:07.359><c> to</c>

03:48:07.429 --> 03:48:07.439 align:start position:0%
two-dimensional board so let's head to
 

03:48:07.439 --> 03:48:09.429 align:start position:0%
two-dimensional board so let's head to
this<03:48:07.600><c> function</c>

03:48:09.429 --> 03:48:09.439 align:start position:0%
this function
 

03:48:09.439 --> 03:48:12.229 align:start position:0%
this function
so<03:48:09.680><c> with</c><03:48:10.000><c> our</c><03:48:10.239><c> reset</c><03:48:10.720><c> board</c><03:48:11.040><c> function</c><03:48:11.600><c> we</c><03:48:11.840><c> need</c>

03:48:12.229 --> 03:48:12.239 align:start position:0%
so with our reset board function we need
 

03:48:12.239 --> 03:48:15.269 align:start position:0%
so with our reset board function we need
nested<03:48:12.720><c> loops</c>

03:48:15.269 --> 03:48:15.279 align:start position:0%
nested loops
 

03:48:15.279 --> 03:48:17.750 align:start position:0%
nested loops
the<03:48:15.439><c> outer</c><03:48:15.760><c> for</c><03:48:16.000><c> loop</c><03:48:16.319><c> is</c><03:48:16.479><c> for</c><03:48:16.720><c> the</c><03:48:16.960><c> rows</c><03:48:17.600><c> the</c>

03:48:17.750 --> 03:48:17.760 align:start position:0%
the outer for loop is for the rows the
 

03:48:17.760 --> 03:48:20.070 align:start position:0%
the outer for loop is for the rows the
inner<03:48:18.000><c> for</c><03:48:18.239><c> loop</c><03:48:18.560><c> will</c><03:48:18.800><c> be</c><03:48:18.960><c> for</c><03:48:19.120><c> the</c><03:48:19.199><c> columns</c>

03:48:20.070 --> 03:48:20.080 align:start position:0%
inner for loop will be for the columns
 

03:48:20.080 --> 03:48:22.710 align:start position:0%
inner for loop will be for the columns
int<03:48:20.479><c> i</c><03:48:20.800><c> set</c><03:48:20.960><c> this</c><03:48:21.199><c> equal</c><03:48:21.439><c> to</c><03:48:21.600><c> zero</c><03:48:22.239><c> and</c><03:48:22.399><c> i</c><03:48:22.560><c> need</c>

03:48:22.710 --> 03:48:22.720 align:start position:0%
int i set this equal to zero and i need
 

03:48:22.720 --> 03:48:25.189 align:start position:0%
int i set this equal to zero and i need
to<03:48:22.960><c> iterate</c><03:48:23.439><c> this</c><03:48:23.600><c> for</c><03:48:23.920><c> loop</c><03:48:24.239><c> three</c><03:48:24.479><c> times</c><03:48:24.960><c> one</c>

03:48:25.189 --> 03:48:25.199 align:start position:0%
to iterate this for loop three times one
 

03:48:25.199 --> 03:48:27.269 align:start position:0%
to iterate this for loop three times one
for<03:48:25.439><c> each</c><03:48:25.680><c> row</c><03:48:25.920><c> that</c><03:48:26.080><c> we</c><03:48:26.239><c> have</c>

03:48:27.269 --> 03:48:27.279 align:start position:0%
for each row that we have
 

03:48:27.279 --> 03:48:31.269 align:start position:0%
for each row that we have
and<03:48:27.520><c> then</c><03:48:27.760><c> we</c><03:48:28.000><c> need</c><03:48:28.239><c> an</c><03:48:28.479><c> inner</c><03:48:28.720><c> for</c><03:48:28.960><c> loop</c>

03:48:31.269 --> 03:48:31.279 align:start position:0%
and then we need an inner for loop
 

03:48:31.279 --> 03:48:35.110 align:start position:0%
and then we need an inner for loop
so<03:48:31.600><c> change</c><03:48:32.080><c> the</c><03:48:32.479><c> index</c><03:48:32.960><c> to</c><03:48:33.199><c> j</c>

03:48:35.110 --> 03:48:35.120 align:start position:0%
so change the index to j
 

03:48:35.120 --> 03:48:38.309 align:start position:0%
so change the index to j
and<03:48:35.520><c> for</c><03:48:35.760><c> each</c><03:48:36.160><c> index</c><03:48:36.560><c> within</c><03:48:37.040><c> our</c><03:48:37.279><c> 2d</c><03:48:37.680><c> array</c>

03:48:38.309 --> 03:48:38.319 align:start position:0%
and for each index within our 2d array
 

03:48:38.319 --> 03:48:40.070 align:start position:0%
and for each index within our 2d array
at<03:48:38.640><c> index</c><03:48:39.120><c> of</c><03:48:39.359><c> i</c>

03:48:40.070 --> 03:48:40.080 align:start position:0%
at index of i
 

03:48:40.080 --> 03:48:42.870 align:start position:0%
at index of i
and<03:48:40.319><c> j</c><03:48:40.960><c> i</c><03:48:41.120><c> will</c><03:48:41.279><c> set</c><03:48:41.439><c> the</c><03:48:41.600><c> sequel</c><03:48:42.000><c> to</c><03:48:42.399><c> an</c><03:48:42.640><c> empty</c>

03:48:42.870 --> 03:48:42.880 align:start position:0%
and j i will set the sequel to an empty
 

03:48:42.880 --> 03:48:44.070 align:start position:0%
and j i will set the sequel to an empty
space

03:48:44.070 --> 03:48:44.080 align:start position:0%
space
 

03:48:44.080 --> 03:48:46.630 align:start position:0%
space
so<03:48:44.319><c> when</c><03:48:44.560><c> we</c><03:48:44.720><c> call</c><03:48:44.960><c> the</c><03:48:45.120><c> reset</c><03:48:45.520><c> board</c><03:48:45.840><c> function</c>

03:48:46.630 --> 03:48:46.640 align:start position:0%
so when we call the reset board function
 

03:48:46.640 --> 03:48:49.189 align:start position:0%
so when we call the reset board function
each<03:48:46.960><c> element</c><03:48:47.359><c> within</c><03:48:47.920><c> this</c><03:48:48.239><c> 2d</c><03:48:48.640><c> array</c><03:48:49.040><c> of</c>

03:48:49.189 --> 03:48:49.199 align:start position:0%
each element within this 2d array of
 

03:48:49.199 --> 03:48:51.590 align:start position:0%
each element within this 2d array of
characters<03:48:50.080><c> will</c><03:48:50.239><c> be</c><03:48:50.319><c> an</c><03:48:50.479><c> empty</c><03:48:50.800><c> space</c>

03:48:51.590 --> 03:48:51.600 align:start position:0%
characters will be an empty space
 

03:48:51.600 --> 03:48:53.429 align:start position:0%
characters will be an empty space
effectively<03:48:52.239><c> clearing</c><03:48:52.720><c> it</c>

03:48:53.429 --> 03:48:53.439 align:start position:0%
effectively clearing it
 

03:48:53.439 --> 03:48:55.590 align:start position:0%
effectively clearing it
so<03:48:53.760><c> back</c><03:48:54.000><c> within</c><03:48:54.239><c> the</c><03:48:54.319><c> main</c><03:48:54.640><c> function</c><03:48:55.120><c> after</c>

03:48:55.590 --> 03:48:55.600 align:start position:0%
so back within the main function after
 

03:48:55.600 --> 03:48:57.590 align:start position:0%
so back within the main function after
resetting<03:48:56.160><c> our</c><03:48:56.239><c> board</c><03:48:56.720><c> let's</c><03:48:57.120><c> print</c><03:48:57.439><c> our</c>

03:48:57.590 --> 03:48:57.600 align:start position:0%
resetting our board let's print our
 

03:48:57.600 --> 03:48:59.990 align:start position:0%
resetting our board let's print our
board

03:48:59.990 --> 03:49:00.000 align:start position:0%
 
 

03:49:00.000 --> 03:49:03.110 align:start position:0%
 
and<03:49:00.319><c> fill</c><03:49:00.560><c> in</c><03:49:00.640><c> this</c><03:49:00.800><c> function</c>

03:49:03.110 --> 03:49:03.120 align:start position:0%
and fill in this function
 

03:49:03.120 --> 03:49:05.189 align:start position:0%
and fill in this function
so<03:49:03.359><c> you</c><03:49:03.520><c> can</c><03:49:03.680><c> get</c><03:49:03.840><c> creative</c><03:49:04.160><c> with</c><03:49:04.399><c> this</c>

03:49:05.189 --> 03:49:05.199 align:start position:0%
so you can get creative with this
 

03:49:05.199 --> 03:49:07.990 align:start position:0%
so you can get creative with this
here's<03:49:05.520><c> one</c><03:49:05.680><c> thing</c><03:49:05.840><c> that</c><03:49:06.000><c> i'll</c><03:49:06.239><c> use</c>

03:49:07.990 --> 03:49:08.000 align:start position:0%
here's one thing that i'll use
 

03:49:08.000 --> 03:49:11.510 align:start position:0%
here's one thing that i'll use
so<03:49:08.239><c> i'm</c><03:49:08.399><c> going</c><03:49:08.560><c> to</c><03:49:08.840><c> print</c><03:49:10.239><c> a</c><03:49:10.479><c> space</c>

03:49:11.510 --> 03:49:11.520 align:start position:0%
so i'm going to print a space
 

03:49:11.520 --> 03:49:13.830 align:start position:0%
so i'm going to print a space
a<03:49:11.760><c> character</c><03:49:12.640><c> a</c><03:49:12.880><c> space</c>

03:49:13.830 --> 03:49:13.840 align:start position:0%
a character a space
 

03:49:13.840 --> 03:49:15.269 align:start position:0%
a character a space
a<03:49:14.080><c> vertical</c><03:49:14.479><c> bar</c>

03:49:15.269 --> 03:49:15.279 align:start position:0%
a vertical bar
 

03:49:15.279 --> 03:49:16.550 align:start position:0%
a vertical bar
space

03:49:16.550 --> 03:49:16.560 align:start position:0%
space
 

03:49:16.560 --> 03:49:19.429 align:start position:0%
space
character<03:49:17.359><c> space</c><03:49:18.080><c> vertical</c><03:49:18.560><c> bar</c>

03:49:19.429 --> 03:49:19.439 align:start position:0%
character space vertical bar
 

03:49:19.439 --> 03:49:20.469 align:start position:0%
character space vertical bar
space

03:49:20.469 --> 03:49:20.479 align:start position:0%
space
 

03:49:20.479 --> 03:49:22.229 align:start position:0%
space
character

03:49:22.229 --> 03:49:22.239 align:start position:0%
character
 

03:49:22.239 --> 03:49:24.229 align:start position:0%
character
these<03:49:22.560><c> three</c><03:49:22.800><c> format</c><03:49:23.199><c> specifiers</c><03:49:24.000><c> are</c>

03:49:24.229 --> 03:49:24.239 align:start position:0%
these three format specifiers are
 

03:49:24.239 --> 03:49:26.229 align:start position:0%
these three format specifiers are
placeholders<03:49:25.279><c> the</c><03:49:25.439><c> first</c><03:49:25.680><c> character</c><03:49:26.080><c> i'm</c>

03:49:26.229 --> 03:49:26.239 align:start position:0%
placeholders the first character i'm
 

03:49:26.239 --> 03:49:29.429 align:start position:0%
placeholders the first character i'm
going<03:49:26.399><c> to</c><03:49:26.560><c> display</c><03:49:27.199><c> is</c><03:49:27.520><c> our</c><03:49:27.840><c> board</c><03:49:28.560><c> at</c><03:49:28.880><c> index</c>

03:49:29.429 --> 03:49:29.439 align:start position:0%
going to display is our board at index
 

03:49:29.439 --> 03:49:33.269 align:start position:0%
going to display is our board at index
of<03:49:29.920><c> zero</c><03:49:30.640><c> zero</c><03:49:31.439><c> that</c><03:49:31.760><c> is</c><03:49:32.080><c> row</c><03:49:32.399><c> zero</c><03:49:32.880><c> column</c>

03:49:33.269 --> 03:49:33.279 align:start position:0%
of zero zero that is row zero column
 

03:49:33.279 --> 03:49:38.309 align:start position:0%
of zero zero that is row zero column
zero<03:49:34.160><c> followed</c><03:49:34.560><c> by</c><03:49:35.120><c> board</c><03:49:35.760><c> index</c><03:49:36.479><c> zero</c><03:49:37.359><c> one</c>

03:49:38.309 --> 03:49:38.319 align:start position:0%
zero followed by board index zero one
 

03:49:38.319 --> 03:49:41.590 align:start position:0%
zero followed by board index zero one
then<03:49:38.800><c> board</c><03:49:39.600><c> zero</c><03:49:40.319><c> two</c>

03:49:41.590 --> 03:49:41.600 align:start position:0%
then board zero two
 

03:49:41.600 --> 03:49:43.910 align:start position:0%
then board zero two
and<03:49:41.840><c> with</c><03:49:42.080><c> the</c><03:49:42.160><c> next</c><03:49:42.560><c> printf</c><03:49:43.040><c> statement</c><03:49:43.600><c> let's</c>

03:49:43.910 --> 03:49:43.920 align:start position:0%
and with the next printf statement let's
 

03:49:43.920 --> 03:49:45.910 align:start position:0%
and with the next printf statement let's
display<03:49:44.399><c> something</c><03:49:44.720><c> like</c><03:49:44.960><c> this</c>

03:49:45.910 --> 03:49:45.920 align:start position:0%
display something like this
 

03:49:45.920 --> 03:49:47.189 align:start position:0%
display something like this
a<03:49:46.080><c> new</c><03:49:46.399><c> line</c>

03:49:47.189 --> 03:49:47.199 align:start position:0%
a new line
 

03:49:47.199 --> 03:49:48.630 align:start position:0%
a new line
three<03:49:47.520><c> dashes</c>

03:49:48.630 --> 03:49:48.640 align:start position:0%
three dashes
 

03:49:48.640 --> 03:49:50.229 align:start position:0%
three dashes
a<03:49:48.800><c> vertical</c><03:49:49.279><c> bar</c>

03:49:50.229 --> 03:49:50.239 align:start position:0%
a vertical bar
 

03:49:50.239 --> 03:49:53.030 align:start position:0%
a vertical bar
three<03:49:50.479><c> dashes</c><03:49:51.520><c> another</c><03:49:51.840><c> vertical</c><03:49:52.239><c> bar</c>

03:49:53.030 --> 03:49:53.040 align:start position:0%
three dashes another vertical bar
 

03:49:53.040 --> 03:49:55.910 align:start position:0%
three dashes another vertical bar
three<03:49:53.279><c> dashes</c><03:49:54.319><c> then</c><03:49:54.560><c> a</c><03:49:54.640><c> new</c><03:49:54.880><c> line</c>

03:49:55.910 --> 03:49:55.920 align:start position:0%
three dashes then a new line
 

03:49:55.920 --> 03:49:58.070 align:start position:0%
three dashes then a new line
okay<03:49:56.319><c> so</c><03:49:56.640><c> let's</c><03:49:56.880><c> copy</c><03:49:57.279><c> these</c>

03:49:58.070 --> 03:49:58.080 align:start position:0%
okay so let's copy these
 

03:49:58.080 --> 03:49:59.990 align:start position:0%
okay so let's copy these
paste<03:49:58.399><c> it</c><03:49:58.560><c> once</c>

03:49:59.990 --> 03:50:00.000 align:start position:0%
paste it once
 

03:50:00.000 --> 03:50:02.630 align:start position:0%
paste it once
and<03:50:00.239><c> we</c><03:50:00.399><c> need</c><03:50:00.560><c> to</c><03:50:00.720><c> change</c><03:50:01.199><c> these</c><03:50:01.520><c> indices</c>

03:50:02.630 --> 03:50:02.640 align:start position:0%
and we need to change these indices
 

03:50:02.640 --> 03:50:05.189 align:start position:0%
and we need to change these indices
so<03:50:02.880><c> with</c><03:50:03.279><c> this</c><03:50:03.520><c> third</c><03:50:03.920><c> printf</c><03:50:04.399><c> statement</c>

03:50:05.189 --> 03:50:05.199 align:start position:0%
so with this third printf statement
 

03:50:05.199 --> 03:50:09.110 align:start position:0%
so with this third printf statement
these<03:50:05.520><c> indices</c><03:50:06.080><c> will</c><03:50:06.399><c> be</c><03:50:06.800><c> one</c><03:50:07.199><c> zero</c><03:50:08.000><c> one</c><03:50:08.399><c> one</c>

03:50:09.110 --> 03:50:09.120 align:start position:0%
these indices will be one zero one one
 

03:50:09.120 --> 03:50:10.870 align:start position:0%
these indices will be one zero one one
one<03:50:09.439><c> two</c>

03:50:10.870 --> 03:50:10.880 align:start position:0%
one two
 

03:50:10.880 --> 03:50:15.110 align:start position:0%
one two
and<03:50:11.040><c> then</c><03:50:11.199><c> do</c><03:50:11.439><c> this</c><03:50:11.600><c> again</c><03:50:12.160><c> so</c><03:50:12.479><c> copy</c><03:50:13.279><c> paste</c>

03:50:15.110 --> 03:50:15.120 align:start position:0%
and then do this again so copy paste
 

03:50:15.120 --> 03:50:16.469 align:start position:0%
and then do this again so copy paste
two<03:50:15.359><c> zero</c>

03:50:16.469 --> 03:50:16.479 align:start position:0%
two zero
 

03:50:16.479 --> 03:50:17.910 align:start position:0%
two zero
two<03:50:16.800><c> one</c>

03:50:17.910 --> 03:50:17.920 align:start position:0%
two one
 

03:50:17.920 --> 03:50:19.590 align:start position:0%
two one
two<03:50:18.160><c> two</c>

03:50:19.590 --> 03:50:19.600 align:start position:0%
two two
 

03:50:19.600 --> 03:50:21.510 align:start position:0%
two two
then<03:50:19.760><c> at</c><03:50:19.920><c> the</c><03:50:20.080><c> end</c><03:50:20.319><c> i'll</c><03:50:20.479><c> add</c><03:50:20.720><c> a</c><03:50:20.880><c> new</c><03:50:21.120><c> line</c>

03:50:21.510 --> 03:50:21.520 align:start position:0%
then at the end i'll add a new line
 

03:50:21.520 --> 03:50:23.910 align:start position:0%
then at the end i'll add a new line
printf

03:50:23.910 --> 03:50:23.920 align:start position:0%
printf
 

03:50:23.920 --> 03:50:25.590 align:start position:0%
printf
new<03:50:24.239><c> line</c>

03:50:25.590 --> 03:50:25.600 align:start position:0%
new line
 

03:50:25.600 --> 03:50:31.030 align:start position:0%
new line
oh<03:50:25.840><c> let</c><03:50:26.000><c> me</c><03:50:26.239><c> fix</c><03:50:26.479><c> one</c><03:50:26.720><c> thing</c>

03:50:31.030 --> 03:50:31.040 align:start position:0%
 
 

03:50:31.040 --> 03:50:33.269 align:start position:0%
 
okay<03:50:31.600><c> so</c><03:50:31.840><c> this</c><03:50:32.000><c> is</c><03:50:32.080><c> what</c><03:50:32.239><c> it</c><03:50:32.399><c> should</c><03:50:32.560><c> be</c>

03:50:33.269 --> 03:50:33.279 align:start position:0%
okay so this is what it should be
 

03:50:33.279 --> 03:50:34.790 align:start position:0%
okay so this is what it should be
all<03:50:33.359><c> right</c><03:50:33.680><c> now</c><03:50:33.920><c> back</c><03:50:34.160><c> within</c><03:50:34.399><c> our</c><03:50:34.560><c> main</c>

03:50:34.790 --> 03:50:34.800 align:start position:0%
all right now back within our main
 

03:50:34.800 --> 03:50:36.229 align:start position:0%
all right now back within our main
function<03:50:35.120><c> we're</c><03:50:35.279><c> going</c><03:50:35.439><c> to</c><03:50:35.520><c> create</c><03:50:35.840><c> a</c><03:50:35.920><c> while</c>

03:50:36.229 --> 03:50:36.239 align:start position:0%
function we're going to create a while
 

03:50:36.239 --> 03:50:38.309 align:start position:0%
function we're going to create a while
loop<03:50:36.720><c> and</c><03:50:36.880><c> we'll</c><03:50:37.040><c> surround</c><03:50:37.520><c> our</c><03:50:37.760><c> print</c><03:50:38.080><c> board</c>

03:50:38.309 --> 03:50:38.319 align:start position:0%
loop and we'll surround our print board
 

03:50:38.319 --> 03:50:44.389 align:start position:0%
loop and we'll surround our print board
function<03:50:38.720><c> within</c><03:50:39.120><c> this</c><03:50:39.279><c> while</c><03:50:39.520><c> loop</c>

03:50:44.389 --> 03:50:44.399 align:start position:0%
 
 

03:50:44.399 --> 03:50:48.550 align:start position:0%
 
so<03:50:44.720><c> our</c><03:50:44.960><c> condition</c><03:50:45.840><c> is</c><03:50:46.239><c> if</c><03:50:46.880><c> winner</c><03:50:48.080><c> is</c><03:50:48.239><c> equal</c>

03:50:48.550 --> 03:50:48.560 align:start position:0%
so our condition is if winner is equal
 

03:50:48.560 --> 03:50:50.630 align:start position:0%
so our condition is if winner is equal
to<03:50:48.960><c> an</c><03:50:49.120><c> empty</c><03:50:49.439><c> space</c>

03:50:50.630 --> 03:50:50.640 align:start position:0%
to an empty space
 

03:50:50.640 --> 03:50:53.670 align:start position:0%
to an empty space
that<03:50:50.880><c> means</c><03:50:51.199><c> there</c><03:50:51.520><c> currently</c><03:50:52.000><c> is</c><03:50:52.160><c> no</c><03:50:52.399><c> winner</c>

03:50:53.670 --> 03:50:53.680 align:start position:0%
that means there currently is no winner
 

03:50:53.680 --> 03:50:57.429 align:start position:0%
that means there currently is no winner
and<03:50:54.319><c> after</c><03:50:54.720><c> invoking</c><03:50:55.359><c> the</c><03:50:55.760><c> check</c><03:50:56.399><c> free</c><03:50:56.880><c> spaces</c>

03:50:57.429 --> 03:50:57.439 align:start position:0%
and after invoking the check free spaces
 

03:50:57.439 --> 03:50:58.630 align:start position:0%
and after invoking the check free spaces
function

03:50:58.630 --> 03:50:58.640 align:start position:0%
function
 

03:50:58.640 --> 03:51:02.550 align:start position:0%
function
the<03:50:58.800><c> value</c><03:50:59.199><c> returned</c><03:50:59.920><c> does</c><03:51:00.160><c> not</c><03:51:00.560><c> equal</c><03:51:01.279><c> zero</c>

03:51:02.550 --> 03:51:02.560 align:start position:0%
the value returned does not equal zero
 

03:51:02.560 --> 03:51:04.950 align:start position:0%
the value returned does not equal zero
so<03:51:02.720><c> let's</c><03:51:03.040><c> fill</c><03:51:03.279><c> in</c><03:51:03.520><c> this</c><03:51:03.920><c> check</c><03:51:04.239><c> free</c><03:51:04.479><c> spaces</c>

03:51:04.950 --> 03:51:04.960 align:start position:0%
so let's fill in this check free spaces
 

03:51:04.960 --> 03:51:06.150 align:start position:0%
so let's fill in this check free spaces
function

03:51:06.150 --> 03:51:06.160 align:start position:0%
function
 

03:51:06.160 --> 03:51:08.389 align:start position:0%
function
within<03:51:06.640><c> the</c><03:51:06.880><c> check</c><03:51:07.120><c> free</c><03:51:07.359><c> spaces</c><03:51:07.840><c> function</c>

03:51:08.389 --> 03:51:08.399 align:start position:0%
within the check free spaces function
 

03:51:08.399 --> 03:51:11.429 align:start position:0%
within the check free spaces function
let's<03:51:08.640><c> declare</c><03:51:09.199><c> a</c><03:51:09.439><c> local</c><03:51:09.840><c> variable</c><03:51:10.800><c> int</c><03:51:11.199><c> free</c>

03:51:11.429 --> 03:51:11.439 align:start position:0%
let's declare a local variable int free
 

03:51:11.439 --> 03:51:13.830 align:start position:0%
let's declare a local variable int free
spaces<03:51:12.479><c> and</c><03:51:12.640><c> i'll</c><03:51:12.800><c> initially</c><03:51:13.279><c> set</c><03:51:13.439><c> this</c><03:51:13.680><c> to</c>

03:51:13.830 --> 03:51:13.840 align:start position:0%
spaces and i'll initially set this to
 

03:51:13.840 --> 03:51:20.229 align:start position:0%
spaces and i'll initially set this to
nine<03:51:14.640><c> then</c><03:51:14.960><c> we</c><03:51:15.120><c> need</c><03:51:15.359><c> a</c><03:51:15.520><c> nested</c><03:51:15.920><c> for</c><03:51:16.239><c> loops</c>

03:51:20.229 --> 03:51:20.239 align:start position:0%
 
 

03:51:20.239 --> 03:51:23.030 align:start position:0%
 
and<03:51:20.560><c> i</c><03:51:21.040><c> equals</c><03:51:21.439><c> 0</c><03:51:21.760><c> we</c><03:51:21.920><c> will</c><03:51:22.080><c> continue</c><03:51:22.479><c> this</c><03:51:22.800><c> as</c>

03:51:23.030 --> 03:51:23.040 align:start position:0%
and i equals 0 we will continue this as
 

03:51:23.040 --> 03:51:25.510 align:start position:0%
and i equals 0 we will continue this as
long<03:51:23.279><c> as</c><03:51:23.439><c> i</c><03:51:24.080><c> is</c><03:51:24.239><c> less</c><03:51:24.479><c> than</c><03:51:24.720><c> 3</c>

03:51:25.510 --> 03:51:25.520 align:start position:0%
long as i is less than 3
 

03:51:25.520 --> 03:51:27.429 align:start position:0%
long as i is less than 3
i<03:51:25.840><c> plus</c><03:51:26.160><c> plus</c>

03:51:27.429 --> 03:51:27.439 align:start position:0%
i plus plus
 

03:51:27.439 --> 03:51:30.389 align:start position:0%
i plus plus
then<03:51:27.680><c> create</c><03:51:28.000><c> an</c><03:51:28.160><c> inner</c><03:51:28.399><c> for</c><03:51:28.840><c> loop</c>

03:51:30.389 --> 03:51:30.399 align:start position:0%
then create an inner for loop
 

03:51:30.399 --> 03:51:34.150 align:start position:0%
then create an inner for loop
change<03:51:30.800><c> the</c><03:51:30.960><c> index</c><03:51:31.279><c> from</c><03:51:31.520><c> i</c><03:51:31.760><c> to</c><03:51:32.000><c> j</c>

03:51:34.150 --> 03:51:34.160 align:start position:0%
change the index from i to j
 

03:51:34.160 --> 03:51:36.070 align:start position:0%
change the index from i to j
and<03:51:34.399><c> within</c><03:51:34.800><c> the</c><03:51:35.040><c> inner</c><03:51:35.279><c> forward</c><03:51:35.600><c> loop</c><03:51:35.840><c> we're</c>

03:51:36.070 --> 03:51:36.080 align:start position:0%
and within the inner forward loop we're
 

03:51:36.080 --> 03:51:38.229 align:start position:0%
and within the inner forward loop we're
going<03:51:36.239><c> to</c><03:51:36.319><c> write</c><03:51:36.479><c> an</c><03:51:36.640><c> if</c><03:51:36.880><c> statement</c>

03:51:38.229 --> 03:51:38.239 align:start position:0%
going to write an if statement
 

03:51:38.239 --> 03:51:40.550 align:start position:0%
going to write an if statement
and<03:51:38.399><c> we</c><03:51:38.560><c> are</c><03:51:38.720><c> checking</c><03:51:39.040><c> to</c><03:51:39.199><c> see</c><03:51:39.520><c> if</c><03:51:39.840><c> our</c><03:51:40.080><c> 2d</c>

03:51:40.550 --> 03:51:40.560 align:start position:0%
and we are checking to see if our 2d
 

03:51:40.560 --> 03:51:42.950 align:start position:0%
and we are checking to see if our 2d
array<03:51:40.800><c> of</c><03:51:40.960><c> characters</c><03:51:41.920><c> bored</c>

03:51:42.950 --> 03:51:42.960 align:start position:0%
array of characters bored
 

03:51:42.960 --> 03:51:46.870 align:start position:0%
array of characters bored
at<03:51:43.279><c> index</c><03:51:43.680><c> of</c><03:51:44.000><c> i</c><03:51:44.640><c> and</c><03:51:44.960><c> j</c><03:51:45.600><c> does</c><03:51:45.920><c> not</c><03:51:46.239><c> equal</c><03:51:46.720><c> an</c>

03:51:46.870 --> 03:51:46.880 align:start position:0%
at index of i and j does not equal an
 

03:51:46.880 --> 03:51:48.070 align:start position:0%
at index of i and j does not equal an
empty<03:51:47.120><c> space</c>

03:51:48.070 --> 03:51:48.080 align:start position:0%
empty space
 

03:51:48.080 --> 03:51:50.309 align:start position:0%
empty space
if<03:51:48.319><c> whatever</c><03:51:48.720><c> spot</c><03:51:49.040><c> we're</c><03:51:49.279><c> on</c><03:51:49.600><c> is</c><03:51:49.840><c> currently</c>

03:51:50.309 --> 03:51:50.319 align:start position:0%
if whatever spot we're on is currently
 

03:51:50.319 --> 03:51:53.510 align:start position:0%
if whatever spot we're on is currently
occupied<03:51:51.279><c> we</c><03:51:51.439><c> will</c><03:51:51.680><c> take</c><03:51:52.080><c> our</c><03:51:52.319><c> free</c><03:51:52.800><c> spaces</c>

03:51:53.510 --> 03:51:53.520 align:start position:0%
occupied we will take our free spaces
 

03:51:53.520 --> 03:51:56.950 align:start position:0%
occupied we will take our free spaces
local<03:51:53.920><c> variable</c><03:51:54.880><c> and</c><03:51:55.120><c> decrement</c><03:51:55.680><c> it</c><03:51:55.840><c> by</c><03:51:56.160><c> one</c>

03:51:56.950 --> 03:51:56.960 align:start position:0%
local variable and decrement it by one
 

03:51:56.960 --> 03:51:59.349 align:start position:0%
local variable and decrement it by one
then<03:51:57.199><c> outside</c><03:51:57.600><c> of</c><03:51:57.760><c> our</c><03:51:57.920><c> for</c><03:51:58.239><c> loops</c><03:51:58.880><c> we</c><03:51:59.120><c> will</c>

03:51:59.349 --> 03:51:59.359 align:start position:0%
then outside of our for loops we will
 

03:51:59.359 --> 03:52:00.550 align:start position:0%
then outside of our for loops we will
return

03:52:00.550 --> 03:52:00.560 align:start position:0%
return
 

03:52:00.560 --> 03:52:03.349 align:start position:0%
return
free<03:52:01.120><c> spaces</c>

03:52:03.349 --> 03:52:03.359 align:start position:0%
free spaces
 

03:52:03.359 --> 03:52:05.990 align:start position:0%
free spaces
if<03:52:03.600><c> we</c><03:52:03.840><c> return</c><03:52:04.319><c> zero</c><03:52:04.960><c> that</c><03:52:05.199><c> means</c><03:52:05.439><c> the</c><03:52:05.600><c> game</c><03:52:05.840><c> is</c>

03:52:05.990 --> 03:52:06.000 align:start position:0%
if we return zero that means the game is
 

03:52:06.000 --> 03:52:08.309 align:start position:0%
if we return zero that means the game is
over<03:52:06.319><c> there's</c><03:52:06.640><c> no</c><03:52:06.800><c> more</c><03:52:07.040><c> places</c><03:52:07.600><c> a</c><03:52:07.760><c> player</c><03:52:08.080><c> can</c>

03:52:08.309 --> 03:52:08.319 align:start position:0%
over there's no more places a player can
 

03:52:08.319 --> 03:52:09.269 align:start position:0%
over there's no more places a player can
move

03:52:09.269 --> 03:52:09.279 align:start position:0%
move
 

03:52:09.279 --> 03:52:11.510 align:start position:0%
move
so<03:52:09.520><c> heading</c><03:52:09.840><c> back</c><03:52:10.000><c> to</c><03:52:10.160><c> our</c><03:52:10.319><c> main</c><03:52:10.560><c> function</c>

03:52:11.510 --> 03:52:11.520 align:start position:0%
so heading back to our main function
 

03:52:11.520 --> 03:52:13.510 align:start position:0%
so heading back to our main function
it<03:52:11.680><c> will</c><03:52:11.920><c> be</c><03:52:12.399><c> let's</c><03:52:12.640><c> say</c><03:52:12.800><c> the</c><03:52:12.960><c> player's</c><03:52:13.359><c> turn</c>

03:52:13.510 --> 03:52:13.520 align:start position:0%
it will be let's say the player's turn
 

03:52:13.520 --> 03:52:14.950 align:start position:0%
it will be let's say the player's turn
to<03:52:13.680><c> move</c><03:52:13.920><c> first</c>

03:52:14.950 --> 03:52:14.960 align:start position:0%
to move first
 

03:52:14.960 --> 03:52:18.630 align:start position:0%
to move first
so<03:52:15.359><c> invoke</c><03:52:15.840><c> the</c><03:52:16.239><c> player</c><03:52:16.880><c> move</c><03:52:17.439><c> function</c><03:52:18.399><c> and</c>

03:52:18.630 --> 03:52:18.640 align:start position:0%
so invoke the player move function and
 

03:52:18.640 --> 03:52:20.469 align:start position:0%
so invoke the player move function and
we'll<03:52:18.880><c> need</c><03:52:19.040><c> to</c><03:52:19.120><c> fill</c><03:52:19.359><c> this</c><03:52:19.600><c> in</c>

03:52:20.469 --> 03:52:20.479 align:start position:0%
we'll need to fill this in
 

03:52:20.479 --> 03:52:22.309 align:start position:0%
we'll need to fill this in
with<03:52:20.800><c> the</c><03:52:21.040><c> player</c><03:52:21.279><c> move</c><03:52:21.520><c> function</c><03:52:22.000><c> we</c><03:52:22.160><c> will</c>

03:52:22.309 --> 03:52:22.319 align:start position:0%
with the player move function we will
 

03:52:22.319 --> 03:52:26.550 align:start position:0%
with the player move function we will
declare<03:52:22.800><c> two</c><03:52:22.960><c> local</c><03:52:23.279><c> variables</c><03:52:24.000><c> intex</c><03:52:25.040><c> into</c><03:52:25.359><c> y</c>

03:52:26.550 --> 03:52:26.560 align:start position:0%
declare two local variables intex into y
 

03:52:26.560 --> 03:52:29.189 align:start position:0%
declare two local variables intex into y
and<03:52:26.800><c> we</c><03:52:26.960><c> will</c><03:52:27.199><c> ask</c><03:52:27.600><c> a</c><03:52:27.760><c> user</c><03:52:28.160><c> to</c><03:52:28.319><c> enter</c><03:52:28.640><c> in</c><03:52:28.800><c> a</c><03:52:28.960><c> row</c>

03:52:29.189 --> 03:52:29.199 align:start position:0%
and we will ask a user to enter in a row
 

03:52:29.199 --> 03:52:31.189 align:start position:0%
and we will ask a user to enter in a row
number<03:52:29.680><c> and</c><03:52:29.840><c> a</c><03:52:29.920><c> column</c><03:52:30.239><c> number</c><03:52:30.560><c> of</c><03:52:30.720><c> where</c><03:52:31.040><c> they</c>

03:52:31.189 --> 03:52:31.199 align:start position:0%
number and a column number of where they
 

03:52:31.199 --> 03:52:33.990 align:start position:0%
number and a column number of where they
would<03:52:31.279><c> like</c><03:52:31.439><c> to</c><03:52:31.520><c> move</c><03:52:31.840><c> to</c><03:52:32.560><c> so</c><03:52:32.880><c> using</c><03:52:33.199><c> a</c><03:52:33.439><c> printf</c>

03:52:33.990 --> 03:52:34.000 align:start position:0%
would like to move to so using a printf
 

03:52:34.000 --> 03:52:35.189 align:start position:0%
would like to move to so using a printf
statement

03:52:35.189 --> 03:52:35.199 align:start position:0%
statement
 

03:52:35.199 --> 03:52:36.790 align:start position:0%
statement
we<03:52:35.439><c> will</c><03:52:35.760><c> enter</c>

03:52:36.790 --> 03:52:36.800 align:start position:0%
we will enter
 

03:52:36.800 --> 03:52:39.189 align:start position:0%
we will enter
row<03:52:37.680><c> number</c>

03:52:39.189 --> 03:52:39.199 align:start position:0%
row number
 

03:52:39.199 --> 03:52:41.990 align:start position:0%
row number
one<03:52:39.439><c> through</c><03:52:39.680><c> three</c>

03:52:41.990 --> 03:52:42.000 align:start position:0%
 
 

03:52:42.000 --> 03:52:44.870 align:start position:0%
 
and<03:52:42.319><c> then</c><03:52:42.640><c> use</c><03:52:42.960><c> the</c><03:52:43.199><c> scan</c><03:52:43.680><c> f</c><03:52:43.920><c> function</c><03:52:44.640><c> to</c>

03:52:44.870 --> 03:52:44.880 align:start position:0%
and then use the scan f function to
 

03:52:44.880 --> 03:52:47.269 align:start position:0%
and then use the scan f function to
accept<03:52:45.359><c> some</c><03:52:45.520><c> user</c><03:52:45.920><c> input</c><03:52:46.560><c> so</c><03:52:46.800><c> this</c><03:52:46.960><c> will</c><03:52:47.120><c> be</c>

03:52:47.269 --> 03:52:47.279 align:start position:0%
accept some user input so this will be
 

03:52:47.279 --> 03:52:49.830 align:start position:0%
accept some user input so this will be
an<03:52:47.439><c> integer</c><03:52:48.319><c> and</c><03:52:48.640><c> use</c><03:52:48.880><c> the</c><03:52:49.040><c> address</c><03:52:49.600><c> of</c>

03:52:49.830 --> 03:52:49.840 align:start position:0%
an integer and use the address of
 

03:52:49.840 --> 03:52:51.990 align:start position:0%
an integer and use the address of
operator<03:52:50.640><c> x</c>

03:52:51.990 --> 03:52:52.000 align:start position:0%
operator x
 

03:52:52.000 --> 03:52:54.630 align:start position:0%
operator x
so<03:52:52.239><c> a</c><03:52:52.479><c> user</c><03:52:52.960><c> is</c><03:52:53.040><c> going</c><03:52:53.199><c> to</c><03:52:53.439><c> enter</c><03:52:53.840><c> in</c><03:52:54.160><c> numbers</c>

03:52:54.630 --> 03:52:54.640 align:start position:0%
so a user is going to enter in numbers
 

03:52:54.640 --> 03:52:56.309 align:start position:0%
so a user is going to enter in numbers
one<03:52:54.960><c> through</c><03:52:55.199><c> three</c><03:52:55.520><c> for</c><03:52:55.680><c> which</c><03:52:55.920><c> row</c><03:52:56.239><c> that</c>

03:52:56.309 --> 03:52:56.319 align:start position:0%
one through three for which row that
 

03:52:56.319 --> 03:52:58.630 align:start position:0%
one through three for which row that
they<03:52:56.479><c> need</c><03:52:57.199><c> but</c><03:52:57.439><c> with</c><03:52:57.680><c> arrays</c><03:52:58.239><c> they</c><03:52:58.479><c> always</c>

03:52:58.630 --> 03:52:58.640 align:start position:0%
they need but with arrays they always
 

03:52:58.640 --> 03:53:01.189 align:start position:0%
they need but with arrays they always
begin<03:52:58.960><c> with</c><03:52:59.199><c> zero</c><03:53:00.000><c> but</c><03:53:00.239><c> a</c><03:53:00.319><c> user</c><03:53:00.720><c> is</c><03:53:00.800><c> not</c><03:53:01.040><c> going</c>

03:53:01.189 --> 03:53:01.199 align:start position:0%
begin with zero but a user is not going
 

03:53:01.199 --> 03:53:03.269 align:start position:0%
begin with zero but a user is not going
to<03:53:01.359><c> know</c><03:53:01.600><c> that</c><03:53:02.000><c> so</c><03:53:02.239><c> with</c><03:53:02.479><c> whatever</c><03:53:02.800><c> the</c><03:53:02.960><c> user</c>

03:53:03.269 --> 03:53:03.279 align:start position:0%
to know that so with whatever the user
 

03:53:03.279 --> 03:53:06.389 align:start position:0%
to know that so with whatever the user
types<03:53:03.680><c> in</c><03:53:03.920><c> we</c><03:53:04.080><c> will</c><03:53:04.319><c> decrement</c><03:53:04.960><c> x</c><03:53:05.199><c> by</c><03:53:05.520><c> one</c>

03:53:06.389 --> 03:53:06.399 align:start position:0%
types in we will decrement x by one
 

03:53:06.399 --> 03:53:08.950 align:start position:0%
types in we will decrement x by one
so<03:53:06.560><c> this</c><03:53:06.800><c> gives</c><03:53:07.120><c> us</c><03:53:07.439><c> rows</c><03:53:08.000><c> zero</c><03:53:08.479><c> through</c><03:53:08.720><c> two</c>

03:53:08.950 --> 03:53:08.960 align:start position:0%
so this gives us rows zero through two
 

03:53:08.960 --> 03:53:10.389 align:start position:0%
so this gives us rows zero through two
technically

03:53:10.389 --> 03:53:10.399 align:start position:0%
technically
 

03:53:10.399 --> 03:53:13.030 align:start position:0%
technically
then<03:53:10.640><c> do</c><03:53:10.800><c> the</c><03:53:10.880><c> same</c><03:53:11.120><c> thing</c><03:53:11.359><c> with</c><03:53:11.600><c> our</c><03:53:11.760><c> columns</c>

03:53:13.030 --> 03:53:13.040 align:start position:0%
then do the same thing with our columns
 

03:53:13.040 --> 03:53:17.110 align:start position:0%
then do the same thing with our columns
enter<03:53:13.920><c> column</c><03:53:14.720><c> number</c><03:53:15.359><c> one</c><03:53:15.840><c> through</c><03:53:16.239><c> three</c>

03:53:17.110 --> 03:53:17.120 align:start position:0%
enter column number one through three
 

03:53:17.120 --> 03:53:20.790 align:start position:0%
enter column number one through three
address<03:53:17.680><c> of</c><03:53:17.920><c> operator</c><03:53:18.640><c> y</c><03:53:19.279><c> then</c><03:53:19.520><c> decrement</c><03:53:20.160><c> y</c>

03:53:20.790 --> 03:53:20.800 align:start position:0%
address of operator y then decrement y
 

03:53:20.800 --> 03:53:22.790 align:start position:0%
address of operator y then decrement y
we<03:53:20.960><c> will</c><03:53:21.199><c> check</c><03:53:21.359><c> to</c><03:53:21.520><c> see</c><03:53:21.760><c> if</c><03:53:22.000><c> the</c><03:53:22.239><c> coordinates</c>

03:53:22.790 --> 03:53:22.800 align:start position:0%
we will check to see if the coordinates
 

03:53:22.800 --> 03:53:25.750 align:start position:0%
we will check to see if the coordinates
that<03:53:22.960><c> the</c><03:53:23.120><c> user</c><03:53:23.520><c> gave</c><03:53:24.080><c> are</c><03:53:24.319><c> occupied</c><03:53:24.880><c> or</c><03:53:24.960><c> not</c>

03:53:25.750 --> 03:53:25.760 align:start position:0%
that the user gave are occupied or not
 

03:53:25.760 --> 03:53:27.990 align:start position:0%
that the user gave are occupied or not
so<03:53:26.000><c> using</c><03:53:26.239><c> an</c><03:53:26.399><c> if</c><03:53:26.640><c> statement</c>

03:53:27.990 --> 03:53:28.000 align:start position:0%
so using an if statement
 

03:53:28.000 --> 03:53:30.550 align:start position:0%
so using an if statement
we<03:53:28.160><c> will</c><03:53:28.399><c> check</c><03:53:28.640><c> to</c><03:53:28.800><c> see</c><03:53:29.040><c> if</c><03:53:29.359><c> our</c><03:53:29.600><c> board</c>

03:53:30.550 --> 03:53:30.560 align:start position:0%
we will check to see if our board
 

03:53:30.560 --> 03:53:32.950 align:start position:0%
we will check to see if our board
at<03:53:30.880><c> index</c><03:53:31.439><c> of</c><03:53:31.760><c> x</c>

03:53:32.950 --> 03:53:32.960 align:start position:0%
at index of x
 

03:53:32.960 --> 03:53:34.309 align:start position:0%
at index of x
and<03:53:33.199><c> y</c>

03:53:34.309 --> 03:53:34.319 align:start position:0%
and y
 

03:53:34.319 --> 03:53:37.670 align:start position:0%
and y
does<03:53:34.720><c> not</c><03:53:35.199><c> equal</c><03:53:35.680><c> an</c><03:53:35.840><c> empty</c><03:53:36.160><c> space</c><03:53:37.040><c> that</c><03:53:37.279><c> means</c>

03:53:37.670 --> 03:53:37.680 align:start position:0%
does not equal an empty space that means
 

03:53:37.680 --> 03:53:39.990 align:start position:0%
does not equal an empty space that means
that<03:53:37.920><c> this</c><03:53:38.160><c> spot</c><03:53:38.560><c> is</c><03:53:38.720><c> currently</c><03:53:39.199><c> occupied</c><03:53:39.840><c> by</c>

03:53:39.990 --> 03:53:40.000 align:start position:0%
that this spot is currently occupied by
 

03:53:40.000 --> 03:53:41.349 align:start position:0%
that this spot is currently occupied by
another<03:53:40.319><c> character</c>

03:53:41.349 --> 03:53:41.359 align:start position:0%
another character
 

03:53:41.359 --> 03:53:43.189 align:start position:0%
another character
so<03:53:41.600><c> let's</c><03:53:41.840><c> print</c><03:53:42.080><c> something</c><03:53:42.399><c> to</c><03:53:42.560><c> let</c><03:53:42.720><c> a</c><03:53:42.880><c> user</c>

03:53:43.189 --> 03:53:43.199 align:start position:0%
so let's print something to let a user
 

03:53:43.199 --> 03:53:45.030 align:start position:0%
so let's print something to let a user
know

03:53:45.030 --> 03:53:45.040 align:start position:0%
know
 

03:53:45.040 --> 03:53:48.150 align:start position:0%
know
invalid<03:53:46.160><c> move</c>

03:53:48.150 --> 03:53:48.160 align:start position:0%
invalid move
 

03:53:48.160 --> 03:53:51.269 align:start position:0%
invalid move
else<03:53:48.720><c> that</c><03:53:48.960><c> spot</c><03:53:49.279><c> is</c><03:53:49.439><c> open</c>

03:53:51.269 --> 03:53:51.279 align:start position:0%
else that spot is open
 

03:53:51.279 --> 03:53:53.590 align:start position:0%
else that spot is open
so<03:53:51.600><c> take</c><03:53:52.080><c> our</c><03:53:52.319><c> board</c>

03:53:53.590 --> 03:53:53.600 align:start position:0%
so take our board
 

03:53:53.600 --> 03:53:56.950 align:start position:0%
so take our board
at<03:53:54.000><c> index</c><03:53:54.479><c> of</c><03:53:54.800><c> x</c><03:53:55.520><c> and</c><03:53:55.840><c> y</c>

03:53:56.950 --> 03:53:56.960 align:start position:0%
at index of x and y
 

03:53:56.960 --> 03:53:59.510 align:start position:0%
at index of x and y
set<03:53:57.199><c> this</c><03:53:57.439><c> equal</c><03:53:57.760><c> to</c><03:53:58.080><c> our</c><03:53:58.319><c> player</c><03:53:58.640><c> character</c>

03:53:59.510 --> 03:53:59.520 align:start position:0%
set this equal to our player character
 

03:53:59.520 --> 03:54:01.510 align:start position:0%
set this equal to our player character
so<03:53:59.680><c> we're</c><03:53:59.840><c> going</c><03:54:00.000><c> to</c><03:54:00.160><c> take</c><03:54:00.479><c> all</c><03:54:00.640><c> of</c><03:54:00.720><c> this</c><03:54:00.960><c> code</c>

03:54:01.510 --> 03:54:01.520 align:start position:0%
so we're going to take all of this code
 

03:54:01.520 --> 03:54:04.309 align:start position:0%
so we're going to take all of this code
and<03:54:01.760><c> place</c><03:54:02.080><c> it</c><03:54:02.160><c> within</c><03:54:02.640><c> a</c><03:54:02.800><c> do</c><03:54:03.040><c> while</c><03:54:03.359><c> loop</c><03:54:04.000><c> so</c>

03:54:04.309 --> 03:54:04.319 align:start position:0%
and place it within a do while loop so
 

03:54:04.319 --> 03:54:05.910 align:start position:0%
and place it within a do while loop so
write<03:54:04.960><c> do</c>

03:54:05.910 --> 03:54:05.920 align:start position:0%
write do
 

03:54:05.920 --> 03:54:07.110 align:start position:0%
write do
while

03:54:07.110 --> 03:54:07.120 align:start position:0%
while
 

03:54:07.120 --> 03:54:08.469 align:start position:0%
while
place<03:54:07.439><c> your</c><03:54:07.680><c> code</c><03:54:07.920><c> that</c><03:54:08.000><c> you</c><03:54:08.160><c> just</c><03:54:08.319><c> wrote</c>

03:54:08.469 --> 03:54:08.479 align:start position:0%
place your code that you just wrote
 

03:54:08.479 --> 03:54:13.110 align:start position:0%
place your code that you just wrote
within<03:54:08.800><c> there</c>

03:54:13.110 --> 03:54:13.120 align:start position:0%
 
 

03:54:13.120 --> 03:54:14.710 align:start position:0%
 
and<03:54:13.359><c> our</c><03:54:13.520><c> condition</c>

03:54:14.710 --> 03:54:14.720 align:start position:0%
and our condition
 

03:54:14.720 --> 03:54:16.870 align:start position:0%
and our condition
is<03:54:15.040><c> if</c><03:54:15.439><c> our</c><03:54:15.680><c> board</c>

03:54:16.870 --> 03:54:16.880 align:start position:0%
is if our board
 

03:54:16.880 --> 03:54:18.790 align:start position:0%
is if our board
at<03:54:17.199><c> index</c><03:54:17.760><c> of</c><03:54:18.080><c> x</c>

03:54:18.790 --> 03:54:18.800 align:start position:0%
at index of x
 

03:54:18.800 --> 03:54:22.229 align:start position:0%
at index of x
and<03:54:19.120><c> y</c><03:54:19.840><c> does</c><03:54:20.160><c> not</c><03:54:20.479><c> equal</c><03:54:20.880><c> an</c><03:54:21.040><c> empty</c><03:54:21.359><c> space</c>

03:54:22.229 --> 03:54:22.239 align:start position:0%
and y does not equal an empty space
 

03:54:22.239 --> 03:54:24.070 align:start position:0%
and y does not equal an empty space
if<03:54:22.479><c> the</c><03:54:22.640><c> spot</c><03:54:23.040><c> that</c><03:54:23.199><c> the</c><03:54:23.359><c> player</c><03:54:23.760><c> would</c><03:54:23.920><c> like</c>

03:54:24.070 --> 03:54:24.080 align:start position:0%
if the spot that the player would like
 

03:54:24.080 --> 03:54:26.469 align:start position:0%
if the spot that the player would like
to<03:54:24.239><c> place</c><03:54:24.560><c> their</c><03:54:24.800><c> character</c><03:54:25.840><c> is</c><03:54:26.000><c> currently</c>

03:54:26.469 --> 03:54:26.479 align:start position:0%
to place their character is currently
 

03:54:26.479 --> 03:54:29.189 align:start position:0%
to place their character is currently
occupied<03:54:27.439><c> then</c><03:54:27.680><c> we</c><03:54:27.840><c> will</c><03:54:28.080><c> ask</c><03:54:28.319><c> them</c><03:54:28.560><c> again</c><03:54:28.960><c> to</c>

03:54:29.189 --> 03:54:29.199 align:start position:0%
occupied then we will ask them again to
 

03:54:29.199 --> 03:54:31.189 align:start position:0%
occupied then we will ask them again to
enter<03:54:29.439><c> some</c><03:54:29.600><c> coordinates</c><03:54:30.399><c> uh</c><03:54:30.640><c> then</c><03:54:30.800><c> within</c>

03:54:31.189 --> 03:54:31.199 align:start position:0%
enter some coordinates uh then within
 

03:54:31.199 --> 03:54:33.510 align:start position:0%
enter some coordinates uh then within
our<03:54:31.359><c> else</c><03:54:31.600><c> statement</c><03:54:32.160><c> we</c><03:54:32.399><c> need</c><03:54:32.720><c> to</c><03:54:32.960><c> break</c><03:54:33.359><c> out</c>

03:54:33.510 --> 03:54:33.520 align:start position:0%
our else statement we need to break out
 

03:54:33.520 --> 03:54:35.510 align:start position:0%
our else statement we need to break out
of<03:54:33.600><c> this</c><03:54:33.760><c> while</c><03:54:34.000><c> loop</c><03:54:34.560><c> okay</c><03:54:34.880><c> so</c><03:54:35.040><c> that</c><03:54:35.279><c> is</c>

03:54:35.510 --> 03:54:35.520 align:start position:0%
of this while loop okay so that is
 

03:54:35.520 --> 03:54:38.870 align:start position:0%
of this while loop okay so that is
everything<03:54:36.239><c> for</c><03:54:36.640><c> the</c><03:54:37.040><c> player</c><03:54:37.439><c> move</c><03:54:37.840><c> function</c>

03:54:38.870 --> 03:54:38.880 align:start position:0%
everything for the player move function
 

03:54:38.880 --> 03:54:40.870 align:start position:0%
everything for the player move function
so<03:54:39.120><c> then</c><03:54:39.359><c> heading</c><03:54:39.760><c> back</c><03:54:40.080><c> to</c><03:54:40.399><c> the</c><03:54:40.640><c> main</c>

03:54:40.870 --> 03:54:40.880 align:start position:0%
so then heading back to the main
 

03:54:40.880 --> 03:54:41.830 align:start position:0%
so then heading back to the main
function

03:54:41.830 --> 03:54:41.840 align:start position:0%
function
 

03:54:41.840 --> 03:54:43.830 align:start position:0%
function
after<03:54:42.160><c> the</c><03:54:42.319><c> player</c><03:54:42.720><c> moves</c><03:54:43.120><c> we</c><03:54:43.279><c> will</c><03:54:43.520><c> check</c><03:54:43.680><c> to</c>

03:54:43.830 --> 03:54:43.840 align:start position:0%
after the player moves we will check to
 

03:54:43.840 --> 03:54:45.510 align:start position:0%
after the player moves we will check to
see<03:54:44.000><c> if</c><03:54:44.080><c> there's</c><03:54:44.399><c> a</c><03:54:44.479><c> winner</c>

03:54:45.510 --> 03:54:45.520 align:start position:0%
see if there's a winner
 

03:54:45.520 --> 03:54:48.870 align:start position:0%
see if there's a winner
winner<03:54:46.319><c> equals</c><03:54:47.199><c> then</c><03:54:47.439><c> invoke</c><03:54:47.920><c> the</c><03:54:48.319><c> check</c>

03:54:48.870 --> 03:54:48.880 align:start position:0%
winner equals then invoke the check
 

03:54:48.880 --> 03:54:50.870 align:start position:0%
winner equals then invoke the check
winner<03:54:49.359><c> function</c>

03:54:50.870 --> 03:54:50.880 align:start position:0%
winner function
 

03:54:50.880 --> 03:54:53.910 align:start position:0%
winner function
and<03:54:51.120><c> we</c><03:54:51.279><c> will</c><03:54:51.439><c> fill</c><03:54:51.680><c> in</c><03:54:51.920><c> this</c><03:54:52.160><c> function</c><03:54:52.560><c> next</c>

03:54:53.910 --> 03:54:53.920 align:start position:0%
and we will fill in this function next
 

03:54:53.920 --> 03:54:56.710 align:start position:0%
and we will fill in this function next
so<03:54:54.319><c> find</c><03:54:54.720><c> the</c><03:54:54.960><c> check</c><03:54:55.199><c> winner</c><03:54:55.520><c> function</c><03:54:56.399><c> and</c><03:54:56.560><c> we</c>

03:54:56.710 --> 03:54:56.720 align:start position:0%
so find the check winner function and we
 

03:54:56.720 --> 03:54:58.229 align:start position:0%
so find the check winner function and we
need<03:54:56.880><c> to</c><03:54:57.040><c> check</c><03:54:57.279><c> all</c><03:54:57.439><c> of</c><03:54:57.520><c> the</c><03:54:57.680><c> different</c><03:54:58.000><c> win</c>

03:54:58.229 --> 03:54:58.239 align:start position:0%
need to check all of the different win
 

03:54:58.239 --> 03:54:59.429 align:start position:0%
need to check all of the different win
conditions

03:54:59.429 --> 03:54:59.439 align:start position:0%
conditions
 

03:54:59.439 --> 03:55:02.469 align:start position:0%
conditions
so<03:54:59.680><c> first</c><03:55:00.080><c> we</c><03:55:00.239><c> will</c><03:55:00.479><c> check</c><03:55:00.880><c> each</c><03:55:01.279><c> row</c><03:55:01.920><c> using</c><03:55:02.319><c> a</c>

03:55:02.469 --> 03:55:02.479 align:start position:0%
so first we will check each row using a
 

03:55:02.479 --> 03:55:05.110 align:start position:0%
so first we will check each row using a
for<03:55:02.800><c> loop</c><03:55:03.439><c> so</c><03:55:03.680><c> this</c><03:55:03.840><c> section</c><03:55:04.160><c> of</c><03:55:04.319><c> code</c><03:55:04.720><c> we</c><03:55:04.880><c> will</c>

03:55:05.110 --> 03:55:05.120 align:start position:0%
for loop so this section of code we will
 

03:55:05.120 --> 03:55:08.150 align:start position:0%
for loop so this section of code we will
check<03:55:05.680><c> our</c><03:55:05.920><c> rows</c><03:55:06.720><c> we'll</c><03:55:06.960><c> need</c><03:55:07.199><c> a</c><03:55:07.359><c> for</c><03:55:07.600><c> loop</c><03:55:07.920><c> to</c>

03:55:08.150 --> 03:55:08.160 align:start position:0%
check our rows we'll need a for loop to
 

03:55:08.160 --> 03:55:11.110 align:start position:0%
check our rows we'll need a for loop to
iterate<03:55:08.560><c> three</c><03:55:08.880><c> times</c><03:55:09.359><c> one</c><03:55:09.520><c> for</c><03:55:09.680><c> each</c><03:55:09.920><c> row</c>

03:55:11.110 --> 03:55:11.120 align:start position:0%
iterate three times one for each row
 

03:55:11.120 --> 03:55:12.550 align:start position:0%
iterate three times one for each row
int<03:55:11.439><c> i</c>

03:55:12.550 --> 03:55:12.560 align:start position:0%
int i
 

03:55:12.560 --> 03:55:15.349 align:start position:0%
int i
equals<03:55:12.960><c> zero</c><03:55:13.680><c> continue</c><03:55:14.160><c> this</c><03:55:14.399><c> as</c><03:55:14.560><c> long</c><03:55:14.800><c> as</c><03:55:14.960><c> i</c>

03:55:15.349 --> 03:55:15.359 align:start position:0%
equals zero continue this as long as i
 

03:55:15.359 --> 03:55:17.030 align:start position:0%
equals zero continue this as long as i
is<03:55:15.520><c> less</c><03:55:15.760><c> than</c><03:55:16.000><c> three</c>

03:55:17.030 --> 03:55:17.040 align:start position:0%
is less than three
 

03:55:17.040 --> 03:55:19.830 align:start position:0%
is less than three
increment<03:55:17.600><c> i</c><03:55:17.840><c> by</c><03:55:18.080><c> one</c><03:55:18.800><c> so</c><03:55:18.960><c> this</c><03:55:19.199><c> if</c><03:55:19.359><c> statement</c>

03:55:19.830 --> 03:55:19.840 align:start position:0%
increment i by one so this if statement
 

03:55:19.840 --> 03:55:21.910 align:start position:0%
increment i by one so this if statement
is<03:55:19.920><c> going</c><03:55:20.080><c> to</c><03:55:20.239><c> get</c><03:55:20.399><c> a</c><03:55:20.479><c> little</c><03:55:20.720><c> bit</c><03:55:20.880><c> funky</c><03:55:21.760><c> we</c>

03:55:21.910 --> 03:55:21.920 align:start position:0%
is going to get a little bit funky we
 

03:55:21.920 --> 03:55:24.389 align:start position:0%
is going to get a little bit funky we
need<03:55:22.080><c> to</c><03:55:22.239><c> check</c><03:55:22.640><c> each</c><03:55:22.960><c> set</c><03:55:23.439><c> of</c><03:55:23.760><c> horizontal</c>

03:55:24.389 --> 03:55:24.399 align:start position:0%
need to check each set of horizontal
 

03:55:24.399 --> 03:55:25.510 align:start position:0%
need to check each set of horizontal
elements

03:55:25.510 --> 03:55:25.520 align:start position:0%
elements
 

03:55:25.520 --> 03:55:30.630 align:start position:0%
elements
so<03:55:25.680><c> let's</c><03:55:25.920><c> begin</c><03:55:26.399><c> with</c><03:55:26.960><c> board</c><03:55:27.840><c> at</c><03:55:28.160><c> index</c><03:55:29.120><c> of</c><03:55:29.840><c> i</c>

03:55:30.630 --> 03:55:30.640 align:start position:0%
so let's begin with board at index of i
 

03:55:30.640 --> 03:55:33.750 align:start position:0%
so let's begin with board at index of i
and<03:55:31.279><c> zero</c><03:55:32.160><c> so</c><03:55:32.319><c> that</c><03:55:32.479><c> would</c><03:55:32.720><c> be</c><03:55:32.880><c> the</c><03:55:33.040><c> top</c><03:55:33.439><c> left</c>

03:55:33.750 --> 03:55:33.760 align:start position:0%
and zero so that would be the top left
 

03:55:33.760 --> 03:55:36.469 align:start position:0%
and zero so that would be the top left
element<03:55:34.479><c> and</c><03:55:34.720><c> we</c><03:55:34.880><c> are</c><03:55:35.040><c> checking</c><03:55:35.359><c> to</c><03:55:35.600><c> see</c><03:55:36.080><c> if</c>

03:55:36.469 --> 03:55:36.479 align:start position:0%
element and we are checking to see if
 

03:55:36.479 --> 03:55:38.710 align:start position:0%
element and we are checking to see if
the<03:55:36.640><c> character</c><03:55:37.120><c> here</c><03:55:37.680><c> is</c><03:55:37.840><c> equal</c><03:55:38.239><c> to</c><03:55:38.479><c> this</c>

03:55:38.710 --> 03:55:38.720 align:start position:0%
the character here is equal to this
 

03:55:38.720 --> 03:55:40.150 align:start position:0%
the character here is equal to this
character

03:55:40.150 --> 03:55:40.160 align:start position:0%
character
 

03:55:40.160 --> 03:55:43.110 align:start position:0%
character
so<03:55:40.560><c> board</c><03:55:41.279><c> at</c><03:55:41.600><c> index</c><03:55:42.319><c> i</c>

03:55:43.110 --> 03:55:43.120 align:start position:0%
so board at index i
 

03:55:43.120 --> 03:55:45.510 align:start position:0%
so board at index i
and<03:55:43.600><c> one</c>

03:55:45.510 --> 03:55:45.520 align:start position:0%
and one
 

03:55:45.520 --> 03:55:48.790 align:start position:0%
and one
and<03:55:45.920><c> we're</c><03:55:46.160><c> checking</c><03:55:46.479><c> to</c><03:55:46.640><c> see</c><03:55:47.359><c> if</c><03:55:47.840><c> board</c><03:55:48.479><c> at</c>

03:55:48.790 --> 03:55:48.800 align:start position:0%
and we're checking to see if board at
 

03:55:48.800 --> 03:55:52.870 align:start position:0%
and we're checking to see if board at
index<03:55:49.279><c> of</c><03:55:49.439><c> i</c><03:55:50.080><c> and</c><03:55:50.399><c> zero</c><03:55:51.199><c> is</c><03:55:51.439><c> equal</c><03:55:51.760><c> to</c><03:55:52.160><c> board</c><03:55:52.640><c> at</c>

03:55:52.870 --> 03:55:52.880 align:start position:0%
index of i and zero is equal to board at
 

03:55:52.880 --> 03:55:55.590 align:start position:0%
index of i and zero is equal to board at
index<03:55:53.359><c> of</c><03:55:53.600><c> i</c><03:55:54.239><c> and</c><03:55:54.560><c> two</c><03:55:55.040><c> so</c><03:55:55.279><c> here</c><03:55:55.439><c> we're</c>

03:55:55.590 --> 03:55:55.600 align:start position:0%
index of i and two so here we're
 

03:55:55.600 --> 03:55:57.990 align:start position:0%
index of i and two so here we're
checking<03:55:55.920><c> to</c><03:55:56.080><c> see</c><03:55:56.319><c> if</c><03:55:56.560><c> this</c><03:55:56.880><c> element</c><03:55:57.600><c> is</c><03:55:57.760><c> equal</c>

03:55:57.990 --> 03:55:58.000 align:start position:0%
checking to see if this element is equal
 

03:55:58.000 --> 03:56:00.710 align:start position:0%
checking to see if this element is equal
to<03:55:58.160><c> this</c><03:55:58.399><c> element</c><03:55:59.279><c> and</c><03:55:59.760><c> this</c><03:56:00.000><c> element</c><03:56:00.560><c> is</c>

03:56:00.710 --> 03:56:00.720 align:start position:0%
to this element and this element is
 

03:56:00.720 --> 03:56:02.309 align:start position:0%
to this element and this element is
equal<03:56:00.960><c> to</c><03:56:01.120><c> this</c><03:56:01.359><c> element</c>

03:56:02.309 --> 03:56:02.319 align:start position:0%
equal to this element
 

03:56:02.319 --> 03:56:04.070 align:start position:0%
equal to this element
if<03:56:02.479><c> they're</c><03:56:02.800><c> all</c><03:56:02.960><c> consistent</c><03:56:03.600><c> we</c><03:56:03.760><c> have</c><03:56:03.920><c> a</c>

03:56:04.070 --> 03:56:04.080 align:start position:0%
if they're all consistent we have a
 

03:56:04.080 --> 03:56:06.389 align:start position:0%
if they're all consistent we have a
winner<03:56:04.720><c> so</c><03:56:04.960><c> we</c><03:56:05.120><c> will</c><03:56:05.359><c> return</c><03:56:05.920><c> whatever</c>

03:56:06.389 --> 03:56:06.399 align:start position:0%
winner so we will return whatever
 

03:56:06.399 --> 03:56:08.229 align:start position:0%
winner so we will return whatever
character<03:56:07.120><c> is</c><03:56:07.279><c> within</c><03:56:07.760><c> one</c><03:56:08.000><c> of</c><03:56:08.080><c> these</c>

03:56:08.229 --> 03:56:08.239 align:start position:0%
character is within one of these
 

03:56:08.239 --> 03:56:11.189 align:start position:0%
character is within one of these
elements<03:56:08.640><c> let's</c><03:56:08.880><c> say</c><03:56:09.040><c> this</c><03:56:09.279><c> one</c><03:56:10.239><c> so</c><03:56:10.479><c> return</c>

03:56:11.189 --> 03:56:11.199 align:start position:0%
elements let's say this one so return
 

03:56:11.199 --> 03:56:14.550 align:start position:0%
elements let's say this one so return
board<03:56:11.760><c> at</c><03:56:12.000><c> index</c><03:56:12.399><c> of</c><03:56:12.560><c> i</c><03:56:13.040><c> index</c><03:56:13.359><c> of</c><03:56:13.520><c> zero</c><03:56:14.160><c> return</c>

03:56:14.550 --> 03:56:14.560 align:start position:0%
board at index of i index of zero return
 

03:56:14.560 --> 03:56:16.870 align:start position:0%
board at index of i index of zero return
whatever<03:56:14.960><c> character</c><03:56:15.439><c> is</c><03:56:15.600><c> within</c><03:56:15.920><c> here</c><03:56:16.640><c> this</c>

03:56:16.870 --> 03:56:16.880 align:start position:0%
whatever character is within here this
 

03:56:16.880 --> 03:56:18.630 align:start position:0%
whatever character is within here this
section<03:56:17.199><c> of</c><03:56:17.359><c> code</c><03:56:17.680><c> will</c><03:56:17.920><c> check</c><03:56:18.239><c> all</c><03:56:18.399><c> of</c><03:56:18.479><c> the</c>

03:56:18.630 --> 03:56:18.640 align:start position:0%
section of code will check all of the
 

03:56:18.640 --> 03:56:21.189 align:start position:0%
section of code will check all of the
win<03:56:18.880><c> conditions</c><03:56:19.520><c> for</c><03:56:19.840><c> each</c><03:56:20.080><c> row</c><03:56:20.640><c> but</c><03:56:20.800><c> now</c><03:56:21.040><c> we</c>

03:56:21.189 --> 03:56:21.199 align:start position:0%
win conditions for each row but now we
 

03:56:21.199 --> 03:56:25.030 align:start position:0%
win conditions for each row but now we
need<03:56:21.439><c> columns</c><03:56:22.319><c> so</c><03:56:22.840><c> check</c><03:56:23.840><c> columns</c>

03:56:25.030 --> 03:56:25.040 align:start position:0%
need columns so check columns
 

03:56:25.040 --> 03:56:27.910 align:start position:0%
need columns so check columns
and<03:56:25.279><c> we</c><03:56:25.439><c> can</c><03:56:25.600><c> copy</c><03:56:25.920><c> most</c><03:56:26.160><c> of</c><03:56:26.319><c> this</c><03:56:26.720><c> so</c><03:56:27.040><c> copy</c><03:56:27.439><c> it</c>

03:56:27.910 --> 03:56:27.920 align:start position:0%
and we can copy most of this so copy it
 

03:56:27.920 --> 03:56:29.590 align:start position:0%
and we can copy most of this so copy it
and<03:56:28.160><c> paste</c><03:56:28.560><c> it</c>

03:56:29.590 --> 03:56:29.600 align:start position:0%
and paste it
 

03:56:29.600 --> 03:56:31.110 align:start position:0%
and paste it
then<03:56:29.760><c> we</c><03:56:29.920><c> just</c><03:56:30.080><c> need</c><03:56:30.319><c> to</c><03:56:30.479><c> change</c><03:56:30.880><c> these</c>

03:56:31.110 --> 03:56:31.120 align:start position:0%
then we just need to change these
 

03:56:31.120 --> 03:56:32.790 align:start position:0%
then we just need to change these
indices<03:56:31.600><c> around</c>

03:56:32.790 --> 03:56:32.800 align:start position:0%
indices around
 

03:56:32.800 --> 03:56:35.990 align:start position:0%
indices around
so<03:56:33.199><c> if</c><03:56:33.520><c> board</c><03:56:33.920><c> at</c><03:56:34.160><c> index</c><03:56:34.880><c> 0</c>

03:56:35.990 --> 03:56:36.000 align:start position:0%
so if board at index 0
 

03:56:36.000 --> 03:56:36.870 align:start position:0%
so if board at index 0
i

03:56:36.870 --> 03:56:36.880 align:start position:0%
i
 

03:56:36.880 --> 03:56:40.550 align:start position:0%
i
is<03:56:37.040><c> equal</c><03:56:37.359><c> to</c><03:56:37.680><c> board</c><03:56:38.080><c> at</c><03:56:38.399><c> index</c><03:56:39.040><c> of</c><03:56:39.520><c> one</c>

03:56:40.550 --> 03:56:40.560 align:start position:0%
is equal to board at index of one
 

03:56:40.560 --> 03:56:42.309 align:start position:0%
is equal to board at index of one
i

03:56:42.309 --> 03:56:42.319 align:start position:0%
i
 

03:56:42.319 --> 03:56:45.990 align:start position:0%
i
and<03:56:42.960><c> board</c><03:56:43.359><c> at</c><03:56:43.600><c> index</c><03:56:44.160><c> of</c><03:56:44.640><c> zero</c>

03:56:45.990 --> 03:56:46.000 align:start position:0%
and board at index of zero
 

03:56:46.000 --> 03:56:46.790 align:start position:0%
and board at index of zero
i

03:56:46.790 --> 03:56:46.800 align:start position:0%
i
 

03:56:46.800 --> 03:56:50.389 align:start position:0%
i
is<03:56:47.040><c> equal</c><03:56:47.359><c> to</c><03:56:48.000><c> board</c><03:56:48.560><c> at</c><03:56:48.800><c> index</c><03:56:49.359><c> of</c><03:56:49.600><c> two</c>

03:56:50.389 --> 03:56:50.399 align:start position:0%
is equal to board at index of two
 

03:56:50.399 --> 03:56:53.110 align:start position:0%
is equal to board at index of two
i<03:56:51.040><c> then</c><03:56:51.279><c> we</c><03:56:51.439><c> will</c><03:56:51.600><c> return</c><03:56:52.160><c> whatever</c><03:56:52.560><c> character</c>

03:56:53.110 --> 03:56:53.120 align:start position:0%
i then we will return whatever character
 

03:56:53.120 --> 03:56:56.710 align:start position:0%
i then we will return whatever character
is<03:56:53.279><c> within</c><03:56:53.920><c> board</c><03:56:54.560><c> index</c><03:56:55.120><c> of</c><03:56:55.279><c> zero</c><03:56:56.080><c> index</c><03:56:56.560><c> of</c>

03:56:56.710 --> 03:56:56.720 align:start position:0%
is within board index of zero index of
 

03:56:56.720 --> 03:56:59.269 align:start position:0%
is within board index of zero index of
one<03:56:57.359><c> so</c><03:56:57.600><c> this</c><03:56:57.840><c> section</c><03:56:58.160><c> of</c><03:56:58.319><c> code</c><03:56:58.720><c> will</c><03:56:58.960><c> check</c>

03:56:59.269 --> 03:56:59.279 align:start position:0%
one so this section of code will check
 

03:56:59.279 --> 03:57:02.229 align:start position:0%
one so this section of code will check
for<03:56:59.520><c> any</c><03:56:59.920><c> column</c><03:57:00.399><c> when</c><03:57:00.640><c> conditions</c><03:57:01.760><c> then</c><03:57:01.920><c> next</c>

03:57:02.229 --> 03:57:02.239 align:start position:0%
for any column when conditions then next
 

03:57:02.239 --> 03:57:05.349 align:start position:0%
for any column when conditions then next
we<03:57:02.319><c> have</c><03:57:02.479><c> diagonals</c><03:57:03.520><c> there's</c><03:57:03.840><c> only</c><03:57:04.080><c> two</c>

03:57:05.349 --> 03:57:05.359 align:start position:0%
we have diagonals there's only two
 

03:57:05.359 --> 03:57:08.710 align:start position:0%
we have diagonals there's only two
check<03:57:06.080><c> diagonals</c>

03:57:08.710 --> 03:57:08.720 align:start position:0%
check diagonals
 

03:57:08.720 --> 03:57:11.189 align:start position:0%
check diagonals
so<03:57:09.040><c> let's</c><03:57:09.279><c> copy</c><03:57:09.680><c> this</c><03:57:09.840><c> section</c><03:57:10.160><c> of</c><03:57:10.319><c> code</c>

03:57:11.189 --> 03:57:11.199 align:start position:0%
so let's copy this section of code
 

03:57:11.199 --> 03:57:15.670 align:start position:0%
so let's copy this section of code
paste<03:57:11.600><c> it</c><03:57:12.239><c> so</c><03:57:12.560><c> our</c><03:57:12.800><c> indices</c><03:57:13.439><c> are</c><03:57:13.920><c> 0</c><03:57:14.800><c> 0</c>

03:57:15.670 --> 03:57:15.680 align:start position:0%
paste it so our indices are 0 0
 

03:57:15.680 --> 03:57:16.950 align:start position:0%
paste it so our indices are 0 0
is<03:57:15.840><c> equal</c><03:57:16.239><c> to</c>

03:57:16.950 --> 03:57:16.960 align:start position:0%
is equal to
 

03:57:16.960 --> 03:57:17.750 align:start position:0%
is equal to
1

03:57:17.750 --> 03:57:17.760 align:start position:0%
1
 

03:57:17.760 --> 03:57:21.030 align:start position:0%
1
1.<03:57:18.319><c> 1</c><03:57:18.479><c> 1</c><03:57:18.720><c> is</c><03:57:18.800><c> in</c><03:57:18.880><c> the</c><03:57:18.960><c> middle</c><03:57:19.760><c> and</c><03:57:20.399><c> board</c><03:57:20.800><c> at</c>

03:57:21.030 --> 03:57:21.040 align:start position:0%
1. 1 1 is in the middle and board at
 

03:57:21.040 --> 03:57:23.429 align:start position:0%
1. 1 1 is in the middle and board at
index<03:57:21.520><c> of</c><03:57:21.920><c> zero</c><03:57:22.399><c> zero</c>

03:57:23.429 --> 03:57:23.439 align:start position:0%
index of zero zero
 

03:57:23.439 --> 03:57:27.349 align:start position:0%
index of zero zero
is<03:57:23.600><c> equal</c><03:57:23.920><c> to</c><03:57:24.239><c> board</c><03:57:24.640><c> at</c><03:57:24.880><c> index</c><03:57:25.359><c> of</c><03:57:25.680><c> two</c><03:57:26.319><c> two</c>

03:57:27.349 --> 03:57:27.359 align:start position:0%
is equal to board at index of two two
 

03:57:27.359 --> 03:57:29.910 align:start position:0%
is equal to board at index of two two
if<03:57:27.600><c> so</c><03:57:27.840><c> then</c><03:57:28.080><c> return</c><03:57:28.880><c> zero</c>

03:57:29.910 --> 03:57:29.920 align:start position:0%
if so then return zero
 

03:57:29.920 --> 03:57:31.110 align:start position:0%
if so then return zero
zero

03:57:31.110 --> 03:57:31.120 align:start position:0%
zero
 

03:57:31.120 --> 03:57:33.750 align:start position:0%
zero
then<03:57:31.359><c> we</c><03:57:31.520><c> have</c><03:57:31.680><c> one</c><03:57:31.920><c> more</c><03:57:32.160><c> diagonal</c><03:57:33.120><c> so</c><03:57:33.439><c> copy</c>

03:57:33.750 --> 03:57:33.760 align:start position:0%
then we have one more diagonal so copy
 

03:57:33.760 --> 03:57:34.630 align:start position:0%
then we have one more diagonal so copy
this

03:57:34.630 --> 03:57:34.640 align:start position:0%
this
 

03:57:34.640 --> 03:57:36.150 align:start position:0%
this
paste<03:57:35.040><c> it</c>

03:57:36.150 --> 03:57:36.160 align:start position:0%
paste it
 

03:57:36.160 --> 03:57:39.830 align:start position:0%
paste it
and<03:57:36.319><c> here</c><03:57:36.560><c> are</c><03:57:36.720><c> the</c><03:57:36.880><c> elements</c><03:57:37.680><c> if</c><03:57:38.160><c> board</c><03:57:38.720><c> at</c><03:57:39.040><c> 0</c>

03:57:39.830 --> 03:57:39.840 align:start position:0%
and here are the elements if board at 0
 

03:57:39.840 --> 03:57:40.630 align:start position:0%
and here are the elements if board at 0
2

03:57:40.630 --> 03:57:40.640 align:start position:0%
2
 

03:57:40.640 --> 03:57:42.630 align:start position:0%
2
is<03:57:40.800><c> equal</c><03:57:41.120><c> to</c><03:57:41.359><c> board</c><03:57:41.840><c> at</c>

03:57:42.630 --> 03:57:42.640 align:start position:0%
is equal to board at
 

03:57:42.640 --> 03:57:46.870 align:start position:0%
is equal to board at
1<03:57:43.120><c> 1</c><03:57:43.760><c> so</c><03:57:44.000><c> 0</c><03:57:44.399><c> 2</c><03:57:44.720><c> is</c><03:57:44.880><c> the</c><03:57:45.120><c> bottom</c><03:57:45.439><c> left</c><03:57:46.160><c> 1</c><03:57:46.399><c> 1</c><03:57:46.640><c> is</c><03:57:46.720><c> the</c>

03:57:46.870 --> 03:57:46.880 align:start position:0%
1 1 so 0 2 is the bottom left 1 1 is the
 

03:57:46.880 --> 03:57:48.389 align:start position:0%
1 1 so 0 2 is the bottom left 1 1 is the
middle<03:57:47.600><c> and</c>

03:57:48.389 --> 03:57:48.399 align:start position:0%
middle and
 

03:57:48.399 --> 03:57:52.070 align:start position:0%
middle and
board<03:57:48.880><c> at</c><03:57:49.199><c> zero</c><03:57:49.600><c> zero</c><03:57:50.239><c> equals</c><03:57:50.800><c> board</c><03:57:51.359><c> at</c><03:57:51.760><c> two</c>

03:57:52.070 --> 03:57:52.080 align:start position:0%
board at zero zero equals board at two
 

03:57:52.080 --> 03:57:55.030 align:start position:0%
board at zero zero equals board at two
zero<03:57:52.800><c> that</c><03:57:53.120><c> is</c><03:57:53.359><c> the</c><03:57:53.680><c> top</c><03:57:54.080><c> right</c><03:57:54.399><c> corner</c><03:57:54.800><c> right</c>

03:57:55.030 --> 03:57:55.040 align:start position:0%
zero that is the top right corner right
 

03:57:55.040 --> 03:57:57.429 align:start position:0%
zero that is the top right corner right
here<03:57:55.600><c> so</c><03:57:55.760><c> if</c><03:57:55.840><c> we</c><03:57:56.000><c> have</c><03:57:56.239><c> a</c><03:57:56.479><c> diagonal</c><03:57:57.040><c> we</c><03:57:57.199><c> have</c><03:57:57.359><c> a</c>

03:57:57.429 --> 03:57:57.439 align:start position:0%
here so if we have a diagonal we have a
 

03:57:57.439 --> 03:58:00.950 align:start position:0%
here so if we have a diagonal we have a
winner<03:57:58.160><c> so</c><03:57:58.399><c> return</c><03:57:59.040><c> board</c><03:57:59.520><c> at</c><03:57:59.920><c> zero</c>

03:58:00.950 --> 03:58:00.960 align:start position:0%
winner so return board at zero
 

03:58:00.960 --> 03:58:03.429 align:start position:0%
winner so return board at zero
2<03:58:01.279><c> let's</c><03:58:01.520><c> say</c><03:58:02.080><c> if</c><03:58:02.319><c> after</c><03:58:02.720><c> checking</c><03:58:03.199><c> all</c><03:58:03.359><c> of</c>

03:58:03.429 --> 03:58:03.439 align:start position:0%
2 let's say if after checking all of
 

03:58:03.439 --> 03:58:05.429 align:start position:0%
2 let's say if after checking all of
these<03:58:03.680><c> different</c><03:58:03.920><c> win</c><03:58:04.160><c> conditions</c><03:58:04.960><c> there</c><03:58:05.279><c> is</c>

03:58:05.429 --> 03:58:05.439 align:start position:0%
these different win conditions there is
 

03:58:05.439 --> 03:58:06.550 align:start position:0%
these different win conditions there is
no<03:58:05.680><c> winner</c>

03:58:06.550 --> 03:58:06.560 align:start position:0%
no winner
 

03:58:06.560 --> 03:58:09.110 align:start position:0%
no winner
then<03:58:06.800><c> let's</c><03:58:07.120><c> return</c><03:58:07.760><c> an</c><03:58:07.920><c> empty</c><03:58:08.239><c> character</c>

03:58:09.110 --> 03:58:09.120 align:start position:0%
then let's return an empty character
 

03:58:09.120 --> 03:58:11.590 align:start position:0%
then let's return an empty character
that<03:58:09.359><c> means</c><03:58:09.600><c> there</c><03:58:09.840><c> currently</c><03:58:10.319><c> is</c><03:58:10.479><c> no</c><03:58:10.640><c> winner</c>

03:58:11.590 --> 03:58:11.600 align:start position:0%
that means there currently is no winner
 

03:58:11.600 --> 03:58:13.910 align:start position:0%
that means there currently is no winner
so<03:58:11.760><c> then</c><03:58:12.000><c> head</c><03:58:12.160><c> back</c><03:58:12.319><c> to</c><03:58:12.479><c> the</c><03:58:12.560><c> main</c><03:58:12.880><c> function</c>

03:58:13.910 --> 03:58:13.920 align:start position:0%
so then head back to the main function
 

03:58:13.920 --> 03:58:16.389 align:start position:0%
so then head back to the main function
after<03:58:14.239><c> invoking</c><03:58:14.720><c> the</c><03:58:14.960><c> check</c><03:58:15.199><c> winner</c><03:58:15.520><c> function</c>

03:58:16.389 --> 03:58:16.399 align:start position:0%
after invoking the check winner function
 

03:58:16.399 --> 03:58:17.910 align:start position:0%
after invoking the check winner function
let's<03:58:16.640><c> write</c><03:58:16.800><c> an</c><03:58:16.960><c> if</c><03:58:17.120><c> statement</c><03:58:17.520><c> to</c><03:58:17.600><c> see</c><03:58:17.760><c> if</c>

03:58:17.910 --> 03:58:17.920 align:start position:0%
let's write an if statement to see if
 

03:58:17.920 --> 03:58:19.750 align:start position:0%
let's write an if statement to see if
the<03:58:18.000><c> game</c><03:58:18.239><c> is</c><03:58:18.399><c> over</c>

03:58:19.750 --> 03:58:19.760 align:start position:0%
the game is over
 

03:58:19.760 --> 03:58:23.349 align:start position:0%
the game is over
so<03:58:20.000><c> our</c><03:58:20.239><c> condition</c><03:58:21.040><c> is</c><03:58:21.279><c> if</c><03:58:22.000><c> winner</c><03:58:22.720><c> does</c><03:58:22.960><c> not</c>

03:58:23.349 --> 03:58:23.359 align:start position:0%
so our condition is if winner does not
 

03:58:23.359 --> 03:58:26.229 align:start position:0%
so our condition is if winner does not
equal<03:58:24.000><c> an</c><03:58:24.160><c> empty</c><03:58:24.479><c> space</c><03:58:25.359><c> that</c><03:58:25.600><c> means</c><03:58:25.840><c> there</c><03:58:26.080><c> is</c>

03:58:26.229 --> 03:58:26.239 align:start position:0%
equal an empty space that means there is
 

03:58:26.239 --> 03:58:27.349 align:start position:0%
equal an empty space that means there is
a<03:58:26.319><c> winner</c>

03:58:27.349 --> 03:58:27.359 align:start position:0%
a winner
 

03:58:27.359 --> 03:58:30.550 align:start position:0%
a winner
or<03:58:28.000><c> after</c><03:58:28.399><c> invoking</c><03:58:28.960><c> the</c><03:58:29.359><c> check</c><03:58:29.760><c> free</c><03:58:30.000><c> spaces</c>

03:58:30.550 --> 03:58:30.560 align:start position:0%
or after invoking the check free spaces
 

03:58:30.560 --> 03:58:34.070 align:start position:0%
or after invoking the check free spaces
function<03:58:31.359><c> and</c><03:58:31.600><c> the</c><03:58:31.680><c> value</c><03:58:32.160><c> returned</c><03:58:32.880><c> is</c><03:58:33.040><c> zero</c>

03:58:34.070 --> 03:58:34.080 align:start position:0%
function and the value returned is zero
 

03:58:34.080 --> 03:58:36.229 align:start position:0%
function and the value returned is zero
then<03:58:34.399><c> we</c><03:58:34.640><c> will</c><03:58:35.040><c> break</c><03:58:35.520><c> out</c><03:58:35.680><c> of</c><03:58:35.840><c> this</c><03:58:36.000><c> while</c>

03:58:36.229 --> 03:58:36.239 align:start position:0%
then we will break out of this while
 

03:58:36.239 --> 03:58:38.229 align:start position:0%
then we will break out of this while
loop<03:58:36.800><c> this</c><03:58:37.040><c> is</c><03:58:37.199><c> everything</c><03:58:37.600><c> done</c><03:58:37.920><c> for</c><03:58:38.080><c> the</c>

03:58:38.229 --> 03:58:38.239 align:start position:0%
loop this is everything done for the
 

03:58:38.239 --> 03:58:40.070 align:start position:0%
loop this is everything done for the
player<03:58:38.640><c> now</c><03:58:38.880><c> we</c><03:58:38.960><c> need</c><03:58:39.120><c> to</c><03:58:39.199><c> create</c><03:58:39.600><c> a</c><03:58:39.760><c> section</c>

03:58:40.070 --> 03:58:40.080 align:start position:0%
player now we need to create a section
 

03:58:40.080 --> 03:58:41.830 align:start position:0%
player now we need to create a section
of<03:58:40.160><c> code</c><03:58:40.479><c> within</c><03:58:40.720><c> our</c><03:58:40.880><c> while</c><03:58:41.120><c> loop</c><03:58:41.439><c> for</c><03:58:41.680><c> the</c>

03:58:41.830 --> 03:58:41.840 align:start position:0%
of code within our while loop for the
 

03:58:41.840 --> 03:58:42.790 align:start position:0%
of code within our while loop for the
computer

03:58:42.790 --> 03:58:42.800 align:start position:0%
computer
 

03:58:42.800 --> 03:58:45.910 align:start position:0%
computer
so<03:58:43.120><c> copy</c><03:58:43.760><c> this</c><03:58:44.000><c> section</c><03:58:44.319><c> of</c><03:58:44.479><c> code</c><03:58:45.279><c> and</c><03:58:45.600><c> paste</c>

03:58:45.910 --> 03:58:45.920 align:start position:0%
so copy this section of code and paste
 

03:58:45.920 --> 03:58:47.990 align:start position:0%
so copy this section of code and paste
it<03:58:46.560><c> and</c><03:58:46.720><c> this</c><03:58:46.960><c> time</c><03:58:47.279><c> it</c><03:58:47.439><c> will</c><03:58:47.600><c> be</c><03:58:47.840><c> the</c>

03:58:47.990 --> 03:58:48.000 align:start position:0%
it and this time it will be the
 

03:58:48.000 --> 03:58:50.389 align:start position:0%
it and this time it will be the
computer's<03:58:48.560><c> move</c>

03:58:50.389 --> 03:58:50.399 align:start position:0%
computer's move
 

03:58:50.399 --> 03:58:52.710 align:start position:0%
computer's move
invoke<03:58:50.800><c> the</c><03:58:50.960><c> computer</c><03:58:51.359><c> move</c><03:58:51.600><c> function</c><03:58:52.319><c> and</c><03:58:52.560><c> we</c>

03:58:52.710 --> 03:58:52.720 align:start position:0%
invoke the computer move function and we
 

03:58:52.720 --> 03:58:54.950 align:start position:0%
invoke the computer move function and we
will<03:58:52.880><c> need</c><03:58:53.040><c> to</c><03:58:53.199><c> fill</c><03:58:53.439><c> in</c><03:58:53.680><c> the</c><03:58:53.920><c> computer</c><03:58:54.560><c> move</c>

03:58:54.950 --> 03:58:54.960 align:start position:0%
will need to fill in the computer move
 

03:58:54.960 --> 03:58:55.990 align:start position:0%
will need to fill in the computer move
function

03:58:55.990 --> 03:58:56.000 align:start position:0%
function
 

03:58:56.000 --> 03:58:58.229 align:start position:0%
function
within<03:58:56.479><c> the</c><03:58:56.640><c> computer</c><03:58:57.040><c> move</c><03:58:57.279><c> function</c><03:58:58.080><c> the</c>

03:58:58.229 --> 03:58:58.239 align:start position:0%
within the computer move function the
 

03:58:58.239 --> 03:58:59.990 align:start position:0%
within the computer move function the
computer's<03:58:58.800><c> move</c><03:58:59.120><c> will</c><03:58:59.359><c> be</c><03:58:59.520><c> randomly</c>

03:58:59.990 --> 03:59:00.000 align:start position:0%
computer's move will be randomly
 

03:59:00.000 --> 03:59:02.229 align:start position:0%
computer's move will be randomly
generated<03:59:00.800><c> and</c><03:59:01.040><c> to</c><03:59:01.279><c> generate</c><03:59:01.760><c> some</c><03:59:01.920><c> random</c>

03:59:02.229 --> 03:59:02.239 align:start position:0%
generated and to generate some random
 

03:59:02.239 --> 03:59:06.309 align:start position:0%
generated and to generate some random
numbers<03:59:02.720><c> we'll</c><03:59:02.880><c> need</c><03:59:03.120><c> a</c><03:59:03.359><c> seed</c>

03:59:06.309 --> 03:59:06.319 align:start position:0%
 
 

03:59:06.319 --> 03:59:08.389 align:start position:0%
 
so<03:59:06.560><c> to</c><03:59:06.800><c> create</c><03:59:07.040><c> a</c><03:59:07.120><c> seed</c><03:59:07.439><c> to</c><03:59:07.600><c> generate</c><03:59:08.080><c> random</c>

03:59:08.389 --> 03:59:08.399 align:start position:0%
so to create a seed to generate random
 

03:59:08.399 --> 03:59:09.990 align:start position:0%
so to create a seed to generate random
numbers

03:59:09.990 --> 03:59:10.000 align:start position:0%
numbers
 

03:59:10.000 --> 03:59:12.469 align:start position:0%
numbers
invoke<03:59:10.479><c> the</c><03:59:10.720><c> s</c><03:59:11.040><c> rand</c><03:59:11.439><c> function</c>

03:59:12.469 --> 03:59:12.479 align:start position:0%
invoke the s rand function
 

03:59:12.479 --> 03:59:14.469 align:start position:0%
invoke the s rand function
pass<03:59:12.880><c> in</c><03:59:13.199><c> time</c>

03:59:14.469 --> 03:59:14.479 align:start position:0%
pass in time
 

03:59:14.479 --> 03:59:17.510 align:start position:0%
pass in time
invoke<03:59:14.960><c> it</c><03:59:15.520><c> pass</c><03:59:15.840><c> in</c><03:59:16.000><c> zero</c>

03:59:17.510 --> 03:59:17.520 align:start position:0%
invoke it pass in zero
 

03:59:17.520 --> 03:59:21.189 align:start position:0%
invoke it pass in zero
and<03:59:17.760><c> we</c><03:59:17.920><c> will</c><03:59:18.080><c> declare</c><03:59:18.720><c> intex</c><03:59:19.760><c> and</c><03:59:20.080><c> into</c><03:59:20.399><c> y</c><03:59:20.960><c> we</c>

03:59:21.189 --> 03:59:21.199 align:start position:0%
and we will declare intex and into y we
 

03:59:21.199 --> 03:59:23.590 align:start position:0%
and we will declare intex and into y we
will<03:59:21.359><c> generate</c><03:59:22.080><c> two</c><03:59:22.239><c> random</c><03:59:22.640><c> numbers</c><03:59:23.040><c> between</c>

03:59:23.590 --> 03:59:23.600 align:start position:0%
will generate two random numbers between
 

03:59:23.600 --> 03:59:26.389 align:start position:0%
will generate two random numbers between
zero<03:59:24.080><c> and</c><03:59:24.479><c> two</c><03:59:25.199><c> now</c><03:59:25.359><c> before</c><03:59:25.680><c> we</c><03:59:25.920><c> generate</c><03:59:26.239><c> some</c>

03:59:26.389 --> 03:59:26.399 align:start position:0%
zero and two now before we generate some
 

03:59:26.399 --> 03:59:28.309 align:start position:0%
zero and two now before we generate some
random<03:59:26.720><c> numbers</c><03:59:27.120><c> let's</c><03:59:27.439><c> check</c><03:59:27.600><c> to</c><03:59:27.760><c> see</c><03:59:28.000><c> if</c><03:59:28.080><c> we</c>

03:59:28.309 --> 03:59:28.319 align:start position:0%
random numbers let's check to see if we
 

03:59:28.319 --> 03:59:30.870 align:start position:0%
random numbers let's check to see if we
even<03:59:28.560><c> have</c><03:59:28.720><c> any</c><03:59:28.960><c> free</c><03:59:29.199><c> spaces</c><03:59:29.600><c> available</c>

03:59:30.870 --> 03:59:30.880 align:start position:0%
even have any free spaces available
 

03:59:30.880 --> 03:59:33.830 align:start position:0%
even have any free spaces available
so<03:59:31.279><c> our</c><03:59:31.600><c> if</c><03:59:31.680><c> statement</c><03:59:32.239><c> is</c><03:59:32.319><c> going</c><03:59:32.479><c> to</c><03:59:32.640><c> be</c><03:59:33.279><c> check</c>

03:59:33.830 --> 03:59:33.840 align:start position:0%
so our if statement is going to be check
 

03:59:33.840 --> 03:59:37.269 align:start position:0%
so our if statement is going to be check
free<03:59:34.239><c> spaces</c><03:59:35.279><c> invoke</c><03:59:35.760><c> it</c><03:59:36.319><c> then</c><03:59:36.560><c> if</c><03:59:36.880><c> this</c><03:59:37.120><c> is</c>

03:59:37.269 --> 03:59:37.279 align:start position:0%
free spaces invoke it then if this is
 

03:59:37.279 --> 03:59:39.590 align:start position:0%
free spaces invoke it then if this is
greater<03:59:37.600><c> than</c><03:59:37.840><c> zero</c><03:59:38.720><c> then</c><03:59:38.880><c> we</c><03:59:39.040><c> will</c><03:59:39.279><c> generate</c>

03:59:39.590 --> 03:59:39.600 align:start position:0%
greater than zero then we will generate
 

03:59:39.600 --> 03:59:41.110 align:start position:0%
greater than zero then we will generate
some<03:59:39.840><c> random</c><03:59:40.160><c> numbers</c>

03:59:41.110 --> 03:59:41.120 align:start position:0%
some random numbers
 

03:59:41.120 --> 03:59:44.950 align:start position:0%
some random numbers
and<03:59:41.359><c> we'll</c><03:59:41.520><c> do</c><03:59:41.760><c> so</c><03:59:42.000><c> within</c><03:59:42.399><c> a</c><03:59:42.640><c> do</c><03:59:42.800><c> while</c><03:59:43.120><c> loop</c>

03:59:44.950 --> 03:59:44.960 align:start position:0%
and we'll do so within a do while loop
 

03:59:44.960 --> 03:59:47.110 align:start position:0%
and we'll do so within a do while loop
so<03:59:45.120><c> within</c><03:59:45.600><c> this</c><03:59:45.840><c> do</c><03:59:46.000><c> while</c><03:59:46.319><c> loop</c><03:59:46.720><c> we</c><03:59:46.880><c> will</c>

03:59:47.110 --> 03:59:47.120 align:start position:0%
so within this do while loop we will
 

03:59:47.120 --> 03:59:49.750 align:start position:0%
so within this do while loop we will
generate<03:59:47.600><c> two</c><03:59:47.760><c> random</c><03:59:48.160><c> numbers</c><03:59:48.560><c> between</c><03:59:49.279><c> 0</c>

03:59:49.750 --> 03:59:49.760 align:start position:0%
generate two random numbers between 0
 

03:59:49.760 --> 03:59:50.870 align:start position:0%
generate two random numbers between 0
and<03:59:50.000><c> 2.</c>

03:59:50.870 --> 03:59:50.880 align:start position:0%
and 2.
 

03:59:50.880 --> 03:59:52.389 align:start position:0%
and 2.
x<03:59:51.359><c> equals</c>

03:59:52.389 --> 03:59:52.399 align:start position:0%
x equals
 

03:59:52.399 --> 03:59:54.389 align:start position:0%
x equals
invoke<03:59:52.800><c> the</c><03:59:52.960><c> rand</c><03:59:53.279><c> function</c>

03:59:54.389 --> 03:59:54.399 align:start position:0%
invoke the rand function
 

03:59:54.399 --> 03:59:56.630 align:start position:0%
invoke the rand function
modulus<03:59:55.199><c> three</c>

03:59:56.630 --> 03:59:56.640 align:start position:0%
modulus three
 

03:59:56.640 --> 04:00:00.070 align:start position:0%
modulus three
then<03:59:57.040><c> y</c><03:59:57.680><c> equals</c><03:59:58.319><c> invoke</c><03:59:58.720><c> the</c><03:59:58.880><c> rand</c><03:59:59.199><c> function</c>

04:00:00.070 --> 04:00:00.080 align:start position:0%
then y equals invoke the rand function
 

04:00:00.080 --> 04:00:02.950 align:start position:0%
then y equals invoke the rand function
modulus<04:00:00.800><c> three</c><04:00:01.439><c> with</c><04:00:01.680><c> our</c><04:00:01.840><c> condition</c><04:00:02.720><c> let's</c>

04:00:02.950 --> 04:00:02.960 align:start position:0%
modulus three with our condition let's
 

04:00:02.960 --> 04:00:05.269 align:start position:0%
modulus three with our condition let's
check<04:00:03.199><c> to</c><04:00:03.359><c> see</c><04:00:03.680><c> if</c><04:00:03.920><c> the</c><04:00:04.080><c> spot</c><04:00:04.399><c> generated</c><04:00:05.120><c> is</c>

04:00:05.269 --> 04:00:05.279 align:start position:0%
check to see if the spot generated is
 

04:00:05.279 --> 04:00:06.389 align:start position:0%
check to see if the spot generated is
even<04:00:05.520><c> open</c>

04:00:06.389 --> 04:00:06.399 align:start position:0%
even open
 

04:00:06.399 --> 04:00:09.110 align:start position:0%
even open
so<04:00:06.720><c> board</c><04:00:07.439><c> at</c><04:00:07.760><c> index</c><04:00:08.160><c> of</c><04:00:08.399><c> x</c>

04:00:09.110 --> 04:00:09.120 align:start position:0%
so board at index of x
 

04:00:09.120 --> 04:00:10.309 align:start position:0%
so board at index of x
and<04:00:09.359><c> y</c>

04:00:10.309 --> 04:00:10.319 align:start position:0%
and y
 

04:00:10.319 --> 04:00:13.269 align:start position:0%
and y
does<04:00:10.560><c> not</c><04:00:10.960><c> equal</c><04:00:11.439><c> an</c><04:00:11.600><c> empty</c><04:00:11.920><c> space</c><04:00:12.720><c> so</c><04:00:12.960><c> we</c><04:00:13.120><c> will</c>

04:00:13.269 --> 04:00:13.279 align:start position:0%
does not equal an empty space so we will
 

04:00:13.279 --> 04:00:15.910 align:start position:0%
does not equal an empty space so we will
keep<04:00:13.520><c> on</c><04:00:13.680><c> generating</c><04:00:14.319><c> random</c><04:00:14.720><c> numbers</c><04:00:15.279><c> until</c>

04:00:15.910 --> 04:00:15.920 align:start position:0%
keep on generating random numbers until
 

04:00:15.920 --> 04:00:18.309 align:start position:0%
keep on generating random numbers until
there<04:00:16.160><c> is</c><04:00:16.239><c> an</c><04:00:16.399><c> open</c><04:00:16.640><c> space</c><04:00:17.520><c> then</c><04:00:17.760><c> escape</c><04:00:18.080><c> this</c>

04:00:18.309 --> 04:00:18.319 align:start position:0%
there is an open space then escape this
 

04:00:18.319 --> 04:00:21.189 align:start position:0%
there is an open space then escape this
while<04:00:18.560><c> loop</c><04:00:19.120><c> so</c><04:00:19.359><c> if</c><04:00:19.520><c> we</c><04:00:19.680><c> find</c><04:00:20.000><c> an</c><04:00:20.160><c> open</c><04:00:20.399><c> space</c>

04:00:21.189 --> 04:00:21.199 align:start position:0%
while loop so if we find an open space
 

04:00:21.199 --> 04:00:25.750 align:start position:0%
while loop so if we find an open space
let's<04:00:21.439><c> take</c><04:00:21.680><c> our</c><04:00:21.920><c> board</c><04:00:22.720><c> at</c><04:00:23.040><c> index</c><04:00:23.760><c> of</c><04:00:24.080><c> x</c><04:00:24.720><c> and</c><04:00:25.040><c> y</c>

04:00:25.750 --> 04:00:25.760 align:start position:0%
let's take our board at index of x and y
 

04:00:25.760 --> 04:00:28.469 align:start position:0%
let's take our board at index of x and y
set<04:00:26.000><c> the</c><04:00:26.080><c> sequel</c><04:00:26.479><c> to</c><04:00:26.720><c> our</c><04:00:26.880><c> computer</c><04:00:27.359><c> player</c>

04:00:28.469 --> 04:00:28.479 align:start position:0%
set the sequel to our computer player
 

04:00:28.479 --> 04:00:31.030 align:start position:0%
set the sequel to our computer player
this<04:00:28.720><c> is</c><04:00:28.880><c> all</c><04:00:28.960><c> within</c><04:00:29.279><c> an</c><04:00:29.439><c> if</c><04:00:29.600><c> statement</c>

04:00:31.030 --> 04:00:31.040 align:start position:0%
this is all within an if statement
 

04:00:31.040 --> 04:00:33.030 align:start position:0%
this is all within an if statement
else<04:00:31.520><c> if</c><04:00:31.680><c> there</c><04:00:32.000><c> are</c><04:00:32.160><c> no</c><04:00:32.399><c> more</c><04:00:32.560><c> spaces</c>

04:00:33.030 --> 04:00:33.040 align:start position:0%
else if there are no more spaces
 

04:00:33.040 --> 04:00:34.229 align:start position:0%
else if there are no more spaces
available

04:00:34.229 --> 04:00:34.239 align:start position:0%
available
 

04:00:34.239 --> 04:00:39.349 align:start position:0%
available
we<04:00:34.399><c> will</c><04:00:34.640><c> invoke</c><04:00:35.120><c> the</c><04:00:35.520><c> print</c><04:00:36.319><c> winner</c><04:00:36.960><c> function</c>

04:00:39.349 --> 04:00:39.359 align:start position:0%
we will invoke the print winner function
 

04:00:39.359 --> 04:00:41.429 align:start position:0%
we will invoke the print winner function
and<04:00:39.680><c> pass</c><04:00:39.920><c> in</c><04:00:40.080><c> an</c><04:00:40.239><c> empty</c><04:00:40.479><c> space</c>

04:00:41.429 --> 04:00:41.439 align:start position:0%
and pass in an empty space
 

04:00:41.439 --> 04:00:43.269 align:start position:0%
and pass in an empty space
this<04:00:41.680><c> means</c><04:00:42.000><c> that</c><04:00:42.160><c> there</c><04:00:42.399><c> is</c><04:00:42.560><c> no</c><04:00:42.720><c> winner</c><04:00:43.120><c> it's</c>

04:00:43.269 --> 04:00:43.279 align:start position:0%
this means that there is no winner it's
 

04:00:43.279 --> 04:00:44.389 align:start position:0%
this means that there is no winner it's
a<04:00:43.359><c> draw</c>

04:00:44.389 --> 04:00:44.399 align:start position:0%
a draw
 

04:00:44.399 --> 04:00:46.229 align:start position:0%
a draw
now<04:00:44.640><c> let's</c><04:00:44.880><c> fill</c><04:00:45.120><c> in</c><04:00:45.359><c> this</c><04:00:45.600><c> print</c><04:00:45.920><c> winner</c>

04:00:46.229 --> 04:00:46.239 align:start position:0%
now let's fill in this print winner
 

04:00:46.239 --> 04:00:50.070 align:start position:0%
now let's fill in this print winner
function<04:00:47.120><c> this</c><04:00:47.359><c> function</c><04:00:47.760><c> is</c><04:00:47.840><c> fairly</c><04:00:48.239><c> easy</c>

04:00:50.070 --> 04:00:50.080 align:start position:0%
function this function is fairly easy
 

04:00:50.080 --> 04:00:53.750 align:start position:0%
function this function is fairly easy
if<04:00:50.399><c> winner</c><04:00:51.199><c> is</c><04:00:51.439><c> equal</c><04:00:51.840><c> to</c><04:00:52.160><c> player</c>

04:00:53.750 --> 04:00:53.760 align:start position:0%
if winner is equal to player
 

04:00:53.760 --> 04:00:56.950 align:start position:0%
if winner is equal to player
then<04:00:54.000><c> we</c><04:00:54.160><c> will</c><04:00:54.399><c> print</c>

04:00:56.950 --> 04:00:56.960 align:start position:0%
 
 

04:00:56.960 --> 04:00:59.830 align:start position:0%
 
you<04:00:57.359><c> win</c>

04:00:59.830 --> 04:00:59.840 align:start position:0%
 
 

04:00:59.840 --> 04:01:01.750 align:start position:0%
 
else<04:01:00.319><c> if</c>

04:01:01.750 --> 04:01:01.760 align:start position:0%
else if
 

04:01:01.760 --> 04:01:05.990 align:start position:0%
else if
winner<04:01:02.479><c> is</c><04:01:02.720><c> equal</c><04:01:03.120><c> to</c><04:01:03.520><c> computer</c>

04:01:05.990 --> 04:01:06.000 align:start position:0%
winner is equal to computer
 

04:01:06.000 --> 04:01:09.670 align:start position:0%
winner is equal to computer
then<04:01:06.239><c> we</c><04:01:06.399><c> will</c><04:01:06.720><c> print</c>

04:01:09.670 --> 04:01:09.680 align:start position:0%
 
 

04:01:09.680 --> 04:01:12.469 align:start position:0%
 
you<04:01:10.160><c> lose</c>

04:01:12.469 --> 04:01:12.479 align:start position:0%
you lose
 

04:01:12.479 --> 04:01:15.269 align:start position:0%
you lose
else<04:01:13.120><c> if</c><04:01:13.279><c> there</c><04:01:13.520><c> is</c><04:01:13.680><c> no</c><04:01:13.840><c> winner</c><04:01:14.479><c> then</c><04:01:14.880><c> it's</c><04:01:15.120><c> a</c>

04:01:15.269 --> 04:01:15.279 align:start position:0%
else if there is no winner then it's a
 

04:01:15.279 --> 04:01:20.550 align:start position:0%
else if there is no winner then it's a
tie<04:01:15.680><c> it's</c><04:01:15.920><c> a</c><04:01:16.000><c> draw</c>

04:01:20.550 --> 04:01:20.560 align:start position:0%
 
 

04:01:20.560 --> 04:01:22.309 align:start position:0%
 
it's<04:01:21.040><c> a</c><04:01:21.279><c> tie</c>

04:01:22.309 --> 04:01:22.319 align:start position:0%
it's a tie
 

04:01:22.319 --> 04:01:23.990 align:start position:0%
it's a tie
within<04:01:22.640><c> the</c><04:01:22.800><c> main</c><04:01:23.040><c> function</c><04:01:23.359><c> we</c><04:01:23.520><c> just</c><04:01:23.760><c> have</c><04:01:23.920><c> a</c>

04:01:23.990 --> 04:01:24.000 align:start position:0%
within the main function we just have a
 

04:01:24.000 --> 04:01:26.469 align:start position:0%
within the main function we just have a
few<04:01:24.239><c> more</c><04:01:24.399><c> things</c><04:01:24.720><c> to</c><04:01:24.880><c> add</c><04:01:25.439><c> so</c><04:01:25.760><c> outside</c><04:01:26.160><c> of</c><04:01:26.319><c> our</c>

04:01:26.469 --> 04:01:26.479 align:start position:0%
few more things to add so outside of our
 

04:01:26.479 --> 04:01:29.830 align:start position:0%
few more things to add so outside of our
while<04:01:26.800><c> loop</c><04:01:27.439><c> we</c><04:01:27.600><c> will</c><04:01:27.840><c> print</c><04:01:28.560><c> our</c><04:01:28.800><c> board</c><04:01:29.600><c> and</c>

04:01:29.830 --> 04:01:29.840 align:start position:0%
while loop we will print our board and
 

04:01:29.840 --> 04:01:31.670 align:start position:0%
while loop we will print our board and
print<04:01:30.160><c> the</c><04:01:30.319><c> winner</c>

04:01:31.670 --> 04:01:31.680 align:start position:0%
print the winner
 

04:01:31.680 --> 04:01:32.550 align:start position:0%
print the winner
print

04:01:32.550 --> 04:01:32.560 align:start position:0%
print
 

04:01:32.560 --> 04:01:33.990 align:start position:0%
print
board

04:01:33.990 --> 04:01:34.000 align:start position:0%
board
 

04:01:34.000 --> 04:01:35.510 align:start position:0%
board
and<04:01:34.640><c> print</c>

04:01:35.510 --> 04:01:35.520 align:start position:0%
and print
 

04:01:35.520 --> 04:01:37.030 align:start position:0%
and print
winner

04:01:37.030 --> 04:01:37.040 align:start position:0%
winner
 

04:01:37.040 --> 04:01:39.429 align:start position:0%
winner
there<04:01:37.279><c> is</c><04:01:37.439><c> one</c><04:01:37.760><c> argument</c><04:01:38.640><c> whoever</c><04:01:38.960><c> the</c><04:01:39.120><c> winner</c>

04:01:39.429 --> 04:01:39.439 align:start position:0%
there is one argument whoever the winner
 

04:01:39.439 --> 04:01:40.950 align:start position:0%
there is one argument whoever the winner
is

04:01:40.950 --> 04:01:40.960 align:start position:0%
is
 

04:01:40.960 --> 04:01:43.030 align:start position:0%
is
so<04:01:41.199><c> let's</c><04:01:41.439><c> run</c><04:01:41.600><c> this</c><04:01:41.840><c> once</c>

04:01:43.030 --> 04:01:43.040 align:start position:0%
so let's run this once
 

04:01:43.040 --> 04:01:45.349 align:start position:0%
so let's run this once
enter<04:01:43.520><c> row</c><04:01:43.760><c> numbers</c><04:01:44.239><c> one</c><04:01:44.479><c> through</c><04:01:44.720><c> three</c><04:01:45.120><c> uh</c>

04:01:45.349 --> 04:01:45.359 align:start position:0%
enter row numbers one through three uh
 

04:01:45.359 --> 04:01:46.870 align:start position:0%
enter row numbers one through three uh
let's<04:01:45.520><c> say</c><04:01:46.000><c> one</c>

04:01:46.870 --> 04:01:46.880 align:start position:0%
let's say one
 

04:01:46.880 --> 04:01:48.630 align:start position:0%
let's say one
and<04:01:47.120><c> one</c>

04:01:48.630 --> 04:01:48.640 align:start position:0%
and one
 

04:01:48.640 --> 04:01:50.710 align:start position:0%
and one
so<04:01:48.880><c> i</c><04:01:49.040><c> moved</c><04:01:49.279><c> here</c><04:01:49.600><c> and</c><04:01:49.760><c> the</c><04:01:49.840><c> computer</c><04:01:50.319><c> moved</c>

04:01:50.710 --> 04:01:50.720 align:start position:0%
so i moved here and the computer moved
 

04:01:50.720 --> 04:01:53.189 align:start position:0%
so i moved here and the computer moved
to<04:01:51.199><c> row</c><04:01:51.520><c> three</c><04:01:51.840><c> column</c><04:01:52.319><c> two</c>

04:01:53.189 --> 04:01:53.199 align:start position:0%
to row three column two
 

04:01:53.199 --> 04:01:56.309 align:start position:0%
to row three column two
uh<04:01:53.520><c> let's</c><04:01:53.840><c> say</c><04:01:54.319><c> row</c><04:01:54.640><c> three</c><04:01:54.960><c> column</c><04:01:55.359><c> three</c>

04:01:56.309 --> 04:01:56.319 align:start position:0%
uh let's say row three column three
 

04:01:56.319 --> 04:01:58.389 align:start position:0%
uh let's say row three column three
okay<04:01:56.640><c> so</c><04:01:56.880><c> i</c><04:01:57.040><c> moved</c><04:01:57.279><c> here</c><04:01:57.520><c> and</c><04:01:57.600><c> the</c><04:01:57.680><c> computer</c><04:01:58.080><c> is</c>

04:01:58.389 --> 04:01:58.399 align:start position:0%
okay so i moved here and the computer is
 

04:01:58.399 --> 04:02:01.030 align:start position:0%
okay so i moved here and the computer is
up<04:01:58.560><c> here</c><04:01:59.120><c> so</c><04:01:59.279><c> i</c><04:01:59.439><c> moved</c><04:01:59.840><c> to</c><04:02:00.080><c> row</c><04:02:00.399><c> three</c><04:02:00.720><c> column</c>

04:02:01.030 --> 04:02:01.040 align:start position:0%
up here so i moved to row three column
 

04:02:01.040 --> 04:02:03.590 align:start position:0%
up here so i moved to row three column
three<04:02:01.520><c> and</c><04:02:01.760><c> our</c><04:02:01.920><c> computer</c><04:02:02.560><c> is</c><04:02:02.720><c> at</c><04:02:02.960><c> row</c><04:02:03.279><c> one</c>

04:02:03.590 --> 04:02:03.600 align:start position:0%
three and our computer is at row one
 

04:02:03.600 --> 04:02:04.870 align:start position:0%
three and our computer is at row one
column<04:02:04.000><c> three</c>

04:02:04.870 --> 04:02:04.880 align:start position:0%
column three
 

04:02:04.880 --> 04:02:07.510 align:start position:0%
column three
uh<04:02:05.120><c> then</c><04:02:05.359><c> i'll</c><04:02:05.520><c> move</c><04:02:05.680><c> to</c><04:02:05.840><c> the</c><04:02:05.920><c> middle</c><04:02:06.720><c> two</c>

04:02:07.510 --> 04:02:07.520 align:start position:0%
uh then i'll move to the middle two
 

04:02:07.520 --> 04:02:08.389 align:start position:0%
uh then i'll move to the middle two
two

04:02:08.389 --> 04:02:08.399 align:start position:0%
two
 

04:02:08.399 --> 04:02:10.469 align:start position:0%
two
and<04:02:08.560><c> it</c><04:02:08.720><c> looks</c><04:02:08.960><c> like</c><04:02:09.199><c> i</c><04:02:09.279><c> won</c><04:02:09.439><c> this</c><04:02:09.680><c> round</c><04:02:10.319><c> so</c>

04:02:10.469 --> 04:02:10.479 align:start position:0%
and it looks like i won this round so
 

04:02:10.479 --> 04:02:12.070 align:start position:0%
and it looks like i won this round so
let's<04:02:10.720><c> try</c><04:02:10.960><c> this</c><04:02:11.120><c> again</c><04:02:11.520><c> and</c><04:02:11.680><c> we</c><04:02:11.840><c> will</c>

04:02:12.070 --> 04:02:12.080 align:start position:0%
let's try this again and we will
 

04:02:12.080 --> 04:02:15.670 align:start position:0%
let's try this again and we will
intentionally<04:02:12.880><c> lose</c><04:02:13.680><c> so</c><04:02:14.160><c> one</c><04:02:14.880><c> one</c>

04:02:15.670 --> 04:02:15.680 align:start position:0%
intentionally lose so one one
 

04:02:15.680 --> 04:02:17.510 align:start position:0%
intentionally lose so one one
two<04:02:15.920><c> one</c>

04:02:17.510 --> 04:02:17.520 align:start position:0%
two one
 

04:02:17.520 --> 04:02:18.950 align:start position:0%
two one
one<04:02:18.080><c> two</c>

04:02:18.950 --> 04:02:18.960 align:start position:0%
one two
 

04:02:18.960 --> 04:02:20.950 align:start position:0%
one two
two<04:02:19.520><c> two</c>

04:02:20.950 --> 04:02:20.960 align:start position:0%
two two
 

04:02:20.960 --> 04:02:23.670 align:start position:0%
two two
and<04:02:21.279><c> unfortunately</c><04:02:21.840><c> it</c><04:02:21.920><c> looks</c><04:02:22.160><c> like</c><04:02:22.319><c> i</c><04:02:22.479><c> lost</c>

04:02:23.670 --> 04:02:23.680 align:start position:0%
and unfortunately it looks like i lost
 

04:02:23.680 --> 04:02:30.070 align:start position:0%
and unfortunately it looks like i lost
this<04:02:23.840><c> time</c><04:02:24.080><c> let's</c><04:02:24.319><c> attempt</c><04:02:24.640><c> to</c><04:02:24.800><c> tie</c>

04:02:30.070 --> 04:02:30.080 align:start position:0%
 
 

04:02:30.080 --> 04:02:31.990 align:start position:0%
 
and<04:02:30.319><c> it</c><04:02:30.399><c> looks</c><04:02:30.640><c> like</c><04:02:30.880><c> it's</c><04:02:31.040><c> a</c><04:02:31.120><c> tie</c><04:02:31.600><c> so</c><04:02:31.680><c> it</c><04:02:31.760><c> looks</c>

04:02:31.990 --> 04:02:32.000 align:start position:0%
and it looks like it's a tie so it looks
 

04:02:32.000 --> 04:02:33.990 align:start position:0%
and it looks like it's a tie so it looks
like<04:02:32.160><c> this</c><04:02:32.319><c> game</c><04:02:32.560><c> is</c><04:02:32.640><c> working</c><04:02:33.359><c> so</c><04:02:33.600><c> what</c><04:02:33.760><c> if</c><04:02:33.840><c> we</c>

04:02:33.990 --> 04:02:34.000 align:start position:0%
like this game is working so what if we
 

04:02:34.000 --> 04:02:35.510 align:start position:0%
like this game is working so what if we
would<04:02:34.160><c> like</c><04:02:34.319><c> to</c><04:02:34.399><c> ask</c><04:02:34.640><c> the</c><04:02:34.800><c> user</c><04:02:35.199><c> if</c><04:02:35.279><c> they</c><04:02:35.359><c> would</c>

04:02:35.510 --> 04:02:35.520 align:start position:0%
would like to ask the user if they would
 

04:02:35.520 --> 04:02:37.429 align:start position:0%
would like to ask the user if they would
like<04:02:35.680><c> to</c><04:02:35.760><c> play</c><04:02:36.000><c> again</c><04:02:36.399><c> we</c><04:02:36.560><c> can</c><04:02:36.720><c> easily</c><04:02:37.120><c> place</c>

04:02:37.429 --> 04:02:37.439 align:start position:0%
like to play again we can easily place
 

04:02:37.439 --> 04:02:39.590 align:start position:0%
like to play again we can easily place
our<04:02:37.600><c> code</c><04:02:37.920><c> within</c><04:02:38.319><c> a</c><04:02:38.479><c> do</c><04:02:38.720><c> while</c><04:02:38.960><c> loop</c><04:02:39.439><c> so</c>

04:02:39.590 --> 04:02:39.600 align:start position:0%
our code within a do while loop so
 

04:02:39.600 --> 04:02:41.189 align:start position:0%
our code within a do while loop so
within<04:02:39.920><c> our</c><04:02:40.000><c> main</c><04:02:40.239><c> function</c>

04:02:41.189 --> 04:02:41.199 align:start position:0%
within our main function
 

04:02:41.199 --> 04:02:42.790 align:start position:0%
within our main function
let's<04:02:41.520><c> create</c><04:02:41.920><c> char</c>

04:02:42.790 --> 04:02:42.800 align:start position:0%
let's create char
 

04:02:42.800 --> 04:02:44.229 align:start position:0%
let's create char
response

04:02:44.229 --> 04:02:44.239 align:start position:0%
response
 

04:02:44.239 --> 04:02:46.870 align:start position:0%
response
and<04:02:44.399><c> we</c><04:02:44.560><c> will</c><04:02:44.720><c> create</c><04:02:45.279><c> a</c><04:02:45.520><c> do</c><04:02:45.760><c> while</c><04:02:46.000><c> loop</c>

04:02:46.870 --> 04:02:46.880 align:start position:0%
and we will create a do while loop
 

04:02:46.880 --> 04:02:49.349 align:start position:0%
and we will create a do while loop
so<04:02:47.120><c> take</c><04:02:47.439><c> all</c><04:02:47.520><c> of</c><04:02:47.600><c> this</c><04:02:47.840><c> code</c><04:02:48.319><c> after</c><04:02:48.800><c> the</c><04:02:49.120><c> do</c>

04:02:49.349 --> 04:02:49.359 align:start position:0%
so take all of this code after the do
 

04:02:49.359 --> 04:02:52.870 align:start position:0%
so take all of this code after the do
while<04:02:49.600><c> loop</c><04:02:50.239><c> beginning</c><04:02:50.640><c> with</c><04:02:50.880><c> reset</c><04:02:51.359><c> board</c>

04:02:52.870 --> 04:02:52.880 align:start position:0%
while loop beginning with reset board
 

04:02:52.880 --> 04:02:54.389 align:start position:0%
while loop beginning with reset board
copy<04:02:53.279><c> it</c>

04:02:54.389 --> 04:02:54.399 align:start position:0%
copy it
 

04:02:54.399 --> 04:02:55.750 align:start position:0%
copy it
delete<04:02:54.800><c> it</c>

04:02:55.750 --> 04:02:55.760 align:start position:0%
delete it
 

04:02:55.760 --> 04:02:57.429 align:start position:0%
delete it
and<04:02:55.840><c> then</c><04:02:56.080><c> paste</c><04:02:56.399><c> it</c><04:02:56.479><c> within</c><04:02:56.800><c> the</c><04:02:56.960><c> do</c><04:02:57.120><c> while</c>

04:02:57.429 --> 04:02:57.439 align:start position:0%
and then paste it within the do while
 

04:02:57.439 --> 04:03:01.269 align:start position:0%
and then paste it within the do while
loop

04:03:01.269 --> 04:03:01.279 align:start position:0%
 
 

04:03:01.279 --> 04:03:03.189 align:start position:0%
 
at<04:03:01.439><c> the</c><04:03:01.520><c> top</c><04:03:01.760><c> of</c><04:03:01.920><c> our</c><04:03:02.000><c> do</c><04:03:02.239><c> while</c><04:03:02.479><c> loop</c><04:03:02.880><c> let's</c>

04:03:03.189 --> 04:03:03.199 align:start position:0%
at the top of our do while loop let's
 

04:03:03.199 --> 04:03:07.030 align:start position:0%
at the top of our do while loop let's
reset<04:03:03.760><c> winner</c><04:03:04.239><c> and</c><04:03:04.479><c> response</c>

04:03:07.030 --> 04:03:07.040 align:start position:0%
reset winner and response
 

04:03:07.040 --> 04:03:10.389 align:start position:0%
reset winner and response
winner<04:03:07.520><c> equals</c><04:03:07.920><c> an</c><04:03:08.080><c> empty</c><04:03:08.319><c> space</c>

04:03:10.389 --> 04:03:10.399 align:start position:0%
winner equals an empty space
 

04:03:10.399 --> 04:03:13.910 align:start position:0%
winner equals an empty space
and<04:03:10.720><c> response</c><04:03:11.600><c> equals</c><04:03:12.080><c> an</c><04:03:12.239><c> empty</c><04:03:12.479><c> space</c>

04:03:13.910 --> 04:03:13.920 align:start position:0%
and response equals an empty space
 

04:03:13.920 --> 04:03:15.750 align:start position:0%
and response equals an empty space
then<04:03:14.160><c> heading</c><04:03:14.479><c> to</c><04:03:14.720><c> the</c><04:03:14.960><c> bottom</c><04:03:15.279><c> of</c><04:03:15.439><c> our</c><04:03:15.600><c> do</c>

04:03:15.750 --> 04:03:15.760 align:start position:0%
then heading to the bottom of our do
 

04:03:15.760 --> 04:03:17.750 align:start position:0%
then heading to the bottom of our do
while<04:03:16.080><c> loop</c><04:03:16.560><c> let's</c><04:03:16.800><c> ask</c><04:03:17.120><c> if</c><04:03:17.199><c> the</c><04:03:17.359><c> user</c><04:03:17.600><c> would</c>

04:03:17.750 --> 04:03:17.760 align:start position:0%
while loop let's ask if the user would
 

04:03:17.760 --> 04:03:19.110 align:start position:0%
while loop let's ask if the user would
like<04:03:17.920><c> to</c><04:03:18.000><c> play</c><04:03:18.160><c> again</c>

04:03:19.110 --> 04:03:19.120 align:start position:0%
like to play again
 

04:03:19.120 --> 04:03:21.510 align:start position:0%
like to play again
so<04:03:19.359><c> after</c><04:03:19.760><c> displaying</c><04:03:20.319><c> the</c><04:03:20.479><c> winner</c><04:03:21.279><c> let's</c>

04:03:21.510 --> 04:03:21.520 align:start position:0%
so after displaying the winner let's
 

04:03:21.520 --> 04:03:22.830 align:start position:0%
so after displaying the winner let's
create<04:03:21.760><c> a</c><04:03:21.840><c> prompt</c>

04:03:22.830 --> 04:03:22.840 align:start position:0%
create a prompt
 

04:03:22.840 --> 04:03:24.710 align:start position:0%
create a prompt
printf

04:03:24.710 --> 04:03:24.720 align:start position:0%
printf
 

04:03:24.720 --> 04:03:30.229 align:start position:0%
printf
would<04:03:25.279><c> you</c><04:03:26.000><c> like</c><04:03:26.560><c> to</c><04:03:27.040><c> play</c><04:03:27.760><c> again</c>

04:03:30.229 --> 04:03:30.239 align:start position:0%
 
 

04:03:30.239 --> 04:03:34.630 align:start position:0%
 
y<04:03:30.479><c> for</c><04:03:30.720><c> yes</c><04:03:31.199><c> and</c><04:03:31.359><c> for</c><04:03:31.520><c> no</c>

04:03:34.630 --> 04:03:34.640 align:start position:0%
 
 

04:03:34.640 --> 04:03:36.710 align:start position:0%
 
and<04:03:34.880><c> i'm</c><04:03:34.960><c> just</c><04:03:35.120><c> going</c><04:03:35.279><c> to</c><04:03:35.439><c> clear</c><04:03:35.760><c> our</c><04:03:36.000><c> buffer</c>

04:03:36.710 --> 04:03:36.720 align:start position:0%
and i'm just going to clear our buffer
 

04:03:36.720 --> 04:03:39.429 align:start position:0%
and i'm just going to clear our buffer
by<04:03:36.960><c> using</c><04:03:37.199><c> scanf</c><04:03:37.840><c> and</c><04:03:38.000><c> accepting</c><04:03:38.399><c> a</c><04:03:38.560><c> character</c>

04:03:39.429 --> 04:03:39.439 align:start position:0%
by using scanf and accepting a character
 

04:03:39.439 --> 04:03:41.030 align:start position:0%
by using scanf and accepting a character
just<04:03:39.680><c> in</c><04:03:39.760><c> case</c><04:03:40.080><c> there</c><04:03:40.239><c> is</c><04:03:40.399><c> a</c><04:03:40.560><c> new</c><04:03:40.800><c> line</c>

04:03:41.030 --> 04:03:41.040 align:start position:0%
just in case there is a new line
 

04:03:41.040 --> 04:03:43.269 align:start position:0%
just in case there is a new line
character<04:03:41.439><c> within</c><04:03:41.680><c> our</c><04:03:41.840><c> buffer</c><04:03:42.720><c> then</c><04:03:42.960><c> we</c><04:03:43.120><c> will</c>

04:03:43.269 --> 04:03:43.279 align:start position:0%
character within our buffer then we will
 

04:03:43.279 --> 04:03:46.150 align:start position:0%
character within our buffer then we will
use<04:03:43.600><c> the</c><04:03:43.840><c> scanf</c><04:03:44.399><c> function</c><04:03:45.279><c> and</c><04:03:45.520><c> accept</c><04:03:46.000><c> a</c>

04:03:46.150 --> 04:03:46.160 align:start position:0%
use the scanf function and accept a
 

04:03:46.160 --> 04:03:48.950 align:start position:0%
use the scanf function and accept a
character<04:03:46.880><c> after</c><04:03:47.199><c> clearing</c><04:03:47.760><c> our</c><04:03:48.000><c> buffer</c>

04:03:48.950 --> 04:03:48.960 align:start position:0%
character after clearing our buffer
 

04:03:48.960 --> 04:03:51.510 align:start position:0%
character after clearing our buffer
and<04:03:49.120><c> we</c><04:03:49.279><c> will</c><04:03:49.520><c> use</c><04:03:49.760><c> the</c><04:03:50.000><c> address</c><04:03:50.479><c> of</c><04:03:50.720><c> operator</c>

04:03:51.510 --> 04:03:51.520 align:start position:0%
and we will use the address of operator
 

04:03:51.520 --> 04:03:52.710 align:start position:0%
and we will use the address of operator
response

04:03:52.710 --> 04:03:52.720 align:start position:0%
response
 

04:03:52.720 --> 04:03:54.710 align:start position:0%
response
now<04:03:52.960><c> just</c><04:03:53.199><c> in</c><04:03:53.279><c> case</c><04:03:53.600><c> somebody</c><04:03:54.080><c> types</c><04:03:54.399><c> in</c>

04:03:54.710 --> 04:03:54.720 align:start position:0%
now just in case somebody types in
 

04:03:54.720 --> 04:03:56.550 align:start position:0%
now just in case somebody types in
lowercase<04:03:55.359><c> y</c><04:03:55.600><c> i</c><04:03:55.680><c> would</c><04:03:55.920><c> still</c><04:03:56.080><c> like</c><04:03:56.239><c> to</c><04:03:56.319><c> count</c>

04:03:56.550 --> 04:03:56.560 align:start position:0%
lowercase y i would still like to count
 

04:03:56.560 --> 04:03:59.030 align:start position:0%
lowercase y i would still like to count
that<04:03:56.720><c> as</c><04:03:56.960><c> yes</c><04:03:57.680><c> so</c><04:03:57.840><c> i'm</c><04:03:58.080><c> going</c><04:03:58.239><c> to</c><04:03:58.399><c> take</c><04:03:58.800><c> our</c>

04:03:59.030 --> 04:03:59.040 align:start position:0%
that as yes so i'm going to take our
 

04:03:59.040 --> 04:04:00.389 align:start position:0%
that as yes so i'm going to take our
response

04:04:00.389 --> 04:04:00.399 align:start position:0%
response
 

04:04:00.399 --> 04:04:03.830 align:start position:0%
response
set<04:04:00.560><c> this</c><04:04:00.800><c> equal</c><04:04:01.120><c> to</c><04:04:01.760><c> invoke</c><04:04:02.319><c> the</c><04:04:02.800><c> to</c>

04:04:03.830 --> 04:04:03.840 align:start position:0%
set this equal to invoke the to
 

04:04:03.840 --> 04:04:05.750 align:start position:0%
set this equal to invoke the to
upper<04:04:04.640><c> function</c>

04:04:05.750 --> 04:04:05.760 align:start position:0%
upper function
 

04:04:05.760 --> 04:04:08.630 align:start position:0%
upper function
pass<04:04:06.080><c> in</c><04:04:06.479><c> response</c>

04:04:08.630 --> 04:04:08.640 align:start position:0%
pass in response
 

04:04:08.640 --> 04:04:10.710 align:start position:0%
pass in response
and<04:04:08.880><c> with</c><04:04:09.040><c> this</c><04:04:09.199><c> condition</c><04:04:09.840><c> we</c><04:04:10.080><c> will</c><04:04:10.239><c> continue</c>

04:04:10.710 --> 04:04:10.720 align:start position:0%
and with this condition we will continue
 

04:04:10.720 --> 04:04:14.389 align:start position:0%
and with this condition we will continue
playing<04:04:11.439><c> while</c><04:04:12.080><c> our</c><04:04:12.319><c> response</c><04:04:13.359><c> is</c><04:04:13.520><c> equal</c><04:04:13.920><c> to</c>

04:04:14.389 --> 04:04:14.399 align:start position:0%
playing while our response is equal to
 

04:04:14.399 --> 04:04:16.550 align:start position:0%
playing while our response is equal to
the<04:04:14.560><c> character</c><04:04:15.359><c> y</c>

04:04:16.550 --> 04:04:16.560 align:start position:0%
the character y
 

04:04:16.560 --> 04:04:18.630 align:start position:0%
the character y
and<04:04:16.720><c> at</c><04:04:16.880><c> the</c><04:04:17.040><c> end</c><04:04:17.359><c> let's</c><04:04:17.680><c> print</c>

04:04:18.630 --> 04:04:18.640 align:start position:0%
and at the end let's print
 

04:04:18.640 --> 04:04:21.189 align:start position:0%
and at the end let's print
thanks<04:04:19.040><c> for</c><04:04:19.279><c> playing</c><04:04:20.239><c> okay</c><04:04:20.560><c> let's</c><04:04:20.800><c> run</c><04:04:21.040><c> this</c>

04:04:21.189 --> 04:04:21.199 align:start position:0%
thanks for playing okay let's run this
 

04:04:21.199 --> 04:04:25.910 align:start position:0%
thanks for playing okay let's run this
one<04:04:21.359><c> last</c><04:04:21.680><c> time</c>

04:04:25.910 --> 04:04:25.920 align:start position:0%
 
 

04:04:25.920 --> 04:04:27.590 align:start position:0%
 
all<04:04:26.080><c> right</c><04:04:26.399><c> i</c><04:04:26.560><c> win</c><04:04:26.800><c> would</c><04:04:26.960><c> you</c><04:04:27.120><c> like</c><04:04:27.279><c> to</c><04:04:27.359><c> play</c>

04:04:27.590 --> 04:04:27.600 align:start position:0%
all right i win would you like to play
 

04:04:27.600 --> 04:04:28.389 align:start position:0%
all right i win would you like to play
again

04:04:28.389 --> 04:04:28.399 align:start position:0%
again
 

04:04:28.399 --> 04:04:30.710 align:start position:0%
again
i'll<04:04:28.640><c> type</c><04:04:28.960><c> in</c><04:04:29.199><c> y</c><04:04:29.439><c> for</c><04:04:29.680><c> yes</c>

04:04:30.710 --> 04:04:30.720 align:start position:0%
i'll type in y for yes
 

04:04:30.720 --> 04:04:35.429 align:start position:0%
i'll type in y for yes
and<04:04:30.960><c> we</c><04:04:31.120><c> have</c><04:04:31.279><c> a</c><04:04:31.359><c> new</c><04:04:31.600><c> game</c>

04:04:35.429 --> 04:04:35.439 align:start position:0%
 
 

04:04:35.439 --> 04:04:37.429 align:start position:0%
 
all<04:04:35.600><c> right</c><04:04:35.840><c> it</c><04:04:36.000><c> looks</c><04:04:36.239><c> like</c><04:04:36.399><c> i</c><04:04:36.560><c> win</c><04:04:36.960><c> so</c><04:04:37.199><c> this</c>

04:04:37.429 --> 04:04:37.439 align:start position:0%
all right it looks like i win so this
 

04:04:37.439 --> 04:04:40.389 align:start position:0%
all right it looks like i win so this
time<04:04:37.680><c> i</c><04:04:37.840><c> will</c><04:04:38.000><c> exit</c><04:04:38.399><c> by</c><04:04:38.720><c> typing</c><04:04:39.199><c> n</c>

04:04:40.389 --> 04:04:40.399 align:start position:0%
time i will exit by typing n
 

04:04:40.399 --> 04:04:41.830 align:start position:0%
time i will exit by typing n
thanks<04:04:40.640><c> for</c><04:04:40.800><c> playing</c>

04:04:41.830 --> 04:04:41.840 align:start position:0%
thanks for playing
 

04:04:41.840 --> 04:04:44.309 align:start position:0%
thanks for playing
so<04:04:42.080><c> yeah</c><04:04:42.319><c> everybody</c><04:04:42.800><c> that</c><04:04:43.120><c> is</c><04:04:43.359><c> a</c><04:04:43.600><c> game</c><04:04:44.000><c> of</c>

04:04:44.309 --> 04:04:44.319 align:start position:0%
so yeah everybody that is a game of
 

04:04:44.319 --> 04:04:46.550 align:start position:0%
so yeah everybody that is a game of
tic-tac-toe<04:04:45.520><c> if</c><04:04:45.680><c> you</c><04:04:45.760><c> would</c><04:04:45.920><c> like</c><04:04:46.080><c> a</c><04:04:46.160><c> copy</c><04:04:46.479><c> of</c>

04:04:46.550 --> 04:04:46.560 align:start position:0%
tic-tac-toe if you would like a copy of
 

04:04:46.560 --> 04:04:48.389 align:start position:0%
tic-tac-toe if you would like a copy of
this<04:04:46.720><c> code</c><04:04:47.120><c> i'll</c><04:04:47.359><c> post</c><04:04:47.600><c> this</c><04:04:47.840><c> to</c><04:04:48.000><c> the</c><04:04:48.080><c> comments</c>

04:04:48.389 --> 04:04:48.399 align:start position:0%
this code i'll post this to the comments
 

04:04:48.399 --> 04:04:50.469 align:start position:0%
this code i'll post this to the comments
section<04:04:48.800><c> down</c><04:04:48.960><c> below</c><04:04:49.680><c> hey</c><04:04:49.920><c> if</c><04:04:50.000><c> you</c><04:04:50.080><c> found</c><04:04:50.319><c> this</c>

04:04:50.469 --> 04:04:50.479 align:start position:0%
section down below hey if you found this
 

04:04:50.479 --> 04:04:52.229 align:start position:0%
section down below hey if you found this
video<04:04:50.720><c> helpful</c><04:04:51.120><c> you</c><04:04:51.279><c> can</c><04:04:51.359><c> help</c><04:04:51.600><c> me</c><04:04:51.760><c> out</c><04:04:52.000><c> by</c>

04:04:52.229 --> 04:04:52.239 align:start position:0%
video helpful you can help me out by
 

04:04:52.239 --> 04:04:53.990 align:start position:0%
video helpful you can help me out by
smashing<04:04:52.640><c> that</c><04:04:52.800><c> like</c><04:04:53.040><c> button</c><04:04:53.439><c> leave</c><04:04:53.600><c> a</c><04:04:53.680><c> random</c>

04:04:53.990 --> 04:04:54.000 align:start position:0%
smashing that like button leave a random
 

04:04:54.000 --> 04:04:55.830 align:start position:0%
smashing that like button leave a random
comment<04:04:54.319><c> down</c><04:04:54.479><c> below</c><04:04:54.960><c> and</c><04:04:55.199><c> subscribe</c><04:04:55.680><c> if</c>

04:04:55.830 --> 04:04:55.840 align:start position:0%
comment down below and subscribe if
 

04:04:55.840 --> 04:04:59.960 align:start position:0%
comment down below and subscribe if
you'd<04:04:56.000><c> like</c><04:04:56.160><c> to</c><04:04:56.239><c> become</c><04:04:56.479><c> a</c><04:04:56.640><c> fellow</c><04:04:56.960><c> bro</c>

