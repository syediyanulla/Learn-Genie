<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>LearnGenie - Video Summary Generator</title>
    <link rel="stylesheet" href="/css/style.css">
    
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
        }

        :root {
            --primary-color: #4f46e5;
            --secondary-color: #4338ca;
            --text-color: #1f2937;
            --light-bg: #f3f4f6;
            --success-color: #10b981;
            --error-color: #ef4444;
        }

        body {
            background: var(--light-bg);
            min-height: 100vh;
        }

        .nav {
            position: fixed;
            top: 0;
            width: 100%;
            padding: 1rem 2rem;
            background: var(--primary-color);
            display: flex;
            justify-content: space-between;
            align-items: center;
            z-index: 1000;
        }

        .logo {
            color: white;
            font-weight: bold;
            font-size: 1.5rem;
            text-decoration: none;
        }

        .nav-buttons {
            display: flex;
            gap: 1rem;
        }

        .btn {
            display: inline-block;
            padding: 0.75rem 1.5rem;
            background: var(--secondary-color);
            color: white;
            text-decoration: none;
            border-radius: 8px;
            transition: all 0.3s ease;
            border: none;
            cursor: pointer;
            font-size: 1rem;
        }

        .btn:hover {
            background: var(--primary-color);
            transform: translateY(-2px);
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 8rem 2rem 4rem;
        }

        .input-section {
            background: white;
            padding: 2rem;
            border-radius: 16px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            margin-bottom: 2rem;
        }

        .url-input-container {
            display: flex;
            gap: 1rem;
            margin-bottom: 1.5rem;
        }

        .url-input {
            flex: 1;
            padding: 1rem;
            border: 2px solid #e5e7eb;
            border-radius: 8px;
            font-size: 1rem;
            transition: border-color 0.3s ease;
        }

        .url-input:focus {
            outline: none;
            border-color: var(--primary-color);
        }

        .features-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 1.5rem;
            margin-top: 2rem;
        }

        .feature-card {
            background: rgba(255, 255, 255, 0.7);
            padding: 1.5rem;
            border-radius: 12px;
            text-align: center;
        }

        .feature-icon {
            font-size: 2rem;
            margin-bottom: 1rem;
            color: var(--primary-color);
        }

        .summary-section {
            background: white;
            padding: 2rem;
            border-radius: 16px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            margin-top: 2rem;
        }

        .summary-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1.5rem;
            padding-bottom: 1rem;
            border-bottom: 2px solid var(--light-bg);
        }

        .summary-content {
            line-height: 1.6;
            color: var(--text-color);
        }

        .video-preview {
            background: var(--light-bg);
            padding: 1.5rem;
            border-radius: 12px;
            margin-bottom: 1.5rem;
            display: flex;
            align-items: center;
            gap: 1.5rem;
        }

        .video-thumbnail {
            width: 180px;
            height: 120px;
            background: #ddd;
            border-radius: 8px;
            object-fit: cover;
        }

        .video-info {
            flex: 1;
        }

        .video-title {
            font-size: 1.25rem;
            margin-bottom: 0.5rem;
            color: var(--text-color);
        }

        .video-meta {
            color: #666;
            font-size: 0.9rem;
        }

        .loading-spinner {
            display: none;
            width: 24px;
            height: 24px;
            border: 3px solid var(--light-bg);
            border-top: 3px solid var(--primary-color);
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin: 0 auto;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .tools-section {
            display: flex;
            gap: 1rem;
            margin-top: 1.5rem;
        }

        .tool-btn {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            padding: 0.75rem 1.25rem;
            background: var(--light-bg);
            border: none;
            border-radius: 8px;
            color: var(--text-color);
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .tool-btn:hover {
            background: #e5e7eb;
        }

        .statistics {
            display: flex;
            gap: 2rem;
            margin-top: 2rem;
        }

        .stat-item {
            flex: 1;
            background: var(--light-bg);
            padding: 1rem;
            border-radius: 8px;
            text-align: center;
        }

        .stat-value {
            font-size: 1.5rem;
            font-weight: bold;
            color: var(--primary-color);
            margin-bottom: 0.5rem;
        }

        .stat-label {
            color: #666;
            font-size: 0.9rem;
        }

        @media (max-width: 768px) {
            .url-input-container {
                flex-direction: column;
            }
            .statistics {
                flex-direction: column;
                gap: 1rem;
            }
            .video-preview {
                flex-direction: column;
                text-align: center;
            }
            .video-thumbnail {
                width: 100%;
                max-width: 300px;
                margin: 0 auto;
            }
        }

        .related-videos-section {
            background: white;
            padding: 2rem;
            border-radius: 16px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            margin-top: 2rem;
        }

        .keywords-container {
            display: flex;
            flex-wrap: wrap;
            gap: 0.5rem;
            margin-bottom: 2rem;
        }

        .keyword-tag {
            background: var(--primary-color);
            color: white;
            padding: 0.5rem 1rem;
            border-radius: 20px;
            font-size: 0.9rem;
        }

        .related-videos-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 1.5rem;
        }

        .related-video-card {
            background: var(--light-bg);
            border-radius: 12px;
            overflow: hidden;
            transition: transform 0.3s ease;
            cursor: pointer;
            text-decoration: none;
            display: block;
        }

        .related-video-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 15px rgba(0, 0, 0, 0.1);
        }

        .related-video-thumbnail {
            width: 100%;
            height: 180px;
            object-fit: cover;
            background: var(--secondary-color);
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 1.2rem;
        }

        .related-video-info {
            padding: 1rem;
        }

        .related-video-title {
            font-size: 1.1rem;
            font-weight: 600;
            color: var(--text-color);
            margin-bottom: 0.5rem;
            display: -webkit-box;
            -webkit-line-clamp: 2;
            -webkit-box-orient: vertical;
            overflow: hidden;
        }

        .related-video-meta {
            font-size: 0.9rem;
            color: #666;
        }

        .youtube-link {
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            color: #FF0000;
            text-decoration: none;
            font-weight: 500;
            margin-top: 0.5rem;1
            transition: color 0.3s ease;
        }

        .youtube-link:hover {
            color: #CC0000;
        }

        .youtube-icon {
            width: 20px;
            height: 20px;
        }
    </style>
</head>
<body>
    <nav class="nav">
        <a href="#" class="logo">LearnGenie</a>
        <div class="nav-buttons">
        </div>
    </nav>

    <div class="container">
        <div class="input-section">
            <h1 style="margin-bottom: 1.5rem; color: var(--text-color);">Video Summary Generator</h1>
            <div class="url-input-container">
                <input type="text" class="url-input" placeholder="Paste your video URL here (YouTube, Vimeo, or any educational platform)">
                <button class="btn">Generate Summary</button>
            </div>
            <div class="features-grid">
                <div class="feature-card">
                    <div class="feature-icon">üéØ</div>
                    <h3>Key Points</h3>
                    <p>Extract main ideas and crucial information</p>
                </div>
                <div class="feature-card">
                    <div class="feature-icon">‚ö°Ô∏è</div>
                    <h3>Quick Analysis</h3>
                    <p>Get summaries in seconds</p>
                </div>
                <div class="feature-card">
                    <div class="feature-icon">üìä</div>
                    <h3>Smart Insights</h3>
                    <p>AI-powered content analysis</p>
                </div>
            </div>
        </div>

        <div class="summary-section">
            <div class="video-preview">
                <img src="/api/placeholder/180/120" alt="Video thumbnail" class="video-thumbnail">
                <div class="video-info">
                    <h2 class="video-title">Video Title Will Appear Here</h2>
                    <p class="video-meta">Duration: 15:30 ‚Ä¢ Channel: Educational Channel</p>
                </div>
            </div>

            <div class="summary-header">
                <h2>Video Summary</h2>
                <div class="tools-section">
                    <button class="tool-btn">üìã Copy</button>
                    <button class="tool-btn">üì• Download</button>
                    <button class="tool-btn">üíæ Save</button>
                </div>
            </div>

            <div class="loading-spinner"></div>
            
            <div class="summary-content">
                <p>Your video summary will appear here. The AI will analyze the video content and provide a comprehensive yet concise summary highlighting the key points, main ideas, and important takeaways.</p>
            </div>

            <div class="statistics">
                <div class="stat-item">
                    <div class="stat-value">5 min</div>
                    <div class="stat-label">Reading Time</div>
                </div>
                <div class="stat-item">
                    <div class="stat-value">8</div>
                    <div class="stat-label">Key Points</div>
                </div>
                <div class="stat-item">
                    <div class="stat-value">95%</div>
                    <div class="stat-label">Accuracy</div>
                </div>
            </div>

            <div style="text-align: center; margin-top: 2rem;">
                <button id="generateFlashcards" class="btn" style="background: var(--success-color); margin-right: 1rem;">
                    Generate Flashcards üìö
                </button>
                <button id="generateQuiz" class="btn" style="background: var(--success-color);">
                    Generate Quiz üìù
                </button>
            </div>
        </div>

        <div class="related-videos-section">
            <h2 style="margin: 2rem 0; color: var(--text-color);">Related Content</h2>
            <div class="keywords-section">
                <h3 style="margin-bottom: 1rem; color: var(--text-color);">Key Topics:</h3>
                <div class="keywords-container">
                    <!-- Keywords will be inserted here -->
                </div>
            </div>
            <div class="related-videos-grid">
                <!-- Related videos will be inserted here -->
            </div>
        </div>
    </div>

    <script src="/js/main.js"></script>
    <script>
        console.log('Page loaded');
        document.querySelector('.generate-btn').addEventListener('click', () => {
            console.log('Button clicked directly from EJS');
        });
    </script>

    <script>
    document.getElementById('generateFlashcards').addEventListener('click', async function() {
        const summaryPoints = document.querySelectorAll('.summary-point span:last-child');
        const points = Array.from(summaryPoints).map(point => point.textContent.trim());
        
        try {
            const response = await fetch('/api/create-flashcards', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ points })
            });
            
            if (response.ok) {
                window.location.href = '/flash';
            }
        } catch (error) {
            console.error('Error:', error);
        }
    });
    </script>

    <script>
        // ... existing code ...

        // Function to format date
        function formatDate(dateString) {
            const date = new Date(dateString);
            return date.toLocaleDateString('en-US', {
                year: 'numeric',
                month: 'short',
                day: 'numeric'
            });
        }

        // Modify your existing fetch call
        generateBtn.addEventListener('click', async () => {
            if (urlInput.value) {
                try {
                    loadingSpinner.style.display = 'block';
                    summaryContent.innerHTML = '';
                    
                    const response = await fetch('/api/summarize', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ url: urlInput.value })
                    });

                    const data = await response.json();
                    
                    if (data.success) {
                        // Update video preview and summary
                        videoTitle.textContent = data.data.videoTitle;
                        videoMeta.textContent = `Duration: ${formatDuration(data.data.duration)} ‚Ä¢ Channel: ${data.data.channelName}`;
                        videoThumbnail.src = data.data.thumbnail;
                        summaryContent.innerHTML = data.data.summary;

                        // Update keywords
                        const keywordsData = JSON.parse(document.querySelector('.keywords-data').dataset.keywords);
                        const keywordsContainer = document.querySelector('.keywords-container');
                        keywordsContainer.innerHTML = keywordsData
                            .map(keyword => `<span class="keyword-tag">${keyword}</span>`)
                            .join('');

                        // Update related videos with YouTube links
                        const relatedVideos = JSON.parse(document.querySelector('.related-videos-data').dataset.videos);
                        const relatedVideosGrid = document.querySelector('.related-videos-grid');
                        relatedVideosGrid.innerHTML = relatedVideos
                            .map(video => {
                                const searchQuery = encodeURIComponent(video.title);
                                return `
                                    <a href="https://www.youtube.com/results?search_query=${searchQuery}" 
                                       target="_blank" 
                                       class="related-video-card">
                                        <div class="related-video-thumbnail">
                                            ${video.title.split(' ')[0]}
                                        </div>
                                        <div class="related-video-info">
                                            <h3 class="related-video-title">${video.title}</h3>
                                            <p class="related-video-meta">Generated: ${formatDate(video.publishedAt)}</p>
                                            <div class="youtube-link">
                                                <svg class="youtube-icon" viewBox="0 0 24 24" fill="currentColor">
                                                    <path d="M19.615 3.184c-3.604-.246-11.631-.245-15.23 0-3.897.266-4.356 2.62-4.385 8.816.029 6.185.484 8.549 4.385 8.816 3.6.245 11.626.246 15.23 0 3.897-.266 4.356-2.62 4.385-8.816-.029-6.185-.484-8.549-4.385-8.816zm-10.615 12.816v-8l8 3.993-8 4.007z"/>
                                                </svg>
                                                Watch on YouTube
                                            </div>
                                        </div>
                                    </a>
                                `;
                            })
                            .join('');

                        // Add click tracking for related videos
                        document.querySelectorAll('.related-video-card').forEach(card => {
                            card.addEventListener('click', (e) => {
                                console.log('Opening YouTube search for:', card.querySelector('.related-video-title').textContent);
                            });
                        });

                    } else {
                        throw new Error(data.error);
                    }
                } catch (error) {
                    summaryContent.innerHTML = `<p style="color: var(--error-color)">Error: ${error.message}</p>`;
                } finally {
                    loadingSpinner.style.display = 'none';
                }
            }
        });

        // Add function to create YouTube search URL from keywords
        function createYouTubeSearchURL(keywords) {
            const searchQuery = encodeURIComponent(keywords.join(' '));
            return `https://www.youtube.com/results?search_query=${searchQuery}`;
        }
    </script>
    
</body>
</html>